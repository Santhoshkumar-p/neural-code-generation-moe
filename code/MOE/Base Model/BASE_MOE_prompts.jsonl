{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Counts paths from a point to reach Origin | Java program to count total number of paths from a point to origin ; Recursive function to count number of paths ; If we reach bottom or top left , we are have only one way to reach ( 0 , 0 ) ; Else count sum of both ways ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Sunny Number | Java program for the above approach ; Function check whether x is a perfect square or not ; Find floating point value of square root of x . ; If square root is an integer ; Function to check Sunny Number ; Check if ( N + 1 ) is a perfect square or not ; If ( N + 1 ) is not a perfect square ; Driver code ; Given Number ; Function call [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Check if the Xor of the frequency of all digits of a number N is zero or not | Java implementation of the above approach ; creating a frequency array ; Finding the last digit of the number ; Dividing the number by 10 to eliminate last digit ; counting frequency of each digit ; checking if the xor of all frequency is zero or not ; Driver function [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Calculate nCr using Pascal 's Triangle | Java implementation of the approach ; Initialize the matrix with 0 ; 0 C0 = 1 ; Set every nCr = 1 where r = 0 ; Value for the current cell of Pascal 's triangle ; Function to return the value of nCr ; Return nCr ; Driver code ; Build the Pascal 's triangle [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Queries for the product of first N factorials | Java implementation of the approach ; Declare result array globally ; Function to precompute the product of factorials upto MAX ; Initialize base condition if n = 0 then factorial of 0 is equal to 1 and answer for n = 0 is 1 ; Iterate loop from 1 to MAX ; factorial ( i ) = factorial ( i - 1 ) * i ; Result for current n is equal to result [ i - 1 ] multiplied by the factorial of i ; Function to perform the queries ; Precomputing the result till MAX ; Perform queries ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Count of integers of length N and value less than K such that they contain digits only from the given set | Java implementation of the approach ; Function to convert a number into vector ; Push all the digits of N from the end one by one to the vector ; If the original number was 0 ; Reverse the vector elements ; Return the required vector ; Function to return the count of B length integers which are less than C and they contain digits from set A [ ] only ; Convert number to digit array ; Case 1 : No such number possible as the generated numbers will always be greater than C ; Case 2 : All integers of length B are valid as they all are less than C ; contain 0 ; Case 3 ; Update the lower [ ] array such that lower [ i ] stores the count of elements in A [ ] which are less than i ; For first index we can 't use 0 ; Whether ( i - 1 ) digit of generated number can be equal to ( i - 1 ) digit of C ; Is digit [ i - 1 ] present in A ? ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Count of Binary Strings of length N such that frequency of 1 ' s \u2581 exceeds \u2581 frequency \u2581 of \u2581 0' s | Java program to implement the above approach ; Function to calculate and return the value of Binomial Coefficient C ( n , k ) ; Since C ( n , k ) = C ( n , n - k ) ; Calculate the value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] \/ [ k * ( k - 1 ) * -- - * 1 ] ; Function to return the count of binary Strings of length N such that frequency of 1 ' s \u2581 exceed \u2581 that \u2581 of \u2581 0' s ; Count of N - length binary Strings ; Count of N - length binary Strings having equal count of 0 ' s \u2581 and \u2581 1' s ; For even length Strings ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Nth number in a set of multiples of A , B or C | Java program to find nth term divisible by a , b or c ; Function to return gcd of a and b ; Function to return the count of integers from the range [ 1 , num ] which are divisible by either a , b or c ; Calculate the number of terms divisible by a , b and c then remove the terms which are divisible by both ( a , b ) or ( b , c ) or ( c , a ) and then add the numbers which are divisible by a , b and c ; Function for binary search to find the nth term divisible by a , b or c ; Set low to 1 and high to LONG_MAX ; If the current term is less than n then we need to increase low to mid + 1 ; If current term is greater than equal to n then high = mid ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Print N lines of 4 numbers such that every pair among 4 numbers has a GCD K | Java implementation of the above approach ; Function to print N lines ; Iterate N times to print N lines ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Construct two N | Java program for the above approach ; Satisfying the given conditions ; Declare the two arrays A and B ; Iterate from range [ 1 , 2 * n ] ; Assign consecutive numbers to same indices of the two arrays ; Print the first array ; Print the second array , B ; Driver code ; Function Call [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Value of Pi ( \u00ce ) up to 50 decimal places | Java program to calculate the value of pi up to n decimal places ; Function that prints the value of pi upto N decimal places ; Find value of pi upto using acos ( ) function ; Print value of pi upto N decimal places ; Driver Code ; Function that prints the value of pi [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Count of distinct pair sum between two 1 to N value Arrays | Java implementation to find count of distinct pair sum between two 1 to N value Arrays ; Function to find the distinct sums ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Find K numbers with sum equal to N and sum of their squares maximized | Java program to find K numbers with sum equal to N and the sum of their squares maximized ; Function that prints the required K numbers ; Print 1 , K - 1 times ; Print ( N - K + 1 ) ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Minimum flips to remove any consecutive 3 0 s or 1 s in given Binary string | Java program for the above approach ; Function to find the minimum number of flips to make all three pairs of consecutive characters different ; Stores resultant count of pairs ; Base Case ; Iterate over the range [ 0 , N - 2 ] ; If the consecutive 3 numbers are the same then increment the count and the counter ; Return the answer ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Closest sum partition ( into two subsets ) of numbers from 1 to n | Java implementation of the approach ; Function to return the minimum required absolute difference ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Sum of division of the possible pairs for the given Array | Java implementation to compute the sum of division of all the possible pairs for the given array ; Function to compute the sum ; Counting frequency of each term and finding maximum among it ; Making cumulative frequency ; Taking the ceil value ; nos . in [ ( n - 0.5 ) X , ( n + 0.5 ) X ) range will add n to the ans ; Return the final result ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Gold Mine Problem | Java program to solve Gold Mine problem ; Returns maximum amount of gold that can be collected when journey started from first column and moves allowed are right , right - up and right - down ; Create a table for storing intermediate results and initialize all cells to 0. The first row of goldMineTable gives the maximum gold that the miner can collect when starts that row ; Gold collected on going to the cell on the right ( -> ) ; Gold collected on going to the cell to right up ( \/ ) ; Gold collected on going to the cell to right down ( \\ ) ; Max gold collected from taking either of the above 3 paths ; The max amount of gold collected will be the max value in first column of all rows ; driver code [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Check if it is possible to split given Array into K odd | Java implementation to check if it is possible to split array into K subsets with odd sum ; Function to check if array can be split in required K subsets ; Store count of odd numbers ; Check if element is odd ; Check if split is possible ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Check if a string can be split into even length palindromic substrings | Java program for the above approach ; Function to check String str can be split a String into even length palindromic subStrings ; Initialize a stack ; Iterate the String ; If the i - th character is same as that at the top of the stack then pop the top element ; Else push the current charactor into the stack ; If the stack is empty , then even palindromic subStrings are possible ; Else not - possible ; Driver Code ; Given String ; Function Call [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Number of Paths of Weight W in a K | Java program to count the number of paths with weight W in a K - ary tree ; Function to return the number of ways having weight as wt in K - ary tree ; Return 0 if weight becomes less than zero ; Return one only if the current path has included edge weight of atleast M ; If the current edge weight is greater than or equal to M , set used as true ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Check if roots of a Quadratic Equation are reciprocal of each other or not | Java program to check if roots of a quadratic equation are reciprocal of each other or not ; Function to check if the roots of a quadratic equation are reciprocal of each other or not ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Ways to Remove Edges from a Complete Graph to make Odd Edges | Java implementation of the approach ; Function to return the number of ways to remove edges from the graph so that odd number of edges are left in the graph ; Total number of edges ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Counts Path in an Array | Java implementation of above approach ; find the number of ways to reach the end ; dp to store value ; base case ; Bottom up dp structure ; F [ i ] is dependent of F [ i + 1 ] to F [ i + k ] ; Return value of dp [ 0 ] ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Least number to be added to or subtracted from N to make it a Perfect Square | Java implementation of the approach ; Function to return the Least number ; Get the perfect square before and after N ; Check which is nearest to N ; return the result ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Count the numbers which can convert N to 1 using given operation | Java program to count the numbers which can convert N to 1 using the given operation ; Function to count the numbers which can convert N to 1 using the given operation ; Iterate through all the integers ; Check if N can be converted to 1 ; Incrementing the count if it can be converted ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Find the pair ( a , b ) with minimum LCM such that their sum is equal to N | Java program for the above approach ; Function to check if number is prime or not ; As 1 is neither prime nor composite return false ; Check if it is divided by any number then it is not prime , return false ; Check if n is not divided by any number then it is prime and hence return true ; Function to find the pair ( a , b ) such that sum is N & LCM is minimum ; Check if the number is prime ; Now , if it is not prime then find the least divisior ; Check if divides n then it is a factor ; Required output is a = n \/ i & b = n \/ i * ( n - 1 ) ; Driver Code ; Function call [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Ways to write N as sum of two or more positive integers | Set | Java implementation of above approach ; Function to find the number of partitions of N ; Base case ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Count the number of Special Strings of a given length N | Java program to count the number of special strings of a given length N ; Function to return count of special Strings ; Stores the answer for a particular value of n ; For n = 0 we have empty String ; For n = 1 we have 2 special Strings ; Calculate count of special String of length i ; fib [ n ] stores the count of special Strings of length n ; Driver code ; Initialise n [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Maximum time such that absolute difference between hour and minute lies in given range | Java program for the above approach ; Function checks whether given time is correct ; To check minute value of time ; To check hour value of time ; Changes in value is not allowed at position where ' ? ' is not present ; Function checks whether the absolute difference between hour and minute value is within [ L , R ] ; Checks if the difference is outside the give range ; Displays time in proper 24 - hour format ; Function find the desired value of time whose difference lies in the range [ L , R ] ; Decrease hour value from 23 to 0 ; Check if the hour value is valid if not valid then no need to change minute value , since time will still remain in valid , to check hour value flag is set to 1. ; Decrease minute value from 59 to 0 ; Check if the minute value is valid , if not valid then skip the current iteration , to check ' minute ' value flag is set to 0. ; Driver code ; Input time ; Difference range [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Count of elements to be inserted to make Array sum twice the XOR of Array | Java program to find the count of elements to be inserted to make Array sum twice the XOR of Array ; Function to find the minimum number of elements that need to be inserted such that the sum of the elements of the array is twice the XOR of the array ; Variable to store the Xor of all the elements ; Variable to store the sum of all elements ; Loop to find the Xor and the sum of the array ; If sum = 2 * Xor ; No need to insert more elements ; We insert one more element which is Sum ; We insert two more elements Sum + Xor and Xor . ; Print the number of elements inserted in the array ; Print the elements that are inserted in the array ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Count 1 s present in a range of indices [ L , R ] in a given array | Java program to implement the above approach ; Function to find the size of the array if the array initially contains a single element ; Base case ; P \/ 2 -> findSize ( N \/ 2 ) P % 2 -> 1 P \/ 2 -> findSize ( N \/ 2 ) ; Function to return the count of 1 s in the range [ L , R ] ; Base Case ; PART 1 -> N \/ 2 [ 1 , Siz_M ] ; Update the right end point of the range to min ( Siz_M , R ) ; PART 2 -> N % 2 [ SizM + 1 , Siz_M + 1 ] ; PART 3 -> N \/ 2 [ SizM + 2 , 2 * Siz_M - 1 ] Same as PART 1 Property of Symmetricity Shift the coordinates according to PART 1 Subtract ( Siz_M + 1 ) from both L , R ; Driver Code ; Input ; Counts the number of 1 's in  the range [L, R] [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Counts Path in an Array | Java implementation of the above approach ; Find the number of ways to reach the end ; Base case ; Recursive structure ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Check for an array element that is co | Java implementation of the approach ; Stores smallest prime factor for every number ; Hash to store prime factors count ; Function to calculate SPF ( Smallest Prime Factor ) for every number till MAXN ; Marking smallest prime factor for every number to be itself ; Separately marking spf for every even number as 2 ; Checking if i is prime ; Marking SPF for all numbers divisible by i ; Marking spf [ j ] if it is not previously marked ; Function to store the prime factors after dividing by the smallest prime factor at every step ; Storing the count of prime factors in hash ; Function that returns true if there are no common prime factors between x and other numbers of the array ; Checking whether it common prime factor with other numbers ; Function that returns true if there is an element in the array which is coprime with all the other elements of the array ; Using sieve for generating prime factors ; Checking the common prime factors with other numbers ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Angle between 3 given vertices in a n | Java implementation of the approach ; Function that checks whether given angle can be created using any 3 sides ; Initialize x and y ; Calculate the number of vertices between i and j , j and k ; Calculate the angle subtended at the circumference ; Angle subtended at j can be found using the fact that the sum of angles of a triangle is equal to 180 degrees ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Check if the remainder of N | Java implementation to check the following expression for an integer N is valid or not ; Function to check if a number holds the condition ( N - 1 ) ! % N = N - 1 ; Corner cases ; Number divisible by 2 or 3 are not prime ; Iterate from 5 and keep checking for prime ; Function to check the expression for the value N ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Sum of first n term of Series 3 , 5 , 9 , 17 , 33. ... | Java program to find sum of first n terms ; Sn = n * ( 4 * n * n + 6 * n - 1 ) \/ 3 ; Driver Code ; number of terms to be included in sum ; find the Sn [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Longest Increasing Path in Matrix | Java program to find longest increasing path in a matrix . ; Return the length of LIP in 2D matrix ; If value not calculated yet . ; If reach bottom left cell , return 1. ; If reach the corner of the matrix . ; If value greater than below cell . ; If value greater than left cell . ; Wrapper function ; Driver program to test above function [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Minimum sum possible by removing all occurrences of any array element | Java program for the above approach ; Function to find minimum sum after deletion ; Stores frequency of array elements ; Traverse the array ; Calculate sum ; Update frequency of the current element ; Stores the minimum sum required ; Traverse map ; Find the minimum sum obtained ; Return minimum sum ; Driver code ; Input array ; Size of array [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Numbers formed by flipping common set bits in two given integers | Java program to implement the above approach ; Function to flip bits of A and B which are set bits in A and B ; Iterater all possible bits of A and B ; If ith bit is set in both A and B ; Clear i - th bit of A ; Clear i - th bit of B ; Print A and B ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Invert the Kth most significant bit of N | Java implementation of the approach ; Function to convert decimal number n to its binary representation stored as an array arr [ ] ; Function to convert the number represented as a binary array arr [ ] into its decimal equivalent ; Function to return the updated integer after flipping the kth bit ; Number of bits in n ; Find the binary representation of n ; The number of bits in n are less than k ; Flip the kth bit ; Return the decimal equivalent of the number ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Number of Subsequences with Even and Odd Sum | Java program to get minimum cost to sort strings by reversal operation ; Returns the count of odd and even subsequences ; Variables to store the count of even subsequences and odd subsequences ; Initialising count_even and count_odd to 0 since as there is no subsequence before the iteration with even or odd count . ; Find sum of all subsequences with even count and odd count and storing them as we iterate . ; if the number is even ; if the number is odd ; Driver code ; Calling the function [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Loss when two items are sold at same price and same percentage profit \/ loss | Java implementation of above approach . ; Function that will find loss ; Driver Code ; Calling Function [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Remove all occurrences of a character in a string | Recursive approach | Java program for the above approach ; Function to remove all occurrences of a character in the string ; Base Case ; Check the first character of the given string ; Pass the rest of the string to recursion Function call ; Add the first character of str and string from recursion ; Driver Code ; Given String ; Given character ; Function call [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Encrypt the string | Java program for above approach ; Function to convert Decimal to Hex ; Function to encrypt the string ; Iterate the characters of the string ; Iterate until S [ i ] is equal to ch ; Update count and i ; Decrement i by 1 ; Convert count to hexadecimal representation ; Append the character ; Append the characters frequency in hexadecimal representation ; Reverse the obtained answer ; Return required answer ; Driver Code ; Given Input ; Function Call [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Find Landau 's function for a given number N | Java program for the above approach ; To store Landau 's function of the number ; Function to return gcd of 2 numbers ; Function to return LCM of two numbers ; Function to find max lcm value among all representations of n ; Calculate Landau 's value ; Recursive function to find different ways in which n can be written as sum of atleast one positive integers ; Check if sum becomes n , consider this representation ; Start from previous element in the representation till n ; Include current element from representation ; Call function again with reduced sum ; Backtrack - remove current element from representation ; Function to find the Landau 's function ; Using recurrence find different ways in which n can be written as a sum of atleast one + ve integers ; Print the result ; Driver Code ; Given N ; Function call [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Count triplets from a given range having sum of two numbers of a triplet equal to the third number | Java program for the above approach ; Function to find the number of triplets from the range [ L , R ] having sum of two numbers from the triplet equal to the third number ; Stores the total number of triplets ; Find the difference of the range ; Case 1 : If triplets can 't  be formed, then return 0 ; Otherwise ; Update the total number of triplets ; Return the count ; Driven Code [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Maximum difference between a pair of adjacent elements by excluding every element once | Java implementation of above approach ; Function to calculate maximum difference between adjacent elements excluding every array element once ; Traverse the array ; Stores the maximum diff ; Check for maximum adjacent element ; Exclude current element ; Update maximum difference ; Update previous value ; Append the result into a vector ; Print the result ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Print Nth Stepping or Autobiographical number | Java implementation to find N 'th stepping natural Number ; Function to find the Nth stepping natural number ; Declare the queue ; Enqueue 1 , 2 , ... , 9 in this order ; Perform K operation on queue ; Get the ith Stepping number ; Perform Dequeue from the Queue ; If x mod 10 is not equal to 0 ; then Enqueue 10 x + ( x mod 10 ) - 1 ; Enqueue 10 x + ( x mod 10 ) ; If x mod 10 is not equal to 9 ; then Enqueue 10 x + ( x mod 10 ) + 1 ; Return the dequeued number of the K - th operation as the Nth stepping number ; Driver Code ; initialise K [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Find minimum adjustment cost of an array | Java program to find minimum adjustment cost of an array ; Function to find minimum adjustment cost of an array ; dp [ i ] [ j ] stores minimal adjustment cost on changing A [ i ] to j ; handle first element of array separately ; do for rest elements of the array ; replace A [ i ] to j and calculate minimal adjustment cost dp [ i ] [ j ] ; initialize minimal adjustment cost to INT_MAX ; consider all k such that k >= max ( j - target , 0 ) and k <= min ( M , j + target ) and take minimum ; return minimum value from last row of dp table ; Driver program [\/INST] \\n <\/s>"}
{"expert":"Java","prompt":"<s>[INST] Write a Java program to complete the following. Count of substrings from given Ternary strings containing characters at least once | Java program for the above approach ; Function to count the number of substrings consists of 0 , 1 , and 2 ; Initialize frequency array of size 3 ; Stores the resultant count ; Traversing string str ; Update frequency array ; If all the characters are present counting number of substrings possible ; Update number of substrings ; Return the number of substrings ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Check if roots of a Quadratic Equation are reciprocal of each other or not | C ++ program to check if roots of a Quadratic Equation are reciprocal of each other or not ; Function to check if the roots of a quadratic equation are reciprocal of each other or not ; Driver code [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Ways to write N as sum of two or more positive integers | Set | C ++ implementation of above approach ; Function to find the number of partitions of N ; Base case ; Driver code [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Count triplets from a given range having sum of two numbers of a triplet equal to the third number | C ++ program for the above approach ; Function to find the number of triplets from the range [ L , R ] having sum of two numbers from the triplet equal to the third number ; Stores the total number of triplets ; Find the difference of the range ; Case 1 : If triplets can 't  be formed, then return 0 ; Otherwise ; Update the total number of triplets ; Return the count ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Find K numbers with sum equal to N and sum of their squares maximized | C ++ program to find K numbers with sum equal to N and the sum of their squares maximized ; Function that prints the required K numbers ; Print 1 , K - 1 times ; Print ( N - K + 1 ) ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Nth number in a set of multiples of A , B or C | C ++ program to find nth term divisible by a , b or c ; Function to return gcd of a and b ; Function to return the count of integers from the range [ 1 , num ] which are divisible by either a , b or c ; Calculate the number of terms divisible by a , b and c then remove the terms which are divisible by both ( a , b ) or ( b , c ) or ( c , a ) and then add the numbers which are divisible by a , b and c ; Function for binary search to find the nth term divisible by a , b or c ; Set low to 1 and high to LONG_MAX ; If the current term is less than n then we need to increase low to mid + 1 ; If current term is greater than equal to n then high = mid ; Driver code [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Check if the remainder of N | C ++ implementation to check the following expression for an integer N is valid or not ; Function to check if a number holds the condition ( N - 1 ) ! % N = N - 1 ; Corner cases ; Number divisible by 2 or 3 are not prime ; Iterate from 5 and keep checking for prime ; Function to check the expression for the value N ; Driver Program [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Longest Increasing Path in Matrix | CPP program to find longest increasing path in a matrix . ; Return the length of LIP in 2D matrix ; If value not calculated yet . ; If reach bottom left cell , return 1. ; If reach the corner of the matrix . ; If value greater than below cell . ; If value greater than left cell . ; Wrapper function ; Driven Program [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Check if it is possible to split given Array into K odd | C ++ implementation to check if it is possible to split array into K subsets with odd sum ; Function to check if array can be split in required K subsets ; Store count of odd numbers ; Check if element is odd ; Check if split is possible ; Driver Program [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Check if the Xor of the frequency of all digits of a number N is zero or not | C ++ implementation of the above approach ; creating a frequency array ; Finding the last digit of the number ; Dividing the number by 10 to eliminate last digit ; counting frequency of each digit ; checking if the xor of all frequency is zero or not ; Driver function [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Angle between 3 given vertices in a n | C ++ implementation of the approach ; Function that checks whether given angle can be created using any 3 sides ; Initialize x and y ; Calculate the number of vertices between i and j , j and k ; Calculate the angle subtended at the circumference ; Angle subtended at j can be found using the fact that the sum of angles of a triangle is equal to 180 degrees ; Driver code [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Print Nth Stepping or Autobiographical number | C ++ implementation to find NaTMth stepping natural Number ; Function to find the Nth stepping natural number ; Declare the queue ; Enqueue 1 , 2 , ... , 9 in this order ; Perform K operation on queue ; Get the ith Stepping number ; Perform Dequeue from the Queue ; If x mod 10 is not equal to 0 ; then Enqueue 10 x + ( x mod 10 ) - 1 ; Enqueue 10 x + ( x mod 10 ) ; If x mod 10 is not equal to 9 ; then Enqueue 10 x + ( x mod 10 ) + 1 ; Return the dequeued number of the K - th operation as the Nth stepping number ; Driver Code ; initialise K [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Counts Path in an Array | C ++ implementation ; find the number of ways to reach the end ; dp to store value ; base case ; Bottom up dp structure ; F [ i ] is dependent of F [ i + 1 ] to F [ i + k ] ; Return value of dp [ 0 ] ; Driver code [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Count of distinct pair sum between two 1 to N value Arrays | C ++ implementation to find count of distinct pair sum between two 1 to N value Arrays ; Function to find the distinct sums ; Driver code [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Count of elements to be inserted to make Array sum twice the XOR of Array | C ++ program to find the count of elements to be inserted to make Array sum twice the XOR of Array ; Function to find the minimum number of elements that need to be inserted such that the sum of the elements of the array is twice the XOR of the array ; Variable to store the Xor of all the elements ; Variable to store the sum of all elements ; Loop to find the Xor and the sum of the array ; If sum = 2 * Xor ; No need to insert more elements ; We insert one more element which is Sum ; We insert two more elements Sum + Xor and Xor . ; Print the number of elements inserted in the array ; Print the elements that are inserted in the array ; Driver code [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Count of substrings from given Ternary strings containing characters at least once | C ++ program for above approach ; Function to count the number of substrings consists of 0 , 1 , and 2 ; Initialize frequency array of size 3 ; Stores the resultant count ; Traversing string str ; Update frequency array ; If all the characters are present counting number of substrings possible ; Update number of substrings ; Return the number of substrings ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Closest sum partition ( into two subsets ) of numbers from 1 to n | C ++ implementation of the approach ; Function to return the minimum required absolute difference ; Driver code [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Maximum difference between a pair of adjacent elements by excluding every element once | C ++ program for the above approach ; Function to calculate maximum difference between adjacent elements excluding every array element once ; Traverse the array ; Stores the maximum diff ; Check for maximum adjacent element ; Exclude current element ; Update maximum difference ; Update previous value ; Append the result into a vector ; Print the result ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Minimum sum possible by removing all occurrences of any array element | C ++ program for the above approach ; Function to find minimum sum after deletion ; Stores frequency of array elements ; Traverse the array ; Calculate sum ; Update frequency of the current element ; Stores the minimum sum required ; Traverse map ; Find the minimum sum obtained ; Return minimum sum ; Driver code ; Input array ; Size of array [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Calculate nCr using Pascal 's Triangle | C ++ implementation of the approach ; Initialize the matrix with 0 ; 0 C0 = 1 ; Set every nCr = 1 where r = 0 ; Value for the current cell of Pascal 's triangle ; Function to return the value of nCr ; Return nCr ; Driver code ; Build the Pascal 's triangle [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Queries for the product of first N factorials | C ++ implementation of the approach ; Declare result array globally ; Function to precompute the product of factorials upto MAX ; Initialize base condition if n = 0 then factorial of 0 is equal to 1 and answer for n = 0 is 1 ; Iterate loop from 1 to MAX ; factorial ( i ) = factorial ( i - 1 ) * i ; Result for current n is equal to result [ i - 1 ] multiplied by the factorial of i ; Function to perform the queries ; Precomputing the result till MAX ; Perform queries ; Driver code [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Find minimum adjustment cost of an array | C ++ program to find minimum adjustment cost of an array ; Function to find minimum adjustment cost of an array ; dp [ i ] [ j ] stores minimal adjustment cost on changing A [ i ] to j ; handle first element of array separately ; do for rest elements of the array ; replace A [ i ] to j and calculate minimal adjustment cost dp [ i ] [ j ] ; initialize minimal adjustment cost to INT_MAX ; consider all k such that k >= max ( j - target , 0 ) and k <= min ( M , j + target ) and take minimum ; return minimum value from last row of dp table ; Driver Program to test above functions [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Minimum flips to remove any consecutive 3 0 s or 1 s in given Binary string | C ++ program for the above approach ; Function to find the minimum number of flips to make all three pairs of consecutive characters different ; Stores resultant count of pairs ; Base Case ; Iterate over the range [ 0 , N - 2 ] ; If the consecutive 3 numbers are the same then increment the count and the counter ; Return the answer ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Ways to Remove Edges from a Complete Graph to make Odd Edges | C ++ implementation of the approach ; Function to return the number of ways to remove edges from the graph so that odd number of edges are left in the graph ; Total number of edges ; Driver code [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Check if a string can be split into even length palindromic substrings | C ++ program for the above approach ; Function to check string str can be split a string into even length palindromic substrings ; Initialize a stack ; Iterate the string ; If the i - th character is same as that at the top of the stack then pop the top element ; Else push the current charactor into the stack ; If the stack is empty , then even palindromic substrings are possible ; Else not - possible ; Driver Code ; Given string ; Function Call [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Check for an array element that is co | C ++ implementation of the approach ; Stores smallest prime factor for every number ; Hash to store prime factors count ; Function to calculate SPF ( Smallest Prime Factor ) for every number till MAXN ; Marking smallest prime factor for every number to be itself ; Separately marking spf for every even number as 2 ; Checking if i is prime ; Marking SPF for all numbers divisible by i ; Marking spf [ j ] if it is not previously marked ; Function to store the prime factors after dividing by the smallest prime factor at every step ; Storing the count of prime factors in hash ; Function that returns true if there are no common prime factors between x and other numbers of the array ; Checking whether it common prime factor with other numbers ; Function that returns true if there is an element in the array which is coprime with all the other elements of the array ; Using sieve for generating prime factors ; Checking the common prime factors with other numbers ; Driver code [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Least number to be added to or subtracted from N to make it a Perfect Square | C ++ implementation of the approach ; Function to return the Least number ; Get the perfect square before and after N ; Check which is nearest to N ; return the result ; Driver code [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Invert the Kth most significant bit of N | C ++ implementation of the approach ; Function to convert decimal number n to its binary representation stored as an array arr [ ] ; Function to convert the number represented as a binary array arr [ ] into its decimal equivalent ; Function to return the updated integer after flipping the kth bit ; Number of bits in n ; Find the binary representation of n ; The number of bits in n are less than k ; Flip the kth bit ; Return the decimal equivalent of the number ; Driver code [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Encrypt the string | C ++ program for the above approach ; Function to convert Decimal to Hex ; Function to encrypt the string ; Iterate the characters of the string ; Iterate until S [ i ] is equal to ch ; Update count and i ; Decrement i by 1 ; Convert count to hexadecimal representation ; Append the character ; Append the characters frequency in hexadecimal representation ; Reverse the obtained answer ; Return required answer ; Driver Code ; Given Input ; Function Call [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Count the number of Special Strings of a given length N | C ++ Program to Count the number of Special Strings of a given length N ; Function to return count of special strings ; stores the answer for a particular value of n ; for n = 0 we have empty string ; for n = 1 we have 2 special strings ; calculate count of special string of length i ; fib [ n ] stores the count of special strings of length n ; Driver code ; initialise n [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Numbers formed by flipping common set bits in two given integers | C ++ program to implement the above approach ; Function to flip bits of A and B which are set bits in A and B ; Iterater all possible bits of A and B ; If ith bit is set in both A and B ; Clear i - th bit of A ; Clear i - th bit of B ; Print A and B ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Number of Subsequences with Even and Odd Sum | C ++ implementation ; Returns the count of odd and even subsequences ; Variables to store the count of even subsequences and odd subsequences ; Initialising count_even and count_odd to 0 since as there is no subsequence before the iteration with even or odd count . ; Find sum of all subsequences with even count and odd count and storing them as we iterate . ; if the number is even ; if the number is odd ; Driver code ; Calling the function [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Sum of division of the possible pairs for the given Array | C ++ implementation to compute the sum of division of all the possible pairs for the given array ; Function to compute the sum ; counting frequency of each term and finding maximum among it ; Making cumulative frequency ; Taking the ceil value ; nos . in [ ( n - 0.5 ) X , ( n + 0.5 ) X ) range will add n to the ans ; Return the final result ; Driver code [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Count of Binary Strings of length N such that frequency of 1 ' s \u2581 exceeds \u2581 frequency \u2581 of \u2581 0' s | C ++ Program to implement the above approach ; Function to calculate and return the value of Binomial Coefficient C ( n , k ) ; Since C ( n , k ) = C ( n , n - k ) ; Calculate the value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] \/ [ k * ( k - 1 ) * -- - * 1 ] ; Function to return the count of binary strings of length N such that frequency of 1 ' s \u2581 exceed \u2581 that \u2581 of \u2581 0' s ; Count of N - length binary strings ; Count of N - length binary strings having equal count of 0 ' s \u2581 and \u2581 1' s ; For even length strings ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Count 1 s present in a range of indices [ L , R ] in a given array | C ++ Program to implement the above approach ; Function to find the size of the array if the array initially contains a single element ; Base case ; P \/ 2 -> findSize ( N \/ 2 ) P % 2 -> 1 P \/ 2 -> findSize ( N \/ 2 ) ; Function to return the count of 1 s in the range [ L , R ] ; Base Case ; PART 1 -> N \/ 2 [ 1 , Siz_M ] ; Update the right end point of the range to min ( Siz_M , R ) ; PART 2 -> N % 2 [ SizM + 1 , Siz_M + 1 ] ; PART 3 -> N \/ 2 [ SizM + 2 , 2 * Siz_M - 1 ] Same as PART 1 Property of Symmetricity Shift the coordinates according to PART 1 Subtract ( Siz_M + 1 ) from both L , R ; Driver Code ; Input ; Counts the number of 1 's in  the range [L, R] [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Construct two N | C ++ program for the above approach ; Function to generate two arrays satisfying the given conditions ; Declare the two arrays A and B ; Iterate from range [ 1 , 2 * n ] ; Assign consecutive numbers to same indices of the two arrays ; Print the first array ; Print the second array , B ; Driver Code ; Function Call [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Maximum time such that absolute difference between hour and minute lies in given range | C ++ program for the above approach ; Function checks whether given time is correct ; To check minute value of time ; To check hour value of time ; Changes in value is not allowed at position where ' ? ' is not present ; Function checks whether the absolute difference between hour and minute value is within [ L , R ] ; Checks if the difference is outside the give range ; Displays time in proper 24 - hour format ; Function find the desired value of time whose difference lies in the range [ L , R ] ; Decrease hour value from 23 to 0 ; Check if the hour value is valid if not valid then no need to change minute value , since time will still remain in valid , to check hour value flag is set to 1. ; Decrease minute value from 59 to 0 ; Check if the minute value is valid , if not valid then skip the current iteration , to check ' minute ' value flag is set to 0. ; Driver code ; Input time ; Difference range [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Counts Path in an Array | C ++ implementation of the above approach ; Find the number of ways to reach the end ; Base case ; Recursive structure ; Driver code [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Number of Paths of Weight W in a K | C ++ program to count the number of paths with weight W in a K - ary tree ; Function to return the number of ways having weight as wt in K - ary tree ; Return 0 if weight becomes less than zero ; Return one only if the current path has included edge weight of atleast M ; If the current edge weight is greater than or equal to M , set used as true ; Driver Code to test above function [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Value of Pi ( \u00ce ) up to 50 decimal places | C ++ program to calculate the value of pi up to n decimal places ; Function that prints the value of pi upto N decimal places ; Find value of pi upto using acos ( ) function ; Print value of pi upto N decimal places ; Driver Code ; Function that prints the value of pi [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Counts paths from a point to reach Origin | C ++ program to count total number of paths from a point to origin ; Recursive function to count number of paths ; If we reach bottom or top left , we are have only one way to reach ( 0 , 0 ) ; Else count sum of both ways ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Gold Mine Problem | C ++ program to solve Gold Mine problem ; Returns maximum amount of gold that can be collected when journey started from first column and moves allowed are right , right - up and right - down ; Create a table for storing intermediate results and initialize all cells to 0. The first row of goldMineTable gives the maximum gold that the miner can collect when starts that row ; Gold collected on going to the cell on the right ( -> ) ; Gold collected on going to the cell to right up ( \/ ) ; Gold collected on going to the cell to right down ( \\ ) ; Max gold collected from taking either of the above 3 paths ; The max amount of gold collected will be the max value in first column of all rows ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Find Landau 's function for a given number N | C ++ program for the above approach ; To store Landau 's function of the number ; Function to return gcd of 2 numbers ; Function to return LCM of two numbers ; Function to find max lcm value among all representations of n ; Calculate Landau 's value ; Recursive function to find different ways in which n can be written as sum of atleast one positive integers ; Check if sum becomes n , consider this representation ; Start from previous element in the representation till n ; Include current element from representation ; Call function again with reduced sum ; Backtrack - remove current element from representation ; Function to find the Landau 's function ; Using recurrence find different ways in which n can be written as a sum of atleast one + ve integers ; Print the result ; Driver Code ; Given N ; Function Call [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Print N lines of 4 numbers such that every pair among 4 numbers has a GCD K | C ++ implementation of the above approach ; Function to print N lines ; Iterate N times to print N lines ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Loss when two items are sold at same price and same percentage profit \/ loss | C ++ implementation of above approach . ; Function that will find loss ; Driver Code ; Calling Function [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Remove all occurrences of a character in a string | Recursive approach | C ++ program for the above approach ; Function to remove all occurrences of a character in the string ; Base Case ; Check the first character of the given string ; Pass the rest of the string to recursion Function call ; Add the first character of str and string from recursion ; Driver Code ; Given String ; Given character ; Function Call [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Sunny Number | C ++ program for the above approach ; Function check whether x is a perfect square or not ; Find floating point value of square root of x . ; If square root is an integer ; Function to check Sunny Number ; Check if ( N + 1 ) is a perfect square or not ; If ( N + 1 ) is not a perfect square ; Driver Code ; Given Number ; Function call [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Sum of first n term of Series 3 , 5 , 9 , 17 , 33. ... | C ++ program to find sum of first n terms ; Sn = n * ( 4 * n * n + 6 * n - 1 ) \/ 3 ; Driver code ; number of terms to be included in sum ; find the Sn [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Find the pair ( a , b ) with minimum LCM such that their sum is equal to N | C ++ program for the above approach ; Function to check if number is prime or not ; As 1 is neither prime nor composite return false ; Check if it is divided by any number then it is not prime , return false ; Check if n is not divided by any number then it is prime and hence return true ; Function to find the pair ( a , b ) such that sum is N & LCM is minimum ; Check if the number is prime ; Now , if it is not prime then find the least divisior ; Check if divides n then it is a factor ; Required output is a = n \/ i & b = n \/ i * ( n - 1 ) ; Driver Code ; Function call [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Count of integers of length N and value less than K such that they contain digits only from the given set | C ++ implementation of the approach ; Function to convert a number into vector ; Push all the digits of N from the end one by one to the vector ; If the original number was 0 ; Reverse the vector elements ; Return the required vector ; Function to return the count of B length integers which are less than C and they contain digits from set A [ ] only ; Convert number to digit array ; Case 1 : No such number possible as the generated numbers will always be greater than C ; Case 2 : All integers of length B are valid as they all are less than C ; contain 0 ; Case 3 ; Update the lower [ ] array such that lower [ i ] stores the count of elements in A [ ] which are less than i ; For first index we can 't use 0 ; Whether ( i - 1 ) digit of generated number can be equal to ( i - 1 ) digit of C ; Is digit [ i - 1 ] present in A ? ; Driver code [\/INST] \\n <\/s>"}
{"expert":"C++","prompt":"<s>[INST] Write a C++ program to complete the following. Count the numbers which can convert N to 1 using given operation | C ++ program to count the numbers which can convert N to 1 using the given operation ; Function to count the numbers which can convert N to 1 using the given operation ; Iterate through all the integers ; Check if N can be converted to 1 ; Incrementing the count if it can be converted ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Sum of division of the possible pairs for the given Array | Python3 program to compute the sum of division of all the possible pairs for the given array ; Function to compute the sum ; Counting frequency of each term and finding maximum among it ; Making cumulative frequency ; Taking the ceil value ; nos . in [ ( n - 0.5 ) X , ( n + 0.5 ) X ) range will add n to the ans ; Return the final result ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Loss when two items are sold at same price and same percentage profit \/ loss | Function that will find loss ; Driver Code ; Calling Function [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Construct two N | Function to generate two arrays satisfying the given conditions ; Declare the two arrays A and B ; Iterate from range [ 1 , 2 * n ] ; Assign consecutive numbers to same indices of the two arrays ; Print the first array ; Print the second array , B ; Driver Code ; Function Call [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Count of integers of length N and value less than K such that they contain digits only from the given set | Python3 implementation of the approach ; Function to convert a number into vector ; Push all the digits of N from the end one by one to the vector ; If the original number was 0 ; Reverse the vector elements ; Return the required vector ; Function to return the count of B length integers which are less than C and they contain digits from set A [ ] only ; Convert number to digit array ; Case 1 : No such number possible as the generated numbers will always be greater than C ; Case 2 : All integers of length B are valid as they all are less than C ; contain 0 ; Case 3 ; Update the lower [ ] array such that lower [ i ] stores the count of elements in A [ ] which are less than i ; For first index we can 't use 0 ; Whether ( i - 1 ) digit of generated number can be equal to ( i - 1 ) digit of C ; Is digit [ i - 1 ] present in A ? ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Count the number of Special Strings of a given length N | Python3 program to count the number of special strings of a given length N ; Function to return count of special strings ; Stores the answer for a particular value of n ; For n = 0 we have empty string ; For n = 1 we have 2 special strings ; Calculate count of special string of length i ; fib [ n ] stores the count of special strings of length n ; Driver code ; Initialise n [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Count of substrings from given Ternary strings containing characters at least once | Function to count the number of substrings consists of 0 , 1 , and 2 ; Initialize frequency array of size 3 ; Stores the resultant count ; Traversing string str ; Update frequency array ; If all the characters are present counting number of substrings possible ; Update number of substrings ; Return the number of substrings ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Counts Path in an Array | Python3 implementation of the above approach ; Find the number of ways to reach the end ; Base case ; Recursive structure ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Find the pair ( a , b ) with minimum LCM such that their sum is equal to N | Function to check if number is prime or not ; As 1 is neither prime nor composite return false ; Check if it is divided by any number then it is not prime , return false ; Check if n is not divided by any number then it is prime and hence return true ; Function to find the pair ( a , b ) such that sum is N & LCM is minimum ; Check if the number is prime ; Now , if it is not prime then find the least divisior ; Check if divides n then it is a factor ; Required output is a = n \/ i & b = n \/ i * ( n - 1 ) ; Driver Code ; Function call [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Closest sum partition ( into two subsets ) of numbers from 1 to n | Function to return the minimum required absolute difference ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Least number to be added to or subtracted from N to make it a Perfect Square | Python3 implementation of the approach ; Function to return the Least number ; Get the perfect square before and after N ; Check which is nearest to N ; return the result ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Numbers formed by flipping common set bits in two given integers | Function to flip bits of A and B which are set in both of them ; Iterate all possible bits of A and B ; If ith bit is set in both A and B ; Clear i - th bit of A ; Clear i - th bit of B ; Print A and B ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Check if roots of a Quadratic Equation are reciprocal of each other or not | Function to check if the roots of a quadratic equation are reciprocal of each other or not ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Count 1 s present in a range of indices [ L , R ] in a given array | Function to find the size of the array if the array initially contains a single element ; Base case ; P \/ 2 -> findSize ( N 2 ) P % 2 -> 1 P \/ 2 -> findSize ( N \/ 2 ) ; Function to return the count of 1 s in the range [ L , R ] ; Base Case ; PART 1 -> N \/ 2 [ 1 , Siz_M ] ; Update the right end point of the range to min ( Siz_M , R ) ; PART 2 -> N % 2 [ SizM + 1 , Siz_M + 1 ] ; PART 3 -> N \/ 2 [ SizM + 2 , 2 * Siz_M - 1 ] Same as PART 1 Property of Symmetricity Shift the coordinates according to PART 1 Subtract ( Siz_M + 1 ) from both L , R ; Driver Code ; Input ; Counts the number of 1 's in  the range [L, R] [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Find Landau 's function for a given number N | Python3 program for the above approach ; To store Landau 's function of the number ; Function to return gcd of 2 numbers ; Function to return LCM of two numbers ; Function to find max lcm value among all representations of n ; Calculate Landau 's value ; Recursive function to find different ways in which n can be written as sum of atleast one positive integers ; Check if sum becomes n , consider this representation ; Start from previous element in the representation till n ; Include current element from representation ; Call function again with reduced sum ; Backtrack - remove current element from representation ; Function to find the Landau 's function ; Using recurrence find different ways in which n can be written as a sum of atleast one + ve integers ; Print the result ; Given N ; Function call [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Value of Pi ( \u00ce ) up to 50 decimal places | Python3 program to calculate the value of pi up to n decimal places ; Function that prints the value of pi upto N decimal places ; Find value of pi upto using acos ( ) function ; Print value of pi upto N decimal places ; Driver Code ; Function that prints the value of pi [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Number of Paths of Weight W in a K | Python 3 program to count the number of paths with weight W in a K - ary tree ; Function to return the number of ways having weight as wt in K - ary tree ; Return 0 if weight becomes less than zero ; Return one only if the current path has included edge weight of atleast M ; If the current edge weight is greater than or equal to M , set used as true ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Maximum difference between a pair of adjacent elements by excluding every element once | Function to calculate maximum difference between adjacent elements excluding every array element once ; Traverse the array ; Stores the maximum diff ; Check for maximum adjacent element ; Exclude current element ; pdate maximum difference ; Update previous value ; Append the result into a vector ; Print the result ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Find minimum adjustment cost of an array | Python3 program to find minimum adjustment cost of an array ; Function to find minimum adjustment cost of an array ; dp [ i ] [ j ] stores minimal adjustment cost on changing A [ i ] to j ; handle first element of array separately ; do for rest elements of the array ; replace A [ i ] to j and calculate minimal adjustment cost dp [ i ] [ j ] ; initialize minimal adjustment cost to INT_MAX ; consider all k such that k >= max ( j - target , 0 ) and k <= min ( M , j + target ) and take minimum ; return minimum value from last row of dp table ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Print N lines of 4 numbers such that every pair among 4 numbers has a GCD K | Function to print N lines ; Iterate N times to print N lines ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Nth number in a set of multiples of A , B or C | Python3 program to find nth term divisible by a , b or c ; Function to return gcd of a and b ; Function to return the count of integers from the range [ 1 , num ] which are divisible by either a , b or c ; Calculate the number of terms divisible by a , b and c then remove the terms which are divisible by both ( a , b ) or ( b , c ) or ( c , a ) and then add the numbers which are divisible by a , b and c ; Function for binary search to find the nth term divisible by a , b or c ; Set low to 1 and high to LONG_MAX ; If the current term is less than n then we need to increase low to mid + 1 ; If current term is greater than equal to n then high = mid ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Print Nth Stepping or Autobiographical number | Function to find the Nth stepping natural number ; Declare the queue ; Enqueue 1 , 2 , ... , 9 in this order ; Perform K operation on queue ; Get the ith Stepping number ; Perform Dequeue from the Queue ; If x mod 10 is not equal to 0 ; then Enqueue 10 x + ( x mod 10 ) - 1 ; Enqueue 10 x + ( x mod 10 ) ; If x mod 10 is not equal to 9 ; then Enqueue 10 x + ( x mod 10 ) + 1 ; Return the dequeued number of the K - th operation as the Nth stepping number ; Driver Code ; initialise K [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Count triplets from a given range having sum of two numbers of a triplet equal to the third number | Function to find the number of triplets from the range [ L , R ] having sum of two numbers from the triplet equal to the third number ; Stores the total number of triplets ; Find the difference of the range ; Case 1 : If triplets can 't  be formed, then return 0 ; Otherwise ; Update the total number of triplets ; Return the count ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Ways to write N as sum of two or more positive integers | Set | Function to find the number of partitions of N ; Base case ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Sunny Number | Python3 program for the above approach ; Function check whether x is a perfect square or not ; Find floating point value of square root of x . ; If square root is an integer ; Function to check Sunny Number ; Check if ( N + 1 ) is a perfect square or not ; If ( N + 1 ) is not a perfect square ; Driver Code ; Given Number ; Function call [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Sum of first n term of Series 3 , 5 , 9 , 17 , 33. ... | Python program to find sum of n terms of the series ; Sn = n * ( 4 * n * n + 6 * n - 1 ) \/ 3 ; number of terms for the sum ; find the Sn [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Count of distinct pair sum between two 1 to N value Arrays | Function to find the distinct sums ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Invert the Kth most significant bit of N | Python implementation of the approach ; Function to convert decimal number n to its binary representation stored as an array arr [ ] ; Function to convert the number represented as a binary array arr [ ] its decimal equivalent ; Function to concatenate the binary numbers and return the decimal result ; Number of bits in both the numbers ; Convert the bits in both the gers to the arrays a [ ] and b [ ] ; The number of bits in n are less than k ; Flip the kth bit ; Return the decimal equivalent of the number ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Check if a string can be split into even length palindromic substrings | Function to check string str can be split a string into even length palindromic substrings ; Initialize a stack ; Iterate the string ; If the i - th character is same as that at the top of the stack then pop the top element ; Else push the current charactor into the stack ; If the stack is empty , then even palindromic substrings are possible ; Else not - possible ; Given string ; Function Call [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Count of elements to be inserted to make Array sum twice the XOR of Array | Function to find the minimum number of elements that need to be inserted such that the sum of the elements of the array is twice the XOR of the array ; Variable to store the Xor of all the elements ; Variable to store the sum of all elements ; Loop to find the Xor and the sum of the array ; If sum = 2 * Xor ; No need to insert more elements ; We insert one more element which is Sum ; We insert two more elements Sum + Xor and Xor . ; Print the number of elements inserted in the array ; Print the elements that are inserted in the array ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Counts paths from a point to reach Origin | Recursive function to count number of paths ; If we reach bottom or top left , we are have only one way to reach ( 0 , 0 ) ; Else count sum of both ways ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Remove all occurrences of a character in a string | Recursive approach | Function to remove all occurrences of a character in the string ; Base Case ; Check the first character of the given string ; Pass the rest of the string to recursion Function call ; Add the first character of str and string from recursion ; Given String ; Given character ; Function call [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Check if it is possible to split given Array into K odd | Function to check if array can be split in required K subsets ; Store count of odd numbers ; Check if element is odd ; Check if split is possible ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Encrypt the string | Function to convert Decimal to Hex ; Function to encrypt the string ; Iterate the characters of the string ; Iterate until S [ i ] is equal to ch ; Update count and i ; Decrement i by 1 ; Convert count to hexadecimal representation ; Append the character ; Append the characters frequency in hexadecimal representation ; Reverse the obtained answer ; Return required answer ; Driver Code ; Given Input ; Function Call [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Counts Path in an Array | Python3 implementation of above approach ; find the number of ways to reach the end ; dp to store value ; base case ; Bottom up dp structure ; F [ i ] is dependent of F [ i + 1 ] to F [ i + k ] ; Return value of dp [ 0 ] ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Maximum time such that absolute difference between hour and minute lies in given range | Function checks whether given time is correct ; To check minute value of time ; To check hour value of time ; Changes in value is not allowed at position where ' ? ' is not present ; Function checks whether the absolute difference between hour and minute value is within [ L , R ] ; Checks if the difference is outside the give range ; Displays time in proper 24 - hour format ; Function find the desired value of time whose difference lies in the range [ L , R ] ; Decrease hour value from 23 to 0 ; Check if the hour value is valid if not valid then no need to change minute value , since time will still remain in valid , to check hour value flag is set to 1. ; Decrease minute value from 59 to 0 ; Check if the minute value is valid , if not valid then skip the current iteration , to check ' minute ' value flag is set to 0. ; Input time ; Difference range [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Count of Binary Strings of length N such that frequency of 1 ' s \u2581 exceeds \u2581 frequency \u2581 of \u2581 0' s | Function to calculate and return the value of Binomial Coefficient C ( n , k ) ; Since C ( n , k ) = C ( n , n - k ) ; Calculate the value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] \/ [ k * ( k - 1 ) * -- - * 1 ] ; Function to return the count of binary strings of length N such that frequency of 1 ' s \u2581 exceed \u2581 that \u2581 of \u2581 0' s ; Count of N - length binary strings ; Count of N - length binary strings having equal count of 0 ' s \u2581 and \u2581 1' s ; For even length strings ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Angle between 3 given vertices in a n | Function that checks whether given angle can be created using any 3 sides ; Initialize x and y ; Calculate the number of vertices between i and j , j and k ; Calculate the angle subtended at the circumference ; Angle subtended at j can be found using the fact that the sum of angles of a triangle is equal to 180 degrees ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Count the numbers which can convert N to 1 using given operation | Function to count the numbers which can convert N to 1 using the given operation ; Iterate through all the integers ; Check if N can be converted to 1 ; Incrementing the count if it can be converted ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Check for an array element that is co | Python3 implementation of the approach ; Stores smallest prime factor for every number ; Hash to store prime factors count ; Function to calculate SPF ( SmallestPrime Factor ) for every number till MAXN ; Separately marking spf for every even number as 2 ; Checking if i is prime ; Marking SPF for all numbers divisible by i ; Marking spf [ j ] if it is not previously marked ; Function to store the prime factors after dividing by the smallest prime factor at every step ; Storing the count of prime factors in hash ; Function that returns true if there are no common prime factors between x and other numbers of the array ; Checking whether it common prime factor with other numbers ; Function that returns true if there is an element in the array which is coprime with all the other elements of the array ; Using sieve for generating prime factors ; Checking the common prime factors with other numbers ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Minimum flips to remove any consecutive 3 0 s or 1 s in given Binary string | Function to find the minimum number of flips to make all three pairs of consecutive characters different ; Stores resultant count of pairs ; Base Case ; Iterate over the range [ 0 , N - 2 ] ; If the consecutive 3 numbers are the same then increment the count and the counter ; Return the answer ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Find K numbers with sum equal to N and sum of their squares maximized | Function that prints the required K numbers ; Print 1 , K - 1 times ; Print ( N - K + 1 ) ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Queries for the product of first N factorials | Python3 implementation of the approach ; Declare result array globally ; Function to precompute the product of factorials upto MAX ; Initialize base condition if n = 0 then factorial of 0 is equal to 1 and answer for n = 0 is 1 ; Iterate loop from 1 to MAX ; factorial ( i ) = factorial ( i - 1 ) * i ; Result for current n is equal to result [ i - 1 ] multiplied by the factorial of i ; Function to perform the queries ; Precomputing the result tiMAX ; Perform queries ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Check if the Xor of the frequency of all digits of a number N is zero or not | Python implementation of the above approach ; creating a frequency array ; Finding the last digit of the number ; Dividing the number by 10 to eliminate last digit ; counting frequency of each digit ; checking if the xor of all frequency is zero or not ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Check if the remainder of N | Function to check if a number holds the condition ( N - 1 ) ! % N = N - 1 ; Corner cases ; Number divisible by 2 or 3 are not prime ; Iterate from 5 and keep checking for prime ; Function to check the expression for the value N ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Number of Subsequences with Even and Odd Sum | Returns the count of odd and even subsequences ; Initialising count_even and count_odd to 0 since as there is no subsequence before the iteration with even or odd count . ; Find sum of all subsequences with even count and odd count and storing them as we iterate . ; if the number is even ; if the number is odd ; Driver code ; Calling the function [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Ways to Remove Edges from a Complete Graph to make Odd Edges | Function to return the number of ways to remove edges from the graph so that odd number of edges are left in the graph ; Total number of edges ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Calculate nCr using Pascal 's Triangle | Initialize the matrix with 0 ; 0 C0 = 1 ; Set every nCr = 1 where r = 0 ; Value for the current cell of Pascal 's triangle ; Function to return the value of nCr ; Return nCr ; Build the Pascal 's triangle [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Minimum sum possible by removing all occurrences of any array element | Function to find minimum sum after deletion ; Stores frequency of array elements ; Traverse the array ; Calculate sum ; Update frequency of the current element ; Stores the minimum sum required ; Traverse map ; Find the minimum sum obtained ; Return minimum sum ; Input array ; Size of array [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Longest Increasing Path in Matrix | Python3 program to find longest increasing path in a matrix . ; Return the length of LIP in 2D matrix ; If value not calculated yet . ; If reach bottom left cell , return 1. ; If reach the corner of the matrix . ; If value greater than below cell . ; If value greater than left cell . ; Wrapper function ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"Python","prompt":"<s>[INST] Write a Python program to complete the following. Gold Mine Problem | Python program to solve Gold Mine problem ; Returns maximum amount of gold that can be collected when journey started from first column and moves allowed are right , right - up and right - down ; Create a table for storing intermediate results and initialize all cells to 0. The first row of goldMineTable gives the maximum gold that the miner can collect when starts that row ; Gold collected on going to the cell on the right ( -> ) ; Gold collected on going to the cell to right up ( \/ ) ; Gold collected on going to the cell to right down ( \\ ) ; Max gold collected from taking either of the above 3 paths ; The max amount of gold collected will be the max value in first column of all rows ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Queries for the product of first N factorials | Javascript implementation of the approach ; Declare result array globally ; Function to precompute the product of factorials upto MAX ; Initialize base condition if n = 0 then factorial of 0 is equal to 1 and answer for n = 0 is 1 ; Iterate loop from 1 to MAX ; factorial ( i ) = factorial ( i - 1 ) * i ; Result for current n is equal to result [ i - 1 ] multiplied by the factorial of i ; Function to perform the queries ; Precomputing the result till MAX ; Perform queries ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Check if the Xor of the frequency of all digits of a number N is zero or not | Javascript implementation of the above approach ; creating a frequency array ; Finding the last digit of the number ; Dividing the number by 10 to eliminate last digit ; counting frequency of each digit ; checking if the xor of all frequency is zero or not ; Driver function [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Construct two N | Satisfying the given conditions ; Declare the two arrays A and B ; Iterate from range [ 1 , 2 * n ] ; Assign consecutive numbers to same indices of the two arrays ; Print the first array ; Print the second array , B ; Driver Code ; Function Call [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Check if the remainder of N | Function to check if a number holds the condition ( N - 1 ) ! % N = N - 1 ; Corner cases ; Number divisible by 2 or 3 are not prime ; Iterate from 5 and keep checking for prime ; Function to check the expression for the value N ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Maximum difference between a pair of adjacent elements by excluding every element once | Function to calculate maximum difference between adjacent elements excluding every array element once ; Traverse the array ; Stores the maximum diff ; Check for maximum adjacent element ; Exclude current element ; Update maximum difference ; Update previous value ; Append the result into a vector ; Print the result ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Count triplets from a given range having sum of two numbers of a triplet equal to the third number | Function to find the number of triplets from the range [ L , R ] having sum of two numbers from the triplet equal to the third number ; Stores the total number of triplets ; Find the difference of the range ; Case 1 : If triplets can 't  be formed, then return 0 ; Otherwise ; Update the total number of triplets ; Return the count ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Check for an array element that is co | Javascript implementation of the approach ; Stores smallest prime factor for every number ; Hash to store prime factors count ; Function to calculate SPF ( Smallest Prime Factor ) for every number till MAXN ; Marking smallest prime factor for every number to be itself ; Separately marking spf for every even number as 2 ; Checking if i is prime ; Marking SPF for all numbers divisible by i ; Marking spf [ j ] if it is not previously marked ; Function to store the prime factors after dividing by the smallest prime factor at every step ; Storing the count of prime factors in hash ; Function that returns true if there are no common prime factors between x and other numbers of the array ; Checking whether it common prime factor with other numbers ; Function that returns true if there is an element in the array which is coprime with all the other elements of the array ; Using sieve for generating prime factors ; Checking the common prime factors with other numbers ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Value of Pi ( \u00ce ) up to 50 decimal places | Function that prints the value of pi upto N decimal places ; Find value of pi upto using acos ( ) function ; Print value of pi upto N decimal places ; Driver Code ; Function that prints the value of pi [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Angle between 3 given vertices in a n | Function that checks whether given angle can be created using any 3 sides ; Initialize x and y ; Calculate the number of vertices between i and j , j and k ; Calculate the angle subtended at the circumference ; Angle subtended at j can be found using the fact that the sum of angles of a triangle is equal to 180 degrees ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Print Nth Stepping or Autobiographical number | Function to find the Nth stepping natural number ; Declare the queue ; Enqueue 1 , 2 , ... , 9 in this order ; Perform K operation on queue ; Get the ith Stepping number ; Perform Dequeue from the Queue ; If x mod 10 is not equal to 0 ; then Enqueue 10 x + ( x mod 10 ) - 1 ; Enqueue 10 x + ( x mod 10 ) ; If x mod 10 is not equal to 9 ; then Enqueue 10 x + ( x mod 10 ) + 1 ; Return the dequeued number of the K - th operation as the Nth stepping number ; initialise K [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Count of Binary Strings of length N such that frequency of 1 ' s \u2581 exceeds \u2581 frequency \u2581 of \u2581 0' s | Function to calculate and return the value of Binomial Coefficient C ( n , k ) ; Since C ( n , k ) = C ( n , n - k ) ; Calculate the value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] \/ [ k * ( k - 1 ) * -- - * 1 ] ; Function to return the count of binary Strings of length N such that frequency of 1 ' s \u2581 exceed \u2581 that \u2581 of \u2581 0' s ; Count of N - length binary Strings ; Count of N - length binary Strings having equal count of 0 ' s \u2581 and \u2581 1' s ; For even length Strings ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Find K numbers with sum equal to N and sum of their squares maximized | Function that prints the required K numbers ; Print 1 , K - 1 times ; Print ( N - K + 1 ) ; [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Number of Subsequences with Even and Odd Sum | Java program to get minimum cost to sort strings by reversal operation ; Returns the count of odd and even subsequences ; Variables to store the count of even subsequences and odd subsequences ; Initialising count_even and count_odd to 0 since as there is no subsequence before the iteration with even or odd count . ; Find sum of all subsequences with even count and odd count and storing them as we iterate . ; if the number is even ; if the number is odd ; Driver code ; Calling the function [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Longest Increasing Path in Matrix | Return the length of LIP in 2D matrix ; If value not calculated yet . ; If reach bottom left cell , return 1. ; If reach the corner of the matrix . ; If value greater than below cell . ; If value greater than left cell . ; Wrapper function ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Invert the Kth most significant bit of N | Function to convert decimal number n to its binary representation stored as an array arr [ ] ; Function to convert the number represented as a binary array arr [ ] into its decimal equivalent ; Function to return the updated integer after flipping the kth bit ; Number of bits in n ; Find the binary representation of n ; The number of bits in n are less than k ; Flip the kth bit ; Return the decimal equivalent of the number ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Check if roots of a Quadratic Equation are reciprocal of each other or not | Function to check if the roots of a quadratic equation are reciprocal of each other or not ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Encrypt the string | Function to convert Decimal to Hex ; Function to encrypt the string ; Iterate the characters of the string ; Iterate until S [ i ] is equal to ch ; Update count and i ; Decrement i by 1 ; Convert count to hexadecimal representation ; Append the character ; Append the characters frequency in hexadecimal representation ; Reverse the obtained answer ; Return required answer ; Given Input ; Function Call [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Number of Paths of Weight W in a K | Function to return the number of ways having weight as wt in K - ary tree ; Return 0 if weight becomes less than zero ; Return one only if the current path has included edge weight of atleast M ; If the current edge weight is greater than or equal to M , set used as true ; Driver Code to test above function [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Nth number in a set of multiples of A , B or C | Function to return gcd of a and b ; Function to return the count of integers from the range [ 1 , num ] which are divisible by either a , b or c ; Calculate the number of terms divisible by a , b and c then remove the terms which are divisible by both ( a , b ) or ( b , c ) or ( c , a ) and then add the numbers which are divisible by a , b and c ; Function for binary search to find the nth term divisible by a , b or c ; Set low to 1 and high to LONG_MAX ; If the current term is less than n then we need to increase low to mid + 1 ; If current term is greater than equal to n then high = mid ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Check if a string can be split into even length palindromic substrings | Function to check string str can be split a string into even length palindromic substrings ; Initialize a stack ; Iterate the string ; If the i - th character is same as that at the top of the stack then pop the top element ; Else push the current charactor into the stack ; If the stack is empty , then even palindromic substrings are possible ; Else not - possible ; Given string ; Function Call [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Count of substrings from given Ternary strings containing characters at least once | Function to count the number of substrings consists of 0 , 1 , and 2 ; Initialize frequency array of size 3 ; Stores the resultant count ; Traversing string str ; Update frequency array ; If all the characters are present counting number of substrings possible ; Update number of substrings ; Return the number of substrings ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Ways to Remove Edges from a Complete Graph to make Odd Edges | Function to return the number of ways to remove edges from the graph so that odd number of edges are left in the graph ; Total number of edges ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Minimum flips to remove any consecutive 3 0 s or 1 s in given Binary string | Function to find the minimum number of flips to make all three pairs of consecutive characters different ; Stores resultant count of pairs ; Base Case ; Iterate over the range [ 0 , N - 2 ] ; If the consecutive 3 numbers are the same then increment the count and the counter ; Return the answer ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Calculate nCr using Pascal 's Triangle | Initialize the matrix with 0 ; 0 C0 = 1 ; Set every nCr = 1 where r = 0 ; Value for the current cell of Pascal 's triangle ; Function to return the value of nCr ; Return nCr ; Build the Pascal 's triangle [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Sum of first n term of Series 3 , 5 , 9 , 17 , 33. ... | Java script program to find sum of first n terms ; Sn = n * ( 4 * n * n + 6 * n - 1 ) \/ 3 ; number of terms to be included in sum ; find the Sn [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Remove all occurrences of a character in a string | Recursive approach | Function to remove all occurrences of a character in the string ; Base Case ; Check the first character of the given string ; Pass the rest of the string to recursion Function call ; Add the first character of str and string from recursion ; Given String ; Given character ; Function call [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Count the numbers which can convert N to 1 using given operation | Function to count the numbers which can convert N to 1 using the given operation ; Iterate through all the integers ; Check if N can be converted to 1 ; Incrementing the count if it can be converted ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Closest sum partition ( into two subsets ) of numbers from 1 to n | Function to return the minimum required absolute difference ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Least number to be added to or subtracted from N to make it a Perfect Square | Function to return the Least number ; Get the perfect square before and after N ; Check which is nearest to N ; return the result ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Find minimum adjustment cost of an array | Javascript program to find minimum adjustment cost of an array ; Function to find minimum adjustment cost of an array ; dp [ i ] [ j ] stores minimal adjustment cost on changing A [ i ] to j ; handle first element of array separately ; do for rest elements of the array ; replace A [ i ] to j and calculate minimal adjustment cost dp [ i ] [ j ] ; initialize minimal adjustment cost to INT_MAX ; consider all k such that k >= max ( j - target , 0 ) and k <= min ( M , j + target ) and take minimum ; return minimum value from last row of dp table ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Find the pair ( a , b ) with minimum LCM such that their sum is equal to N | Function to check if number is prime or not ; As 1 is neither prime nor composite return false ; Check if it is divided by any number then it is not prime , return false ; Check if n is not divided by any number then it is prime and hence return true ; Function to find the pair ( a , b ) such that sum is N & LCM is minimum ; Check if the number is prime ; Now , if it is not prime then find the least divisior ; Check if divides n then it is a factor ; Required output is a = n \/ i & b = n \/ i * ( n - 1 ) ; Driver Code ; Function call [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Check if it is possible to split given Array into K odd | Function to check if array can be split in required K subsets ; Store count of odd numbers ; Check if element is odd ; Check if split is possible ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Ways to write N as sum of two or more positive integers | Set | Function to find the number of partitions of N ; Base case ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Counts paths from a point to reach Origin | Recursive function to count number of paths ; If we reach bottom or top left , we are have only one way to reach ( 0 , 0 ) ; Else count sum of both ways ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Loss when two items are sold at same price and same percentage profit \/ loss | Function that will find loss ; Driver Code ; Calling Function [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Sum of division of the possible pairs for the given Array | Function to compute the sum ; Counting frequency of each term and finding maximum among it ; Making cumulative frequency ; Taking the ceil value ; nos . in [ ( n - 0.5 ) X , ( n + 0.5 ) X ) range will add n to the ans ; Return the final result ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Minimum sum possible by removing all occurrences of any array element | Function to find minimum sum after deletion ; Stores frequency of array elements ; Traverse the array ; Calculate sum ; Update frequency of the current element ; Stores the minimum sum required ; Traverse map ; Find the minimum sum obtained ; Return minimum sum ; Input array ; Size of array [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Sunny Number | Function check whether x is a perfect square or not ; Find floating point value of square root of x . ; If square root is an integer ; Function to check Sunny Number ; Check if ( N + 1 ) is a perfect square or not ; If ( N + 1 ) is not a perfect square ; Given Number ; Function call [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Count the number of Special Strings of a given length N | JavaScript Program to Count the number of Special Strings of a given length N ; Function to return count of special strings ; stores the answer for a particular value of n ; for n = 0 we have empty string ; for n = 1 we have 2 special strings ; calculate count of special string of length i ; fib [ n ] stores the count of special strings of length n ; initialise n [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Count of elements to be inserted to make Array sum twice the XOR of Array | Function to find the minimum number of elements that need to be inserted such that the sum of the elements of the array is twice the XOR of the array ; Variable to store the Xor of all the elements ; Variable to store the sum of all elements ; Loop to find the Xor and the sum of the array ; If sum = 2 * Xor ; No need to insert more elements ; We insert one more element which is Sum ; We insert two more elements Sum + Xor and Xor . ; Print the number of elements inserted in the array ; Print the elements that are inserted in the array ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Counts Path in an Array | Javascript implementation of above approach ; find the number of ways to reach the end ; dp to store value ; base case ; Bottom up dp structure ; F [ i ] is dependent of F [ i + 1 ] to F [ i + k ] ; Return value of dp [ 0 ] ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Print N lines of 4 numbers such that every pair among 4 numbers has a GCD K | Function to prvar N lines ; Iterate N times to prvar N lines ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Count 1 s present in a range of indices [ L , R ] in a given array | Function to find the size of the array if the array initially contains a single element ; Base case ; P \/ 2 -> findSize ( N \/ 2 ) P % 2 -> 1 P \/ 2 -> findSize ( N \/ 2 ) ; Function to return the count of 1 s in the range [ L , R ] ; Base Case ; PART 1 -> N \/ 2 [ 1 , Siz_M ] ; Update the right end point of the range to min ( Siz_M , R ) ; PART 2 -> N % 2 [ SizM + 1 , Siz_M + 1 ] ; PART 3 -> N \/ 2 [ SizM + 2 , 2 * Siz_M - 1 ] Same as PART 1 Property of Symmetricity Shift the coordinates according to PART 1 Subtract ( Siz_M + 1 ) from both L , R ; Input ; Counts the number of 1 's in  the range [L, R] [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Maximum time such that absolute difference between hour and minute lies in given range | Function checks whether given time is correct ; To check minute value of time ; To check hour value of time ; Changes in value is not allowed at position where ' ? ' is not present ; Function checks whether the absolute difference between hour and minute value is within [ L , R ] ; Checks if the difference is outside the give range ; Displays time in proper 24 - hour format ; Function find the desired value of time whose difference lies in the range [ L , R ] ; Decrease hour value from 23 to 0 ; Check if the hour value is valid if not valid then no need to change minute value , since time will still remain in valid , to check hour value flag is set to 1. ; Decrease minute value from 59 to 0 ; Check if the minute value is valid , if not valid then skip the current iteration , to check ' minute ' value flag is set to 0. ; Input time ; Difference range [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Numbers formed by flipping common set bits in two given integers | Function to flip bits of A and B which are set bits in A and B ; Iterater all possible bits of A and B ; If ith bit is set in both A and B ; Clear i - th bit of A ; Clear i - th bit of B ; Print A and B ; Driver Code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Counts Path in an Array | Javascript implementation of the above approach ; Find the number of ways to reach the end ; Base case ; Recursive structure ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Count of integers of length N and value less than K such that they contain digits only from the given set | Javascript implementation of the approach ; Function to convert a number into vector ; Push all the digits of N from the end one by one to the vector ; If the original number was 0 ; Reverse the vector elements ; Return the required vector ; Function to return the count of B length integers which are less than C and they contain digits from set A [ ] only ; Convert number to digit array ; Case 1 : No such number possible as the generated numbers will always be greater than C ; Case 2 : All integers of length B are valid as they all are less than C ; contain 0 ; Case 3 ; Update the lower [ ] array such that lower [ i ] stores the count of elements in A [ ] which are less than i ; For first index we can 't use 0 ; Whether ( i - 1 ) digit of generated number can be equal to ( i - 1 ) digit of C ; Is digit [ i - 1 ] present in A ? ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Find Landau 's function for a given number N | To store Landau 's function of the number ; Function to return gcd of 2 numbers ; Function to return LCM of two numbers ; Function to find max lcm value among all representations of n ; Calculate Landau 's value ; Recursive function to find different ways in which n can be written as sum of atleast one positive integers ; Check if sum becomes n , consider this representation ; Start from previous element in the representation till n ; Include current element from representation ; Call function again with reduced sum ; Backtrack - remove current element from representation ; Function to find the Landau 's function ; Using recurrence find different ways in which n can be written as a sum of atleast one + ve integers ; Print the result ; Given N ; Function Call [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Gold Mine Problem | JavaScript program to solve Gold Mine problem ; Returns maximum amount of gold that can be collected when journey started from first column and moves allowed are right , right - up and right - down ; Create a table for storing intermediate results and initialize all cells to 0. The first row of goldMineTable gives the maximum gold that the miner can collect when starts that row ; Gold collected on going to the cell on the right ( -> ) ; Gold collected on going to the cell to right up ( \/ ) ; Gold collected on going to the cell to right down ( \\ ) ; Max gold collected from taking either of the above 3 paths ; The max amount of gold collected will be the max value in first column of all rows ; Driver code [\/INST] \\n <\/s>"}
{"expert":"Javascript","prompt":"<s>[INST] Write a Javascript program to complete the following. Count of distinct pair sum between two 1 to N value Arrays | Function to find the distinct sums ; Driver code [\/INST] \\n <\/s>"}
