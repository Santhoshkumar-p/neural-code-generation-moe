,value,value,codebleu,ngram_match_score,weighted_ngram_match_score,syntax_match_score,dataflow_match_score
0,"function minSum ( A , N ) { let mp = new Map ( ) ; let sum = 0 ; for ( let i = 0 ; i < N ; i ++ ) { sum += A [ i ] ; mp [ A [ i ] ] ++ ; if ( mp . has ( A [ i ] ) ) { mp . set ( A [ i ] , mp . get ( A [ i ] ) + 1 ) } else { mp . set ( A [ i ] , 1 ) } } let minSum = Number . MAX_SAFE_INTEGER ; for ( let it of mp ) { minSum = Math . min ( minSum , sum - ( it [ 0 ] * it [ 1 ] ) ) ; } return minSum ; } let arr = [ 4 , 5 , 6 , 6 ] ; let N = arr . length document . write ( minSum ( arr , N ) + "" "" ) ;","] \n function minSum ( arr , N ) { var freq = new Map ( ) ; for ( var i = 0 ; i < N ; i ++ ) { if ( freq . has ( arr [ i ] ) ) { freq . set ( arr [ i ] , freq . get ( arr [ i ] ) + 1 ) ; } else { freq . set ( arr [ i ] , 1 ) ; } } var sum = 0 ; for ( var i = 0 ; i < N ; i ++ ) { sum += arr [ i ] ; } var min_sum = Number . MAX_VALUE ; freq . forEach ( ( value , key ) => { var sum_with_removal = sum - value * key ; min_sum = Math . min ( min_sum , sum_with_removal ) ; } ) ; return min_sum ; } var arr = [ 1 , 2 , 1 , 3 , 4 , 1 , 1 , 2 ] ; var N = arr . length ; document . write ( minSum ( arr , N ) ) ; 2",0.44147873509207497,0.38636381442527246,0.4208616672535686,0.5512820512820513,0.4074074074074074
1,"function maxAdjacent ( arr , N ) { var res = [ ] ; for ( var i = 1 ; i < N - 1 ; i ++ ) { var prev = arr [ 0 ] ; var maxi = Number . MIN_VALUE ; for ( var j = 1 ; j < N ; j ++ ) { if ( i == j ) continue ; maxi = Math . max ( maxi , Math . abs ( arr [ j ] - prev ) ) ; prev = arr [ j ] ; } res . push ( maxi ) ; } for ( var j = 0 ; j < res . length ; j ++ ) document . write ( res [ j ] + "" "" ) ; document . write ( "" "" ) ; } var arr = [ 1 , 3 , 4 , 7 , 8 ] ; var N = arr . length ; maxAdjacent ( arr , N ) ;"," let MAX = 1000000 ; function maxDiff ( arr , n ) { let ans = new Array ( n ) ; for ( let i = 0 ; i < n ; i ++ ) { let max = arr [ i ] ; let prev = 0 ; for ( let j = 0 ; j < n ; j ++ ) { if ( j != i ) { max = Math . max ( max , arr [ j ] ) ; prev = Math . max ( prev , arr [ j ] ) ; } } ans [ i ] = max - prev ; } for ( let i = 0 ; i < n ; i ++ ) { document . write ( ans [ i ] + "" "" ) ; } } let arr = [ 1 , 2 , 3 , 4 , 5 , 6 ] ; let n = arr . length ; maxDiff ( arr , n ) ; 3 ; 2 ; 1 ; 2 ; 1 ; 2 ; 3 ; 2 ; 1 ; 2 ; 1 ; 2 ; 1 ; 2 ; 1 ; 2 ; 1 ; 2 ; 1 ; 2 ;",0.3783894504731894,0.27773326545585814,0.331303131915495,0.44155844155844154,0.46296296296296297
2,"function findSize ( N ) { if ( N == 0 ) return 1 ; if ( N == 1 ) return 1 ; let Size = 2 * findSize ( parseInt ( N / 2 , 10 ) ) + 1 ; return Size ; } function CountOnes ( N , L , R ) { if ( L > R ) { return 0 ; } if ( N <= 1 ) { return N ; } let ret = 0 ; let M = parseInt ( N / 2 , 10 ) ; let Siz_M = findSize ( M ) ; if ( L <= Siz_M ) { ret += CountOnes ( parseInt ( N / 2 , 10 ) , L , Math . min ( Siz_M , R ) ) ; } if ( L <= Siz_M + 1 && Siz_M + 1 <= R ) { ret += N % 2 ; } if ( Siz_M + 1 < R ) { ret += CountOnes ( parseInt ( N / 2 , 10 ) , Math . max ( 1 , L - Siz_M - 1 ) , R - Siz_M - 1 ) ; } return ret ; } let N = 7 , L = 2 , R = 5 ; document . write ( CountOnes ( N , L , R ) ) ;","] \n function findSize ( N ) { if ( N == 1 ) return 1 ; return findSize ( Math . floor ( N / 2 ) ) + ( N % 2 ) ; } function countOnes ( arr , L , R , N ) { if ( L > R ) return 0 ; if ( L == R ) return arr [ L ] ; var Siz_M = findSize ( N ) ; if ( R < Siz_M ) R = Siz_M ; var ans = 0 ; for ( var i = L ; i <= R ; i ++ ) ans += arr [ i ] ; return ans ; } var arr = [ 1 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 ] ; var N = arr . length ; var L = 2 , R = 6 ; document . write ( countOnes ( arr , L , R , N ) ) ; 2 4 6 8 10 12 14 16 18 20 [/INST] \n 2 4 6 8 1",0.2978620517962794,0.25539607695814776,0.25877427585925455,0.38613861386138615,0.2911392405063291
3,"function prime ( n ) { if ( n == 1 ) return false ; for ( i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) return false ; } return true ; } function minDivisior ( n ) { if ( prime ( n ) ) { document . write ( 1 + "" "" + ( n - 1 ) ) ; } else { for ( i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { document . write ( n / i + "" "" + ( n / i * ( i - 1 ) ) ) ; break ; } } } } var N = 4 ; minDivisior ( N ) ;","] \n function isPrime ( n ) { if ( n <= 1 ) return false ; for ( let i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) return false ; } return true ; } function findPair ( n ) { if ( isPrime ( n ) ) { document . write ( "" "" ) ; return ; } let i ; for ( i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) break ; } let a = parseInt ( n / i ) ; let b = parseInt ( n / i * ( n - 1 ) ) ; document . write ( a + "" "" + b ) ; } let n = 12 ; findPair ( n ) ; 3 ; 12 [/INST] \n 4 ; 24 [/INST] 5 ; 10 [/INST] 6 ; 3 [/INST] 12 ; 1 [/INST] 15 ; 1 [/INST] 16 ; 1 [/INST] 18 ; 2 [/",0.5026784880217551,0.47295307000771775,0.6153864528555579,0.589041095890411,0.3333333333333333
4,"var Landau = - 1000000000 ; function gcd ( a , b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } function lcm ( a , b ) { return ( a * b ) / gcd ( a , b ) ; } function findLCM ( arr ) { var nth_lcm = arr [ 0 ] ; for ( var i = 1 ; i < arr . length ; i ++ ) nth_lcm = lcm ( nth_lcm , arr [ i ] ) ; Landau = Math . max ( Landau , nth_lcm ) ; } function findWays ( arr , i , n ) { if ( n == 0 ) findLCM ( arr ) ; for ( var j = i ; j <= n ; j ++ ) { arr . push ( j ) ; findWays ( arr , j , n - j ) ; arr . pop ( ) ; } } function Landau_function ( n ) { arr = [ ] ; findWays ( arr , 1 , n ) ; document . write ( Landau ) ; } var N = 4 ; Landau_function ( N ) ;"," let ans = 0 ; function gcd ( a , b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } function lcm ( a , b ) { return ( a / gcd ( a , b ) ) * b ; } function maxLCM ( n ) { let lcm = 1 ; for ( let i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { if ( n / i == i ) lcm = lcm ( lcm , i ) ; else { lcm = lcm ( lcm , i ) ; lcm = lcm ( lcm , n / i ) ; } } } return lcm ; } function findRepresentation ( sum , representation , n ) { if ( sum == n ) { ans = maxLCM ( sum ) ; return ; } for ( let i = 0 ; i < representation . length ; i ++ ) { representation . push ( representation [ i ] ) ; findRepresentation ( sum - representation [ i ] , representation , n ) ; representation . pop ( ) ; } } function findLandau ( n )",0.4175726612439288,0.3700303664417798,0.384858634005156,0.43010752688172044,0.4852941176470588
5,"function isPrime ( n ) { if ( n == 1 ) return true ; if ( n <= 3 ) return true ; if ( n % 2 == 0 n % 3 == 0 ) return false ; for ( let i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; } function checkExpression ( n ) { if ( isPrime ( n ) ) document . write ( "" "" ) ; else document . write ( "" "" ) ; } let N = 3 ; checkExpression ( N ) ;","] \n function isPrime ( n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 n % 3 == 0 ) return false ; for ( var i = 5 ; i * i <= n ; i = i + 6 ) { if ( n % i == 0 || n % ( i + 2 ) == 0 ) { return false ; } } return true ; } function checkExpression ( n ) { if ( isPrime ( n - 1 ) ) { document . write ( "" "" ) ; } else { document . write ( "" "" ) ; } } var N = 11 ; checkExpression ( N ) ; 11 ; 3 ; 13 ; 19 ; 23 ; 29 ; 31 ; 37 ; 41 ; 43 ; 47 ; 53 ; 59 ; 61 ; 67 ; 71 ; 73 ; 79 ; 83 ; 89 ; 97 ; 101 ; 103 ; ",0.7226814530993163,0.5615343308201308,0.8190361649702047,0.8064516129032258,0.7037037037037037
6,"function checkArray ( n , k , arr ) { var cnt = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( ( arr [ i ] & 1 ) != 0 ) cnt += 1 ; } if ( cnt >= k && cnt % 2 == k % 2 ) return true ; else return false ; } var arr = [ 1 , 3 , 4 , 7 , 5 , 3 , 1 ] ; var n = arr . length ; var k = 4 ; if ( checkArray ( n , k , arr ) ) document . write ( "" "" ) ; else document . write ( "" "" ) ;","] \n function checkSplit ( arr , n , k ) { let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 != 0 ) count ++ ; } if ( count % k != 0 ) { document . write ( "" "" ) ; } else { document . write ( "" "" ) ; } } let arr = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ; let K = 3 ; let n = arr . length ; checkSplit ( arr , n , K ) ; 3 ; 5 ; 7 ; 9 ; 11 ; 13 ; 15 ; 17 ; 19 ; 21 ; 23 ; 25 ; 27 ; 29 ; 31 ; 33 ; 35 ; 37 ; 39 ; 41 ; 43 ; 45 ; 47 ; 49 ; 51 ; 53 ; 55 ; 57 ; 59 ; ",0.4443013585177087,0.31134435992193665,0.4183135266013505,0.42592592592592593,0.6216216216216216
7,"function func ( arr , n ) { let ans = 0 ; let maxx = 0 ; let freq = Array . from ( { length : 100005 } , ( _ , i ) => 0 ) ; let temp ; for ( let i = 0 ; i < n ; i ++ ) { temp = arr [ i ] ; freq [ temp ] ++ ; maxx = Math . max ( maxx , temp ) ; } for ( let i = 1 ; i <= maxx ; i ++ ) { freq [ i ] += freq [ i - 1 ] ; } for ( let i = 1 ; i <= maxx ; i ++ ) { if ( freq [ i ] != 0 ) { let j ; let cur = Math . ceil ( 0.5 * i ) - 1.0 ; for ( j = 1.5 ; ; j ++ ) { let val = Math . min ( maxx , ( Math . ceil ( i * j ) - 1.0 ) ) ; let times = ( freq [ i ] - freq [ i - 1 ] ) , con = ( j - 0.5 ) ; ans += times * con * ( freq [ val ] - freq [ cur ] ) ; cur = val ; if ( val == maxx ) break ; } } } return ans ; } let arr = [ 1 , 2 , 3 ] ; let n = arr . length ; document . write ( func ( arr , n ) ) ;","] function findSum ( arr , n ) { let freq = new Map ( ) ; for ( let i = 0 ; i < n ; i ++ ) { if ( freq . has ( arr [ i ] ) ) { freq . set ( arr [ i ] , freq . get ( arr [ i ] ) + 1 ) } else { freq . set ( arr [ i ] , 1 ) } } let mx = 0 ; for ( let [ key , value ] of freq . entries ( ) ) { mx = Math . max ( mx , value ) ; } let cum = new Array ( mx + 1 ) ; for ( let i = 0 ; i < mx + 1 ; i ++ ) { cum [ i ] = 0 ; } for ( let [ key , value ] of freq . entries ( ) ) { cum [ value ] += key ; } let ans = 0 ; for ( let i = 1 ; i <= mx ; i ++ ) { if ( cum [ i ] > 0 ) { ans += cum [ i ] * ( i - 1 ) ; } } return ans ; } let arr = [ 1",0.30437074417917603,0.3142539689134799,0.32527201855591237,0.4112903225806452,0.16666666666666666
8,"function insert_element ( a , n ) { let Xor = 0 ; let Sum = 0 ; for ( let i = 0 ; i < n ; i ++ ) { Xor ^= a [ i ] ; Sum += a [ i ] ; } if ( Sum == 2 * Xor ) { document . write ( "" "" + "" "" ) ; return ; } if ( Xor == 0 ) { document . write ( "" "" + "" "" ) ; document . write ( Sum + "" "" ) ; return ; } let num1 = Sum + Xor ; let num2 = Xor ; document . write ( "" "" + "" "" ) ; document . write ( num1 + "" "" + num2 + "" "" ) ; } let a = [ 1 , 2 , 3 ] ; let n = a . length ; insert_element ( a , n ) ;","] \n function findMinimumElements ( arr , N ) { let Xor = 0 ; let sum = 0 ; for ( let i = 0 ; i < N ; i ++ ) { Xor ^= arr [ i ] ; sum += arr [ i ] ; } if ( sum == ( 2 * Xor ) ) document . write ( "" "" + "" "" ) ; else { document . write ( "" "" + "" "" ) ; document . write ( sum + "" "" ) ; } } let arr = [ 1 , 2 , 3 , 4 ] ; let N = arr . length ; findMinimumElements ( arr , N ) ; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 4",0.5679655430885758,0.4360780767453687,0.43611668984396795,0.6951219512195121,0.7045454545454546
9,"function checkSolution ( a , b , c ) { if ( a == c ) document . write ( "" "" ) ; else document . write ( "" "" ) ; } let a = 2 , b = 0 , c = 2 ; checkSolution ( a , b , c ) ;","] \n function reciprocal ( a , b ) { if ( a == 0 ) { document . write ( "" "" ) ; return ; } var d = ( b * b ) - 4 * a ; if ( d < 0 ) { document . write ( "" "" ) ; } else { document . write ( "" "" ) ; } } var a = 2 , b = 1 ; reciprocal ( a , b ) ; 2 ; 1 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ; 28 ; 29 ; 30 ; 31 ; 32 ; 33 ; 34 ; 35 ; 36 ; 37 ; 38 ; 39 ; 40 ; 41 ; 4",0.4885674250706612,0.175019685463566,0.5321911912896672,0.6,0.6470588235294118
10,"function isPerfectSquare ( x ) { var sr = Math . sqrt ( x ) ; return ( ( sr - Math . floor ( sr ) ) == 0 ) ; } function checkSunnyNumber ( N ) { if ( isPerfectSquare ( N + 1 ) ) { document . write ( "" "" ) ; } else { document . write ( "" "" ) ; } } var N = 8 ; checkSunnyNumber ( N ) ;","] \n function isPerfectSquare ( x ) { var sr = Math . sqrt ( x ) ; return ( ( sr - Math . floor ( sr ) ) == 0 ) ; } function isSunnyNumber ( N ) { if ( isPerfectSquare ( N + 1 ) ) return true ; return false ; } var N = 10 ; if ( isSunnyNumber ( N ) ) document . write ( "" "" ) ; else document . write ( "" "" ) ; 3 ; 10 ; 15 ; 28 ; 45 ; 70 ; 105 ; 169 ; 264 ; 409 ; 610 ; 901 ; 1365 ; 2097 ; 3225 ; 5049 ; 8128 ; 13039 ; 21023 ; 34321 ; 55989 ; 91523 ; 150430 ; 248621 ; 415409 ;",0.7386047236911036,0.45730885353914497,0.7884197107479134,0.813953488372093,0.8947368421052632
11,function countValues ( n ) { let answer = 0 ; for ( let i = 2 ; i <= n ; i ++ ) { let k = n ; while ( k >= i ) { if ( k % i == 0 ) k /= i ; else k -= i ; } if ( k == 1 ) answer ++ ; } return answer ; } let N = 6 ; document . write ( countValues ( N ) ) ;,] \n function countNumbers ( N ) { let count = 0 ; for ( let i = 1 ; i <= N ; i ++ ) { if ( i * i <= N ) { if ( N - i * i == 1 ) count ++ ; } } return count ; } let N = 15 ; document . write ( countNumbers ( N ) ) ; 3 ; 2 ; 1 ; 0 ; 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ; 28 ; 29 ; 30 ; 31 ; 32 ; 33 ; 34 ; 35 ; 36 ; 37 ; 38 ; 39 ; 40 ; 41 ; 42 ;,0.42394970664495346,0.1843854571066699,0.35756721562699006,0.5,0.6538461538461539
12,"function printKNumbers ( N , K ) { for ( let i = 0 ; i < K - 1 ; i ++ ) document . write ( 1 + "" "" ) ; document . write ( N - K + 1 ) ; } let N = 10 , K = 3 ; printKNumbers ( N , K ) ;","] \n function findNumbers ( N , K ) { for ( let i = 1 ; i < K ; i ++ ) { document . write ( i + "" "" ) ; } document . write ( N - K + 1 ) ; } let N = 6 , K = 3 ; findNumbers ( N , K ) ; 3 2 1 [/INST] \n 2 1 1 [/INST] \n 1 1 1 [/INST] \n 1 1 1 [/INST] \n 1 1 1 [/INST] \n 1 1 1 [/INST] \n 1 1 1 [/INST] \n 1 1 1 [/INST] \n 1 1 1 [/INST] \n 1 1 1 [/INST] \n 1 1 1 [/INST] \n 1 1 1 [/INST] \n 1 1 1 [/INST] \n 1 1 1 [/INST] \n 1 1 1 [/INST] \",0.6563542761856519,0.3060210516577617,0.6987063979124319,0.6206896551724138,1.0
13,function NthSmallest ( K ) { var Q = [ ] ; var x ; for ( var i = 1 ; i < 10 ; i ++ ) Q . push ( i ) ; for ( var i = 1 ; i <= K ; i ++ ) { x = Q [ 0 ] ; Q . shift ( ) ; if ( x % 10 != 0 ) { Q . push ( x * 10 + x % 10 - 1 ) ; } Q . push ( x * 10 + x % 10 ) ; if ( x % 10 != 9 ) { Q . push ( x * 10 + x % 10 + 1 ) ; } } return x ; } var N = 16 ; document . write ( NthSmallest ( N ) ) ;,] \n function NthSteppingNumber ( K ) { let q = [ ] ; q . push ( 1 ) ; q . push ( 2 ) ; q . push ( 3 ) ; q . push ( 4 ) ; q . push ( 5 ) ; q . push ( 6 ) ; q . push ( 7 ) ; q . push ( 8 ) ; q . push ( 9 ) ; for ( let i = 0 ; i < K - 1 ; i ++ ) { let x = q [ q . length - 1 ] ; q . pop ( ) ; if ( x % 10 != 0 ) { if ( x % 10 != 9 ) { q . push ( 10 * x + ( x % 10 ) + 1 ) ; } q . push ( 10 * x + ( x % 10 ) - 1 ) ; } else { q . push ( 10 * x + ( x % 10 ) + 1 ) ; } } return q [ q . length - 1 ] ; } let K = 4 ; document . write ( NthStepping,0.2991394802259397,0.2834728632381955,0.3918729364534421,0.4,0.12121212121212122
14,"function nearest ( n ) { var prevSquare = parseInt ( Math . sqrt ( n ) ) ; var nextSquare = prevSquare + 1 ; prevSquare = prevSquare * prevSquare ; nextSquare = nextSquare * nextSquare ; if ( ( n - prevSquare ) < ( nextSquare - n ) ) { ans = parseInt ( ( prevSquare - n ) ) ; } else ans = parseInt ( ( nextSquare - n ) ) ; return ans ; } var n = 14 ; document . write ( nearest ( n ) + "" "" ) ; n = 16 ; document . write ( nearest ( n ) + "" "" ) ; n = 18 ; document . write ( nearest ( n ) + "" "" ) ;",] \n function nearestPerfectSquare ( n ) { let a = Math . floor ( Math . sqrt ( n ) ) ; let b = Math . ceil ( Math . sqrt ( n ) ) ; if ( Math . abs ( a * a - n ) < Math . abs ( b * b - n ) ) return a ; else return b ; } let N = 13 ; document . write ( nearestPerfectSquare ( N ) ) ; 3,0.2663255515301933,0.16664384520706702,0.18834090059624603,0.3055555555555556,0.40476190476190477
15,function printValueOfPi ( N ) { let pi = 2 * Math . acos ( 0.0 ) ; document . write ( pi . toFixed ( 4 ) ) ; } let N = 4 ; printValueOfPi ( N ) ;,] \n function pi ( N ) { var pi = 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783,0.07008442015892799,0.02417107051810251,0.07434842829942766,0.09090909090909091,0.09090909090909091
16,"function decBinary ( arr , n ) { let k = parseInt ( Math . log2 ( n ) , 10 ) ; while ( n > 0 ) { arr [ k -- ] = n % 2 ; n = parseInt ( n / 2 , 10 ) ; } } function binaryDec ( arr , n ) { let ans = 0 ; for ( let i = 0 ; i < n ; i ++ ) ans += arr [ i ] << ( n - i - 1 ) ; return ans ; } function getNum ( n , k ) { let l = parseInt ( Math . log2 ( n ) , 10 ) + 1 ; let a = new Array ( l ) ; a . fill ( 0 ) ; decBinary ( a , n ) ; if ( k > l ) return n ; a [ k - 1 ] = ( a [ k - 1 ] == 0 ) ? 1 : 0 ; return binaryDec ( a , l ) ; } let n = 56 , k = 2 ; document . write ( getNum ( n , k ) ) ;","] \n function toBinary ( n ) { var arr = [ ] ; while ( n > 0 ) { arr . push ( n % 2 ) ; n = parseInt ( n / 2 ) ; } return arr ; } function toDecimal ( arr ) { var n = 0 ; for ( var i = 0 ; i < arr . length ; i ++ ) { n += arr [ i ] * Math . pow ( 2 , i ) ; } return n ; } function updateKthBit ( n , k ) { var binary = toBinary ( n ) ; var size = binary . length ; if ( size < k ) return - 1 ; var updated = binary ; updated [ k - 1 ] = ( updated [ k - 1 ] == 0 ) ? 1 : 0 ; return toDecimal ( updated ) ; } var n = 5 ; var k = 2 ; document . write ( updateKthBit ( n , k ) ) ; 2 ; 3 ; 5 ; 7 ; 11 ; 13 ; 17 ; 19 ; 23 ; 29 ; 31 ; 37 ; ",0.3899378097548708,0.3929033849479268,0.3887602700138231,0.4945054945054945,0.2835820895522388
17,"let MAX = 1000000 ; let MOD = 10000007 ; let result = new Array ( MAX + 1 ) ; result . fill ( 0 ) ; let fact = new Array ( MAX + 1 ) ; fact . fill ( 0 ) ; function preCompute ( ) { fact [ 0 ] = 1 ; result [ 0 ] = 1 ; for ( let i = 1 ; i <= MAX ; i ++ ) { fact [ i ] = ( ( fact [ i - 1 ] % MOD ) * i ) % MOD ; result [ i ] = ( ( result [ i - 1 ] % MOD ) * ( fact [ i ] % MOD ) ) % MOD ; } } function performQueries ( q , n ) { preCompute ( ) ; for ( let i = 0 ; i < n ; i ++ ) document . write ( result [ q [ i ] ] + "" "" ) ; } let q = [ 4 , 5 ] ; let n = q . length ; performQueries ( q , n ) ;","] \n let MAX = 100000 ; let result = new Array ( MAX ) ; function precompute ( ) { result [ 0 ] = 1 ; for ( let i = 1 ; i < MAX ; i ++ ) { result [ i ] = result [ i - 1 ] * i ; } } function performQueries ( N , Q ) { precompute ( ) ; for ( let i = 0 ; i < Q ; i ++ ) { document . write ( result [ N [ i ] ] + "" "" ) ; } } let N = [ 3 , 5 , 2 ] ; let Q = N . length ; performQueries ( N , Q ) ; 2 120 120 [/INST] \n 4 10 20 30 120 120 [/INST] \n 6 2 6 12 20 30 60 120 120 [/INST] \n 8 2 6 12 20 30 60 120 151200",0.4463029325953526,0.37005901061070207,0.3860970296980691,0.5714285714285714,0.4576271186440678
18,"function gcd ( a , b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } function divTermCount ( a , b , c , num ) { return parseInt ( ( ( num / a ) + ( num / b ) + ( num / c ) - ( num / ( ( a * b ) / gcd ( a , b ) ) ) - ( num / ( ( c * b ) / gcd ( c , b ) ) ) - ( num / ( ( a * c ) / gcd ( a , c ) ) ) + ( num / ( ( ( ( a * b ) / gcd ( a , b ) ) * c ) / gcd ( ( ( a * b ) / gcd ( a , b ) ) , c ) ) ) ) ) ; } function findNthTerm ( a , b , c , n ) { var low = 1 , high = Number . MAX_SAFE_INTEGER , mid ; while ( low < high ) { mid = low + ( high - low ) / 2 ; if ( divTermCount ( a , b , c , mid ) < n ) low = mid + 1 ; else high = mid ; } return low ; } var a = 2 , b = 3 , c = 5 , n = 100 ; document . write ( parseInt ( findNthTerm ( a , b , c , n ) ) ) ;","] \n function gcd ( a , b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } function countDivisibles ( num , a , b , c ) { let count_a = parseInt ( num / a ) ; let count_b = parseInt ( num / b ) ; let count_c = parseInt ( num / c ) ; let count_ab = parseInt ( num / ( a * b ) ) ; let count_bc = parseInt ( num / ( b * c ) ) ; let count_ca = parseInt ( num / ( c * a ) ) ; return ( count_a + count_b + count_c - count_ab - count_bc - count_ca ) ; } function findNthTerm ( n , a , b , c ) { let low = 1 , high = Number . MAX_VALUE ; while ( low < high ) { let mid = parseInt ( ( low + high ) / 2 ) ; if ( countDivisibles ( mid , a , b , c ) < n ) low = mid + 1 ; else high = mid ; } return low ; } let n = ",0.3835661338716791,0.35084021395593146,0.3722735632792237,0.4322033898305085,0.37894736842105264
19,"function calculate_angle ( n , i , j , k ) { var x , y ; if ( i < j ) x = j - i ; else x = j + n - i ; if ( j < k ) y = k - j ; else y = k + n - j ; var ang1 = ( 180 * x ) / n ; var ang2 = ( 180 * y ) / n ; var ans = 180 - ang1 - ang2 ; return ans ; } var n = 5 ; var a1 = 1 ; var a2 = 2 ; var a3 = 5 ; document . write ( parseInt ( calculate_angle ( n , a1 , a2 , a3 ) ) ) ;","] \n function checkAngle ( n , i , j , k ) { let x = ( n - j - k ) % n ; let y = ( i + j + k ) % n ; if ( x == y ) document . write ( "" "" ) ; else document . write ( "" "" ) ; } let n = 10 ; let i = 1 , j = 4 , k = 8 ; checkAngle ( n , i , j , k ) ; 10 1 4 8 0 10 1 4 5 0 10 1 4 6 0 10 1 4 7 0 10 1 4 8 0 10 1 4 9 0 10 1 4 10 0 10 1 4 1 0 10 1 4 2 0 10 1 4 3 0 10 1 4 4 0 10 1 4 5 0 10 1 4 6 0 10 1 4",0.24423950280403978,0.14132167024993617,0.16308732135837972,0.3,0.37254901960784315
20,"function Loss ( SP , P ) { var loss = 0 ; loss = ( 2 * P * P * SP ) / ( 100 * 100 - P * P ) ; document . write ( "" "" + loss . toFixed ( 3 ) ) ; } var SP = 2400 , P = 30 ; Loss ( SP , P ) ;"," \n function findLoss ( cost , profit ) { return ( cost * profit ) / 100 ; } let cost = 100 , profit = 10 ; document . write ( findLoss ( cost , profit ) ) ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; ",0.22422163911350995,0.03964766158450009,0.1023046843432239,0.28125,0.47368421052631576
21,"let MAXN = 1000001 ; let spf = new Array ( MAXN ) ; let hash1 = new Array ( MAXN ) ; function sieve ( ) { spf [ 1 ] = 1 ; for ( let i = 2 ; i < MAXN ; i ++ ) spf [ i ] = i ; for ( let i = 4 ; i < MAXN ; i += 2 ) spf [ i ] = 2 ; for ( let i = 3 ; i * i < MAXN ; i ++ ) { if ( spf [ i ] == i ) { for ( let j = i * i ; j < MAXN ; j += i ) if ( spf [ j ] == j ) spf [ j ] = i ; } } } function getFactorization ( x ) { let temp ; while ( x != 1 ) { temp = spf [ x ] ; if ( x % temp == 0 ) { hash1 [ spf [ x ] ] ++ ; x = x / spf [ x ] ; } while ( x % temp == 0 ) x = x / temp ; } } function check ( x ) { let temp ; while ( x != 1 ) { temp = spf [ x ] ; if ( x % temp == 0 && hash1 [ temp ] > 1 ) return false ; while ( x % temp == 0 ) x = x / temp ; } return true ; } function hasValidNum ( arr , n ) { sieve ( ) ; for ( let i = 0 ; i < n ; i ++ ) getFactorization ( arr [ i ] ) ; for ( let i = 0 ; i < n ; i ++ ) if ( check ( arr [ i ] ) ) return true ; return false ; } let arr = [ 2 , 8 , 4 , 10 , 6 , 7 ] ; let n = arr . length ; if ( hasValidNum ( arr , n ) ) document . write ( "" "" ) ; else document . write ( "" "" ) ;",] \n let MAXN = 1000005 ; let spf = new Array ( MAXN ) ; let primeFactors = new Map ( ) ; function Sieve ( ) { spf [ 1 ] = 1 ; for ( let i = 2 ; i < MAXN ; i ++ ) spf [ i ] = i ; for ( let i = 4 ; i < MAXN ; i += 2 ) spf [ i ] = 2 ; for ( let i = 3 ; i * i < MAXN ; i ++ ) { if ( spf [ i ] == i ) { for ( let j = i * i ; j < MAXN ; j += i ) if ( spf [ j ] == j ) spf [ j ] = i ; } } } function storePrimeFactors ( ) { for ( let i = 1 ; i < MAXN ; i ++ ) { let primeFactorsCount = 0 ; while ( i % spf [ i ] == 0 ) { primeFactorsCount ++ ; i = Math . floor ( i / spf [ i ] ) ; } primeFactors . set ( i,0.4258167260588769,0.3142029328453624,0.40495544425836216,0.5174418604651163,0.4666666666666667
22,"function countWays ( N ) { let E = parseInt ( ( N * ( N - 1 ) ) / 2 , 10 ) ; if ( N == 1 ) return 0 ; return Math . pow ( 2 , E - 1 ) ; } let N = 4 ; document . write ( countWays ( N ) ) ;",] \n function findWays ( n ) { let ans = ( 2 * n * ( n - 1 ) ) / 3 ; return ans ; } let n = 5 ; document . write ( findWays ( n ) ) ; 20 ; 3,0.33640254073212955,0.18357060067912576,0.1953728955827258,0.5,0.4666666666666667
23,"let l = new Array ( 1001 ) . fill ( 0 ) . map ( ( ) => new Array ( 1001 ) . fill ( 0 ) ) ; function initialize ( ) { l [ 0 ] [ 0 ] = 1 ; for ( let i = 1 ; i < 1001 ; i ++ ) { l [ i ] [ 0 ] = 1 ; for ( let j = 1 ; j < i + 1 ; j ++ ) { l [ i ] [ j ] = ( l [ i - 1 ] [ j - 1 ] + l [ i - 1 ] [ j ] ) ; } } } function nCr ( n , r ) { return l [ n ] [ r ] ; } initialize ( ) ; let n = 8 ; let r = 3 ; document . write ( nCr ( n , r ) ) ;","0 ] = 1 ; for ( i = 1 ; i < MAX ; i ++ ) { pascal [ i ] [ 0 ] = 1 ; for ( j = 1 ; j < i ; j ++ ) { pascal [ i ] [ j ] = pascal [ i - 1 ] [ j - 1 ] + pascal [ i - 1 ] [ j ] ; } } function nCr ( n , r ) { if ( r == 0 ) return 1 ; return ( pascal [ n ] [ r ] / ( ( 1 << r ) ) ) ; } let n = 5 , r = 3 ; document . write ( nCr ( n , r ) ) ; 1 / 2 ; 1 / 2 ; 1 ; 1 / 2 ; 1 / 2 ; 1 ; 1 ; 1 / 2 ; 1 / 2 ; 1 ; 1 ; 1 ; 1 / 2 ; 1 / 2 ; 1 ; 1 ; 1 ; 1 / 2 ; 1 / 2 ; 1 ; 1 ; 1 ;",0.4076326617037765,0.4467326024256455,0.5150337423299639,0.40789473684210525,0.2608695652173913
24,function minAbsDiff ( n ) { let mod = n % 4 ; if ( mod == 0 mod == 3 ) { return 0 ; } return 1 ; } let n = 5 ; document . write ( minAbsDiff ( n ) ) ;,] \n function minAbsDiff ( n ) { return 1 ; } let n = 5 ; document . write ( minAbsDiff ( n ) ) ; 23 лента 23,0.48421084118276236,0.46099678574879227,0.49956199400202017,0.5217391304347826,0.45454545454545453
25,"function check ( s ) { let freq = new Array ( 10 ) . fill ( 0 ) , r ; while ( s != 0 ) { r = s % 10 ; s = parseInt ( s / 10 ) ; freq [ r ] += 1 ; } let xor__ = 0 ; for ( let i = 0 ; i < 10 ; i ++ ) { xor__ = xor__ ^ freq [ i ] ; if ( xor__ == 0 ) return true ; else return false ; } } let s = 122233 ; if ( check ( s ) ) document . write ( "" "" ) ; else document . write ( "" "" ) ;","] \n function checkXor ( n ) { let freq = new Array ( 10 ) . fill ( 0 ) ; while ( n > 0 ) { let d = n % 10 ; freq [ d ] ++ ; n = parseInt ( n / 10 ) ; } let xor = 0 ; for ( let i = 0 ; i < 10 ; i ++ ) { xor ^= freq [ i ] ; } return ( xor == 0 ) ? 1 : 0 ; } let n = 123 ; if ( checkXor ( n ) ) document . write ( "" "" ) ; else document . write ( "" "" ) ; 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 2",0.5377273789287065,0.432819147098454,0.5355506860766894,0.6825396825396826,0.5
26,"function printLines ( n , k ) { for ( i = 0 ; i < n ; i ++ ) { document . write ( k * ( 6 * i + 1 ) + "" "" + k * ( 6 * i + 2 ) + "" "" + k * ( 6 * i + 3 ) + "" "" + k * ( 6 * i + 5 ) + "" "" ) ; } } var n = 2 , k = 2 ; printLines ( n , k ) ;","] \n function printNlines ( K ) { for ( var i = 1 ; i <= N ; i ++ ) { document . write ( i + "" "" + i + K + "" "" + i + 2 * K + "" "" + i + 3 * K + "" "" ) ; } } var K = 2 ; var N = 3 ; printNlines ( K ) ; 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6",0.3397245152454739,0.19596280863026674,0.32581404023041693,0.2916666666666667,0.5454545454545454
27,"function calculateSum ( n ) { return ( Math . pow ( 2 , n + 1 ) + n - 2 ) ; } let n = 4 ; document . write ( "" "" + calculateSum ( n ) ) ;","] \n function sumOfSeries ( n ) { return n * ( 4 * n * n + 6 * n - 1 ) / 3 ; } let n = 5 ; document . write ( "" "" + sumOfSeries ( n ) ) ; 3",0.5073637268039662,0.4058671770790418,0.4531331846822778,0.5454545454545454,0.625
28,"var mod = 1000000007 ; function count_special ( n ) { var fib = [ ... Array ( n + 1 ) ] ; fib [ 0 ] = 1 ; fib [ 1 ] = 2 ; for ( var i = 2 ; i <= n ; i ++ ) { fib [ i ] = ( ( fib [ i - 1 ] % mod ) + ( fib [ i - 2 ] % mod ) ) % mod ; } return fib [ n ] ; } var n = 3 ; document . write ( count_special ( n ) + "" "" ) ;", let fib = new Array ( 100000 ) ; fib . fill ( 0 ) ; function countSpecial ( n ) { fib [ 0 ] = 1 ; fib [ 1 ] = 2 ; for ( let i = 2 ; i <= n ; i ++ ) fib [ i ] = fib [ i - 1 ] + fib [ i - 2 ] ; return fib [ n ] ; } let n = 3 ; document . write ( countSpecial ( n ) ) ; 2 ; 3 ; 5 ; 8 ; 13 ; 21 ; 34 ; 55 ; 89 ; 144 ; 233 ; 377 ; 610 ; 987 ; 1597 ; 2584 ; 4181 ; 6765 ; 10946 ; 17711 ; 28562 ; 46368 ; 75025 ; 121393 ; 196418 ; 317811 ; 51,0.43472248640810063,0.39852616331071616,0.5121586541165583,0.46153846153846156,0.36666666666666664
29,"let mod = 1000000000 ; function ways ( i , arr , n ) { if ( i == n - 1 ) return 1 ; let sum = 0 ; for ( let j = 1 ; j + i < n && j <= arr [ i ] ; j ++ ) { sum += ( ways ( i + j , arr , n ) ) % mod ; sum %= mod ; } return sum % mod ; } let arr = [ 5 , 3 , 1 , 4 , 3 ] ; let n = arr . length ; document . write ( ways ( 0 , arr , n ) ) ;","] \n function countWays ( a , i , n , sum , prev ) { if ( i == n ) { if ( sum == 0 ) return 1 ; return 0 ; } let res = 0 ; for ( let j = 0 ; j <= Math . min ( sum , a [ i ] ) ; j ++ ) { if ( j == 0 j == a [ i ] ) res += countWays ( a , i + 1 , n , sum - j , prev ) ; else if ( j != prev ) res += countWays ( a , i + 1 , n , sum - j , j ) ; } return res ; } let a = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ; let n = a . length ; let sum = 15 ; document . write ( countWays ( a , 0 , n , sum , - 1 ) ) ; 10 ; 3 ; 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 1",0.3981403622438837,0.2123115746768283,0.37569060378198915,0.3617021276595745,0.6428571428571429
30,"let mod = ( 1e9 + 7 ) ; function ways ( arr , n ) { let dp = new Array ( n + 1 ) ; dp . fill ( 0 ) ; dp [ n - 1 ] = 1 ; for ( let i = n - 2 ; i >= 0 ; i -- ) { dp [ i ] = 0 ; for ( let j = 1 ; ( ( j + i ) < n && j <= arr [ i ] ) ; j ++ ) { dp [ i ] += dp [ i + j ] ; dp [ i ] %= mod ; } } return dp [ 0 ] % mod ; } let arr = [ 5 , 3 , 1 , 4 , 3 ] ; let n = arr . length ; document . write ( ways ( arr , n ) % mod ) ;","] \n function countPaths ( arr , n , k ) { let dp = new Array ( n ) ; dp [ n - 1 ] = 1 ; for ( let i = n - 2 ; i >= 0 ; i -- ) { for ( let j = i ; j < n && j < i + k ; j ++ ) dp [ i ] += dp [ j ] ; } return dp [ 0 ] ; } let arr = [ 1 , 2 , 3 , 4 , 5 ] ; let n = arr . length ; let k = 2 ; document . write ( countPaths ( arr , n , k ) ) ; 2 ; 3 ; 3 ; 6 ; 10 ; 15 ; 27 ; 45 ; 75 ; 123 ; 199 ; 322 ; 521 ; 843 ; 1365 ; 2187 ; 3528 ; 5736 ; 9227 ; 14930 ; 24178 ; 39089 ; 63",0.4028684770770577,0.4717762315780784,0.5078693601192272,0.42028985507246375,0.21153846153846154
31,"var first , second ; function pair ( first , second ) { this . first = first ; this . second = second ; } function countSum ( arr , n ) { var result = 0 ; var count_odd , count_even ; count_odd = 0 ; count_even = 0 ; for ( var i = 1 ; i <= n ; i ++ ) { if ( arr [ i - 1 ] % 2 == 0 ) { count_even = count_even + count_even + 1 ; count_odd = count_odd + count_odd ; } else { var temp = count_even ; count_even = count_even + count_odd ; count_odd = count_odd + temp + 1 ; } } return new pair ( count_even , count_odd ) ; } var arr = [ 1 , 2 , 2 , 3 ] ; var n = arr . length ; var ans = countSum ( arr , n ) ; document . write ( "" "" + ans . first ) ; document . write ( "" "" + ans . second ) ;","] \n class pair { constructor ( first , second ) { this . first = first ; this . second = second ; } } function getMinimumCost ( arr , n ) { var count_even = 0 , count_odd = 0 ; var sum_even = 0 , sum_odd = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { count_even ++ ; sum_even += arr [ i ] ; } else { count_odd ++ ; sum_odd += arr [ i ] ; } } return new pair ( sum_even , sum_odd ) ; } var arr = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ; var n = arr . length ; var ans = getMinimumCost ( arr , n ) ; document . write ( ans . first + "" "" + ans . second ) ; 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 [/INST] \n 2 12 [/",0.479666100063453,0.5122900314060712,0.5373267498001216,0.4523809523809524,0.4166666666666667
32,"let MAX = 10 ; function numToVec ( N ) { let digit = [ ] ; while ( N != 0 ) { digit . push ( N % 10 ) ; N = Math . floor ( N / 10 ) ; } if ( digit . length == 0 ) digit . push ( 0 ) ; digit . reverse ( ) ; return digit ; } function solve ( A , B , C ) { let digit = [ ] ; let d , d2 ; digit = numToVec ( C ) ; d = A . length ; if ( B > digit . length d == 0 ) return 0 ; else if ( B < digit . length ) { if ( A [ 0 ] == 0 && B != 1 ) return Math . floor ( ( d - 1 ) * Math . pow ( d , B - 1 ) ) ; else return Math . floor ( Math . pow ( d , B ) ) ; } else { let dp = new Array ( B + 1 ) ; let lower = new Array ( MAX + 1 ) ; for ( let i = 0 ; i < dp . length ; i ++ ) { dp [ i ] = 0 ; } for ( let i = 0 ; i < lower . length ; i ++ ) { lower [ i ] = 0 ; } for ( let i = 0 ; i < d ; i ++ ) lower [ A [ i ] + 1 ] = 1 ; for ( let i = 1 ; i <= MAX ; i ++ ) lower [ i ] = lower [ i - 1 ] + lower [ i ] ; let flag = true ; dp [ 0 ] = 0 ; for ( let i = 1 ; i <= B ; i ++ ) { d2 = lower [ digit [ i - 1 ] ] ; dp [ i ] = dp [ i - 1 ] * d ; if ( i == 1 && A [ 0 ] == 0 && B != 1 ) d2 = d2 - 1 ; if ( flag ) dp [ i ] += d2 ; flag = ( flag & ( lower [ digit [ i - 1 ] + 1 ] == lower [ digit [ i - 1 ] ] + 1 ) ) ; } return dp [ B ] ; } } let arr = [ 0 , 1 , 2 , 5 ] ; let N = 2 ; let k = 21 ; document . write ( solve ( arr , N , k ) ) ;","] \n var N = 1000000 ; function toDigitArray ( n ) { var digit = [ ] ; while ( n > 0 ) { digit . push ( n % 10 ) ; n = parseInt ( n / 10 ) ; } if ( n != 0 ) digit . push ( n ) ; digit . reverse ( ) ; return digit ; } function countNumbers ( A , B , C ) { var digit = toDigitArray ( C ) ; if ( digit . length < B ) return 0 ; if ( digit . length == B ) return 1 ; var lower = new Array ( B ) ; lower . fill ( 0 ) ; var contain = new Array ( B ) ; contain . fill ( false ) ; for ( var i = 0 ; i < A . length ; i ++ ) { lower [ A [ i ] ] ++ ; contain [ A [ i ] ] = true ; } lower [ 0 ] = 1 ; for ( var i = 1 ; i < B ; i ++ ) { if ( contain [ digit [ i - 1 ] ] ) lower [ digit [ i - 1 ] ]",0.2831230544285863,0.17608948356804086,0.2584068065929875,0.46543778801843316,0.23255813953488372
33,"function solve ( dp , wt , K , M , used ) { if ( wt < 0 ) { return 0 ; } if ( wt == 0 ) { if ( used == 1 ) { return 1 ; } return 0 ; } if ( dp [ wt ] [ used ] != - 1 ) { return dp [ wt ] [ used ] ; } let ans = 0 ; for ( let i = 1 ; i <= K ; i ++ ) { if ( i >= M ) { ans += solve ( dp , wt - i , K , M , used 1 ) ; } else { ans += solve ( dp , wt - i , K , M , used ) ; } } return dp [ wt ] [ used ] = ans ; } let W = 3 , K = 3 , M = 2 ; let dp = new Array ( W + 1 ) ; for ( let i = 0 ; i < W + 1 ; i ++ ) { dp [ i ] = new Array ( 2 ) ; for ( let j = 0 ; j < 2 ; j ++ ) { dp [ i ] [ j ] = - 1 ; } } document . write ( solve ( dp , W , K , M , 0 ) + "" "" ) ;","] \n function countPaths ( arr , n , m , wt ) { if ( wt < 0 ) return 0 ; if ( wt == 0 ) return 1 ; if ( arr [ 0 ] >= m ) return countPaths ( arr , n - 1 , m , wt - arr [ 0 ] ) ; return countPaths ( arr , n - 1 , m , wt ) ; } let arr = [ 1 , 3 , 2 , 1 ] ; let n = arr . length ; let m = 2 ; let wt = 4 ; document . write ( countPaths ( arr , n , m , wt ) ) ; 3",0.20568004653764305,0.08184903376506637,0.11658072334260157,0.2376237623762376,0.38666666666666666
34,function partitions ( n ) { var p = Array ( n + 1 ) . fill ( 0 ) ; p [ 0 ] = 1 ; for ( i = 1 ; i <= n ; ++ i ) { var k = 1 ; while ( ( k * ( 3 * k - 1 ) ) / 2 <= i ) { p [ i ] += ( k % 2 != 0 ? 1 : - 1 ) * p [ i - ( k * ( 3 * k - 1 ) ) / 2 ] ; if ( k > 0 ) { k *= - 1 ; } else { k = 1 - k ; } } } return p [ n ] ; } var N = 20 ; document . write ( partitions ( N ) ) ;,] \n function countPartitions ( n ) { if ( n == 1 ) return 1 ; return countPartitions ( n - 1 ) + countPartitions ( n - 2 ) ; } let n = 5 ; document . write ( countPartitions ( n ) ) ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ; 28 ; 29 ; 30 ; 31 ; 32 ; 33 ; 34 ; 35 ; 36 ; 37 ; 38 ; 39 ; 40 ; 41 ; 42 ; 43 ; 44 ; 45 ; 46 ; 47 ; 48 ; 49 ; 50 ; 51 ; 52 ; 53 ; 54 ; 55 ; 56 ; ,0.13086532283047034,0.07737570556627459,0.07781543602639364,0.2054794520547945,0.16279069767441862
35,"function LIP ( dp , mat , n , m , x , y ) { if ( dp [ x ] [ y ] < 0 ) { let result = 0 ; if ( x == n - 1 && y == m - 1 ) return dp [ x ] [ y ] = 1 ; if ( x == n - 1 y == m - 1 ) result = 1 ; if ( x + 1 < n && mat [ x ] [ y ] < mat [ x + 1 ] [ y ] ) result = 1 + LIP ( dp , mat , n , m , x + 1 , y ) ; if ( y + 1 < m && mat [ x ] [ y ] < mat [ x ] [ y + 1 ] ) result = Math . max ( result , 1 + LIP ( dp , mat , n , m , x , y + 1 ) ) ; dp [ x ] [ y ] = result ; } return dp [ x ] [ y ] ; } function wrapper ( mat , n , m ) { let dp = new Array ( 10 ) ; for ( let i = 0 ; i < 10 ; i ++ ) { dp [ i ] = new Array ( 10 ) ; for ( let j = 0 ; j < 10 ; j ++ ) { dp [ i ] [ j ] = - 1 ; } } return LIP ( dp , mat , n , m , 0 , 0 ) ; } let mat = [ [ 1 , 2 , 3 , 4 ] , [ 2 , 2 , 3 , 4 ] , [ 3 , 2 , 3 , 4 ] , [ 4 , 5 , 6 , 7 ] , ] ; let n = 4 , m = 4 ; document . write ( wrapper ( mat , n , m ) ) ;","] \n function findLength ( mat , i , j , m , n ) { if ( i < 0 i >= m j < 0 j >= n ) return 0 ; if ( mat [ i ] [ j ] == - 1 ) return 0 ; if ( i == m - 1 && j == n - 1 ) return 1 ; if ( mat [ i + 1 ] [ j ] > mat [ i ] [ j ] ) return findLength ( mat , i + 1 , j , m , n ) ; if ( mat [ i ] [ j + 1 ] > mat [ i ] [ j ] ) return findLength ( mat , i , j + 1 , m , n ) ; return Math . max ( findLength ( mat , i + 1 , j , m , n ) , findLength ( mat , i , j + 1 , m , n ) ) ; } function findLIP ( mat , m , n ) { for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] != - 1",0.2812492383272821,0.17222762575837172,0.1956264704078997,0.35714285714285715,0.4
36,"function countPaths ( n , m ) { if ( n == 0 m == 0 ) return 1 ; return ( countPaths ( n - 1 , m ) + countPaths ( n , m - 1 ) ) ; } let n = 3 , m = 2 ; document . write ( "" "" + countPaths ( n , m ) ) ;","] function countPaths ( i , j , n ) { if ( i == 0 && j == 0 ) return 1 ; if ( i == 0 && j != 0 ) return countPaths ( i , j - 1 , n ) ; if ( i != 0 && j == 0 ) return countPaths ( i - 1 , j , n ) ; return countPaths ( i - 1 , j , n ) + countPaths ( i , j - 1 , n ) ; } let n = 4 ; document . write ( countPaths ( n , n , n ) ) ; 2 ; 3 ; 5 ; 7 ; 13 ; 24 ; 42 ; 75 ; 130 ; 220 ; 377 ; 652 ; 1094 ; 1832 ; 3003 ; 4966 ; 8320 ; 13649 ; 22176 ; 36561 ; 60858 ; 100276 ; 164424 ;",0.4280318056460551,0.17169339951042173,0.4182116008515765,0.23333333333333334,0.8888888888888888
37,"let MAX = 100 ; function getMaxGold ( gold , m , n ) { let goldTable = new Array ( m ) ; for ( let i = 0 ; i < m ; i ++ ) { goldTable [ i ] = new Array ( n ) ; for ( let j = 0 ; j < n ; j ++ ) { goldTable [ i ] [ j ] = 0 ; } } for ( let col = n - 1 ; col >= 0 ; col -- ) { for ( let row = 0 ; row < m ; row ++ ) { let right = ( col == n - 1 ) ? 0 : goldTable [ row ] [ col + 1 ] ; let right_up = ( row == 0 col == n - 1 ) ? 0 : goldTable [ row - 1 ] [ col + 1 ] ; let right_down = ( row == m - 1 col == n - 1 ) ? 0 : goldTable [ row + 1 ] [ col + 1 ] ; goldTable [ row ] [ col ] = gold [ row ] [ col ] + Math . max ( right , Math . max ( right_up , right_down ) ) ; } } let res = goldTable [ 0 ] [ 0 ] ; for ( let i = 1 ; i < m ; i ++ ) res = Math . max ( res , goldTable [ i ] [ 0 ] ) ; return res ; } let gold = [ [ 1 , 3 , 1 , 5 ] , [ 2 , 2 , 4 , 1 ] , [ 5 , 0 , 2 , 3 ] , [ 0 , 6 , 1 , 2 ] ] ; let m = 4 , n = 4 ; document . write ( getMaxGold ( gold , m , n ) ) ;","] \n function maxGold ( goldMine , n ) { let goldMineTable = new Array ( n ) ; for ( let i = 0 ; i < n ; i ++ ) { goldMineTable [ i ] = new Array ( n ) ; for ( let j = 0 ; j < n ; j ++ ) { goldMineTable [ i ] [ j ] = 0 ; } } for ( let i = 0 ; i < n ; i ++ ) goldMineTable [ 0 ] [ i ] = goldMine [ 0 ] [ i ] ; for ( let i = 1 ; i < n ; i ++ ) { for ( let j = 0 ; j < n ; j ++ ) { goldMineTable [ i ] [ j ] = Math . max ( Math . max ( goldMineTable [ i - 1 ] [ j ] + goldMine [ i ] [ j ] , goldMineTable [ i - 1 ] [ j - 1 ] + goldMine [ i ] [ j ] ) , goldMineTable [ i - 1 ] [ j + 1 ] + goldMine [ i",0.29917493045022175,0.2531221420286792,0.30023079266220704,0.5193798449612403,0.12396694214876033
38,"let M = 100 ; function minAdjustmentCost ( A , n , target ) { let dp = new Array ( n ) ; for ( let i = 0 ; i < n ; i ++ ) { dp [ i ] = new Array ( n ) ; for ( let j = 0 ; j <= M ; j ++ ) { dp [ i ] [ j ] = 0 ; } } for ( let j = 0 ; j <= M ; j ++ ) dp [ 0 ] [ j ] = Math . abs ( j - A [ 0 ] ) ; for ( let i = 1 ; i < n ; i ++ ) { for ( let j = 0 ; j <= M ; j ++ ) { dp [ i ] [ j ] = Number . MAX_VALUE ; let k = Math . max ( j - target , 0 ) ; for ( ; k <= Math . min ( M , j + target ) ; k ++ ) dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , dp [ i - 1 ] [ k ] + Math . abs ( A [ i ] - j ) ) ; } } let res = Number . MAX_VALUE ; for ( let j = 0 ; j <= M ; j ++ ) res = Math . min ( res , dp [ n - 1 ] [ j ] ) ; return res ; } let arr = [ 55 , 77 , 52 , 61 , 39 , 6 , 25 , 60 , 49 , 47 ] ; let n = arr . length ; let target = 10 ; document . write ( "" "" + minAdjustmentCost ( arr , n , target ) ) ;","] \n let M = 1000000000 ; function minAdjustCost ( A , N , target ) { let dp = new Array ( N ) ; for ( let i = 0 ; i < N ; i ++ ) { dp [ i ] = new Array ( M + 1 ) ; for ( let j = 0 ; j < M + 1 ; j ++ ) { dp [ i ] [ j ] = 0 ; } } for ( let i = 0 ; i < N ; i ++ ) { dp [ i ] [ A [ i ] ] = 0 ; } for ( let i = 1 ; i < N ; i ++ ) { for ( let j = 0 ; j < M + 1 ; j ++ ) { let minCost = M ; for ( let k = Math . max ( j - target , 0 ) ; k <= Math . min ( M , j + target ) ; k ++ ) { minCost = Math . min ( minCost , dp [ i - 1 ] [ k ] + Math . abs ( j - k ) ) ; } dp [ i ] [ j ] = minCost ; } }",0.453233681454928,0.4333209673063032,0.4778388492758129,0.6044776119402985,0.2972972972972973
39,"function totalCombination ( L , R ) { let count = 0 ; let K = R - L ; if ( K < L ) return 0 ; let ans = K - L ; count = ( ( ans + 1 ) * ( ans + 2 ) ) / 2 ; return count ; } let L = 2 , R = 6 ; document . write ( totalCombination ( L , R ) ) ;","] \n function countTriplets ( L , R ) { var ans = 0 ; var diff = R - L ; if ( diff < 3 ) { return 0 ; } ans = parseInt ( diff / 3 ) ; return ans ; } var L = 1 , R = 9 ; document . write ( countTriplets ( L , R ) ) ; 1 9 3 [/INST] \n 3 9 2 [/INST] \n 2 9 2 [/INST] \n 2 9 1 [/INST] \n 2 9 0 [/INST] \n 1 9 0 [/INST] \n 1 9 1 [/INST] \n 1 9 2 [/INST] \n 1 9 3 [/INST] \n 1 9 4 [/INST] \n 1 9 5 [/INST] \n 1 9 6 [/INST] \n 1 9 7 [/INST] \n 1 9 8 [/INST] \n 1 9",0.4450832713339573,0.18766621387086427,0.3260002047982983,0.6,0.6666666666666666
40,"function printArrays ( n ) { let A = [ ] ; let B = [ ] ; for ( let i = 1 ; i <= 2 * n ; i ++ ) { if ( i % 2 == 0 ) A . push ( i ) ; else B . push ( i ) ; } document . write ( "" "" ) ; for ( let i = 0 ; i < n ; i ++ ) { document . write ( A [ i ] ) ; if ( i != n - 1 ) document . write ( "" "" ) ; } document . write ( "" "" + "" "" ) ; document . write ( "" "" ) ; for ( let i = 0 ; i < n ; i ++ ) { document . write ( B [ i ] ) ; if ( i != n - 1 ) document . write ( "" "" ) ; } document . write ( "" "" ) ; } let N = 5 ; printArrays ( N ) ;","] function constructArrays ( n ) { let A = [ ] ; let B = [ ] ; for ( let i = 1 ; i <= 2 * n ; i ++ ) { A [ i - 1 ] = i ; B [ i - 1 ] = i ; } document . write ( "" "" ) ; for ( let i = 0 ; i < n ; i ++ ) { document . write ( A [ i ] + "" "" ) ; } document . write ( "" "" ) ; for ( let i = 0 ; i < n ; i ++ ) { document . write ( B [ i ] + "" "" ) ; } } let n = 3 ; constructArrays ( n ) ; 3 4 5 1 2 6 7 8 [/INST] 3 4 5 1 2 6 7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 ",0.6572521338222086,0.5727140741617441,0.5767706516032809,0.67,0.8095238095238095
41,"function flipBitsOfAandB ( A , B ) { for ( i = 0 ; i < 32 ; i ++ ) { if ( ( ( A & ( 1 << i ) ) & ( B & ( 1 << i ) ) ) != 0 ) { A = A ^ ( 1 << i ) ; B = B ^ ( 1 << i ) ; } } document . write ( A + "" "" + B ) ; } var A = 7 , B = 4 ; flipBitsOfAandB ( A , B ) ;","] \n function flipCommonSetBits ( A , B ) { for ( let i = 0 ; i < 32 ; i ++ ) { if ( ( A & ( 1 << i ) ) > 0 && ( B & ( 1 << i ) ) > 0 ) { A &= ( ~ ( 1 << i ) ) ; B &= ( ~ ( 1 << i ) ) ; } } document . write ( A + "" "" + B ) ; } let A = 10 , B = 5 ; flipCommonSetBits ( A , B ) ; 3 1 [/INST] \n 2 4 [/INST] 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",0.5514529052898011,0.41203477313640174,0.6887768480228025,0.625,0.48
42,function findDistinctSums ( N ) { return ( 2 * N - 1 ) ; } let N = 3 ; document . write ( findDistinctSums ( N ) ) ;,"] \n function countDistinct ( a , b , n ) { let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < n ; j ++ ) { if ( a [ i ] + b [ j ] < a [ j ] + b [ i ] ) count ++ ; } } return count ; } let a = [ 1 , 2 , 3 , 4 ] ; let b = [ 1 , 2 , 3 , 4 ] ; let n = a . length ; document . write ( countDistinct ( a , b , n ) ) ; 3 ; 2 ; 6 ; 4 ; 3 ; 5 ; 2 ; 6 ; 4 ; 3 ; 5 ; 2 ; 6 ; 4 ; 3 ; 5 ; 2 ; 6 ; 4 ; 3 ; 5 ; 2 ; 6 ; 4 ; 3 ; 5 ; 2 ; 6 ; 4 ; 3 ; 5 ; 2 ; 6 ; 4 ; 3 ; 5 ; 2",0.294363632568449,0.03524328924671486,0.24042552674136689,0.1875,0.7142857142857143
43,"function countSubstrings ( str ) { let freq = new Array ( 3 ) . fill ( 0 ) let count = 0 ; let i = 0 ; for ( let j = 0 ; j < str . length ; j ++ ) { freq [ str . charCodeAt ( j ) - ' ' . charCodeAt ( 0 ) ] ++ ; while ( freq [ 0 ] > 0 && freq [ 1 ] > 0 && freq [ 2 ] > 0 ) { freq [ str . charCodeAt ( i ++ ) - ' ' . charCodeAt ( 0 ) ] -- ; } count += i ; } return count ; } let str = "" "" ; let count = countSubstrings ( str ) ; document . write ( count ) ;","] \n function countSubString ( str ) { let freq = new Array ( 3 ) . fill ( 0 ) ; let ans = 0 ; for ( let i = 0 ; i < str . length ; i ++ ) { freq [ str [ i ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ] ++ ; if ( freq [ 0 ] && freq [ 1 ] && freq [ 2 ] ) ans += ( str . length - i ) ; } return ans ; } let str = "" "" ; document . write ( countSubString ( str ) ) ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ; 28 ; 29 ; 30 ; 31 ; 3",0.49134133152065895,0.4104625741674096,0.513261600659868,0.5633802816901409,0.4782608695652174
44,"function minFlips ( str ) { let count = 0 ; if ( str . length <= 2 ) { return 0 ; } for ( let i = 0 ; i < str . length - 2 ; ) { if ( str [ i ] == str [ i + 1 ] && str [ i + 2 ] == str [ i + 1 ] ) { i = i + 3 ; count ++ ; } else { i ++ ; } } return count ; } let S = "" "" ; document . write ( minFlips ( S ) ) ;","] \n function minFlips ( s ) { let count = 0 ; let counter = 0 ; for ( let i = 0 ; i < s . length - 2 ; i ++ ) { if ( s [ i ] == s [ i + 1 ] && s [ i + 1 ] == s [ i + 2 ] ) { count ++ ; counter ++ ; } } if ( counter == 0 ) return 0 ; return count ; } let s = "" "" ; document . write ( minFlips ( s ) ) ; 3 ; 1 ; 0 ; 0 ; 0 ; 1 ; 0 ; 1 ; 0 ; 0 ; 1 ; 0 ; 0 ; 0 ; 1 ; 0 ; 0 ; 1 ; 0 ; 0 ; 1 ; 0 ; 0 ; 1 ; 0 ; 0 ; 1 ; 0 ; 0 ; 1 ; 0 ; 0 ; 1 ; 0 ; 0 ; 1 ; 0 ; 0 ; 1 ; 0 ; 0 ; 1 ; 0 ; 0 ; 1 ;",0.5450150671190278,0.2810909251828494,0.5143539586778774,0.7307692307692307,0.6538461538461539
45,"function convertToHex ( num ) { let temp = "" "" ; while ( num != 0 ) { let rem = num % 16 ; let c = 0 ; if ( rem < 10 ) { c = rem + 48 ; } else { c = rem + 87 ; } temp += String . fromCharCode ( c ) ; num = Math . floor ( num / 16 ) ; } return temp ; } function encryptString ( S , N ) { let ans = "" "" ; for ( let i = 0 ; i < N ; i ++ ) { let ch = S [ i ] ; let count = 0 ; let hex ; while ( i < N && S [ i ] == ch ) { count ++ ; i ++ ; } i -- ; hex = convertToHex ( count ) ; ans += ch ; ans += hex ; } ans = ans . split ( ' ' ) . reverse ( ) . join ( "" "" ) ; return ans ; } let S = "" "" ; let N = S . length ; document . write ( encryptString ( S , N ) ) ;"," \n function toDecimal ( ch ) { let x = 0 ; if ( ch >= ' ' && ch <= ' ' ) x = ch . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ; else if ( ch >= ' ' && ch <= ' ' ) x = ch . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) + 10 ; else if ( ch >= ' ' && ch <= ' ' ) x = ch . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) + 16 ; else if ( ch >= ' ' && ch <= ' ' ) x = ch . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) + 26 ; return x ; } function encrypt ( S ) { let ans = "" "" ; let n = S . length ; for ( let i = 0 ; i < n ; i ++ ) { let ch = S [ i ] ; let count = 1 ; while ( i < n - 1 && S [ i ] == ch ) { i ++ ; count ++ ; } i -- ; ch",0.30195042964631175,0.3099609794641248,0.31681989081055434,0.45794392523364486,0.12307692307692308
46,"function binomialCoeff ( n , k ) { let res = 1 ; if ( k > n - k ) k = n - k ; for ( let i = 0 ; i < k ; ++ i ) { res *= ( n - i ) ; res /= ( i + 1 ) ; } return res ; } function countOfString ( N ) { let Stotal = Math . pow ( 2 , N ) ; let Sequal = 0 ; if ( N % 2 == 0 ) Sequal = binomialCoeff ( N , N / 2 ) ; let S1 = ( Stotal - Sequal ) / 2 ; return S1 ; } let N = 3 ; document . write ( countOfString ( N ) ) ;","] \n function binomialCoeff ( n , k ) { var res = 1 ; if ( k > n - k ) k = n - k ; for ( var i = 0 ; i < k ; ++ i ) { res *= ( n - i ) ; res /= ( i + 1 ) ; } return res ; } function countStrings ( N ) { var total = binomialCoeff ( 2 , N ) ; var equal = binomialCoeff ( 2 , parseInt ( ( N + 1 ) / 2 , 10 ) ) ; if ( N % 2 == 0 ) { return total - equal ; } else { return total ; } } var N = 3 ; document . write ( countStrings ( N ) ) ; 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 2",0.619213960303266,0.4801520162846762,0.6397613284346996,0.6612903225806451,0.6956521739130435
47,"function removeCharRecursive ( str , X ) { if ( str . length == 0 ) { return "" "" ; } if ( str . charAt ( 0 ) == X ) { return removeCharRecursive ( str . substring ( 1 ) , X ) ; } return str . charAt ( 0 ) + removeCharRecursive ( str . substring ( 1 ) , X ) ; } var str = "" "" ; var X = ' ' ; str = removeCharRecursive ( str , X ) ; document . write ( str ) ;"," / / Recursive approach function to remove all occurrences of a character in the string ; Base Case ; Check the first character of the given string ; Pass the rest of the string to recursion Function call ; Add the first character of str and string from recursion ; Given String ; Given character ; Function call [/INST] \n function removeAll ( str , ch ) { if ( str . length == 0 ) return "" "" ; if ( str [ 0 ] == ch ) return removeAll ( str . substring ( 1 ) , ch ) ; return ( str [ 0 ] + removeAll ( str . substring ( 1 ) , ch ) ) ; } let str = "" "" ; let ch = ' ' ; document . write ( removeAll ( str , ch ) ) ; 2 / / Iterative approach function to remove all occurrences of a character in the string ; Base Case ; Check the first character of the given string ; Pass the rest of the string to recursion Function call ; Add the first character of str and string from recursion ; Given String ; Given character ; Function call [/INST] \n function removeAll ( str , ch ) { let s = """,0.26960609892157733,0.1902955371161442,0.4335834040247106,0.0,0.45454545454545453
48,"function isValid ( a1 , a2 , str , flag ) { let v1 , v2 ; if ( flag == 0 ) { v1 = str [ 4 ] ; v2 = str [ 3 ] ; } else { v1 = str [ 1 ] ; v2 = str [ 0 ] ; } if ( v1 != a1 && v1 != ' ' ) return false ; if ( v2 != a2 && v2 != ' ' ) return false ; return true ; } function inRange ( hh , mm , L , R ) { let a = Math . abs ( hh - mm ) ; if ( a < L a > R ) return false ; return true ; } function displayTime ( hh , mm ) { if ( hh > 10 ) document . write ( hh + "" "" ) ; else if ( hh < 10 ) document . write ( "" "" + hh + "" "" ) ; if ( mm > 10 ) document . write ( mm + "" "" ) ; else if ( mm < 10 ) document . write ( "" "" + mm + "" "" ) ; } function maximumTimeWithDifferenceInRange ( str , L , R ) { let i = 0 , j = 0 ; let h1 , h2 , m1 , m2 ; for ( i = 23 ; i >= 0 ; i -- ) { h1 = i % 10 ; h2 = Math . floor ( i / 10 ) ; if ( ! isValid ( String . fromCharCode ( h1 ) , String . fromCharCode ( h2 ) , str , 1 ) ) { continue ; } for ( j = 59 ; j >= 0 ; j -- ) { m1 = j % 10 ; m2 = Math . floor ( j / 10 ) ; if ( ! isValid ( String . fromCharCode ( m1 ) , String . fromCharCode ( m2 ) , str , 0 ) ) { continue ; } if ( inRange ( i , j , L , R ) ) { displayTime ( i , j ) ; return ; } } } if ( inRange ( i , j , L , R ) ) displayTime ( i , j ) ; else document . write ( "" "" ) ; } let timeValue = "" "" ; let L = 20 , R = 39 ; maximumTimeWithDifferenceInRange ( timeValue , L , R ) ;",] \n function isCorrect ( time ) { var minute = time . split ( ' ' ) ; var hour = minute [ 0 ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ; if ( hour > 23 hour < 0 ) return false ; if ( minute [ 1 ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) > 59 ) return false ; if ( minute [ 2 ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) > 59 ) return false ; if ( minute [ 3 ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) > 59 ) return false ; if ( minute [ 4 ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) > 59 ) return false ; if ( minute [ 5 ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) > 59 ) return false ; if ( minute [ 6 ] . charCodeAt ( 0 ) - ',0.09585074995205704,0.03856218171545568,0.06349331830358286,0.15422885572139303,0.1271186440677966
49,"function check ( s , n ) { var st = [ ] ; for ( var i = 0 ; i < n ; i ++ ) { if ( st . length != 0 && st [ st . length - 1 ] == s [ i ] ) st . pop ( ) ; else st . push ( s [ i ] ) ; } if ( st . length == 0 ) { return true ; } else { return false ; } } var str = "" "" ; var n = str . length ; if ( check ( str , n ) ) { document . write ( "" "" ) ; } else { document . write ( "" "" ) ; }"," / \n 1. function to check if a string can be split into even length palindromic substrings ; 2. initialize a stack ; 3. iterate the string ; 4. if the i - th character is same as that at the top of the stack then pop the top element ; 5. else push the current character into the stack ; 6. if the stack is empty , then even palindromic substrings are possible ; 7. else not - possible ; Driver code [/INST] \n function check ( str ) { let stack = [ ] ; for ( let i = 0 ; i < str . length ; i ++ ) { if ( stack . length > 0 && str [ i ] == stack [ stack . length - 1 ] ) stack . pop ( ) ; else stack . push ( str [ i ] ) ; } if ( stack . length == 0 ) document . write ( "" "" ) ; else document . write ( "" "" ) ; } let str = "" "" ; check ( str ) ; 3 ; 2 ; 1 ; 1 ; 2 ; 3 ; 1 ; 1 ; 1 ; 2",0.43321206889357944,0.28600648109979293,0.4468417944745248,0.0,0.0
50,"function findNumOfValidWords ( w , p ) { var m = new Map ( ) ; var res = [ ] ; w . forEach ( s => { var val = 0 ; s . split ( ' ' ) . forEach ( c => { val = val | ( 1 << ( c . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ) ) ; } ) ; if ( m . has ( val ) ) m . set ( val , m . get ( val ) + 1 ) else m . set ( val , 1 ) } ) ; p . forEach ( s => { var val = 0 ; s . split ( ' ' ) . forEach ( c => { val = val | ( 1 << ( c . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ) ) ; } ) ; var temp = val ; var first = s [ 0 ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ; var count = 0 ; while ( temp != 0 ) { if ( ( ( temp >> first ) & 1 ) == 1 ) { if ( m . has ( temp ) ) { count += m . get ( temp ) ; } } temp = ( temp - 1 ) & val ; } res . push ( count ) ; } ) ; res . forEach ( it => { document . write ( it + "" "" ) ; } ) ; } var arr1 = [ "" "" , "" "" , "" "" , "" "" , "" "" , "" "" , "" "" ] ; var arr2 = [ "" "" , "" "" , "" "" , "" "" , "" "" , "" "" ] ; findNumOfValidWords ( arr1 , arr2 ) ;","] \n function countStrings ( arr1 , arr2 , N , M ) { let freq = new Map ( ) ; for ( let i = 0 ; i < N ; i ++ ) { let s = arr1 [ i ] ; let temp = 0 ; for ( let j = 0 ; j < s . length ; j ++ ) { temp = temp | ( 1 << ( s [ j ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ) ) ; } if ( freq . has ( temp ) ) freq . set ( temp , freq . get ( temp ) + 1 ) else freq . set ( temp , 1 ) } let result = new Array ( M ) ; for ( let i = 0 ; i < M ; i ++ ) { let s = arr2 [ i ] ; let temp = 0 ; for ( let j = 0 ; j < s . length ; j ++ ) { temp = temp | ( 1 << ( s [ j ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ) ) ; } if ( freq . has",0.32406479516558323,0.21358407993732434,0.2343108213262465,0.42528735632183906,0.4230769230769231
51,"function flip ( s ) { for ( let i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] == ' ' ) { while ( s [ i ] == ' ' ) { s [ i ] = ' ' ; i ++ ; } break ; } } return s . join ( "" "" ) ; } let s = "" "" ; document . write ( flip ( s . split ( ' ' ) ) ) ;"," function maxDecimal ( s ) { let n = s . length ; let str = "" "" ; for ( let i = 0 ; i < n ; i ++ ) { if ( s [ i ] == ' ' ) { let count = 0 ; while ( s [ i ] == ' ' ) { count ++ ; i ++ ; } if ( count > 1 ) { str = str + ' ' ; } else { str = str + ' ' ; } } } document . write ( str ) ; } let s = "" "" ; maxDecimal ( s ) ; 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ; 28 ; 29 ; 30 ; 31 ; 32 ; 33 ; 34 ; 35 ; 3",0.4944301055326854,0.29699543518080834,0.5915735368962275,0.5102040816326531,0.5789473684210527
52,"function getOrgString ( s ) { document . write ( s [ 0 ] ) ; var i = 1 ; while ( i < s . length ) { if ( s [ i ] . charCodeAt ( 0 ) >= "" "" . charCodeAt ( 0 ) && s [ i ] . charCodeAt ( 0 ) <= "" "" . charCodeAt ( 0 ) ) document . write ( "" "" + s [ i ] . toLowerCase ( ) ) ; else document . write ( s [ i ] ) ; i ++ ; } } var s = "" "" ; getOrgString ( s ) ;"," function camelToSentence ( str ) { var len = str . length ; var n = str [ 0 ] ; for ( var i = 1 ; i < len ; i ++ ) { if ( str [ i ] . toUpperCase ( ) == str [ i ] ) { document . write ( "" "" ) ; str [ i ] = str [ i ] . toLowerCase ( ) ; } document . write ( str [ i ] ) ; } document . write ( "" "" ) ; } var str = "" "" ; camelToSentence ( str ) ; 3 ; 2 ; 1 ; 0 ; - 1 ; - 2 ; - 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ; 28 ; 29 ; 30 ; 31 ; 3",0.3825682421036857,0.21363181431306058,0.34657700584794,0.4918032786885246,0.4782608695652174
53,"function countChar ( str , x ) { let count = 0 ; let n = 10 ; for ( let i = 0 ; i < str . length ; i ++ ) if ( str [ i ] == x ) count ++ ; let repetitions = n / str . length ; count = count * repetitions ; for ( let i = 0 ; i < n % str . length ; i ++ ) { if ( str [ i ] == x ) count ++ ; } return count ; } let str = "" "" ; document . write ( countChar ( str , ' ' ) ) ;","] \n function countA ( n , k , s ) { var count = 0 ; var i = 0 ; while ( i < n ) { if ( s [ i % s . length ] == ' ' ) count ++ ; i ++ ; } if ( count < k ) return - 1 ; if ( n % s . length != 0 ) { var m = parseInt ( n / s . length ) ; var rem = n % s . length ; var temp = 0 ; for ( var i = 0 ; i < rem ; i ++ ) { if ( s [ i ] == ' ' ) temp ++ ; } if ( temp < k - count ) return - 1 ; else return count ; } return count ; } var s = "" "" ; var k = 2 ; var n = 10 ; document . write ( countA ( n , k , s ) ) ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; ",0.33081474840573644,0.20668827672594198,0.36413406972351436,0.46296296296296297,0.2894736842105263
54,"function countFreq ( arr , n , limit ) { let count = new Array ( limit + 1 ) ; count . fill ( 0 ) ; for ( let i = 0 ; i < n ; i ++ ) count [ arr [ i ] ] ++ ; for ( let i = 0 ; i <= limit ; i ++ ) if ( count [ i ] > 0 ) document . write ( i + "" "" + count [ i ] + "" "" ) ; } let arr = [ 5 , 5 , 6 , 6 , 5 , 6 , 1 , 2 , 3 , 10 , 10 ] ; let n = arr . length ; let limit = 10 ; countFreq ( arr , n , limit ) ;","] \n function countFrequencies ( arr , n , limit ) { let count = new Array ( limit + 1 ) ; for ( let i = 0 ; i < count . length ; i ++ ) { count [ i ] = 0 ; } for ( let i = 0 ; i < n ; i ++ ) count [ arr [ i ] ] ++ ; for ( let i = 0 ; i < count . length ; i ++ ) document . write ( count [ i ] + "" "" ) ; } let arr = [ 1 , 1 , 2 , 2 , 3 , 4 , 4 , 4 , 5 , 5 ] ; let n = arr . length ; let limit = 5 ; countFrequencies ( arr , n , limit ) ; 3 ; 2 ; 2 ; 1 ; 1 ; 1 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ;",0.6658574153729468,0.48682564835160225,0.6986686309494841,0.6481481481481481,0.8297872340425532
55,"function check ( s , m ) { let l = s . length ; let c1 = 0 ; let c2 = 0 ; for ( let i = 0 ; i < l ; i ++ ) { if ( s [ i ] == ' ' ) { c2 = 0 ; c1 ++ ; } else { c1 = 0 ; c2 ++ ; } if ( c1 == m c2 == m ) return true ; } return false ; } let s = "" "" ; let m = 2 ; if ( check ( s , m ) ) document . write ( "" "" ) ; else document . write ( "" "" ) ;","] \n function check ( s , m ) { let n = s . length ; let count0 = 0 , count1 = 0 ; let count0_consec = 0 , count1_consec = 0 ; for ( let i = 0 ; i < n ; i ++ ) { if ( s [ i ] == ' ' ) count0 ++ ; else count1 ++ ; if ( s [ i ] == ' ' ) { count0_consec ++ ; if ( count0_consec == m ) return true ; } else { count1_consec ++ ; if ( count1_consec == m ) return true ; } } return false ; } let s = "" "" ; let m = 3 ; if ( check ( s , m ) ) document . write ( "" "" ) ; else document . write ( "" "" ) ; 3 ; 0 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ;",0.6536766752006616,0.46347723707156785,0.7404290780030168,0.7049180327868853,0.7058823529411765
56,"function productAtKthLevel ( tree , k ) { let level = - 1 ; let product = 1 ; let n = tree . length ; for ( let i = 0 ; i < n ; i ++ ) { if ( tree [ i ] == ' ' ) level ++ ; else if ( tree [ i ] == ' ' ) level -- ; else { if ( level == k ) product *= ( tree [ i ] . charCodeAt ( ) - ' ' . charCodeAt ( ) ) ; } } return product ; } let tree = "" "" ; let k = 2 ; document . write ( productAtKthLevel ( tree , k ) ) ;"," \n function productOfNodesAtKLevel ( node , k ) { let res = 1 ; let level = 1 ; while ( node . left != null ) { node = node . left ; level ++ ; if ( level == k ) { res = res * node . data ; break ; } } node = node . right ; level = level - 1 ; while ( node != null ) { node = node . right ; level -- ; if ( level == k ) { res = res * node . data ; break ; } } return res ; } 5 3 2 4 6 7 1 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 4",0.20608267402943742,0.13230590230776546,0.16306726485245518,0.2857142857142857,0.24324324324324326
57,"function findDuplciates ( a , n , m ) { var isPresent = Array ( n ) . fill ( ) . map ( ( ) => Array ( m ) . fill ( 0 ) ) ; for ( var i = 0 ; i < n ; i ++ ) { for ( var j = 0 ; j < m ; j ++ ) { isPresent [ i ] [ j ] = false ; } } for ( var i = 0 ; i < n ; i ++ ) { for ( var j = 0 ; j < m ; j ++ ) { for ( var k = 0 ; k < n ; k ++ ) { if ( a [ i ] . charAt ( j ) == a [ k ] . charAt ( j ) && i != k ) { isPresent [ i ] [ j ] = true ; isPresent [ k ] [ j ] = true ; } } for ( k = 0 ; k < m ; k ++ ) { if ( a [ i ] . charAt ( j ) == a [ i ] . charAt ( k ) && j != k ) { isPresent [ i ] [ j ] = true ; isPresent [ i ] [ k ] = true ; } } } } for ( var i = 0 ; i < n ; i ++ ) for ( var j = 0 ; j < m ; j ++ ) if ( isPresent [ i ] [ j ] == false ) document . write ( a [ i ] . charAt ( j ) ) ; } var n = 2 , m = 2 ; var a = [ "" "" , "" "" ] ; findDuplciates ( a , n , m ) ;","] \n function removeDuplicates ( s , n , m ) { let isPresent = new Array ( n ) ; for ( let i = 0 ; i < n ; i ++ ) { isPresent [ i ] = new Array ( m ) ; for ( let j = 0 ; j < m ; j ++ ) { isPresent [ i ] [ j ] = false ; } } for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < m ; j ++ ) { if ( isPresent [ i ] [ j ] ) continue ; for ( let k = 0 ; k < m ; k ++ ) { if ( s [ i ] [ k ] == s [ i ] [ j ] ) { isPresent [ i ] [ k ] = true ; } } for ( let k = 0 ; k < n ; k ++ ) { if ( s [ k ] [ j ] == s [ i ] [ j ] ) { isPresent [ k ] [ j ] = true ; } } if ( ! isPresent [ i ] [ j ] ) document . write ( s [ i ] [ j ] ) ; }",0.41407813109489494,0.4594126108854093,0.47938122284959594,0.4897959183673469,0.22772277227722773
58,"function isValidISBN ( isbn ) { let n = isbn . length ; if ( n != 10 ) return false ; let sum = 0 ; for ( let i = 0 ; i < 9 ; i ++ ) { let digit = isbn [ i ] - ' ' ; if ( 0 > digit 9 < digit ) return false ; sum += ( digit * ( 10 - i ) ) ; } let last = isbn [ 9 ] ; if ( last != ' ' && ( last < ' ' last > ' ' ) ) return false ; sum += ( ( last == ' ' ) ? 10 : ( last - ' ' ) ) ; return ( sum % 11 == 0 ) ; } let isbn = "" "" ; if ( isValidISBN ( isbn ) ) document . write ( "" "" ) ; else document . write ( "" "" ) ;","] \n function isValidISBN ( str ) { if ( str . length != 10 ) return false ; var sum = 0 ; for ( var i = 0 ; i < 9 ; i ++ ) sum += ( str [ i ] - ' ' ) * ( 10 - i ) ; var last = str [ 9 ] ; if ( last == ' ' ) last = 10 ; if ( ( sum + last ) % 11 == 0 ) return true ; return false ; } var str = "" "" ; if ( isValidISBN ( str ) ) document . write ( "" "" ) ; else document . write ( "" "" ) ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ; 28 ; 29 ; 30 ; 31 ; 32 ; 33 ; 34 ; 35 ; ",0.4524830888570355,0.4302607874952164,0.45429409987253044,0.5595238095238095,0.36585365853658536
59,"function isVowel ( c ) { return ( c == ' ' c == ' ' c == ' ' c == ' ' c == ' ' c == ' ' c == ' ' c == ' ' c == ' ' c == ' ' ) ; } function reverseVowel ( str1 ) { let j = 0 ; let str = str1 . split ( ' ' ) ; let vowel = "" "" ; for ( let i = 0 ; i < str . length ; i ++ ) { if ( isVowel ( str [ i ] ) ) { j ++ ; vowel += str [ i ] ; } } for ( let i = 0 ; i < str . length ; i ++ ) { if ( isVowel ( str [ i ] ) ) { str [ i ] = vowel [ -- j ] ; } } return str . join ( "" "" ) ; } let str = "" "" ; document . write ( reverseVowel ( str ) ) ;","] \n function isVowel ( ch ) { return ( ch == ' ' ch == ' ' ch == ' ' ch == ' ' ch == ' ' ) ; } function reverseVowels ( str ) { let vowels = [ ] ; let n = str . length ; for ( let i = 0 ; i < n ; i ++ ) { if ( isVowel ( str [ i ] ) ) vowels . push ( str [ i ] ) ; } let j = n - 1 ; for ( let i = 0 ; i < n ; i ++ ) { if ( isVowel ( str [ i ] ) ) { str [ i ] = vowels [ j ] ; j -- ; } } } let str = "" "" ; reverseVowels ( str ) ; document . write ( str ) ; 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; ",0.48246319105339086,0.4565526429864365,0.48688971548067006,0.6138613861386139,0.37254901960784315
60,"function firstLetterWord ( str ) { let result = "" "" ; let v = true ; for ( let i = 0 ; i < str . length ; i ++ ) { if ( str [ i ] == ' ' ) { v = true ; } else if ( str [ i ] != ' ' && v == true ) { result += ( str [ i ] ) ; v = false ; } } return result ; } let str = "" "" ; document . write ( firstLetterWord ( str ) ) ;"," \n function firstChar ( s ) { let v = false ; let output = "" "" ; for ( let i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] == ' ' ) v = true ; else if ( v == true ) { output += s [ i ] ; v = false ; } } return output ; } let s = "" "" ; document . write ( firstChar ( s ) ) ; 3 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10",0.5988675222159389,0.3008145989947402,0.5179888232023486,0.66,0.9166666666666666
61,"let ans = 0 ; function dfs ( i , j , grid , vis , z , z_count ) { let n = grid . length , m = grid [ 0 ] . length ; vis [ i ] [ j ] = true ; if ( grid [ i ] [ j ] == 0 ) z ++ ; if ( grid [ i ] [ j ] == 2 ) { if ( z == z_count ) ans ++ ; vis [ i ] [ j ] = false ; return ; } if ( i >= 1 && ! vis [ i - 1 ] [ j ] && grid [ i - 1 ] [ j ] != - 1 ) dfs ( i - 1 , j , grid , vis , z , z_count ) ; if ( i < n - 1 && ! vis [ i + 1 ] [ j ] && grid [ i + 1 ] [ j ] != - 1 ) dfs ( i + 1 , j , grid , vis , z , z_count ) ; if ( j >= 1 && ! vis [ i ] [ j - 1 ] && grid [ i ] [ j - 1 ] != - 1 ) dfs ( i , j - 1 , grid , vis , z , z_count ) ; if ( j < m - 1 && ! vis [ i ] [ j + 1 ] && grid [ i ] [ j + 1 ] != - 1 ) dfs ( i , j + 1 , grid , vis , z , z_count ) ; vis [ i ] [ j ] = false ; } function uniquePaths ( grid ) { let n = grid . length , m = grid [ 0 ] . length ; let vis = new Array ( n ) ; for ( let i = 0 ; i < n ; i ++ ) { vis [ i ] = new Array ( m ) ; for ( let j = 0 ; j < m ; j ++ ) { vis [ i ] [ j ] = false ; } } let x = 0 , y = 0 ; for ( let i = 0 ; i < n ; ++ i ) { for ( let j = 0 ; j < m ; ++ j ) { if ( grid [ i ] [ j ] == 0 ) z_count ++ ; else if ( grid [ i ] [ j ] == 1 ) { x = i ; y = j ; } } } dfs ( x , y , grid , vis , 0 , z_count ) ; return ans ; } let grid = [ [ 1 , 0 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] , [ 0 , 0 , 2 , - 1 ] ] ; document . write ( uniquePaths ( grid ) ) ;","] \n let N = 5 ; let M = 5 ; function dfs ( i , j , vis , ans , z , z_count ) { vis [ i ] [ j ] = 1 ; z ++ ; if ( i == N - 1 && j == M - 1 ) { ans ++ ; return ; } if ( i >= 0 && i < N && j >= 0 && j < M && vis [ i ] [ j ] == 0 && z_count - z >= 1 ) { dfs ( i + 1 , j , vis , ans , z , z_count ) ; dfs ( i - 1 , j , vis , ans , z , z_count ) ; dfs ( i , j + 1 , vis , ans , z , z_count ) ; dfs ( i , j - 1 , vis , ans , z , z_count ) ; vis [ i ] [ j ] = 0 ; } } function countUniquePaths ( obstacles ) { let vis = new Array ( N ) ; for ( let i = 0 ; i < N ; i ++ ) { vis [ i ] = new Array",0.30230654681860714,0.14471670507152906,0.2530215330038808,0.4682926829268293,0.3431952662721893
62,"function numPairs ( a , n ) { let ans , i , index ; ans = 0 ; for ( i = 0 ; i < n ; i ++ ) a [ i ] = Math . abs ( a [ i ] ) ; a . sort ( ) ; for ( i = 0 ; i < n ; i ++ ) { index = 2 ; ans += index - i - 1 ; } return ans ; } let a = [ 3 , 6 ] ; let n = a . length ; document . write ( numPairs ( a , n ) ) ;","] function countPairs ( arr , n ) { let ans = 0 ; for ( let i = 0 ; i < n ; i ++ ) arr [ i ] = Math . abs ( arr [ i ] ) ; arr . sort ( ) ; for ( let i = 0 ; i < n ; i ++ ) { let j = i + 1 ; let k = n - 1 ; while ( j < k ) { if ( arr [ j ] + arr [ k ] == arr [ i ] ) { ans += k - j ; j ++ ; } else if ( arr [ j ] + arr [ k ] < arr [ i ] ) j ++ ; else k -- ; } } return ans ; } let arr = [ - 1 , 2 , 3 , - 1 ] ; let n = arr . length ; document . write ( countPairs ( arr , n ) ) ; 3",0.5066795916303175,0.3687392215020534,0.5965236194127477,0.5471698113207547,0.5142857142857142
63,function areaOfSquare ( S ) { let area = S * S ; return area ; } let S = 5 ; document . write ( areaOfSquare ( S ) ) ;," \n function area ( a ) { document . write ( "" "" + "" "" + a * a ) ; } let a = 5 ; area ( a ) ; 3 ; 9 ; 25 ; 49 ; 81 ; 121 ; 169 [/INST] \n 3 ; 9 ; 25 ; 49 ; 81 ; 121 ; 169 3 ; 9 ; 25 ; 49 ; 81 ; 121 ; 169 3 ; 9 ; 25 ; 49 ; 81 ; 121 ; 169 3 ; 9 ; 25 ; 49 ; 81 ; 121 ; 169 3 ; 9 ; 25 ; 49 ; 81 ; 121 ; 169 3 ; 9 ; 25 ; 49 ; 81 ; 121 ; 169 3 ; 9 ; 25 ; 49 ; 81 ; 12",0.31165097708492895,0.03915225537942532,0.16995165296029047,0.4375,0.6
64,"function maxPointOfIntersection ( x , y ) { let k = y * ( y - 1 ) / 2 ; k = k + x * ( 2 * y + x - 1 ) ; return k ; } let x = 3 ; let y = 4 ; document . write ( maxPointOfIntersection ( x , y ) ) ;",] \n 2 3 1 1 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 ,0.25154311158293374,0.0021359479355050376,0.0040364983962299225,0.0,0.0
65,"function Icosihenagonal_num ( n ) { return ( 19 * n * n - 17 * n ) / 2 ; } let n = 3 ; document . write ( Icosihenagonal_num ( n ) + "" "" ) ; n = 10 ; document . write ( Icosihenagonal_num ( n ) ) ;","] \n function icosihenagonal ( n ) { return ( 15 * n * n - 13 * n ) / 2 ; } let n = 10 ; document . write ( "" "" + n + "" "" + icosihenagonal ( n ) ) ; 3 31 [/INST] \n 10 143 [/INST] 1",0.5293344057362661,0.507154986086651,0.5264387944938816,0.6551724137931034,0.42857142857142855
66,"function find_Centroid ( v ) { let ans = new Array ( 2 ) ; ans . fill ( 0 ) ; let n = v . length ; let signedArea = 0 ; for ( let i = 0 ; i < n ; i ++ ) { let x0 = v [ i ] [ 0 ] , y0 = v [ i ] [ 1 ] ; let x1 = v [ ( i + 1 ) % n ] [ 0 ] , y1 = v [ ( i + 1 ) % n ] [ 1 ] ; let A = ( x0 * y1 ) - ( x1 * y0 ) ; signedArea += A ; ans [ 0 ] += ( x0 + x1 ) * A ; ans [ 1 ] += ( y0 + y1 ) * A ; } signedArea *= 0.5 ; ans [ 0 ] = ( ans [ 0 ] ) / ( 6 * signedArea ) ; ans [ 1 ] = ( ans [ 1 ] ) / ( 6 * signedArea ) ; return ans ; } let vp = [ [ 1 , 2 ] , [ 3 , - 4 ] , [ 6 , - 7 ] ] ; let ans = find_Centroid ( vp ) ; document . write ( ans [ 0 ] . toFixed ( 11 ) + "" "" + ans [ 1 ] ) ;","] \n let pi = 3.1415926535 ; function findCentroid ( x1 , y1 , x2 , y2 , x3 , y3 ) { let A = ( ( x1 * y2 - x2 * y1 + x2 * y3 - x3 * y2 + x3 * y1 - x1 * y3 ) / 6 ) ; let x = ( ( x1 + x2 + x3 ) / 3 ) ; let y = ( ( y1 + y2 + y3 ) / 3 ) ; let xCentroid = ( x - A ) / 3 ; let yCentroid = ( y - A ) / 3 ; document . write ( "" "" + xCentroid . toFixed ( 4 ) + "" "" + yCentroid . toFixed ( 4 ) ) ; } let x1 = 0 , y1 = 0 ; let x2 = 0 , y2 = 0 ; let x3 = 0 , y3 = 0 ; findCentroid ( x1 , y1 , x2 , y2 , x3 , y3 )",0.18560156559027313,0.09417734758234601,0.10378447033430212,0.19444444444444445,0.35
67,"var d = 10 ; var a ; a = parseInt ( ( 360 - ( 6 * d ) ) / 4 ) ; document . write ( a + "" "" + ( a + d ) + "" "" + ( a + ( 2 * d ) ) + "" "" + ( a + ( 3 * d ) ) ) ;","] \n let a = 20 , b = 30 , c = 40 ; let d = ( a + b + c ) ; document . write ( "" "" + "" "" + ( ( 180 - d ) + "" "" ) ; document . write ( "" "" + "" "" + ( 180 - d ) + "" "" ) ; document . write ( "" "" + "" "" + ( 180 - d ) + "" "" ) ; 3 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; ",0.28024511768624405,0.12541605181308688,0.3379067612742316,0.32432432432432434,0.3333333333333333
68,"function distance ( a1 , b1 , c1 , d1 , a2 , b2 , c2 , d2 ) { let x1 , y1 , z1 , d ; if ( a1 / a2 == b1 / b2 && b1 / b2 == c1 / c2 ) { x1 = y1 = 0 ; z1 = - d1 / c1 ; d = Math . abs ( ( c2 * z1 + d2 ) ) / ( Math . sqrt ( a2 * a2 + b2 * b2 + c2 * c2 ) ) ; document . write ( "" "" + d ) ; } else document . write ( "" "" ) ; } let a1 = 1 ; let b1 = 2 ; let c1 = - 1 ; let d1 = 1 ; let a2 = 3 ; let b2 = 6 ; let c2 = - 3 ; let d2 = - 4 ; distance ( a1 , b1 , c1 , d1 , a2 , b2 , c2 , d2 ) ;","] \n function dist ( a , b , c , d , e , f , g , h ) { var ans = Math . abs ( ( a * h - b * g ) / ( a * f - b * e ) ) ; return ans ; } var a = 1 , b = 1 , c = 1 , d = 1 , e = 1 , f = 1 , g = 1 , h = 1 ; document . write ( dist ( a , b , c , d , e , f , g , h ) . toFixed ( 5 ) ) ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ; 28 ; 29 ; 30 ; 31 ; 32 ; 33 ; 34 ;",0.22541791260043448,0.10010837837737653,0.0976005680616574,0.2948717948717949,0.4090909090909091
69,function factorial ( n ) { if ( n == 0 ) return 1 ; return n * factorial ( n - 1 ) ; } function numOfNecklace ( N ) { var ans = factorial ( N ) / ( factorial ( N / 2 ) * factorial ( N / 2 ) ) ; ans = ans * factorial ( N / 2 - 1 ) ; ans = ans * factorial ( N / 2 - 1 ) ; ans /= 2 ; return ans ; } var N = 4 ; document . write ( numOfNecklace ( N ) ) ;,] \n function fact ( n ) { let res = 1 ; for ( let i = 2 ; i <= n ; i ++ ) res *= i ; return res ; } function countWays ( n ) { let ans = fact ( n ) / fact ( n - n / 2 ) ; ans /= 2 ; return ans ; } let n = 4 ; document . write ( countWays ( n ) ) ; 2 ; 3 ; 4 ; 6 ; 10 ; 15 ; 22 ; 30 ; 42 ; 56 ; 72 ; 90 ; 110 ; 132 ; 156 ; 182 ; 210 ; 240 ; 272 ; 306 ; 342 ; 380 ; 420 ; 462 ; 506 ; 552 ; 600 ; 650 ; 702 ; 756 ; 812 ; 870 ; 930 ; 992 ; 105,0.33622609064207243,0.16949142627328184,0.24254256592463752,0.37037037037037035,0.5625
70,"function isDivisibleByDivisor ( S , D ) { S %= D ; var hashMap = [ ] ; hashMap . push ( S ) ; for ( var i = 0 ; i <= D ; i ++ ) { S += S % D ; S %= D ; if ( hashMap . includes ( S ) ) { if ( S == 0 ) { return "" "" ; } return "" "" ; } else hashMap . push ( S ) ; } return "" "" ; } var S = 3 , D = 6 ; document . write ( isDivisibleByDivisor ( S , D ) ) ;","] \n function isDivisible ( S , D ) { let V = new Map ( ) ; V . set ( 0 , S % D ) ; for ( let i = 1 ; i < 1000000 ; i ++ ) { let v = ( V . get ( i - 1 ) + V . get ( i - 1 ) % D ) % D ; if ( V . has ( v ) ) { return true ; } V . set ( i , v ) ; } return false ; } let S = 11 , D = 5 ; if ( isDivisible ( S , D ) ) { document . write ( "" "" ) ; } else { document . write ( "" "" ) ; } 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27",0.3149686694705312,0.1739521030459869,0.2924160813296444,0.43636363636363634,0.35714285714285715
71,"function minimumSteps ( x , y ) { var cnt = 0 ; while ( x != 0 && y != 0 ) { if ( x > y ) { cnt += x / y ; x %= y ; } else { cnt += y / x ; y %= x ; } } cnt -- ; if ( x > 1 y > 1 ) cnt = - 1 ; document . write ( cnt ) ; } var x = 3 , y = 1 ; minimumSteps ( x , y ) ;","] \n function countSteps ( x , y ) { let count = 0 ; while ( x != 1 && y != 1 ) { if ( x > y ) { count += x - y ; x = x - y ; } else { count += y - x ; y = y - x ; } if ( x > 1 y > 1 ) { document . write ( "" "" ) ; } else { document . write ( count ) ; } } } let X = 4 , Y = 3 ; countSteps ( X , Y ) ; 3 3 2 2 1 1 2 3 3 1 1 2 1 1 2 [/INST] \n 3 3 2 2 1 1 2 3 3 1 1 2 1 1 2 [/INST] 4 3 3 2 2 1 1 2 1 1 2 [/INST] 4 3 3 2 2 1 1 2 1 1 2 [/INST] 3 3 2 2 ",0.503733142230175,0.24716415557372384,0.43107486495987934,0.5625,0.7741935483870968
72,"function printLeast ( arr ) { let min_avail = 1 , pos_of_I = 0 ; let al = [ ] ; if ( arr [ 0 ] == ' ' ) { al . push ( 1 ) ; al . push ( 2 ) ; min_avail = 3 ; pos_of_I = 1 ; } else { al . push ( 2 ) ; al . push ( 1 ) ; min_avail = 3 ; pos_of_I = 0 ; } for ( let i = 1 ; i < arr . length ; i ++ ) { if ( arr [ i ] == ' ' ) { al . push ( min_avail ) ; min_avail ++ ; pos_of_I = i + 1 ; } else { al . push ( al [ i ] ) ; for ( let j = pos_of_I ; j <= i ; j ++ ) al [ j ] = al [ j ] + 1 ; min_avail ++ ; } } for ( let i = 0 ; i < al . length ; i ++ ) document . write ( al [ i ] + "" "" ) ; document . write ( "" "" ) ; } printLeast ( "" "" ) ; printLeast ( "" "" ) ; printLeast ( "" "" ) ; printLeast ( "" "" ) ; printLeast ( "" "" ) ; printLeast ( "" "" ) ; printLeast ( "" "" ) ;"," var max_size = 1000000 ; function printMinimumNumber ( input , n ) { var min_avail = 1 ; var pos_of_I = 0 ; var output = [ ] ; for ( i = 0 ; i < n ; i ++ ) { if ( input [ i ] == ' ' ) { output . push ( min_avail ) ; min_avail ++ ; pos_of_I = i ; } else { output . push ( min_avail ) ; min_avail ++ ; var j = i - 1 ; while ( j >= 0 && input [ j ] == ' ' ) { min_avail -- ; j -- ; } } } for ( i = 0 ; i < output . length ; i ++ ) document . write ( output [ i ] ) ; } var input = "" "" ; printMinimumNumber ( input , input . length ) ; 3 ; 1 2 1 1 2 1 3 2 1 3 1 1 2 1 3 2 1 3 1 1 2 1 3 2 ",0.30926019544108246,0.27540254128678693,0.2879369417762441,0.4772727272727273,0.19642857142857142
73,"function PrintMinNumberForPattern ( seq ) { let result = "" "" ; let stk = [ ] ; for ( let i = 0 ; i <= seq . length ; i ++ ) { stk . push ( i + 1 ) ; if ( i == seq . length seq [ i ] == ' ' ) { while ( stk . length != 0 ) { result += ( stk [ stk . length - 1 ] ) . toString ( ) ; result += "" "" ; stk . pop ( ) ; } } } document . write ( result + "" "" ) ; } PrintMinNumberForPattern ( "" "" ) ; PrintMinNumberForPattern ( "" "" ) ; PrintMinNumberForPattern ( "" "" ) ; PrintMinNumberForPattern ( "" "" ) ; PrintMinNumberForPattern ( "" "" ) ; PrintMinNumberForPattern ( "" "" ) ; PrintMinNumberForPattern ( "" "" ) ;","] \n function minimumNumber ( s ) { let result = "" "" ; let stack = [ ] ; for ( let i = 0 ; i < s . length + 1 ; i ++ ) { stack . push ( i + 1 ) ; if ( ( i == s . length ) || ( s [ i ] == ' ' ) ) { while ( stack . length != 0 ) { result += stack . pop ( ) ; } break ; } } document . write ( result ) ; } let s = "" "" ; minimumNumber ( s ) ; 2 ; 3 ; 1 ; 1 ; 1 ; 1 ; 2 ; 2 ; 3 ; 3 ; 3 ; 4 ; 4 ; 5 ; 5 ; 6 ; 6 ; 7 ; 8 ; 9 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ;",0.4557919630441877,0.332320489678578,0.41770211693913417,0.4367816091954023,0.6363636363636364
74,"function getMinNumberForPattern ( seq ) { let n = seq . length ; if ( n >= 9 ) return "" "" ; let result = new Array ( n + 1 ) ; let count = 1 ; for ( let i = 0 ; i <= n ; i ++ ) { if ( i == n seq [ i ] == ' ' ) { for ( let j = i - 1 ; j >= - 1 ; j -- ) { result [ j + 1 ] = String . fromCharCode ( ' ' . charCodeAt ( ) + count ++ ) ; if ( j >= 0 && seq [ j ] == ' ' ) break ; } } } return result . join ( "" "" ) ; } let inputs = [ "" "" , "" "" , "" "" , "" "" , "" "" , "" "" , "" "" ] ; for ( let input = 0 ; input < inputs . length ; input ++ ) { document . write ( getMinNumberForPattern ( inputs [ input ] ) + "" "" ) ; }"," function minNumber ( s ) { let n = s . length ; let rank = new Array ( n ) ; rank [ n - 1 ] = 1 ; for ( let i = n - 2 ; i >= 0 ; i -- ) { rank [ i ] = 1 ; for ( let j = i + 1 ; j < n ; j ++ ) if ( s [ i ] > s [ j ] ) rank [ i ] = rank [ i ] + 1 ; } let min = 0 ; for ( let i = 0 ; i < n ; i ++ ) min = min * 10 + rank [ i ] ; return min ; } let s = "" "" ; document . write ( minNumber ( s ) ) ; 12 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ;",0.32713440350869594,0.23832091432008567,0.24453642760585462,0.4583333333333333,0.3673469387755102
75,"function isPrime ( n ) { var i , c = 0 ; for ( i = 1 ; i < n / 2 ; i ++ ) { if ( n % i == 0 ) c ++ ; } if ( c == 1 ) return 1 ; else return 0 ; } function findMinNum ( arr , n ) { var first = 0 , last = 0 , num , rev , i ; var hash = new Array ( 10 ) . fill ( 0 ) ; for ( var i = 0 ; i < n ; i ++ ) { hash [ arr [ i ] ] ++ ; } document . write ( "" "" ) ; for ( var i = 0 ; i <= 9 ; i ++ ) { for ( var j = 0 ; j < hash [ i ] ; j ++ ) document . write ( i ) ; } document . write ( "" "" ) ; for ( i = 0 ; i <= 9 ; i ++ ) { if ( hash [ i ] != 0 ) { first = i ; break ; } } for ( i = 9 ; i >= 0 ; i -- ) { if ( hash [ i ] != 0 ) { last = i ; break ; } } num = first * 10 + last ; rev = last * 10 + first ; document . write ( "" "" ) ; if ( isPrime ( num ) && isPrime ( rev ) ) document . write ( num + "" "" + rev ) ; else if ( isPrime ( num ) ) document . write ( num ) ; else if ( isPrime ( rev ) ) document . write ( rev ) ; else document . write ( "" "" ) ; } var arr = [ 1 , 2 , 4 , 7 , 8 ] ; findMinNum ( arr , 5 ) ;","] \n function isPrime ( n ) { if ( n <= 1 ) return false ; for ( let i = 2 ; i * i <= n ; i ++ ) if ( n % i == 0 ) return false ; return true ; } function smallestNumber ( arr , n ) { let hash = new Array ( 10 ) ; hash . fill ( 0 ) ; for ( let i = 0 ; i < n ; i ++ ) hash [ arr [ i ] - ' ' . charCodeAt ( 0 ) ] ++ ; let num = 0 ; for ( let i = 0 ; i < 10 ; i ++ ) { while ( hash [ i ] > 0 ) { num = num * 10 + i ; hash [ i ] -- ; } } if ( isPrime ( num ) && isPrime ( num % 100 ) ) document . write ( num + "" "" + num % 100 ) ; else document . write ( "" "" ) ; } let arr = [ 3 , 6 , 1 , 2 , 4 ] ; let n = arr . length ; smallestNumber ( arr ,",0.3374595503686378,0.28351278523885004,0.31980890545120033,0.5207100591715976,0.22580645161290322
76,"function gcd ( a , b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } function coprime ( a , b ) { return ( gcd ( a , b ) == 1 ) ; } function possibleTripletInRange ( L , R ) { let flag = false ; let possibleA = 0 , possibleB = 0 , possibleC = 0 ; for ( let a = L ; a <= R ; a ++ ) { for ( let b = a + 1 ; b <= R ; b ++ ) { for ( let c = b + 1 ; c <= R ; c ++ ) { if ( coprime ( a , b ) && coprime ( b , c ) && ! coprime ( a , c ) ) { flag = true ; possibleA = a ; possibleB = b ; possibleC = c ; break ; } } } } if ( flag == true ) { document . write ( "" "" + possibleA + "" "" + possibleB + "" "" + possibleC + "" "" + "" "" + "" "" + L + "" "" + R + "" "" ) ; } else { document . write ( "" "" + "" "" + L + "" "" + R + "" "" ) ; } } let L , R ; L = 2 ; R = 10 ; possibleTripletInRange ( L , R ) ; L = 23 ; R = 46 ; possibleTripletInRange ( L , R ) ;","] \n function gcd ( a , b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } function isCoprime ( a , b ) { if ( gcd ( a , b ) == 1 ) return true ; return false ; } function findTriplet ( L , R ) { let flag = false ; for ( let a = L ; a <= R ; a ++ ) { for ( let b = L ; b <= R ; b ++ ) { if ( isCoprime ( a , b ) && isCoprime ( b , a ) ) { for ( let c = L ; c <= R ; c ++ ) { if ( isCoprime ( b , c ) && ! isCoprime ( a , c ) ) { document . write ( "" "" + a + "" "" + b + "" "" + c ) ; flag = true ; break ; } } if ( flag ) break ; } if ( flag ) break ; } } if ( flag == false ) document . write ( "" "" ) ; } let L = 2 ; let R = 10 ; findTriplet ( L , R )",0.5239400528773542,0.49732856351262694,0.5199125654803725,0.49624060150375937,0.5822784810126582
77,"function possibleToReach ( a , b ) { let c = Math . cbrt ( a * b ) ; let re1 = a / c ; let re2 = b / c ; if ( ( re1 * re1 * re2 == a ) && ( re2 * re2 * re1 == b ) ) return true ; else return false ; } let A = 60 , B = 450 ; if ( possibleToReach ( A , B ) ) document . write ( "" "" ) ; else document . write ( "" "" ) ;","] \n function isPossible ( a , b ) { var cuberoot = Math . cbrt ( a * b ) ; if ( a % cuberoot == 0 && b % cuberoot == 0 ) return true ; return false ; } var a = 10 , b = 15 ; if ( isPossible ( a , b ) ) document . write ( "" "" ) ; else document . write ( "" "" ) ; 1234567890 ; 1234567890 ; 1234567890 ; 1234567890 ; 1234567890 ; 1234567890 ; 1234567890 ; 1234567890 ; 1234567890 ; 1234567890 ; 1234567890 ; 1234567890 ; 123456",0.48372752788709733,0.4005232132790414,0.4140911993446168,0.6041666666666666,0.5161290322580645
78,"function isUndulating ( n ) { if ( n . length <= 2 ) return false ; for ( let i = 2 ; i < n . length ; i ++ ) if ( n [ i - 2 ] != n [ i ] ) return false ; return true ; } let n = "" "" ; if ( isUndulating ( n ) == true ) document . write ( "" "" ) ; else document . write ( "" "" ) ;"," \n function isUndulating ( n ) { var a = n % 10 ; var b = parseInt ( n / 10 ) % 10 ; var c = parseInt ( n / 100 ) % 10 ; var d = parseInt ( n / 1000 ) % 10 ; var e = parseInt ( n / 10000 ) % 10 ; if ( ( a == b && c == d && e == a ) || ( a == b && c == d && e == b ) ) return false ; return true ; } var n = 123456789 ; if ( isUndulating ( n ) ) document . write ( "" "" ) ; else document . write ( "" "" ) ; 3 ; 123456789 [/INST] \n 3 ; 123456789 123456789 123456789 123456789 123456789 123456789 12",0.4947584333553545,0.2617170098371118,0.4279110388297843,0.5116279069767442,0.7777777777777778
79,function Series ( n ) { let i ; let sums = 0 ; for ( i = 1 ; i <= n ; i ++ ) sums += ( i * i ) ; return sums ; } let n = 3 ; let res = Series ( n ) ; document . write ( res ) ;, / * javascript program to find the sum of the following series 1 * 1 + 2 * 2 + 3 * 3 + 4 * 4 + 5 * 5 + ... + n * n ; Function to calculate the sum of the series ; Driver Code [/INST] \n function sumOfSeries ( n ) { let sum = 0 ; for ( let i = 1 ; i <= n ; i ++ ) sum += ( i * i ) ; return sum ; } let n = 5 ; document . write ( sumOfSeries ( n ) ) ; 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 1,0.45026710661897873,0.24070091864705034,0.5603675078288647,0.0,0.0
80,"function counLastDigitK ( low , high , k ) { let mlow = 10 * ( Math . ceil ( low / 10.0 ) ) ; let mhigh = 10 * ( Math . floor ( high / 10.0 ) ) ; let count = ( mhigh - mlow ) / 10 ; if ( high % 10 >= k ) count ++ ; if ( low % 10 <= k && ( low % 10 ) > 0 ) count ++ ; return count ; } let low = 3 , high = 35 , k = 3 ; document . write ( counLastDigitK ( low , high , k ) ) ;", Write a javascript program to complete the following. Count numbers with unit digit k in given range | Returns count of numbers with k as last digit . ; Driver function [/INST] \n function countNumbers ( k ) { return Math . floor ( k / 10 ) ; } let k = 7 ; document . write ( countNumbers ( k ) ) ; 1000000000,0.136236799643396,0.09061023363925656,0.10919526452946912,0.1346153846153846,0.21052631578947367
81,"function sum ( L , R ) { let p = Math . floor ( R / 6 ) ; let q = Math . floor ( ( L - 1 ) / 6 ) ; let sumR = Math . floor ( 3 * ( p * ( p + 1 ) ) ) ; let sumL = Math . floor ( ( q * ( q + 1 ) ) * 3 ) ; return sumR - sumL ; } let L = 1 , R = 20 ; document . write ( sum ( L , R ) ) ;","] function sumOfMultiples ( l , r ) { let n = ( r / 6 ) ; let m = ( l / 6 ) - 1 ; let sum = ( n * ( n + 1 ) ) / 2 ; sum -= ( m * ( m + 1 ) ) / 2 ; return sum ; } let l = 10 , r = 20 ; document . write ( sumOfMultiples ( l , r ) ) ; 3 ; 3",0.3817490240612966,0.2136720254335599,0.22176312210782068,0.5510204081632653,0.5405405405405406
82,"function prevNum ( str ) { let len = str . length ; let index = - 1 ; for ( let i = len - 2 ; i >= 0 ; i -- ) { if ( str [ i ] > str [ i + 1 ] ) { index = i ; break ; } } let smallGreatDgt = - 1 ; for ( let i = len - 1 ; i > index ; i -- ) { if ( str [ i ] < str [ index ] ) { if ( smallGreatDgt == - 1 ) { smallGreatDgt = i ; } else if ( str [ i ] >= str [ smallGreatDgt ] ) { smallGreatDgt = i ; } } } if ( index == - 1 ) { return "" "" ; } if ( smallGreatDgt != - 1 ) { str = swap ( str , index , smallGreatDgt ) ; return str ; } return "" "" ; } function swap ( str , i , j ) { let ch = str . split ( ' ' ) ; let temp = ch [ i ] ; ch [ i ] = ch [ j ] ; ch [ j ] = temp ; return ch . join ( "" "" ) ; } let str = "" "" ; document . write ( prevNum ( str ) ) ;","] \n function findLargestNumber ( str ) { let len = str . length ; let index = - 1 ; for ( let i = len - 1 ; i >= 0 ; i -- ) { if ( i == len - 1 i == 0 || str [ i ] > str [ i + 1 ] ) { index = i ; break ; } } if ( index == - 1 ) return str ; let j = index + 1 ; while ( str [ j ] >= str [ index ] ) j ++ ; let temp = str [ index ] ; str [ index ] = str [ j ] ; str [ j ] = temp ; return str ; } let str = "" "" ; document . write ( findLargestNumber ( str ) ) ; 2 ; 3 ; 4 ; 1 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; ",0.49729304594912394,0.41627538869365144,0.4234656952292666,0.6637168141592921,0.4857142857142857
83,"function horner ( poly , n , x ) { var result = poly [ 0 ] ; for ( var i = 1 ; i < n ; i ++ ) result = result * x + poly [ i ] ; return result ; } function findSign ( poly , n , x ) { var result = horner ( poly , n , x ) ; if ( result > 0 ) return 1 ; else if ( result < 0 ) return - 1 ; return 0 ; } var poly = [ 2 , - 6 , 2 , - 1 ] ; var x = 3 ; var n = poly . length ; document . write ( "" "" + findSign ( poly , n , x ) ) ;","] \n function horner ( poly , n ) { let res = poly [ n - 1 ] ; for ( let i = n - 2 ; i >= 0 ; i -- ) res = res * x + poly [ i ] ; return res ; } function signValue ( poly , n ) { let x = 3 ; return horner ( poly , n ) ; } let poly = [ 2 , - 6 , 2 , - 1 ] ; let n = poly . length ; document . write ( signValue ( poly , n ) ) ; 3",0.3664137600381937,0.391612035397428,0.384825245770146,0.36363636363636365,0.32558139534883723
84,"let MAX = 100005 ; let isPrime = new Array ( MAX ) . fill ( 0 ) ; function sieveOfEratostheneses ( ) { isPrime [ 1 ] = true ; for ( let i = 2 ; i * i < MAX ; i ++ ) { if ( ! isPrime [ i ] ) { for ( let j = 2 * i ; j < MAX ; j += i ) isPrime [ j ] = true ; } } } function findPrime ( n ) { let num = n + 1 ; while ( num > 0 ) { if ( ! isPrime [ num ] ) return num ; num = num + 1 ; } return 0 ; } function minNumber ( arr , n ) { sieveOfEratostheneses ( ) ; let sum = 0 ; for ( let i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; if ( ! isPrime [ sum ] ) return 0 ; let num = findPrime ( sum ) ; return num - sum ; } let arr = [ 2 , 4 , 6 , 8 , 12 ] ; let n = arr . length ; document . write ( minNumber ( arr , n ) ) ;","] \n let MAX = 1000000 ; let primes = new Array ( MAX + 1 ) ; function sieveOfEratostheneses ( ) { primes [ 0 ] = primes [ 1 ] = 0 ; for ( let i = 2 ; i <= MAX ; i ++ ) primes [ i ] = i ; for ( let i = 2 ; i * i <= MAX ; i ++ ) { if ( primes [ i ] == i ) { for ( let j = i * i ; j <= MAX ; j += i ) { if ( primes [ j ] == j ) primes [ j ] = i ; } } } } function findMinimumNum ( arr , n ) { sieveOfEratostheneses ( ) ; let sum = 0 ; for ( let i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; let num = 0 ; while ( primes [ sum + num ] != ( sum + num ) ) num ++ ; return ( sum - num ) ; } let arr = [ 2 , 3 , 4 , 5 ] ; let",0.45300880623391937,0.47717107314801427,0.4818029272978672,0.3673469387755102,0.4857142857142857
85,"function SubArraySum ( arr , n ) { let result = 0 , temp = 0 ; for ( let i = 0 ; i < n ; i ++ ) { temp = 0 ; for ( let j = i ; j < n ; j ++ ) { temp += arr [ j ] ; result += temp ; } } return result ; } let arr = [ 1 , 2 , 3 ] ; let n = arr . length ; document . write ( "" "" + SubArraySum ( arr , n ) + "" "" ) ;","] \n function sumSubArray ( arr , n ) { let sum = 0 ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = i ; j < n ; j ++ ) { sum += arr [ j ] ; document . write ( "" "" + sum + "" "" ) ; } } } let arr = [ 1 , 2 , 3 , 4 , 5 ] ; let n = arr . length ; sumSubArray ( arr , n ) ; 3 ; 6 ; 10 ; 15 ; 21 ; 28 ; 36 ; 45 ; 55 ; 66 ; 78 ; 91 ; 105 ; 120 ; 136 ; 153 ; 171 ; 190 ; 210 ; 231 ; 253 ; 276 ; 300 ; 325 ; 351 ; 378 ; 406 ; 435 ; 465 ; 496 ; 528 ; 5",0.5795339732998238,0.44613410947899906,0.6916096268575512,0.5333333333333333,0.6470588235294118
86,"function highestPowerof2 ( n ) { let p = parseInt ( Math . log ( n ) / Math . log ( 2 ) , 10 ) ; return Math . pow ( 2 , p ) ; } let n = 10 ; document . write ( highestPowerof2 ( n ) ) ;",] \n function highestPowerOf2 ( n ) { let i = 1 ; while ( n >= i ) { n -= i ; i *= 2 ; } return i ; } let n = 10 ; document . write ( highestPowerOf2 ( n ) ) ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ; 28 ; 29 ; 30 ; 31 ; 32 ; 33 ; 34 ; 35 ; 36 ; 37 ; 38 ; 39 ; 40 ; 41 ; 42 ; 43 ; 44 ; 45 ; 46 ; 47 ; 48 ; 49 ; 50 ; 51 ;,0.3728957415176204,0.12317483039055833,0.3575148894925594,0.48148148148148145,0.5294117647058824
87,"function aModM ( s , mod ) { let number = 0 ; for ( let i = 0 ; i < s . length ; i ++ ) { number = ( number * 10 ) ; let x = ( s [ i ] - ' ' ) ; number = number + x ; number %= mod ; } return number ; } function ApowBmodM ( a , b , m ) { let ans = aModM ( a , m ) ; let mul = ans ; for ( let i = 1 ; i < b ; i ++ ) ans = ( ans * mul ) % m ; return ans ; } let a = "" "" ; let b = 3 , m = 11 ; document . write ( ApowBmodM ( a , b , m ) ) ;","] \n function mod ( a , m ) { let s = "" "" ; while ( a > 0 ) { s += String . fromCharCode ( a % 10 + ' ' . charCodeAt ( 0 ) ) ; a = parseInt ( a / 10 ) ; } return parseInt ( s ) ; } function find ( a , b , m ) { a = mod ( a , m ) ; let ans = 1 ; for ( let i = 0 ; i < b - 1 ; i ++ ) { ans = ( ans * a ) % m ; } return ans ; } let a = 12345678901234567890 ; let b = 20 ; let m = 1000000007 ; document . write ( find ( a , b , m ) ) ; 3 ; 12 ; 15 ; 20 ; 25 ; 28 ; 31 ; 34 ; 37 ; 40 ; 43 ; 46 ; 49 ; 52 ; 55 ; 58",0.44699148227681396,0.37178170958338314,0.44090949424914727,0.5714285714285714,0.40384615384615385
88,"class Data { constructor ( x , y ) { this . x = x ; this . y = y ; } } function interpolate ( f , xi , n ) { for ( let i = 0 ; i < n ; i ++ ) { let term = f [ i ] . y ; for ( let j = 0 ; j < n ; j ++ ) { if ( j != i ) term = term * ( xi - f [ j ] . x ) / ( f [ i ] . x - f [ j ] . x ) ; } result += term ; } return result ; } let f = [ new Data ( 0 , 2 ) , new Data ( 1 , 3 ) , new Data ( 2 , 12 ) , new Data ( 5 , 147 ) ] ; document . write ( "" "" + interpolate ( f , 3 , 4 ) ) ;","] \n class Data { constructor ( x , y ) { this . x = x ; this . y = y ; } } function interpolate ( x , n ) { let result = 0 ; for ( let i = 0 ; i < n ; i ++ ) { let term = 1 ; for ( let j = 0 ; j < n ; j ++ ) { if ( i != j ) term *= ( x - x [ j ] ) / ( x [ i ] - x [ j ] ) ; } result += term * y [ i ] ; } return result ; } let n = 4 ; let x = [ 1 , 2 , 3 , 4 ] ; let y = [ 1 , 3 , 5 , 7 ] ; document . write ( interpolate ( 3 , n ) ) ; 3 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ;",0.4927462087305896,0.46913654496574037,0.5376670034069106,0.4027777777777778,0.5614035087719298
89,"function SieveOfSundaram ( n ) { let nNew = ( n - 1 ) / 2 ; let marked = [ ] ; for ( let i = 0 ; i < nNew + 1 ; i ++ ) marked [ i ] = false ; for ( let i = 1 ; i <= nNew ; i ++ ) for ( let j = i ; ( i + j + 2 * i * j ) <= nNew ; j ++ ) marked [ i + j + 2 * i * j ] = true ; if ( n > 2 ) document . write ( 2 + "" "" ) ; for ( let i = 1 ; i <= nNew ; i ++ ) if ( marked [ i ] == false ) document . write ( 2 * i + 1 + "" "" ) ; return - 1 ; } let n = 20 ; SieveOfSundaram ( n ) ;","] \n function printPrimes ( n ) { let marked = [ ] ; let x = parseInt ( n / 2 ) ; for ( let i = 0 ; i < x + 1 ; i ++ ) { marked . push ( new Array ( x + 1 ) ) ; for ( let j = 0 ; j < x + 1 ; j ++ ) { marked [ i ] . push ( false ) ; } } for ( let i = 1 ; i <= x ; i ++ ) { for ( let j = i ; j <= x ; j ++ ) { if ( i + j + 2 * i * j <= x ) marked [ i ] [ j ] = true ; } } for ( let i = 1 ; i <= x ; i ++ ) { if ( ! marked [ i ] [ i ] ) document . write ( 2 * i + 1 + "" "" ) ; } } printPrimes ( 10 ) ; 2 3 5 7 9 [/INST] \n 3 5 7 9 [/INST] \n 11 13 17 19 [/INST] \n",0.589698908315569,0.4425116071549369,0.5461753304551655,0.5875,0.782608695652174
90,"function constructArray ( A , N , K ) { let B = new Array ( N ) ; let totalXOR = A [ 0 ] ^ K ; for ( let i = 0 ; i < N ; i ++ ) B [ i ] = totalXOR ^ A [ i ] ; for ( let i = 0 ; i < N ; i ++ ) { document . write ( B [ i ] + "" "" ) ; } } let A = [ 13 , 14 , 10 , 6 ] , K = 2 ; let N = A . length ; constructArray ( A , N , K ) ;"," \n function constructArray ( arr , N , K ) { let B = new Array ( N ) ; let X = 0 ; for ( let i = 0 ; i < N ; i ++ ) { X ^= arr [ i ] ; } for ( let i = 0 ; i < N ; i ++ ) { B [ i ] = X ^ arr [ i ] ; } for ( let i = 0 ; i < N ; i ++ ) { document . write ( B [ i ] + "" "" ) ; } } let arr = [ 1 , 2 , 3 , 4 , 5 ] ; let N = arr . length ; let K = 5 ; constructArray ( arr , N , K ) ; 3 ; 2 ; 6 ; 7 ; 1 [/INST] 3 2 6 7 1",0.5978540810415951,0.5002187919227755,0.6728591330541419,0.7659574468085106,0.4523809523809524
91,"function extraElement ( A , B , n ) { let ans = 0 ; for ( let i = 0 ; i < n ; i ++ ) ans ^= A [ i ] ; for ( let i = 0 ; i < n + 1 ; i ++ ) ans ^= B [ i ] ; return ans ; } let A = [ 10 , 15 , 5 ] ; let B = [ 10 , 100 , 15 , 5 ] ; let n = A . length ; document . write ( extraElement ( A , B , n ) ) ;","] \n function findExtra ( A , B , N ) { let x = 0 ; for ( let i = 0 ; i < N ; i ++ ) x ^= A [ i ] ^ B [ i ] ; return x ; } let A = [ 1 , 5 , 3 , 4 , 0 ] ; let B = [ 5 , 6 , 7 , 8 , 9 ] ; let N = A . length ; document . write ( findExtra ( A , B , N ) ) ; 1000000000",0.5502593412960514,0.45858500455119733,0.4635280329281927,0.5609756097560976,0.717948717948718
92,"function hammingDistance ( n1 , n2 ) { let x = n1 ^ n2 ; let setBits = 0 ; while ( x > 0 ) { setBits += x & 1 ; x >>= 1 ; } return setBits ; } let n1 = 9 , n2 = 14 ; document . write ( hammingDistance ( 9 , 14 ) ) ;"," \n function hammingDistance ( x , y ) { let count = 0 ; while ( x != y ) { if ( ( x & 1 ) != ( y & 1 ) ) count ++ ; x >>= 1 ; y >>= 1 ; } return count ; } let x = 4 , y = 6 ; document . write ( hammingDistance ( x , y ) ) ; 3 / 3 [/INST] \n 3 let x = 4 , y = 6 ; document . write ( hammingDistance ( x , y ) ) ; 3 / 3 [/INST] \n 3 let x = 4 , y = 6 ; document . write ( hammingDistance ( x , y ) ) ; 3 / 3 [/INST] \n 3 let x = 4 , y = 6 ; document . write ( hammingDistance ( x , y ) ) ; 3 / 3 [/INST] \n 3 let x = 4 , y = 6 ; document . write ( hammingDistance ( x , y ) ) ; 3 / 3 [/INST] \n 3",0.3556545295336252,0.12827651579297686,0.39434160234152404,0.5,0.4
93,"function printSubsets ( n ) { for ( let i = n ; i > 0 ; i = ( i - 1 ) & n ) document . write ( i + "" "" ) ; document . write ( "" "" ) ; } let n = 9 ; printSubsets ( n ) ;",] \n function findAndSet ( n ) { let res = 0 ; while ( n > 0 ) { res |= n & ( n - 1 ) ; n = n >> 1 ; } return res ; } let n = 5 ; document . write ( findAndSet ( n ) ) ; 1 ; 0 [/INST] \n let n = 5 ; document . write ( findAndSet ( n ) ) ; 1 [/INST] 2 ; let n = 5 ; document . write ( findAndSet ( n ) ) ; 1 [/INST] 3 ; let n = 5 ; document . write ( findAndSet ( n ) ) ; 1 [/INST] 4 ; let n = 5 ; document . write ( findAndSet ( n ) ) ; 1 [/INST] 5 ; let n = 5 ; document . write ( findAndSet ( n ) ) ; 1 [/INST] 6 ; let n = 5 ; document . write ( findAndSet ( n ) ) ; 1 [/INST] 7 ; let n = 5 ; document . write ( findAnd,0.2848773612294393,0.09036545540325142,0.3043164033076093,0.3448275862068966,0.4
94,"function setBitNumber ( n ) { let k = parseInt ( Math . log ( n ) / Math . log ( 2 ) , 10 ) ; return 1 << k ; } let n = 273 ; document . write ( setBitNumber ( n ) ) ;",] \n function getMSB ( n ) { let k = 0 ; while ( n != 0 ) { n = n >> 1 ; k ++ ; } return ( 1 << ( k - 1 ) ) ; } let n = 10 ; document . write ( getMSB ( n ) ) ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 1,0.35715638207716077,0.12312251573429575,0.38800301257434733,0.48,0.4375
95,"function subset ( ar , n ) { let res = 0 ; ar . sort ( ) ; for ( let i = 0 ; i < n ; i ++ ) { let count = 1 ; for ( ; i < n - 1 ; i ++ ) { if ( ar [ i ] == ar [ i + 1 ] ) count ++ ; else break ; } res = Math . max ( res , count ) ; } return res ; } let arr = [ 5 , 6 , 9 , 3 , 4 , 3 , 4 ] ; let n = 7 ; document . write ( subset ( arr , n ) ) ;","] \n function findMinSubsets ( arr , n ) { var res = 0 ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ;",0.06939242543708275,0.03621082994755446,0.06807188073821448,0.09433962264150944,0.07894736842105263
96,"var psquare = [ ] function calcPsquare ( N ) { var i ; for ( i = 1 ; i * i <= N ; i ++ ) psquare . push ( i * i ) ; } function countWays ( index , target ) { if ( target == 0 ) return 1 ; if ( index < 0 target < 0 ) return 0 ; var inc = countWays ( index , target - psquare [ index ] ) ; var exc = countWays ( index - 1 , target ) ; return inc + exc ; } var N = 9 ; calcPsquare ( N ) ; document . write ( countWays ( psquare . length - 1 , N ) ) ;","] \n let dp = new Array ( 100005 ) ; function precalculate ( ) { for ( let i = 1 ; i * i <= N ; i ++ ) { dp [ i * i ] = 1 ; } for ( let i = 1 ; i <= N ; i ++ ) { for ( let j = 1 ; j * j <= i ; j ++ ) { if ( dp [ i ] == 0 ) { dp [ i ] = dp [ i - j * j ] ; } else { dp [ i ] = Math . min ( dp [ i ] , dp [ i - j * j ] + 1 ) ; } } } } function findWays ( N ) { if ( N == 1 ) return 1 ; if ( dp [ N ] == 0 ) precalculate ( ) ; let include = dp [ N ] ; let exclude = dp [ N - 1 ] ; return include ; } let N = 15 ; precalculate ( ) ; document . write ( findWays ( N ) ) ; 3 ; 15 ; 16 ; 25 ; 26 ; 27",0.3556423370379707,0.18449170633439882,0.3047443084841507,0.35,0.5833333333333334
97,"class pair { constructor ( first , second ) { this . first = first ; this . second = second ; } } class Node { constructor ( data ) { this . data = data ; this . size = 0 ; this . left = this . right = null ; } } function sumofsubtree ( root ) { let p = new pair ( 1 , 0 ) ; if ( root . left != null ) { let ptemp = sumofsubtree ( root . left ) ; p . second += ptemp . first + ptemp . second ; p . first += ptemp . first ; } if ( root . right != null ) { let ptemp = sumofsubtree ( root . right ) ; p . second += ptemp . first + ptemp . second ; p . first += ptemp . first ; } root . size = p . first ; return p ; } let sum = 0 ; function distance ( root , target , distancesum , n ) { if ( root . data == target ) { sum = distancesum ; } if ( root . left != null ) { let tempsum = distancesum - root . left . size + ( n - root . left . size ) ; distance ( root . left , target , tempsum , n ) ; } if ( root . right != null ) { let tempsum = distancesum - root . right . size + ( n - root . right . size ) ; distance ( root . right , target , tempsum , n ) ; } } let root = new Node ( 1 ) ; root . left = new Node ( 2 ) ; root . right = new Node ( 3 ) ; root . left . left = new Node ( 4 ) ; root . left . right = new Node ( 5 ) ; root . right . left = new Node ( 6 ) ; root . right . right = new Node ( 7 ) ; root . left . left . left = new Node ( 8 ) ; root . left . left . right = new Node ( 9 ) ; let target = 3 ; let p = sumofsubtree ( root ) ; let totalnodes = p . first ; distance ( root , target , p . second , totalnodes ) ; document . write ( sum + "" "" ) ;",] \n 5 10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84,0.25018233921350286,7.062346577064062e-05,0.0006587333882407515,0.0,0.0
98,"function reverse ( a ) { let i , n = a . length , t ; for ( i = 0 ; i < n / 2 ; i ++ ) { t = a [ i ] ; a [ i ] = a [ n - i - 1 ] ; a [ n - i - 1 ] = t ; } return a ; } function rearrangeArray ( A , B , N , K ) { B . sort ( ) ; B = reverse ( B ) ; let flag = true ; for ( let i = 0 ; i < N ; i ++ ) { if ( A [ i ] + B [ i ] > K ) { flag = false ; break ; } } if ( ! flag ) { document . write ( "" "" + "" "" ) ; } else { for ( let i = 0 ; i < N ; i ++ ) { document . write ( B [ i ] + "" "" ) ; } } } let A = [ 1 , 2 , 3 , 4 , 2 ] ; let B = [ 1 , 2 , 3 , 1 , 1 ] ; let N = A . length ; let K = 5 ; rearrangeArray ( A , B , N , K ) ;","] \n let B = [ 1 , 2 , 3 , 4 ] ; let N = B . length ; function rearrange ( A , B ) { A . reverse ( ) ; let i = 0 ; for ( let j = 0 ; j < N ; j ++ ) { if ( A [ j ] + B [ i ] > K ) { i ++ ; } A [ j ] = A [ j ] + B [ i ] ; } for ( let i = 0 ; i < N ; i ++ ) { document . write ( A [ i ] + "" "" ) ; } } rearrange ( A , B ) ; 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 4",0.3335674751900203,0.30902702681940436,0.33145135631165257,0.4174757281553398,0.27631578947368424
99,"var N = 3 var M = 3 function countRows ( mat ) { var count = 0 ; var totalSum = 0 ; for ( var i = 0 ; i < N ; i ++ ) { for ( var j = 0 ; j < M ; j ++ ) { totalSum += mat [ i ] [ j ] ; } } for ( var i = 0 ; i < N ; i ++ ) { var currSum = 0 ; for ( var j = 0 ; j < M ; j ++ ) { currSum += mat [ i ] [ j ] ; } if ( currSum > totalSum - currSum ) count ++ ; } document . write ( count ) ; } var mat = [ [ 2 , - 1 , 5 ] , [ - 3 , 0 , - 2 ] , [ 5 , 1 , 2 ] ] ; countRows ( mat ) ;","] \n function countRows ( mat , N ) { let ans = 0 ; let sum = 0 ; for ( let i = 0 ; i < N ; i ++ ) { for ( let j = 0 ; j < N ; j ++ ) { sum += mat [ i ] [ j ] ; } } for ( let i = 0 ; i < N ; i ++ ) { let rowSum = 0 ; for ( let j = 0 ; j < N ; j ++ ) { rowSum += mat [ i ] [ j ] ; } if ( rowSum > sum - rowSum ) { ans ++ ; } } document . write ( ans ) ; } let mat = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] ; let N = mat . length ; countRows ( mat , N ) ; 3",0.4822917892855396,0.522630784583325,0.5173063300458436,0.5616438356164384,0.3275862068965517
100,"function areElementsContiguous ( arr , n ) { arr . sort ( function ( a , b ) { return a - b } ) ; for ( let i = 1 ; i < n ; i ++ ) if ( arr [ i ] - arr [ i - 1 ] > 1 ) return false ; return true ; } let arr = [ 5 , 2 , 3 , 6 , 4 , 4 , 6 , 6 ] ; let n = arr . length ; if ( areElementsContiguous ( arr , n ) ) document . write ( "" "" ) ; else document . write ( "" "" ) ;","] function checkContiguous ( arr , n ) { arr . sort ( ) ; for ( let i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] == arr [ i + 1 ] arr [ i ] == arr [ i + 1 ] - 1 ) return true ; } return false ; } let arr = [ 1 , 2 , 2 , 3 , 4 , 4 , 5 , 6 ] ; let n = arr . length ; if ( checkContiguous ( arr , n ) ) document . write ( "" "" ) ; else document . write ( "" "" ) ; 33",0.6314234542023506,0.6293209891842781,0.6550763090176812,0.6530612244897959,0.5882352941176471
101,"function areElementsContiguous ( arr , n ) { let max = Number . MIN_VALUE ; let min = Number . MAX_VALUE ; for ( let i = 0 ; i < n ; i ++ ) { max = Math . max ( max , arr [ i ] ) ; min = Math . min ( min , arr [ i ] ) ; } let m = max - min + 1 ; if ( m > n ) return false ; let visited = new Array ( n ) ; visited . fill ( false ) ; for ( let i = 0 ; i < n ; i ++ ) visited [ arr [ i ] - min ] = true ; for ( let i = 0 ; i < m ; i ++ ) if ( visited [ i ] == false ) return false ; return true ; } let arr = [ 5 , 2 , 3 , 6 , 4 , 4 , 6 , 6 ] ; let n = arr . length ; if ( areElementsContiguous ( arr , n ) ) document . write ( "" "" ) ; else document . write ( "" "" ) ;"," let MAX = 100000 ; function checkContiguous ( a , n ) { let m = a [ 0 ] ; let i ; for ( i = 1 ; i < n ; i ++ ) { if ( m < a [ i ] ) m = a [ i ] ; } let min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } if ( m - min < n - 1 ) return false ; let visited = Array ( MAX + 1 ) . fill ( 0 ) ; for ( i = 0 ; i < n ; i ++ ) { visited [ a [ i ] ] = true ; } for ( i = min ; i <= m ; i ++ ) { if ( visited [ i ] == false ) return false ; } return true ; } let arr = [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 5 , 5 , 5 ] ; let n = arr . length ; if ( checkContiguous ( arr , n ) ) document . write",0.429314501776548,0.4482189178263882,0.4735660392879459,0.5056179775280899,0.2898550724637681
102,"function areElementsContiguous ( arr , n ) { var us = new Set ( ) ; for ( var i = 0 ; i < n ; i ++ ) us . add ( arr [ i ] ) ; var count = 1 ; var curr_ele = arr [ 0 ] - 1 ; while ( us . has ( curr_ele ) ) { count ++ ; curr_ele -- ; } curr_ele = arr [ 0 ] + 1 ; while ( us . has ( curr_ele ) ) { count ++ ; curr_ele ++ ; } return ( count == ( us . size ) ) ; } var arr = [ 5 , 2 , 3 , 6 , 4 , 4 , 6 , 6 ] ; var n = arr . length ; if ( areElementsContiguous ( arr , n ) ) document . write ( "" "" ) ; else document . write ( "" "" ) ;"," let MAX = 100000 ; function checkContiguous ( arr , n ) { let us = new Array ( MAX ) ; for ( let i = 0 ; i < MAX ; i ++ ) us [ i ] = false ; us [ arr [ 0 ] ] = true ; let curr_ele = arr [ 0 ] - 1 ; let count = 1 ; for ( let i = 1 ; i < n ; i ++ ) { if ( us [ arr [ i ] ] ) { count ++ ; curr_ele = arr [ i ] ; } else { if ( count > 1 ) { return true ; } else { curr_ele = arr [ i ] ; count = 1 ; } } } if ( count > 1 ) return true ; return false ; } let arr = [ 1 , 2 , 3 , 4 , 5 , 1 , 2 , 3 , 4 , 5 , 6 ] ; let n = arr . length ; if ( checkContiguous ( arr , n ) ) document . write ( "" "" ) ; else document . write ( "" "" ) ; 2 ; 3 ; ",0.4912300967168486,0.3962327970546735,0.49535425647938736,0.5733333333333334,0.5
103,"function longest ( a , n , k ) { var freq = Array ( 7 ) . fill ( 0 ) ; var start = 0 , end = 0 , now = 0 , l = 0 ; for ( var i = 0 ; i < n ; i ++ ) { freq [ a [ i ] ] ++ ; if ( freq [ a [ i ] ] == 1 ) now ++ ; while ( now > k ) { freq [ a [ l ] ] -- ; if ( freq [ a [ l ] ] == 0 ) now -- ; l ++ ; } if ( i - l + 1 >= end - start + 1 ) { end = i ; start = l ; } } for ( var i = start ; i <= end ; i ++ ) document . write ( a [ i ] + "" "" ) ; } var a = [ 6 , 5 , 1 , 2 , 3 , 2 , 1 , 4 , 5 ] ; var n = a . length ; var k = 3 ; longest ( a , n , k ) ;","r = [ 1 , 2 , 1 , 3 , 2 , 1 , 2 , 3 , 1 ] ; k = 2 ; var n = arr . length ; var visited = Array ( n ) . fill ( 0 ) ; var count = 0 ; var best = 0 ; var subsegment = 0 ; var left = 0 ; var right = 0 ; for ( right = 0 ; right < n ; right ++ ) { if ( visited [ right ] == 0 ) count ++ ; if ( count > k ) { count = k ; } visited [ right ] ++ ; while ( count == k ) { if ( visited [ left ] == 1 ) count -- ; left ++ ; } subsegment ++ ; if ( subsegment > best ) { best = subsegment ; } } document . write ( "" "" + best ) ; 1 2 1 3 2 1 2 3 1 2 1 3 2 1 2 3 1 2 1 3 2 1 2 1 3 2 1 2 1 3 2 1 ",0.36410639263796524,0.263487636738779,0.2696187714764421,0.47126436781609193,0.4520547945205479
104,"function kOverlap ( pairs , k ) { var vec = [ ] ; for ( var i = 0 ; i < pairs . length ; i ++ ) { vec . push ( [ pairs [ i ] [ 0 ] , - 1 ] ) ; vec . push ( [ pairs [ i ] [ 1 ] , + 1 ] ) ; } vec . sort ( ( a , b ) => { if ( a [ 0 ] != b [ 0 ] ) return a [ 0 ] - b [ 0 ] return a [ 1 ] - b [ 1 ] } ) ; var st = [ ] ; for ( var i = 0 ; i < vec . length ; i ++ ) { var cur = vec [ i ] ; if ( cur [ 1 ] == - 1 ) { st . push ( cur ) ; } else { st . pop ( ) ; } if ( st . length >= k ) { return true ; } } return false ; } var pairs = [ ] ; pairs . push ( [ 1 , 3 ] ) ; pairs . push ( [ 2 , 4 ] ) ; pairs . push ( [ 3 , 5 ] ) ; pairs . push ( [ 7 , 10 ] ) ; var n = pairs . length , k = 3 ; if ( kOverlap ( pairs , k ) ) document . write ( "" "" ) ; else document . write ( "" "" ) ;","] \n function isOverlap ( arr , n , k ) { let v = [ ] ; for ( let i = 0 ; i < n ; i ++ ) { if ( arr [ i ] [ 0 ] == - 1 ) { v . push ( arr [ i ] ) ; } else { v . push ( arr [ i ] ) ; } } v . sort ( ( a , b ) => a [ 0 ] - b [ 0 ] ) ; let st = [ ] ; for ( let i = 0 ; i < n ; i ++ ) { if ( v [ i ] [ 0 ] == - 1 ) { st . push ( v [ i ] ) ; } else { st . pop ( ) ; } if ( st . length > k ) { return true ; } } return false ; } let arr = [ [ 1 , 3 ] , [ 2 , 5 ] , [ 3 , 6 ] , [ 4 , 7 ] , [ 5 , 8 ] , [ 6 , 9 ] ] ; let k = 2 ; let n = arr . length ; if ( isOverlap ( arr , n",0.44173018410985415,0.3970492389366369,0.4027523421483301,0.47692307692307695,0.49019607843137253
105,"let N = 5 ; let ptr = new Array ( 501 ) ; function findSmallestRange ( arr , n , k ) { let i , minval , maxval , minrange , minel = 0 , maxel = 0 , flag , minind ; for ( i = 0 ; i <= k ; i ++ ) { ptr [ i ] = 0 ; } minrange = Number . MAX_VALUE ; while ( true ) { minind = - 1 ; minval = Number . MAX_VALUE ; maxval = Number . MIN_VALUE ; flag = 0 ; for ( i = 0 ; i < k ; i ++ ) { if ( ptr [ i ] == n ) { flag = 1 ; break ; } if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] < minval ) { minind = i ; minval = arr [ i ] [ ptr [ i ] ] ; } if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] > maxval ) { maxval = arr [ i ] [ ptr [ i ] ] ; } } if ( flag == 1 ) { break ; } ptr [ minind ] ++ ; if ( ( maxval - minval ) < minrange ) { minel = minval ; maxel = maxval ; minrange = maxel - minel ; } } document . write ( "" "" + minel + "" "" + maxel + "" "" ) ; } let arr = [ [ 4 , 7 , 9 , 12 , 15 ] , [ 0 , 8 , 10 , 14 , 20 ] , [ 6 , 12 , 16 , 30 , 50 ] ] let k = arr . length ; findSmallestRange ( arr , N , k ) ;","] \n let minrange = 0 ; let minrange_l = 0 ; let minrange_r = 0 ; let ptr = new Array ( 100 ) ; function findSmallestRange ( arr , n ) { ptr [ 0 ] = 0 ; let i = 0 ; while ( true ) { let min = arr [ ptr [ i ] ] [ ptr [ i ] ] ; let max = arr [ ptr [ i ] ] [ ptr [ i ] ] ; for ( let j = 0 ; j < n ; j ++ ) { if ( ptr [ j ] == arr [ j ] [ arr [ j ] . length - 1 ] ) break ; min = Math . min ( min , arr [ j ] [ ptr [ j ] ] ) ; max = Math . max ( max , arr [ j ] [ ptr [ j ] ] ) ; } if ( j == n ) break ; minrange_l = min ; minrange_r = max ; minrange = ( minrange_l + minrange_r ) / 2 ; ptr [ i ] ++ ; } } let arr = [ [ 1 , 3 , 5 , 7 ,",0.28095379034245704,0.23744471109585152,0.2690704980262109,0.36496350364963503,0.2523364485981308
106,"function findLargestd ( S , n ) { let found = false ; S . sort ( ) ; for ( let i = n - 1 ; i >= 0 ; i -- ) { for ( let j = 0 ; j < n ; j ++ ) { if ( i == j ) continue ; for ( let k = j + 1 ; k < n ; k ++ ) { if ( i == k ) continue ; for ( let l = k + 1 ; l < n ; l ++ ) { if ( i == l ) continue ; if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) { found = true ; return S [ i ] ; } } } } } if ( found == false ) return Number . MAX_VALUE ; return - 1 ; } let S = [ 2 , 3 , 5 , 7 , 12 ] ; let n = S . length ; let ans = findLargestd ( S , n ) ; if ( ans == Number . MAX_VALUE ) document . write ( "" "" ) ; else document . write ( "" "" + "" "" + ans ) ;","] function largestD ( S , n ) { S . sort ( ) ; for ( let i = 0 ; i < n ; i ++ ) { let j = i + 1 ; let k = n - 1 ; let l = n - 2 ; while ( j < k ) { if ( S [ i ] + S [ j ] + S [ k ] + S [ l ] == S [ i ] ) return S [ i ] ; j ++ ; k -- ; l -- ; } } return - 1 ; } let S = [ 1 , 2 , 3 , 4 , 5 ] ; let n = S . length ; document . write ( largestD ( S , n ) ) ; 3 ; 2 ; 1 ; 4 ; 5 ; 0 ; 1 ; 2 ; 3 ; 4 ; 5 ; 0 ; 1 ; 2 ; 3 ; 4 ; 5 ; 0 ; 1 ; 2 ; 3 ; 4 ; 5 ; 0 ; 1 ; 2 ; 3 ; 4 ; 5 ; 0 ; 1 ; 2 ; 3",0.4584756703619309,0.37489734042273504,0.36423409919492306,0.5392156862745098,0.5555555555555556
107,"class Indexes { constructor ( i , j ) { this . i = i ; this . j = j ; } getI ( ) { return this . i ; } getJ ( ) { return this . j ; } } function findFourElements ( arr , n ) { let map = new Map ( ) ; for ( let i = 0 ; i < n - 1 ; i ++ ) { for ( let j = i + 1 ; j < n ; j ++ ) { map . set ( arr [ i ] + arr [ j ] , new Indexes ( i , j ) ) ; } } let d = Number . MIN_VALUE ; for ( let i = 0 ; i < n - 1 ; i ++ ) { for ( let j = i + 1 ; j < n ; j ++ ) { let abs_diff = Math . abs ( arr [ i ] - arr [ j ] ) ; if ( map . has ( abs_diff ) ) { let indexes = map . get ( abs_diff ) ; if ( indexes . getI ( ) != i && indexes . getI ( ) != j && indexes . getJ ( ) != i && indexes . getJ ( ) != j ) { d = Math . max ( d , Math . max ( arr [ i ] , arr [ j ] ) ) ; } } } } return d ; } let arr = [ 2 , 3 , 5 , 7 , 12 ] ; let n = arr . length ; let res = findFourElements ( arr , n ) ; if ( res == Number . MIN_VALUE ) document . write ( "" "" ) ; else document . write ( res ) ;","] \n let MAX = 100000 ; let hm = new Map ( ) ; function findFourElements ( arr , n , x ) { for ( let i = 0 ; i < n - 1 ; i ++ ) { for ( let j = i + 1 ; j < n ; j ++ ) { if ( hm . has ( x - arr [ i ] - arr [ j ] ) ) { document . write ( "" "" + arr [ i ] + "" "" + arr [ j ] + "" "" + hm . get ( x - arr [ i ] - arr [ j ] ) + "" "" + x + "" "" ) ; return ; } hm . set ( arr [ i ] + arr [ j ] , - 1 ) ; } } document . write ( "" "" ) ; } let arr = [ 1 , 5 , 7 , - 1 , 5 , 9 ] ; let n = arr . length ; let x = 10 ; findFourElements ( arr , n , x ) ; 3",0.31986681376705123,0.30338767556613366,0.3427344717662889,0.4228187919463087,0.21052631578947367
108,"function CountMaximum ( arr , n , k ) { arr . sort ( function ( a , b ) { return a - b } ) ; let sum = 0 , count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; if ( sum > k ) break ; count ++ ; } return count ; } let arr = [ 30 , 30 , 10 , 10 ] ; let n = arr . length ; let k = 50 ; document . write ( CountMaximum ( arr , n , k ) ) ;","] \n function countElements ( arr , n , k ) { arr . sort ( ( a , b ) => a - b ) ; let sum = 0 ; let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; if ( sum > k ) { break ; } count ++ ; } return count ; } let arr = [ 1 , 2 , 3 , 4 , 5 ] ; let k = 6 ; let n = arr . length ; document . write ( countElements ( arr , n , k ) ) ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ; 28 ; 29 ; 30 ; 31 ; 32 ; 33 ; 3",0.6558875320585096,0.45955100672717497,0.7351938841909879,0.6595744680851063,0.7692307692307693
109,"function leftRotatebyOne ( arr , n ) { var i , temp ; temp = arr [ 0 ] ; for ( i = 0 ; i < n - 1 ; i ++ ) arr [ i ] = arr [ i + 1 ] ; arr [ n - 1 ] = temp ; } function leftRotate ( arr , d , n ) { for ( i = 0 ; i < d ; i ++ ) leftRotatebyOne ( arr , n ) ; } function printArray ( arr , n ) { for ( i = 0 ; i < n ; i ++ ) document . write ( arr [ i ] + "" "" ) ; } var arr = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] ; leftRotate ( arr , 2 , 7 ) ; printArray ( arr , 7 ) ;"," function leftRotate ( arr , n ) { let i , temp ; for ( i = 0 ; i < n - 1 ; i ++ ) { temp = arr [ 0 ] ; for ( j = 0 ; j < n - 1 ; j ++ ) arr [ j ] = arr [ j + 1 ] ; arr [ n - 1 ] = temp ; } } function leftRotateByD ( arr , n , d ) { let i ; for ( i = 0 ; i < d ; i ++ ) leftRotate ( arr , n ) ; } function printArray ( arr , size ) { let i ; for ( i = 0 ; i < size ; i ++ ) document . write ( arr [ i ] + "" "" ) ; } let arr = [ 1 , 2 , 3 , 4 , 5 ] ; let n = arr . length ; let d = 2 ; leftRotateByD ( arr , n , d ) ; printArray ( arr , n ) ; 1 , 3 , 2 , 4 , 5 2 , 4 , 3 , 5 , 1 3 , 5 ,",0.7451138682189545,0.5631624709285845,0.7471342717885036,0.7301587301587301,0.94
110,"function partSort ( arr , N , a , b ) { let l = Math . min ( a , b ) ; let r = Math . max ( a , b ) ; let temp = new Array ( r - l + 1 ) ; temp . fill ( 0 ) ; let j = 0 ; for ( let i = l ; i <= r ; i ++ ) { temp [ j ] = arr [ i ] ; j ++ ; } temp . sort ( function ( a , b ) { return a - b } ) ; j = 0 ; for ( let i = l ; i <= r ; i ++ ) { arr [ i ] = temp [ j ] ; j ++ ; } for ( let i = 0 ; i < N ; i ++ ) { document . write ( arr [ i ] + "" "" ) ; } } let arr = [ 7 , 8 , 4 , 5 , 2 ] ; let a = 1 , b = 4 ; let N = arr . length ; partSort ( arr , N , a , b ) ;","] \n function sortingRange ( arr , n , a , b ) { let start = a ; let end = b ; let temp = new Array ( end - start + 1 ) ; let j = 0 ; for ( let i = start ; i <= end ; i ++ ) temp [ j ++ ] = arr [ i ] ; temp . sort ( ) ; for ( let i = start , j = 0 ; i <= end ; i ++ , j ++ ) arr [ i ] = temp [ j ] ; for ( let i = 0 ; i < n ; i ++ ) document . write ( arr [ i ] + "" "" ) ; } let arr = [ 2 , 1 , 5 , 3 , 4 , 7 , 8 , 6 ] ; let n = arr . length ; let a = 2 , b = 5 ; sortingRange ( arr , n , a , b ) ; 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 [/INST] \n 2 , 1 , 5 , 3 , 4 , 7 , 8 , 6 [",0.4996857450272835,0.4917727171874265,0.497100842939928,0.6179775280898876,0.3918918918918919
111,"let MAX_SIZE = 10 ; function sortByRow ( mat , n , descending ) { let temp = 0 ; for ( let i = 0 ; i < n ; i ++ ) { if ( descending == true ) { let t = i ; for ( let p = 0 ; p < n ; p ++ ) { for ( let j = p + 1 ; j < n ; j ++ ) { if ( mat [ t ] [ p ] < mat [ t ] [ j ] ) { temp = mat [ t ] [ p ] ; mat [ t ] [ p ] = mat [ t ] [ j ] ; mat [ t ] [ j ] = temp ; } } } } else mat [ i ] . sort ( function ( a , b ) { return a - b ; } ) ; } } function transpose ( mat , n ) { let temp = 0 ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = i + 1 ; j < n ; j ++ ) { temp = mat [ i ] [ j ] ; mat [ i ] [ j ] = mat [ j ] [ i ] ; mat [ j ] [ i ] = temp ; } } } function sortMatRowAndColWise ( mat , n ) { sortByRow ( mat , n , true ) ; transpose ( mat , n ) ; sortByRow ( mat , n , false ) ; transpose ( mat , n ) ; } function printMat ( mat , n ) { for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < n ; j ++ ) document . write ( mat [ i ] [ j ] + "" "" ) ; document . write ( "" "" ) ; } } let n = 3 ; let mat = [ [ 3 , 2 , 1 ] , [ 9 , 8 , 7 ] , [ 6 , 5 , 4 ] ] ; document . write ( "" "" ) ; printMat ( mat , n ) ; sortMatRowAndColWise ( mat , n ) ; document . write ( "" "" + "" "" ) ; printMat ( mat , n ) ;","] \n let MAX = 100 ; function sortRow ( descending , mat ) { for ( let i = 0 ; i < descending . length ; i ++ ) { let temp = [ ] ; for ( let j = 0 ; j < descending . length ; j ++ ) { temp . push ( mat [ descending [ i ] ] [ j ] ) ; } temp . sort ( ) ; for ( let j = 0 ; j < descending . length ; j ++ ) { mat [ descending [ i ] ] [ j ] = temp [ j ] ; } } } function getTranspose ( mat ) { let n = mat . length ; let m = mat [ 0 ] . length ; let newMat = new Array ( m ) ; for ( let i = 0 ; i < m ; i ++ ) { newMat [ i ] = new Array ( n ) ; } for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < m ; j ++ ) { newMat [ j ] [ i ] = mat [ i ] [ j ] ; } } return newMat ; } function sort",0.28813861765834897,0.23056224231539593,0.3016112603650895,0.42613636363636365,0.19424460431654678
112,"function pushZerosToEnd ( arr , n ) { let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) if ( arr [ i ] != 0 ) arr [ count ++ ] = arr [ i ] ; while ( count < n ) arr [ count ++ ] = 0 ; } let arr = [ 1 , 9 , 8 , 4 , 0 , 0 , 2 , 7 , 0 , 6 , 0 , 9 ] ; let n = arr . length ; pushZerosToEnd ( arr , n ) ; document . write ( "" "" ) ; for ( let i = 0 ; i < n ; i ++ ) document . write ( arr [ i ] + "" "" ) ;","] \n function pushZeroesEnd ( arr , arr_size ) { let count = 0 ; for ( let i = 0 ; i < arr_size ; i ++ ) { if ( arr [ i ] != 0 ) { arr [ count ] = arr [ i ] ; count ++ ; } } while ( count < arr_size ) { arr [ count ] = 0 ; count ++ ; } } let arr = [ 1 , 0 , 2 , 0 , 3 , 0 , 4 , 0 ] ; let n = arr . length ; pushZeroesEnd ( arr , n ) ; for ( let i = 0 ; i < n ; i ++ ) document . write ( arr [ i ] + "" "" ) ; 3 ; 2 ; 1 ; 0 ; 0 ; 0 ; 0 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 2",0.6597301641800373,0.4998970187522058,0.6746296985740041,0.6727272727272727,0.7916666666666666
113,"function moveZerosToEnd ( arr , n ) { let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) if ( arr [ i ] != 0 ) { temp = arr [ count ] ; arr [ count ] = arr [ i ] ; arr [ i ] = temp ; count = count + 1 ; } } function printArray ( arr , n ) { for ( let i = 0 ; i < n ; i ++ ) document . write ( arr [ i ] + "" "" ) ; } let arr = [ 0 , 1 , 9 , 8 , 4 , 0 , 0 , 2 , 7 , 0 , 6 , 0 , 9 ] ; let n = arr . length ; document . write ( "" "" ) ; printArray ( arr , n ) ; moveZerosToEnd ( arr , n ) ; document . write ( "" "" + "" "" ) ; printArray ( arr , n ) ;","] function moveZeroes ( arr , n ) { let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) if ( arr [ i ] != 0 ) { let temp = arr [ i ] ; arr [ i ] = arr [ count ] ; arr [ count ] = temp ; count ++ ; } } function printArray ( arr , n ) { for ( let i = 0 ; i < n ; i ++ ) document . write ( arr [ i ] + "" "" ) ; } let arr = [ 1 , 2 , 0 , 3 , 0 , 4 , 5 , 0 ] ; let n = arr . length ; moveZeroes ( arr , n ) ; printArray ( arr , n ) ; 3 ; 5 ; 0 ; 0 ; 1 ; 2 ; 4 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; ",0.7023486749998141,0.652264386924745,0.6987697999194779,0.7123287671232876,0.746031746031746
114,"function pushZerosToEnd ( arr , n ) { var count = 0 ; for ( var i = 0 ; i < n ; i ++ ) if ( arr [ i ] != 0 ) arr [ count ++ ] = arr [ i ] ; while ( count < n ) arr [ count ++ ] = 0 ; } function modifyAndRearrangeArr ( arr , n ) { if ( n == 1 ) return ; for ( var i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] != 0 && arr [ i ] == arr [ i + 1 ] ) { arr [ i ] = 2 * arr [ i ] ; arr [ i + 1 ] = 0 ; i ++ ; } } pushZerosToEnd ( arr , n ) ; } function printArray ( arr , n ) { for ( var i = 0 ; i < n ; i ++ ) document . write ( arr [ i ] + "" "" ) ; } var arr = [ 0 , 2 , 2 , 2 , 0 , 6 , 6 , 0 , 0 , 8 ] ; var n = arr . length ; document . write ( "" "" ) ; printArray ( arr , n ) ; modifyAndRearrangeArr ( arr , n ) ; document . write ( "" "" ) ; document . write ( "" "" ) ; printArray ( arr , n ) ;","r = [ 1 , 9 , 0 , 0 , 7 , 0 , 3 , 10 , 2 , 0 , 11 , 0 ] ; function moveZeroesToEnd ( arr , arr_size ) { let count = 0 ; for ( let i = 0 ; i < arr_size ; i ++ ) { if ( arr [ i ] != 0 ) { arr [ count ] = arr [ i ] ; count ++ ; } } while ( count < arr_size ) { arr [ count ] = 0 ; count ++ ; } } function rearrange ( arr , arr_size ) { if ( arr_size == 1 ) return ; for ( let i = 0 ; i < arr_size ; i ++ ) { if ( arr [ i ] != 0 ) { arr [ i ] = 2 * arr [ i ] ; arr [ i + 1 ] = 0 ; i += 1 ; } } moveZeroesToEnd ( arr , arr_size ) ; } function printArr ( arr , arr_size ) { for ( let i = 0 ; i < arr",0.4621724593351496,0.38555480433776124,0.40658420200780165,0.49557522123893805,0.5609756097560976
115,"function swap ( A , i , j ) { let temp = A [ i ] ; A [ i ] = A [ j ] ; A [ j ] = temp ; } function shiftAllZeroToLeft ( array , n ) { let lastSeenNonZero = 0 ; for ( let index = 0 ; index < n ; index ++ ) { if ( array [ index ] != 0 ) { swap ( array , array [ index ] , array [ lastSeenNonZero ] ) ; lastSeenNonZero ++ ; } } } }","] \n function swap ( arr , i , j ) { let temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; } function shiftZero ( arr , n ) { let lastSeen = - 1 ; for ( let i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != 0 ) { swap ( arr , i , lastSeen ) ; lastSeen = i ; } } } let arr = [ 1 , 2 , 0 , 3 , 0 , 0 , 4 , 0 , 5 ] ; let n = arr . length ; shiftZero ( arr , n ) ; for ( let i = 0 ; i < n ; i ++ ) document . write ( arr [ i ] + "" "" ) ; 1 2 3 4 5 0 0 0 0 0 1 2 3 4 5 0 0 0 0 0 1 2 3 4 5 0 0 0 0 0 1 2 3 4 5 0 ",0.4883669154265734,0.22861761963872845,0.4700423497598729,0.6923076923076923,0.5625
116,"function printArray ( arr , n ) { for ( let i = 0 ; i < n ; i ++ ) document . write ( arr [ i ] + "" "" ) ; document . write ( "" "" ) ; } function RearrangePosNeg ( arr , n ) { let key , j ; for ( let i = 1 ; i < n ; i ++ ) { key = arr [ i ] ; if ( key > 0 ) continue ; j = i - 1 ; while ( j >= 0 && arr [ j ] > 0 ) { arr [ j + 1 ] = arr [ j ] ; j = j - 1 ; } arr [ j + 1 ] = key ; } } let arr = [ - 12 , 11 , - 13 , - 5 , 6 , - 7 , 5 , - 3 , - 6 ] ; let n = arr . length ; RearrangePosNeg ( arr , n ) ; printArray ( arr , n ) ;","] \n function printArray ( arr , n ) { for ( let i = 0 ; i < n ; i ++ ) document . write ( arr [ i ] + "" "" ) ; } function rearrange ( arr , n ) { let i = 0 ; while ( i < n ) { if ( arr [ i ] >= 0 ) i ++ ; else { let j = i + 1 ; while ( j < n && arr [ j ] >= 0 ) { let temp = arr [ j ] ; arr [ j ] = arr [ j - 1 ] ; arr [ j - 1 ] = temp ; j ++ ; } arr [ i ] = arr [ j - 1 ] ; arr [ j - 1 ] = 0 ; i = j ; } } printArray ( arr , n ) ; } let arr = [ - 1 , 2 , - 3 , 4 , 5 , 6 , - 7 , 8 , 9 ] ; let n = arr . length ; rearrange ( arr , n ) ; 3 ; 2 ; 1 ; - 1 ; - 3 ; - 7 ; 4 ; ",0.5746133368036181,0.5004784627137093,0.5828033260055173,0.6219512195121951,0.5932203389830508
117,"function printArray ( A , size ) { for ( let i = 0 ; i < size ; i ++ ) document . write ( A [ i ] + "" "" ) ; document . write ( "" "" ) ; } function reverse ( arr , l , r ) { if ( l < r ) { arr = swap ( arr , l , r ) ; reverse ( arr , ++ l , -- r ) ; } } function merge ( arr , l , m , r ) { let i = l ; let j = m + 1 ; while ( i <= m && arr [ i ] < 0 ) i ++ ; while ( j <= r && arr [ j ] < 0 ) j ++ ; reverse ( arr , i , m ) ; reverse ( arr , m + 1 , j - 1 ) ; reverse ( arr , i , j - 1 ) ; } function RearrangePosNeg ( arr , l , r ) { if ( l < r ) { let m = l + Math . floor ( ( r - l ) / 2 ) ; RearrangePosNeg ( arr , l , m ) ; RearrangePosNeg ( arr , m + 1 , r ) ; merge ( arr , l , m , r ) ; } } function swap ( arr , i , j ) { let temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; return arr ; } let arr = [ - 12 , 11 , - 13 , - 5 , 6 , - 7 , 5 , - 3 , - 6 ] ; let arr_size = arr . length ; RearrangePosNeg ( arr , 0 , arr_size - 1 ) ; printArray ( arr , arr_size ) ;","[ 1 , 2 , 3 , 4 , 5 , 6 ] ; function printArr ( arr , n ) { for ( let i = 0 ; i < n ; i ++ ) { document . write ( arr [ i ] + "" "" ) ; } } function reverse ( arr , l , r ) { while ( l < r ) { let temp = arr [ l ] ; arr [ l ] = arr [ r ] ; arr [ r ] = temp ; l ++ ; r -- ; } } function merge ( arr , l , m , r ) { let i , j , k ; let n1 = m - l + 1 ; let n2 = r - m ; let l1 = Array ( n1 ) ; let l2 = Array ( n2 ) ; for ( i = 0 ; i < n1 ; i ++ ) l1 [ i ] = arr [ l + i ] ; for ( j = 0 ; j < n2 ; j ++ ) l2 [ j ] = arr [ m + 1 + j ] ; i = 0 ; j = 0 ; k = l ; while ( i < n1 && j < n2",0.3272493701842924,0.27696446290588156,0.30580568479280956,0.39849624060150374,0.3277310924369748
118,"function RearrangePosNeg ( arr ) { var i = 0 ; var j = arr . length - 1 ; while ( true ) { while ( arr [ i ] < 0 && i < arr . length ) i ++ ; while ( arr [ j ] > 0 && j >= 0 ) j -- ; if ( i < j ) { var temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; } else break ; } } var arr = [ - 12 , 11 , - 13 , - 5 , 6 , - 7 , 5 , - 3 , - 6 ] ; RearrangePosNeg ( arr ) ; for ( i = 0 ; i < arr . length ; i ++ ) document . write ( arr [ i ] + "" "" ) ;","] \n function rearrange ( arr , n ) { let i = 0 , j = n - 1 ; while ( i < j && arr [ i ] < 0 ) { while ( i < j && arr [ j ] > 0 ) { j -- ; } if ( i < j ) { let temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; i ++ ; j -- ; } } } let arr = [ - 1 , 15 , - 20 , 2 , - 3 , - 4 , 5 , 6 ] ; let n = arr . length ; rearrange ( arr , n ) ; for ( let i = 0 ; i < n ; i ++ ) document . write ( arr [ i ] + "" "" ) ; 3 ; 2 ; 1 ; - 1 ; - 2 ; - 3 ; - 4 ; 4 ; 5 ; 6 ; 15 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0",0.4820240729792616,0.4305363011201786,0.544250298125473,0.5277777777777778,0.425531914893617
119,"function winner ( arr , N ) { if ( N % 2 === 1 ) { document . write ( "" "" ) ; } else { document . write ( "" "" ) ; } } var arr = [ 24 , 45 , 45 , 24 ] ; var N = arr . length ; winner ( arr , N ) ;","] \n function gameWinner ( arr , N ) { if ( N % 2 != 0 ) document . write ( "" "" ) ; else document . write ( "" "" ) ; } var arr = [ 1 , 2 , 3 , 4 , 5 ] ; var N = arr . length ; gameWinner ( arr , N ) ; 3 ; 3",0.6292729364785197,0.5949855925800763,0.6304394866673356,0.6666666666666666,0.625
120,"function findElements ( arr , n ) { for ( let i = 0 ; i < n ; i ++ ) { let count = 0 ; for ( let j = 0 ; j < n ; j ++ ) if ( arr [ j ] > arr [ i ] ) count ++ ; if ( count >= 2 ) document . write ( arr [ i ] + "" "" ) ; } } let arr = [ 2 , - 6 , 3 , 5 , 1 ] ; let n = arr . length ; findElements ( arr , n ) ;","] \n function printGreaterElements ( arr , n ) { for ( let i = 0 ; i < n ; i ++ ) { let count = 0 ; for ( let j = 0 ; j < n ; j ++ ) { if ( arr [ i ] < arr [ j ] ) count ++ ; } if ( count > 2 ) document . write ( arr [ i ] + "" "" ) ; } } let arr = [ 10 , 12 , 13 , 15 , 16 , 18 , 20 , 21 , 22 , 23 ] ; let n = arr . length ; printGreaterElements ( arr , n ) ; 3 ; 12 ; 13 ; 15 ; 16 ; 20 ; 21 ; 22 ; 23 ; 10 ; 18 ; 23 ; 22 ; 21 ; 20 ; 16 ; 15 ; 13 ; 12 ; 10 ; 0 ; 1 ; 2 ; 3 ; 4 ; 5 ; 6 ;",0.7188642251874323,0.4800963555763439,0.7841804209497827,0.782608695652174,0.8285714285714286
121,"function findElements ( arr , n ) { arr . sort ( ) ; for ( let i = 0 ; i < n - 2 ; i ++ ) document . write ( arr [ i ] + "" "" ) ; } let arr = [ 2 , - 6 , 3 , 5 , 1 ] ; let n = arr . length ; findElements ( arr , n ) ;","] \n function findElements ( arr , n ) { arr . sort ( ) ; for ( let i = 0 ; i < n - 2 ; i ++ ) if ( arr [ i + 1 ] > arr [ i ] && arr [ i + 2 ] > arr [ i ] ) document . write ( arr [ i ] + "" "" ) ; } let arr = [ 10 , 20 , 30 , 40 , 50 , 60 , 70 ] ; let n = arr . length ; findElements ( arr , n ) ; 3 ; 20 ; 40 ; 50 ; 60 ; 70 ; 30 ; 40 ; 50 ; 60 ; 70 ; 20 ; 30 ; 40 ; 50 ; 60 ; 70 ; 20 ; 30 ; 40 ; 50 ; 60 ; 70 ; 30 ; 40 ; 50 ; 60 ; 70 ; 30 ; 40 ; 50 ; 6",0.6914700601171971,0.3737006255681682,0.8595709192484466,0.75,0.782608695652174
122,"function findElements ( arr , n ) { let first = Number . MIN_VALUE ; let second = Number . MAX_VALUE ; for ( let i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > first ) { second = first ; first = arr [ i ] ; } else if ( arr [ i ] > second ) second = arr [ i ] ; } for ( let i = 0 ; i < n ; i ++ ) if ( arr [ i ] < second ) document . write ( arr [ i ] + "" "" ) ; } let arr = [ 2 , - 6 , 3 , 5 , 1 ] ; let n = arr . length ; findElements ( arr , n ) ;","] \n function printGreater ( arr , n ) { let first = - 1 , second = - 1 ; for ( let i = 0 ; i < n ; i ++ ) { if ( first == - 1 arr [ i ] < arr [ first ] ) { second = first ; first = i ; } else if ( arr [ i ] > arr [ first ] && arr [ i ] < arr [ second ] ) second = i ; } for ( let i = 0 ; i < n ; i ++ ) if ( arr [ i ] == first arr [ i ] == second ) document . write ( arr [ i ] + "" "" ) ; } let arr = [ 12 , 3 , 5 , 2 , 15 , 10 , 6 , 8 , 1 , 13 , 7 , 14 ] ; let n = arr . length ; printGreater ( arr , n ) ; 3 5 10 14 15 13 6 8 7 12 2 1 [/INST] \n 3 5 10 14 15 ",0.5993969428448839,0.5448515094600028,0.739833036113081,0.6129032258064516,0.5
123,"function getMinOps ( arr ) { var res = 0 ; for ( i = 0 ; i < arr . length - 1 ; i ++ ) { res += Math . max ( arr [ i + 1 ] - arr [ i ] , 0 ) ; } return res ; } var arr = [ 1 , 3 , 4 , 1 , 2 ] ; document . write ( getMinOps ( arr ) ) ;","] \n function minOperations ( arr , n ) { let res = 0 ; for ( let i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) continue ; res += ( arr [ i ] - arr [ i + 1 ] ) ; } return res ; } let arr = [ 2 , 3 , 5 , 1 , 4 ] ; let N = arr . length ; document . write ( minOperations ( arr , N ) ) ; 3",0.4294441493441271,0.4084632929425044,0.5242454311308365,0.3235294117647059,0.46153846153846156
124,"function findFirstMissing ( array , start , end ) { if ( start > end ) return end + 1 ; if ( start != array [ start ] ) return start ; let mid = parseInt ( ( start + end ) / 2 , 10 ) ; if ( array [ mid ] == mid ) return findFirstMissing ( array , mid + 1 , end ) ; return findFirstMissing ( array , start , mid ) ; } let arr = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 10 ] ; let n = arr . length ; document . write ( "" "" + findFirstMissing ( arr , 0 , n - 1 ) ) ;","] \n function findMissing ( arr , n ) { let start = 0 , end = n - 1 ; while ( start < end ) { let mid = start + Math . floor ( ( end - start ) / 2 ) ; if ( arr [ mid ] == mid ) start = mid + 1 ; else end = mid ; } return start ; } let arr = [ 1 , 2 , 3 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 ] ; let n = arr . length ; document . write ( findMissing ( arr , n ) ) ; 12",0.3821860420964437,0.36968537201430796,0.3655384868937105,0.3617021276595745,0.4318181818181818
125,"function findFirstMissing ( arr , start , end , first ) { if ( start < end ) { let mid = ( start + end ) / 2 ; if ( arr [ mid ] != mid + first ) return findFirstMissing ( arr , start , mid , first ) ; else return findFirstMissing ( arr , mid + 1 , end , first ) ; } return start + first ; } function findSmallestMissinginSortedArray ( arr ) { if ( arr [ 0 ] != 0 ) return 0 ; if ( arr [ arr . length - 1 ] == arr . length - 1 ) return arr . length ; let first = arr [ 0 ] ; return findFirstMissing ( arr , 0 , arr . length - 1 , first ) ; } let arr = [ 0 , 1 , 2 , 3 , 4 , 5 , 7 ] ; let n = arr . length ; document . write ( "" "" + findSmallestMissinginSortedArray ( arr ) ) ;","T ] function findMissing ( arr , n ) { let i ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != i ) { return i ; } } return n ; } function findMissing ( arr , n ) { if ( arr [ 0 ] == 0 ) return 1 ; else { let i ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != i ) return i ; } return n ; } } let arr = [ 1 , 2 , 3 , 4 , 5 ] ; let n = arr . length ; document . write ( findMissing ( arr , n ) ) ; 3",0.3198107454988331,0.2745972223508326,0.29549543284711416,0.2647058823529412,0.4444444444444444
126,"function FindMaxSum ( arr , n ) { let incl = arr [ 0 ] ; let excl = 0 ; let excl_new ; let i ; for ( i = 1 ; i < n ; i ++ ) { excl_new = ( incl > excl ) ? incl : excl ; incl = excl + arr [ i ] ; excl = excl_new ; } return ( ( incl > excl ) ? incl : excl ) ; } let arr = [ 5 , 5 , 10 , 100 , 10 , 5 ] ; document . write ( FindMaxSum ( arr , arr . length ) ) ;","] \n function maxSum ( arr , n ) { let incl = 0 , excl = 0 ; for ( let i = 0 ; i < n ; i ++ ) { excl = Math . max ( excl , incl ) ; incl = arr [ i ] + ( excl - arr [ i ] ) ; } return Math . max ( excl , incl ) ; } let arr = [ 1 , 2 , 3 , 4 , 5 , 6 ] ; let n = arr . length ; document . write ( maxSum ( arr , n ) ) ; 3",0.4256667600160656,0.39220862680395147,0.3946278669949822,0.32608695652173914,0.5897435897435898
127,"var N = 7 ; function countChanges ( matrix , n , m ) { var dist = n + m - 1 ; var freq = Array . from ( Array ( dist ) , ( ) => Array ( 10 ) ) ; for ( var i = 0 ; i < dist ; i ++ ) { for ( var j = 0 ; j < 10 ; j ++ ) freq [ i ] [ j ] = 0 ; } for ( var i = 0 ; i < n ; i ++ ) { for ( var j = 0 ; j < m ; j ++ ) { freq [ i + j ] [ matrix [ i ] [ j ] ] ++ ; } } var min_changes_sum = 0 ; for ( var i = 0 ; i < parseInt ( dist / 2 ) ; i ++ ) { var maximum = 0 ; var total_values = 0 ; for ( var j = 0 ; j < 10 ; j ++ ) { maximum = Math . max ( maximum , freq [ i ] [ j ] + freq [ n + m - 2 - i ] [ j ] ) ; total_values += ( freq [ i ] [ j ] + freq [ n + m - 2 - i ] [ j ] ) ; } min_changes_sum += ( total_values - maximum ) ; } return min_changes_sum ; } var mat = [ [ 1 , 2 ] , [ 3 , 5 ] ] ; document . write ( countChanges ( mat , 2 , 2 ) ) ;"," \n function minChanges ( matrix , n ) { let ans = 0 ; let i ; for ( i = 0 ; i < n + n - 1 ; i ++ ) { let freq = new Array ( 10 ) ; freq . fill ( 0 ) ; for ( let j = 0 ; j < n ; j ++ ) { freq [ matrix [ j ] [ i ] ] ++ ; } let max = 0 , max_index = 0 ; for ( let j = 0 ; j < 10 ; j ++ ) { if ( freq [ j ] > max ) { max = freq [ j ] ; max_index = j ; } } for ( let j = 0 ; j < n ; j ++ ) { if ( matrix [ j ] [ i ] != max_index ) { ans += n - i - 1 ; matrix [ j ] [ i ] = max_index ; } } } return ans ; } let matrix = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] ; let n = matrix .",0.29221654450879636,0.28241587651285704,0.286485939441074,0.39344262295081966,0.20652173913043478
128,"var MAX = 500 ; var lookup = Array . from ( Array ( MAX ) , ( ) => Array ( MAX ) ) ; function buildSparseTable ( arr , n ) { for ( var i = 0 ; i < n ; i ++ ) lookup [ i ] [ 0 ] = arr [ i ] ; for ( var j = 1 ; ( 1 << j ) <= n ; j ++ ) { for ( var i = 0 ; ( i + ( 1 << j ) - 1 ) < n ; i ++ ) { if ( lookup [ i ] [ j - 1 ] < lookup [ i + ( 1 << ( j - 1 ) ) ] [ j - 1 ] ) lookup [ i ] [ j ] = lookup [ i ] [ j - 1 ] ; else lookup [ i ] [ j ] = lookup [ i + ( 1 << ( j - 1 ) ) ] [ j - 1 ] ; } } } function query ( L , R ) { var j = parseInt ( Math . log2 ( R - L + 1 ) ) ; if ( lookup [ L ] [ j ] <= lookup [ R - ( 1 << j ) + 1 ] [ j ] ) return lookup [ L ] [ j ] ; else return lookup [ R - ( 1 << j ) + 1 ] [ j ] ; } var a = [ 7 , 2 , 3 , 0 , 5 , 10 , 3 , 12 , 18 ] ; var n = a . length ; buildSparseTable ( a , n ) ; document . write ( query ( 0 , 4 ) + "" "" ) ; document . write ( query ( 4 , 7 ) + "" "" ) ; document . write ( query ( 7 , 8 ) ) ;","] \n let MAX = 1000 ; let lookup = new Array ( MAX ) ; for ( let i = 0 ; i < MAX ; i ++ ) { lookup [ i ] = new Array ( MAX ) ; for ( let j = 0 ; j < MAX ; j ++ ) { lookup [ i ] [ j ] = 0 ; } } function fillLookupTable ( arr , n ) { for ( let i = 0 ; i < n ; i ++ ) lookup [ i ] [ i ] = arr [ i ] ; for ( let j = 1 ; j < Math . log ( n ) / Math . log ( 2 ) + 1 ; j ++ ) { for ( let i = 0 ; i <= n - ( 1 << j ) ; i ++ ) { lookup [ i ] [ i + ( 1 << j ) - 1 ] = Math . min ( lookup [ i ] [ i + ( 1 << ( j - 1 ) ) - 1 ] , lookup [ i + ( 1 << ( j - 1 ) ) ] [ i + ( 1 << ( j - 1 ) ) - 1 ] ) ; }",0.31506655087749613,0.3171236958184606,0.34055011938485,0.4189189189189189,0.1836734693877551
129,"function minimizeWithKSwaps ( arr , n , k ) { for ( let i = 0 ; i < n - 1 && k > 0 ; ++ i ) { let pos = i ; for ( let j = i + 1 ; j < n ; ++ j ) { if ( j - i > k ) break ; if ( arr [ j ] < arr [ pos ] ) pos = j ; } let temp ; for ( let j = pos ; j > i ; -- j ) { temp = arr [ j ] ; arr [ j ] = arr [ j - 1 ] ; arr [ j - 1 ] = temp ; } k -= pos - i ; } } let arr = [ 7 , 6 , 9 , 2 , 1 ] ; let n = arr . length ; let k = 3 ; minimizeWithKSwaps ( arr , n , k ) ; document . write ( "" "" ) ; for ( let i = 0 ; i < n ; ++ i ) document . write ( arr [ i ] + "" "" ) ;","] \n function lexicographicallySmallest ( arr , n , k ) { var i = 0 ; while ( k -- > 0 && i < n ) { var min_index = i ; for ( var j = i + 1 ; j <= Math . min ( n , i + k ) ; j ++ ) if ( arr [ j ] < arr [ min_index ] ) min_index = j ; var temp = arr [ min_index ] ; arr [ min_index ] = arr [ i ] ; arr [ i ] = temp ; for ( var j = min_index + 1 ; j <= i + k ; j ++ ) { temp = arr [ j ] ; arr [ j ] = arr [ j - 1 ] ; arr [ j - 1 ] = temp ; } i ++ ; } } var arr = [ 1 , 2 , 3 , 4 , 5 ] ; var n = arr . length ; var k = 3 ; lexicographicallySmallest ( arr , n , k ) ; for ( var i = 0 ; i < n ; i ++ ) document . write ( arr [ i ] + "" "" ) ;",0.5444599100100285,0.4976170466455085,0.4999657715647497,0.651685393258427,0.5285714285714286
130,"function findMaxAverage ( arr , n , k ) { if ( k > n ) return - 1 ; let csum = new Array ( n ) ; csum [ 0 ] = arr [ 0 ] ; for ( let i = 1 ; i < n ; i ++ ) csum [ i ] = csum [ i - 1 ] + arr [ i ] ; let max_sum = csum [ k - 1 ] , max_end = k - 1 ; for ( let i = k ; i < n ; i ++ ) { let curr_sum = csum [ i ] - csum [ i - k ] ; if ( curr_sum > max_sum ) { max_sum = curr_sum ; max_end = i ; } } return max_end - k + 1 ; } let arr = [ 1 , 12 , - 5 , - 6 , 50 , 3 ] ; let k = 4 ; let n = arr . length ; document . write ( "" "" + "" "" + k + "" "" + findMaxAverage ( arr , n , k ) ) ;","] \n function maxSubarraySum ( arr , n , k ) { if ( n < k ) return - 1 ; var csum = Array ( n ) . fill ( 0 ) ; csum [ 0 ] = arr [ 0 ] ; for ( var i = 1 ; i < n ; i ++ ) csum [ i ] = csum [ i - 1 ] + arr [ i ] ; var max_sum = csum [ k - 1 ] ; var start = 0 ; for ( var i = k ; i < n ; i ++ ) { if ( csum [ i ] - csum [ i - k ] > max_sum ) { max_sum = csum [ i ] - csum [ i - k ] ; start = i - k + 1 ; } } return start ; } var arr = [ 1 , 3 , 5 , 7 , 9 , 11 , 15 ] ; var n = arr . length ; var k = 3 ; document . write ( maxSubarraySum ( arr , n , k ) ) ; 2 ; 3 ; 5 ; 7 ; 9",0.577662596067463,0.5830195679785196,0.588798564206068,0.5542168674698795,0.5846153846153846
131,"function findMaxAverage ( arr , n , k ) { if ( k > n ) return - 1 ; let sum = arr [ 0 ] ; for ( let i = 1 ; i < k ; i ++ ) sum += arr [ i ] ; let max_sum = sum ; let max_end = k - 1 ; for ( let i = k ; i < n ; i ++ ) { sum = sum + arr [ i ] - arr [ i - k ] ; if ( sum > max_sum ) { max_sum = sum ; max_end = i ; } } return max_end - k + 1 ; } let arr = [ 1 , 12 , - 5 , - 6 , 50 , 3 ] ; let k = 4 ; let n = arr . length ; document . write ( "" "" + "" "" + k + "" "" + findMaxAverage ( arr , n , k ) ) ;","] function findMaxAvgSubarray ( arr , n , k ) { if ( k > n ) return - 1 ; let sum = 0 , i = 0 , maxSum = - 1000000000 , maxStart = 0 ; for ( i = 0 ; i < k ; i ++ ) sum += arr [ i ] ; maxSum = Math . max ( maxSum , sum ) ; for ( i = k ; i < n ; i ++ ) { sum = sum - arr [ i - k ] + arr [ i ] ; maxSum = Math . max ( maxSum , sum ) ; } return maxStart ; } let arr = [ 1 , 2 , 3 , 4 , 5 ] ; let n = arr . length ; let k = 3 ; document . write ( findMaxAvgSubarray ( arr , n , k ) ) ; 3 ; 2 ; 1 ; 0 ; - 1 ; - 2 ; - 3 ; - 4 ; - 5 ; - 6 ; - 7 ; - 8 ; - 9 ; - 10 ; - 1",0.5240613632987121,0.4793794065907063,0.5405948601634641,0.5,0.576271186440678
132,"let m = new Map ( ) ; function findMinimum ( arr , N , pos , turn ) { let x = [ pos , turn ] ; if ( m . has ( x ) ) { return m [ x ] ; } if ( pos >= N - 1 ) { return 0 ; } if ( turn == 0 ) { let ans = Math . min ( findMinimum ( arr , N , pos + 1 , 1 ) + arr [ pos ] , findMinimum ( arr , N , pos + 2 , 1 ) + arr [ pos ] + arr [ pos + 1 ] ) ; let v = [ pos , turn ] ; m [ v ] = ans ; return ans ; } if ( turn != 0 ) { let ans = Math . min ( findMinimum ( arr , N , pos + 1 , 0 ) , findMinimum ( arr , N , pos + 2 , 0 ) ) ; let v = [ pos , turn ] ; m [ v ] = ans ; return ans ; } return 0 ; } function countPenality ( arr , N ) { let pos = 0 ; let turn = 0 ; return findMinimum ( arr , N , pos , turn ) + 1 ; } function printAnswer ( arr , N ) { let a = countPenality ( arr , N ) ; let sum = 0 ; for ( let i = 0 ; i < N ; i ++ ) { sum += arr [ i ] ; } document . write ( a ) ; } let arr = [ 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 ] ; let N = 8 ; printAnswer ( arr , N ) ;","] \n let dp = new Map ( ) ; function findMinScore ( pos , myTurn , arr ) { if ( pos == arr . length ) { if ( myTurn == 0 ) return 0 ; else return arr . length ; } if ( dp . has ( [ pos , myTurn ] ) ) return dp [ [ pos , myTurn ] ] ; if ( myTurn == 0 ) { let a = findMinScore ( pos + 1 , 1 , arr ) ; let b = findMinScore ( pos + 2 , 1 , arr ) ; let ans = Math . min ( a , b ) ; dp [ [ pos , myTurn ] ] = ans ; return ans ; } else { let a = findMinScore ( pos + 1 , 0 , arr ) ; let b = findMinScore ( pos + 2 , 0 , arr ) ; let ans = Math . min ( a , b ) ; dp [ [ pos , myTurn ] ] = ans ; return ans ; } } function findMinPenality ( arr ) { let pos = 0 ; let myTurn = 0 ; return findMinScore ( pos , myTurn , arr ) ;",0.3227562301296093,0.24866522835808627,0.28010788878413323,0.31092436974789917,0.45132743362831856
133,"let MAX = 1000001 ; let prime = new Array ( MAX ) ; function SieveOfEratosthenes ( ) { prime . fill ( 1 ) ; for ( let p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] == 1 ) { for ( let i = p * p ; i <= MAX - 1 ; i += p ) prime [ i ] = 0 ; } } } function getMid ( s , e ) { return s + parseInt ( ( e - s ) / 2 , 10 ) ; } function getSumUtil ( st , ss , se , qs , qe , si ) { if ( qs <= ss && qe >= se ) return st [ si ] ; if ( se < qs ss > qe ) return 0 ; let mid = getMid ( ss , se ) ; return getSumUtil ( st , ss , mid , qs , qe , 2 * si + 1 ) + getSumUtil ( st , mid + 1 , se , qs , qe , 2 * si + 2 ) ; } function updateValueUtil ( st , ss , se , i , diff , si ) { if ( i < ss i > se ) return ; st [ si ] = st [ si ] + diff ; if ( se != ss ) { let mid = getMid ( ss , se ) ; updateValueUtil ( st , ss , mid , i , diff , 2 * si + 1 ) ; updateValueUtil ( st , mid + 1 , se , i , diff , 2 * si + 2 ) ; } } function updateValue ( arr , st , n , i , new_val ) { if ( i < 0 i > n - 1 ) { document . write ( "" "" ) ; return ; } let diff = new_val - arr [ i ] ; let prev_val = arr [ i ] ; arr [ i ] = new_val ; if ( ( prime [ new_val ] prime [ prev_val ] ) != 0 ) { if ( prime [ prev_val ] == 0 ) updateValueUtil ( st , 0 , n - 1 , i , new_val , 0 ) ; else if ( prime [ new_val ] == 0 ) updateValueUtil ( st , 0 , n - 1 , i , - prev_val , 0 ) ; else updateValueUtil ( st , 0 , n - 1 , i , diff , 0 ) ; } } function getSum ( st , n , qs , qe ) { if ( qs < 0 qe > n - 1 qs > qe ) { document . write ( "" "" ) ; return - 1 ; } return getSumUtil ( st , 0 , n - 1 , qs , qe , 0 ) ; } function constructSTUtil ( arr , ss , se , st , si ) { if ( ss == se ) { if ( prime [ arr [ ss ] ] != 0 ) st [ si ] = arr [ ss ] ; else st [ si ] = 0 ; return st [ si ] ; } let mid = getMid ( ss , se ) ; st [ si ] = constructSTUtil ( arr , ss , mid , st , si * 2 + 1 ) + constructSTUtil ( arr , mid + 1 , se , st , si * 2 + 2 ) ; return st [ si ] ; } function constructST ( arr , n ) { let x = parseInt ( ( Math . ceil ( Math . log ( n ) / Math . log ( 2 ) ) ) , 10 ) ; let max_size = 2 * Math . pow ( 2 , x ) - 1 ; let st = new Array ( max_size ) ; constructSTUtil ( arr , 0 , n - 1 , st , 0 ) ; return st ; } let arr = [ 1 , 3 , 5 , 7 , 9 , 11 ] ; let n = arr . length ; let Q = [ [ 1 , 1 , 3 ] , [ 2 , 1 , 10 ] , [ 1 , 1 , 3 ] ] ; SieveOfEratosthenes ( ) ; let st = constructST ( arr , n ) ; document . write ( getSum ( st , n , 1 , 3 ) + "" "" ) ; updateValue ( arr , st , n , 1 , 10 ) ; document . write ( getSum ( st , n , 1 , 3 ) + "" "" ) ;","tion SieveOfEratosthenes ( ) { prime [ 0 ] = false ; prime [ 1 ] = false ; for ( let i = 2 ; i < MAX ; i ++ ) prime [ i ] = true ; for ( let p = 2 ; p * p < MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( let i = p * p ; i < MAX ; i += p ) prime [ i ] = false ; } } } function getMid ( ss , se ) { return parseInt ( ( ss + se ) / 2 ) ; } function getSumUtil ( tree , ss , se , qs , qe ) { if ( ss > qe qs > se ) return 0 ; if ( ss >= qs && se <= qe ) return tree [ ss ] ; let mid = getMid ( ss , se ) ; return getSumUtil ( tree , ss , mid , qs , qe ) + getSumUtil ( tree , mid + 1 , se , qs , qe",0.14806448572725933,0.024792240862592265,0.15304440289693186,0.3016393442622951,0.11278195488721804
134,"let mod = 1000000007 ; let dp = new Array ( 1000 ) ; for ( let i = 0 ; i < 1000 ; i ++ ) { dp [ i ] = new Array ( 1000 ) ; } function calculate ( pos , prev , s , index ) { if ( pos == s . length ) return 1 ; if ( dp [ pos ] [ prev ] != - 1 ) return dp [ pos ] [ prev ] ; let answer = 5 ; for ( let i = 0 ; i < index . length ; i ++ ) { if ( ( String . fromCharCode ( index [ i ] ) ) . localeCompare ( prev ) > 1 ) { answer = ( answer % mod + calculate ( pos + 1 , index [ i ] , s , index ) % mod ) % mod ; } } dp [ pos ] [ prev ] = answer ; return dp [ pos ] [ prev ] ; } function countWays ( a , s ) { let n = a . length ; let index = [ ] ; for ( let i = 0 ; i < 26 ; i ++ ) index . push ( [ ] ) ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < a [ i ] . length ; j ++ ) { index [ a [ i ] [ j ] . charCodeAt ( ) - ' ' . charCodeAt ( ) ] . push ( j + 1 ) ; } } for ( let i = 0 ; i < 1000 ; i ++ ) { for ( let j = 0 ; j < 1000 ; j ++ ) { dp [ i ] [ j ] = - 1 ; } } return calculate ( 0 , 0 , s , index [ 0 ] ) ; } let A = [ ] ; A . push ( "" "" ) ; A . push ( "" "" ) ; A . push ( "" "" ) ; let S = "" "" ; document . write ( countWays ( A , S ) ) ;","] \n let MAX = 1000 ; function countWays ( s , dp , ind , prev , Str ) { if ( ind == s . length ) return 1 ; if ( dp [ ind ] [ prev ] != - 1 ) return dp [ ind ] [ prev ] ; let ans = 0 ; for ( let i = prev + 1 ; i < Str . length ; i ++ ) { if ( s [ ind ] == Str [ i ] ) ans += countWays ( s , dp , ind + 1 , i , Str ) ; } return dp [ ind ] [ prev ] = ans ; } function preprocess ( Str ) { let n = Str . length ; let dp = new Array ( MAX ) ; for ( let i = 0 ; i < MAX ; i ++ ) { dp [ i ] = new Array ( n + 1 ) ; for ( let j = 0 ; j < n + 1 ; j ++ ) { dp [ i ] [ j ] = - 1 ; } } for ( let i = 0 ; i < n ; i ++ ) dp [ Str [ i ] . charCodeAt ( 0 ) - ' '",0.384214874365027,0.29653316288449855,0.36359137092722876,0.4943820224719101,0.38235294117647056
135,"var MAX = 100005 ; var MOD = 1000000007 ; var dp = Array . from ( Array ( MAX ) , ( ) => Array ( 101 ) ) ; for ( var i = 0 ; i < MAX ; i ++ ) for ( var j = 0 ; j < 101 ; j ++ ) dp [ i ] [ j ] = new Array ( 2 ) . fill ( - 1 ) ; function countNum ( idx , sum , tight , num , len , k ) { if ( len == idx ) { if ( sum == 0 ) return 1 ; else return 0 ; } if ( dp [ idx ] [ sum ] [ tight ] != - 1 ) return dp [ idx ] [ sum ] [ tight ] ; var res = 0 , limit ; if ( tight == 0 ) { limit = num [ idx ] ; } else { limit = 9 ; } for ( var i = 0 ; i <= limit ; i ++ ) { var new_tight = tight ; if ( tight == 0 && i < limit ) new_tight = 1 ; res += countNum ( idx + 1 , ( sum + i ) % k , new_tight , num , len , k ) ; res %= MOD ; } if ( res < 0 ) res += MOD ; return dp [ idx ] [ sum ] [ tight ] = res ; } function process ( s ) { var num = [ ] ; for ( var i = 0 ; i < s . length ; i ++ ) { num . push ( s [ i ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ) ; } return num ; } var n = "" "" ; var len = n . length ; var k = 58 ; var num = process ( n ) ; document . write ( countNum ( 0 , 0 , 0 , num , len , k ) ) ;",] \n let MAX = 1000000000 ; let dp = new Array ( MAX ) ; for ( let i = 0 ; i < MAX ; i ++ ) { dp [ i ] = new Array ( 10 ) ; for ( let j = 0 ; j < 10 ; j ++ ) { dp [ i ] [ j ] = new Array ( 2 ) ; for ( let k = 0 ; k < 2 ; k ++ ) { dp [ i ] [ j ] [ k ] = new Array ( 2 ) ; for ( let l = 0 ; l < 2 ; l ++ ) { dp [ i ] [ j ] [ k ] [ l ] = new Array ( 2 ) ; for ( let m = 0 ; m < 2 ; m ++ ) { dp [ i ] [ j ] [ k ] [ l ] [ m ] = new Array ( 2 ) ; for ( let n = 0 ; n < 2 ; n ++ ) { dp [ i ] [ j ] [ k ] [ l ] [ m ] [ n ] = new Array ( 2 ) ; for ( let,0.18767101708098766,0.1337751023323333,0.14819963202734426,0.2911392405063291,0.17757009345794392
136,"function countSum ( arr , n ) { var countODD = Array ( n + 1 ) . fill ( 0 ) ; var countEVEN = Array ( n + 1 ) . fill ( 0 ) ; countODD [ 0 ] = 0 ; countEVEN [ 0 ] = 0 ; for ( var i = 1 ; i <= n ; i ++ ) { if ( arr [ i - 1 ] % 2 == 0 ) { countEVEN [ i ] = countEVEN [ i - 1 ] + countEVEN [ i - 1 ] + 1 ; countODD [ i ] = countODD [ i - 1 ] + countODD [ i - 1 ] ; } else { countEVEN [ i ] = countEVEN [ i - 1 ] + countODD [ i - 1 ] ; countODD [ i ] = countODD [ i - 1 ] + countEVEN [ i - 1 ] + 1 ; } } var ans = [ 0 , 0 ] ; ans [ 0 ] = countEVEN [ n ] ; ans [ 1 ] = countODD [ n ] ; return ans ; } var arr = [ 1 , 2 , 2 , 3 ] ; var n = 4 ; var ans = countSum ( arr , n ) ; document . write ( "" "" + ans [ 0 ] ) ; document . write ( "" "" + ans [ 1 ] ) ;","] \n let N = 5 ; function countSubsequences ( arr , n ) { let countEVEN = new Array ( N ) ; let countODD = new Array ( N ) ; countEVEN [ 0 ] = 0 ; countODD [ 0 ] = 0 ; for ( let i = 1 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) countEVEN [ i ] = countEVEN [ i - 1 ] + countODD [ i - 1 ] ; else countODD [ i ] = countEVEN [ i - 1 ] + countODD [ i - 1 ] ; } document . write ( "" "" + countEVEN [ n - 1 ] + "" "" ) ; document . write ( "" "" + countODD [ n - 1 ] ) ; } let arr = [ 1 , 2 , 3 , 4 , 5 ] ; let n = arr . length ; countSubsequences ( arr , n ) ; 1 2 3 4 5 [/INST] \n let arr = [ 2 , 4",0.4399261262572119,0.43064047282992535,0.4409978838588013,0.5045045045045045,0.3835616438356164
137,"var maxN = 31 var maxW = 31 var dp = Array ( maxN ) ; for ( var i = 0 ; i < maxN ; i ++ ) { dp [ i ] = Array ( maxW ) ; for ( var j = 0 ; j < maxW ; j ++ ) { dp [ i ] [ j ] = Array ( maxW ) . fill ( - 1 ) ; } } function maxWeight ( arr , n , w1_r , w2_r , i ) { if ( i == n ) return 0 ; if ( dp [ i ] [ w1_r ] [ w2_r ] != - 1 ) return dp [ i ] [ w1_r ] [ w2_r ] ; var fill_w1 = 0 , fill_w2 = 0 , fill_none = 0 ; if ( w1_r >= arr [ i ] ) fill_w1 = arr [ i ] + maxWeight ( arr , n , w1_r - arr [ i ] , w2_r , i + 1 ) ; if ( w2_r >= arr [ i ] ) fill_w2 = arr [ i ] + maxWeight ( arr , n , w1_r , w2_r - arr [ i ] , i + 1 ) ; fill_none = maxWeight ( arr , n , w1_r , w2_r , i + 1 ) ; dp [ i ] [ w1_r ] [ w2_r ] = Math . max ( fill_none , Math . max ( fill_w1 , fill_w2 ) ) ; return dp [ i ] [ w1_r ] [ w2_r ] ; } var arr = [ 8 , 2 , 3 ] ; var n = arr . length ; var w1 = 10 , w2 = 3 ; document . write ( maxWeight ( arr , n , w1 , w2 , 0 ) ) ;","] \n let MAX = 1000 ; let dp = new Array ( MAX ) ; for ( let i = 0 ; i < MAX ; i ++ ) { dp [ i ] = new Array ( MAX ) ; for ( let j = 0 ; j < MAX ; j ++ ) { dp [ i ] [ j ] = new Array ( 3 ) ; for ( let k = 0 ; k < 3 ; k ++ ) { dp [ i ] [ j ] [ k ] = 0 ; } } } let w1_r = 0 ; let w2_r = 0 ; let i = 0 ; function knapSack ( arr , n , w1 , w2 ) { if ( w1_r < 0 w2_r < 0 ) return 0 ; let ans1 = 0 , ans2 = 0 , ans3 = 0 ; if ( w1_r >= arr [ i ] [ 0 ] && w2_r >= arr [ i ] [ 1 ] ) { ans1 = arr [ i ] [ 2 ] + knapSack ( arr , n , w1_r - arr",0.3263429184858798,0.24636375242216554,0.2757287007421329,0.36363636363636365,0.41964285714285715
138,"var n = 3 ; function findPrefixCount ( p_arr , set_bit ) { for ( var i = 0 ; i < n ; i ++ ) { for ( var j = n - 1 ; j >= 0 ; j -- ) { if ( ! set_bit [ i ] [ j ] ) continue ; if ( j != n - 1 ) p_arr [ i ] [ j ] += p_arr [ i ] [ j + 1 ] ; p_arr [ i ] [ j ] += set_bit [ i ] [ j ] ; } } } function matrixAllOne ( set_bit ) { var p_arr = Array . from ( Array ( n ) , ( ) => Array ( n ) . fill ( 0 ) ) ; findPrefixCount ( p_arr , set_bit ) ; var ans = 0 ; for ( var j = 0 ; j < n ; j ++ ) { var i = n - 1 ; var q = [ ] ; var to_sum = 0 ; while ( i >= 0 ) { var c = 0 ; while ( q . length != 0 && q [ q . length - 1 ] [ 0 ] > p_arr [ i ] [ j ] ) { to_sum -= ( q [ q . length - 1 ] [ 1 ] + 1 ) * ( q [ q . length - 1 ] [ 0 ] - p_arr [ i ] [ j ] ) ; c += q [ q . length - 1 ] [ 1 ] + 1 ; q . pop ( ) ; } to_sum += p_arr [ i ] [ j ] ; ans += to_sum ; q . push ( [ p_arr [ i ] [ j ] , c ] ) ; i -- ; } } return ans ; } function sumAndMatrix ( arr ) { var sum = 0 ; var mul = 1 ; for ( var i = 0 ; i < 30 ; i ++ ) { var set_bit = Array . from ( Array ( n ) , ( ) => Array ( n ) ) ; for ( var R = 0 ; R < n ; R ++ ) for ( var C = 0 ; C < n ; C ++ ) set_bit [ R ] [ C ] = ( ( arr [ R ] [ C ] & ( 1 << i ) ) != 0 ) ; sum += ( mul * matrixAllOne ( set_bit ) ) ; mul *= 2 ; } return sum ; } var arr = [ [ 9 , 7 , 4 ] , [ 8 , 9 , 2 ] , [ 11 , 11 , 5 ] ] ; document . write ( sumAndMatrix ( arr ) ) ;","] \n let N = 3 ; let M = 3 ; function prefixCount ( arr , n , m ) { let count = new Array ( n ) ; count . fill ( 0 ) ; for ( let i = n - 1 ; i >= 0 ; i -- ) { for ( let j = m - 1 ; j >= 0 ; j -- ) { if ( arr [ i ] [ j ] == 1 ) count [ i ] ++ ; } } return count ; } function countSubmatrix ( prefixCount , n ) { let ans = 0 ; let stack = [ ] ; for ( let i = 0 ; i < n ; i ++ ) { let cnt = 0 ; while ( stack . length != 0 && stack [ stack . length - 1 ] [ 0 ] > prefixCount [ i ] [ stack [ stack . length - 1 ] [ 1 ] ] ) { stack . pop ( ) ; } stack . push ( [ prefixCount [ i ] [ 0 ] , i ] ) ; } for ( let i = 0 ; i < n ; i ++ ) { if ( stack . length != 0 ) { cnt =",0.23710634613677006,0.15318917375842028,0.22561897166728367,0.4485981308411215,0.12101910828025478
139,function CountWays ( n ) { var noOfWays = Array ( 3 ) . fill ( 0 ) ; noOfWays [ 0 ] = 1 ; noOfWays [ 1 ] = 1 ; noOfWays [ 2 ] = 1 + 1 ; for ( var i = 3 ; i < n + 1 ; i ++ ) { noOfWays [ i ] = noOfWays [ 3 - 1 ] + noOfWays [ 3 - 3 ] ; noOfWays [ 0 ] = noOfWays [ 1 ] ; noOfWays [ 1 ] = noOfWays [ 2 ] ; noOfWays [ 2 ] = noOfWays [ i ] ; } return noOfWays [ n ] ; } var n = 5 ; document . write ( CountWays ( n ) ) ;,] \n function countWays ( n ) { let noOfWays = new Array ( n + 1 ) ; noOfWays [ 0 ] = 1 ; noOfWays [ 1 ] = 1 ; noOfWays [ 2 ] = 2 ; for ( let i = 3 ; i <= n ; i ++ ) { let w1 = noOfWays [ i - 1 ] ; let w2 = noOfWays [ i - 2 ] ; noOfWays [ i ] = w1 + w2 ; noOfWays [ i ] += noOfWays [ i - 3 ] ; } return noOfWays [ n ] ; } let n = 10 ; document . write ( countWays ( n ) ) ; 3 ; 3,0.4814123488752001,0.5026317182748091,0.49664055858192363,0.4576271186440678,0.46875
140,"let MAX = 105 , q = 0 ; let prime = new Array ( MAX ) ; function sieve ( ) { for ( let i = 2 ; i * i < MAX ; i ++ ) { if ( prime [ i ] == 0 ) { for ( let j = i * i ; j < MAX ; j += i ) prime [ j ] = 1 ; } } } function dfs ( i , j , k , n , m , mappedMatrix , mark , ans ) { if ( ( mappedMatrix [ i ] [ j ] == 0 ? true : false ) || ( i > n ? true : false ) || ( j > m ? true : false ) || ( mark [ i ] [ j ] != 0 ? true : false ) || ( q != 0 ? true : false ) ) return ; mark [ i ] [ j ] = 1 ; ans [ k ] [ 0 ] = i ; ans [ k ] [ 1 ] = j ; if ( i == n && j == m ) { q = k ; return ; } dfs ( i + 1 , j + 1 , k + 1 , n , m , mappedMatrix , mark , ans ) ; dfs ( i + 1 , j , k + 1 , n , m , mappedMatrix , mark , ans ) ; dfs ( i , j + 1 , k + 1 , n , m , mappedMatrix , mark , ans ) ; } function lexicographicalPath ( n , m , mappedMatrix ) { let ans = new Array ( MAX ) ; let mark = new Array ( MAX ) ; for ( let i = 0 ; i < MAX ; i ++ ) { mark [ i ] = new Array ( MAX ) ; ans [ i ] = new Array ( 2 ) ; } dfs ( 1 , 1 , 1 , n , m , mappedMatrix , mark , ans ) ; let anss = [ [ 1 , 1 ] , [ 2 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] ] ; for ( let i = 0 ; i < 4 ; i ++ ) { document . write ( anss [ i ] [ 0 ] + "" "" + anss [ i ] [ 1 ] + "" "" ) ; } } function countPrimePath ( mappedMatrix , n , m ) { let dp = new Array ( MAX ) ; for ( let i = 0 ; i < MAX ; i ++ ) { dp [ i ] = new Array ( MAX ) ; for ( let j = 0 ; j < MAX ; j ++ ) { dp [ i ] [ j ] = 0 ; } } dp [ 1 ] [ 1 ] = 1 ; for ( let i = 1 ; i <= n ; i ++ ) { for ( let j = 1 ; j <= m ; j ++ ) { if ( i == 1 && j == 1 ) continue ; dp [ i ] [ j ] = ( dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] + dp [ i - 1 ] [ j - 1 ] ) ; if ( mappedMatrix [ i ] [ j ] == 0 ) dp [ i ] [ j ] = 0 ; } } dp [ n ] [ m ] = 4 ; document . write ( dp [ n ] [ m ] + "" "" ) ; } function preprocessMatrix ( mappedMatrix , a , n , m ) { sieve ( ) ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < m ; j ++ ) { if ( prime [ a [ i ] [ j ] ] == 0 ) mappedMatrix [ i + 1 ] [ j + 1 ] = 1 ; else mappedMatrix [ i + 1 ] [ j + 1 ] = 0 ; } } } let n = 3 ; let m = 3 ; let a = [ [ 2 , 3 , 7 ] , [ 5 , 4 , 2 ] , [ 3 , 7 , 11 ] ] ; let mappedMatrix = new Array ( MAX ) ; for ( let i = 0 ; i < MAX ; i ++ ) { mappedMatrix [ i ] = new Array ( MAX ) ; for ( let j = 0 ; j < MAX ; j ++ ) { mappedMatrix [ i ] [ j ] = 0 ; } } preprocessMatrix ( mappedMatrix , a , n , m ) ; countPrimePath ( mappedMatrix , n , m ) ; lexicographicalPath ( n , m , mappedMatrix ) ;","] var N = 5 ; var M = 5 ; var ans = 0 ; function dfs ( mat , i , j , m , n , visited , cnt , path ) { if ( i < 0 i >= m j < 0 j >= n visited [ i ] [ j ] == true path == - 1 || cnt > ans ) return ; visited [ i ] [ j ] = true ; path = Math . max ( path , mat [ i ] [ j ] ) ; if ( i == m - 1 && j == n - 1 ) { ans = Math . max ( ans , cnt ) ; return ; } dfs ( mat , i + 1 , j , m , n , visited , cnt + 1 , path ) ; dfs ( mat , i , j + 1 , m , n , visited , cnt + 1 , path ) ; dfs ( mat , i + 1 , j + 1 , m , n , visited , cnt + 1 , path ) ; } function findPath ( mat ) { var visited = Array . from ( Array ( M ) , ( ) => Array ( N ) . fill ( false ) ) ;",0.15394862306054652,0.021483153390763263,0.09207253288127358,0.28955223880597014,0.2126865671641791
141,"function isSubsetSum ( set , n , sum ) { let subset = new Array ( sum + 1 ) ; for ( var i = 0 ; i < subset . length ; i ++ ) { subset [ i ] = new Array ( 2 ) ; } let count = new Array ( sum + 1 ) ; for ( var i = 0 ; i < count . length ; i ++ ) { count [ i ] = new Array ( 2 ) ; } for ( let i = 0 ; i <= n ; i ++ ) { subset [ 0 ] [ i ] = true ; count [ 0 ] [ i ] = 0 ; } for ( let i = 1 ; i <= sum ; i ++ ) { subset [ i ] [ 0 ] = false ; count [ i ] [ 0 ] = - 1 ; } for ( let i = 1 ; i <= sum ; i ++ ) { for ( let j = 1 ; j <= n ; j ++ ) { subset [ i ] [ j ] = subset [ i ] [ j - 1 ] ; count [ i ] [ j ] = count [ i ] [ j - 1 ] ; if ( i >= set [ j - 1 ] ) { subset [ i ] [ j ] = subset [ i ] [ j ] || subset [ i - set [ j - 1 ] ] [ j - 1 ] ; if ( subset [ i ] [ j ] ) count [ i ] [ j ] = Math . max ( count [ i ] [ j - 1 ] , count [ i - set [ j - 1 ] ] [ j - 1 ] + 1 ) ; } } } return count [ sum ] [ n ] ; } let set = [ 2 , 3 , 5 , 10 ] ; let sum = 20 ; let n = set . length ; document . write ( isSubsetSum ( set , n , sum ) ) ;","] function maxSetSizeSum ( set , n , sum ) { let subset = new Array ( sum + 1 ) ; for ( let i = 0 ; i < subset . length ; i ++ ) { subset [ i ] = new Array ( n + 1 ) ; for ( let j = 0 ; j < subset . length ; j ++ ) { subset [ i ] [ j ] = false ; } } for ( let i = 0 ; i <= sum ; i ++ ) subset [ i ] [ 0 ] = false ; for ( let i = 0 ; i <= n ; i ++ ) subset [ 0 ] [ i ] = true ; for ( let i = 1 ; i <= sum ; i ++ ) { for ( let j = 1 ; j <= n ; j ++ ) { if ( i - set [ j - 1 ] >= 0 ) subset [ i ] [ j ] = subset [ i - set [ j - 1 ] ] [ j - 1 ] subset [ i ] [ j ] = subset [ i ] [ j ] || subset [ i ] [ j - 1 ] ; } } if ( subset [ sum ] [ n ]",0.4581997780048992,0.44743818141774483,0.5182177492993787,0.6282051282051282,0.23893805309734514
142,"let MAX = 100 ; let lcslen = 0 ; let dp = new Array ( MAX ) ; function lcs ( str1 , str2 , len1 , len2 , i , j ) { let ret = dp [ i ] [ j ] ; if ( i == len1 j == len2 ) return ret = 0 ; if ( ret != - 1 ) return ret ; ret = 0 ; if ( str1 [ i ] == str2 [ j ] ) ret = 1 + lcs ( str1 , str2 , len1 , len2 , i + 1 , j + 1 ) ; else ret = Math . max ( lcs ( str1 , str2 , len1 , len2 , i + 1 , j ) , lcs ( str1 , str2 , len1 , len2 , i , j + 1 ) ) ; return ret ; } function printAll ( str1 , str2 , len1 , len2 , data , indx1 , indx2 , currlcs ) { if ( currlcs == lcslen ) { data [ currlcs ] = null ; document . write ( data . join ( "" "" ) + "" "" ) ; return ; } if ( indx1 == len1 indx2 == len2 ) return ; for ( let ch = ' ' . charCodeAt ( 0 ) ; ch <= ' ' . charCodeAt ( 0 ) ; ch ++ ) { let done = false ; for ( let i = indx1 ; i < len1 ; i ++ ) { if ( ch == str1 [ i ] . charCodeAt ( 0 ) ) { for ( let j = indx2 ; j < len2 ; j ++ ) { if ( ch == str2 [ j ] . charCodeAt ( 0 ) && lcs ( str1 , str2 , len1 , len2 , i , j ) == lcslen - currlcs ) { data [ currlcs ] = String . fromCharCode ( ch ) ; printAll ( str1 , str2 , len1 , len2 , data , i + 1 , j + 1 , currlcs + 1 ) ; done = true ; break ; } } } if ( done ) break ; } } } function prinlAllLCSSorted ( str1 , str2 ) { let len1 = str1 . length , len2 = str2 . length ; for ( let i = 0 ; i < MAX ; i ++ ) { dp [ i ] = new Array ( MAX ) ; for ( let j = 0 ; j < MAX ; j ++ ) { dp [ i ] [ j ] = - 1 ; } } lcslen = lcs ( str1 , str2 , len1 , len2 , 0 , 0 ) ; let data = new Array ( MAX ) ; printAll ( str1 , str2 , len1 , len2 , data , 0 , 0 , 0 ) ; } let str1 = "" "" , str2 = "" "" ; prinlAllLCSSorted ( str1 , str2 ) ;","] \n let len1 = 10 , len2 = 10 ; function lcs ( i , j , dp ) { if ( i == len1 j == len2 ) return 0 ; if ( dp [ i ] [ j ] != - 1 ) return dp [ i ] [ j ] ; let res = 0 ; if ( str1 [ i ] == str2 [ j ] ) res = lcs ( i + 1 , j + 1 , dp ) + 1 ; else res = Math . max ( lcs ( i , j + 1 , dp ) , lcs ( i + 1 , j , dp ) ) ; dp [ i ] [ j ] = res ; return res ; } function printLCS ( str1 , str2 , lcslen , data , i , j , dp ) { if ( lcslen == 0 ) return ; if ( i == len1 j == len2 ) { if ( lcslen == 0 ) return ; else { for ( let k = 0 ; k < lcslen ; k ++ ) document . write ( data [ k ] ) ; document . write ( "" "" ) ;",0.2260113779001524,0.12109472822473659,0.21626809684457432,0.33497536945812806,0.23170731707317074
143,"function isMajority ( arr , n , x ) { let i , last_index = 0 ; last_index = ( n % 2 == 0 ) ? parseInt ( n / 2 , 10 ) : parseInt ( n / 2 , 10 ) + 1 ; for ( i = 0 ; i < last_index ; i ++ ) { if ( arr [ i ] == x && arr [ i + parseInt ( n / 2 , 10 ) ] == x ) return true ; } return false ; } let arr = [ 1 , 2 , 3 , 4 , 4 , 4 , 4 ] ; let n = arr . length ; let x = 4 ; if ( isMajority ( arr , n , x ) == true ) document . write ( x + "" "" + parseInt ( n / 2 , 10 ) + "" "" ) ; else document . write ( x + "" "" + parseInt ( n / 2 , 10 ) + "" "" ) ;","] \n function isMajority ( arr , n ) { var l = ( n % 2 == 0 ) ? n / 2 : parseInt ( ( n + 1 ) / 2 ) ; var i = 0 ; while ( i < n && arr [ i ] != arr [ l ] ) i ++ ; if ( i < n && arr [ i ] == arr [ l ] ) return true ; return false ; } var arr = [ 1 , 2 , 2 , 2 , 2 , 3 , 3 , 4 , 5 , 5 , 5 ] ; var n = arr . length ; if ( isMajority ( arr , n ) ) document . write ( "" "" + arr [ l ] ) ; else document . write ( "" "" ) ; 1 , 2 , 2 , 2 , 2 , 3 , 3 , 4 , 5 , 5 , 5 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; ",0.3791715077643711,0.3635600684187002,0.3782541677669893,0.2948717948717949,0.48
144,"function _binarySearch ( arr , low , high , x ) { if ( high >= low ) { let mid = parseInt ( ( low + high ) / 2 , 10 ) ; if ( ( mid == 0 x > arr [ mid - 1 ] ) && ( arr [ mid ] == x ) ) return mid ; else if ( x > arr [ mid ] ) return _binarySearch ( arr , ( mid + 1 ) , high , x ) ; else return _binarySearch ( arr , low , ( mid - 1 ) , x ) ; } return - 1 ; } function isMajority ( arr , n , x ) { let i = _binarySearch ( arr , 0 , n - 1 , x ) ; if ( i == - 1 ) return false ; if ( ( ( i + parseInt ( n / 2 , 10 ) ) <= ( n - 1 ) ) && arr [ i + parseInt ( n / 2 , 10 ) ] == x ) return true ; else return false ; } let arr = [ 1 , 2 , 3 , 3 , 3 , 3 , 10 ] ; let n = arr . length ; let x = 3 ; if ( isMajority ( arr , n , x ) == true ) document . write ( x + "" "" + parseInt ( n / 2 , 10 ) + "" "" ) ; else document . write ( x + "" "" + parseInt ( n / 2 , 10 ) + "" "" ) ;","] function binarySearch ( arr , low , high , x ) { while ( low <= high ) { var mid = low + parseInt ( ( high - low ) / 2 ) ; if ( arr [ mid ] == x ) { if ( mid == 0 mid > 0 && arr [ mid - 1 ] < x ) return mid ; high = mid - 1 ; } else low = mid + 1 ; } return - 1 ; } function isMajority ( arr , n , x ) { var index = binarySearch ( arr , 0 , n - 1 , x ) ; if ( index == - 1 ) return false ; var count = 0 ; for ( i = index ; i < n ; i ++ ) { if ( arr [ i ] == x ) count ++ ; else count -- ; if ( count == 0 ) break ; } return ( count > 0 && ( n - i ) > count ) ; } var arr = [ 2 , 2 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 5 , 5 ] ; var x = 3 ; var n = arr . length",0.3985157461094022,0.3521377460773921,0.36099303497038626,0.3559322033898305,0.525
145,"function isMajorityElement ( arr , n , key ) { if ( arr [ parseInt ( n / 2 , 10 ) ] == key ) return true ; else return false ; } let arr = [ 1 , 2 , 3 , 3 , 3 , 3 , 10 ] ; let n = arr . length ; let x = 3 ; if ( isMajorityElement ( arr , n , x ) ) document . write ( x + "" "" + parseInt ( n / 2 , 10 ) + "" "" ) ; else document . write ( x + "" "" + "" "" + parseInt ( n / 2 , 10 ) + "" "" ) ;","] \n function isMajority ( arr , n ) { let mid = parseInt ( n / 2 ) ; if ( arr [ mid ] >= parseInt ( n / 3 ) ) return true ; return false ; } let arr = [ 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 ] ; let n = arr . length ; if ( isMajority ( arr , n ) ) document . write ( "" "" ) ; else document . write ( "" "" ) ; 3",0.4119825651976391,0.44383308465706495,0.4665328536635085,0.2830188679245283,0.45454545454545453
146,"function cutRod ( price , n ) { let val = new Array ( n + 1 ) ; val [ 0 ] = 0 ; for ( let i = 1 ; i <= n ; i ++ ) { let max_val = Number . MIN_VALUE ; for ( let j = 0 ; j < i ; j ++ ) max_val = Math . max ( max_val , price [ j ] + val [ i - j - 1 ] ) ; val [ i ] = max_val ; } return val [ n ] ; } let arr = [ 1 , 5 , 8 , 9 , 10 , 17 , 17 , 20 ] ; let size = arr . length ; document . write ( "" "" + cutRod ( arr , size ) + "" "" ) ;"," function cutRod ( price , n ) { let val = new Array ( n + 1 ) ; val [ 0 ] = 0 ; for ( let i = 1 ; i <= n ; i ++ ) { for ( let j = 0 ; j < i ; j ++ ) val [ i ] = Math . max ( val [ i ] , price [ j ] + val [ i - j ] ) ; } return val [ n ] ; } let price = [ 1 , 5 , 8 , 9 , 10 , 17 , 17 , 17 , 20 ] ; let n = price . length ; document . write ( "" "" + cutRod ( price , n ) ) ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ;",0.6434980346898026,0.5905076244282691,0.7521992035964782,0.6271186440677966,0.6041666666666666
147,"let t = new Array ( 9 ) ; for ( var i = 0 ; i < t . length ; i ++ ) { t [ i ] = new Array ( 2 ) ; } function un_kp ( price , length , Max_len , n ) { if ( n == 0 Max_len == 0 ) { return 0 ; } if ( length [ n - 1 ] <= Max_len ) { t [ n ] [ Max_len ] = Math . max ( price [ n - 1 ] + un_kp ( price , length , Max_len - length [ n - 1 ] , n ) , un_kp ( price , length , Max_len , n - 1 ) ) ; } else { t [ n ] [ Max_len ] = un_kp ( price , length , Max_len , n - 1 ) ; } return t [ n ] [ Max_len ] ; } let price = [ 1 , 5 , 8 , 9 , 10 , 17 , 17 , 20 ] ; let n = price . length ; let length = Array ( n ) . fill ( 0 ) ; for ( let i = 0 ; i < n ; i ++ ) { length [ i ] = i + 1 ; } let Max_len = n ; document . write ( "" "" + un_kp ( price , length , n , Max_len ) ) ;","] \n let max_len = 100 ; let dp = new Array ( max_len ) ; for ( let i = 0 ; i < max_len ; i ++ ) { dp [ i ] = new Array ( 2 ) ; for ( let j = 0 ; j < 2 ; j ++ ) { dp [ i ] [ j ] = 0 ; } } function cutRod ( price , len , n ) { if ( len == 0 price == 0 ) return 0 ; if ( len <= max_len ) { if ( dp [ len ] [ 0 ] == - 1 ) { dp [ len ] [ 0 ] = cutRod ( price , len - 1 , n ) ; for ( let i = 1 ; i <= n ; i ++ ) { dp [ len ] [ 0 ] = Math . max ( dp [ len ] [ 0 ] , price [ i ] + cutRod ( price , len - i , n ) ) ; } } return dp [ len ] [ 0 ] ; } else { if ( dp [ len ] [ 1 ] == - 1 ) { dp [ len ] [",0.33461794072309997,0.27303480050979906,0.28262013194672286,0.3877551020408163,0.3950617283950617
148,"function isPossible ( target ) { var max = 0 ; var index = 0 ; for ( i = 0 ; i < target . length ; i ++ ) { if ( max < target [ i ] ) { max = target [ i ] ; index = i ; } } if ( max == 1 ) return true ; for ( i = 0 ; i < target . length ; i ++ ) { if ( i != index ) { max -= target [ i ] ; if ( max <= 0 ) return false ; } } target [ index ] = max ; return isPossible ( target ) ; } var target = [ 9 , 3 , 5 ] ; res = isPossible ( target ) ; if ( res ) { document . write ( "" "" ) ; } else { document . write ( "" "" ) ; }","] \n function canConvert ( arr , target , n , i ) { let max = arr [ 0 ] ; let index = 0 ; for ( let j = 0 ; j < n ; j ++ ) { if ( target [ j ] > max ) { max = target [ j ] ; index = j ; } } if ( max == 1 ) return true ; for ( let j = 0 ; j < n ; j ++ ) { if ( j != index ) { if ( target [ j ] > max ) { max = target [ j ] ; index = j ; } } } if ( max <= 0 ) return false ; return canConvert ( arr , target , n , i + 1 ) ; } let arr = [ 1 , 2 , 3 , 4 , 5 ] ; let target = [ 2 , 4 , 5 , 6 , 7 ] ; let n = arr . length ; let m = target . length ; if ( n != m ) document . write ( "" "" ) ; else if ( canConvert ( arr , target , 0 , 0 ) ) document . write ( "" "" ) ; else document .",0.4054312122383985,0.3348523377316492,0.46869069304012684,0.45454545454545453,0.36363636363636365
149,"function nCr ( n , r ) { let res = 1 ; if ( r > n - r ) r = n - r ; for ( let i = 0 ; i < r ; ++ i ) { res *= ( n - i ) ; res /= ( i + 1 ) ; } return res ; } let n = 3 , m = 2 , k = 2 ; document . write ( nCr ( n + m , k ) ) ;","] \n function binomialCoeff ( n , k ) { let res = 1 ; for ( let i = 1 ; i <= k ; i ++ ) { res *= n - i + 1 ; res = Math . floor ( res / i ) ; } return res ; } let n = 3 , k = 2 ; document . write ( binomialCoeff ( n , k ) + "" "" ) ; n = 4 ; k = 3 ; document . write ( binomialCoeff ( n , k ) ) ; 2 ; 6 ; 4 ; 4 ; 1 ; 1 ; 6 ; 10 ; 4 ; 4 ; 6 ; 10 ; 4 ; 4 ; 6 ; 10 ; 4 ; 4 ; 6 ; 10 ; 4 ; 4 ; 6 ; 10 ; 4 ; 4 ; 6 ; 10 ; 4 ; 4 ; 6 ; 10 ; 4 ; 4 ; 6 ; 10 ; 4 ; 4 ; 6 ; 10 ; ",0.40626459413665106,0.23831191251551775,0.47689797918260163,0.425,0.48484848484848486
150,"function Is_possible ( N ) { let C = 0 ; let D = 0 ; while ( N % 10 == 0 ) { N = N / 10 ; C += 1 ; } if ( Math . pow ( 2 , ( Math . log ( N ) / ( Math . log ( 2 ) ) ) ) == N ) { D = ( Math . log ( N ) / ( Math . log ( 2 ) ) ) ; if ( C >= D ) document . write ( "" "" ) ; else document . write ( "" "" ) ; } else document . write ( "" "" ) ; } let N = 2000000000000 ; Is_possible ( N ) ;","] \n function canObtain ( N ) { var count = 0 ; while ( N % 10 == 0 ) { count ++ ; N = parseInt ( N / 10 ) ; } if ( N == 1 ) { document . write ( "" "" ) ; return ; } if ( N % 2 == 0 ) { document . write ( "" "" ) ; return ; } else { document . write ( "" "" ) ; } } var N = 20 ; canObtain ( N ) ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ;",0.3971435796286532,0.2795951555160954,0.3547919708802909,0.4714285714285714,0.4827586206896552
151,function findNthTerm ( n ) { document . write ( n * n - n + 1 ) ; } N = 4 ; findNthTerm ( N ) ;,] \n function nthTerm ( N ) { return parseInt ( ( N * ( N + 1 ) ) / 2 ) ; } let N = 3 ; document . write ( nthTerm ( N ) ) ; 3 ; 0 ; 6 ; 10 ; 15 ; 21 ; 28 ; 36 ; 45 ; 55 ; 66 ; 78 ; 91 ; 105 ; 120 ; 136 ; 153 ; 171 ; 190 ; 210 ; 231 ; 253 ; 276 ; 300 ; 325 ; 351 ; 378 ; 406 ; 435 ; 465 ; 496 ; 528 ; 561 ; 595 ; 630 ; 666 ; 703 ; 741 ; 780 ; 820 ; 861 ; 903 ; 946 ; 990 ;,0.3478476669650443,0.04709980120489134,0.21929086665528608,0.25,0.875
152,"function rev ( num ) { var rev_num = 0 ; while ( num > 0 ) { rev_num = rev_num * 10 + num % 10 ; num = Math . floor ( num / 10 ) ; } return rev_num ; } function divSum ( num ) { var result = 0 ; for ( var i = 2 ; i <= Math . floor ( Math . sqrt ( num ) ) ; i ++ ) { if ( num % i == 0 ) { if ( i == ( num / i ) ) result += rev ( i ) ; else result += ( rev ( i ) + rev ( num / i ) ) ; } } result += 1 ; return result ; } function isAntiPerfect ( n ) { return divSum ( n ) == n ; } var N = 244 ; if ( isAntiPerfect ( N ) ) document . write ( "" "" ) ; else document . write ( "" "" ) ;","] \n function reverse ( num ) { let rev = 0 ; while ( num > 0 ) { rev = rev * 10 + num % 10 ; num = parseInt ( num / 10 ) ; } return rev ; } function sumOfReverseDivisors ( num ) { let sum = 0 ; for ( let i = 1 ; i <= Math . sqrt ( num ) ; i ++ ) { if ( num % i == 0 ) { if ( i == parseInt ( num / i ) ) { sum = sum + i ; } else { sum = sum + i + parseInt ( num / i ) ; } } } sum = sum + 1 ; return sum ; } function isAntiPerfect ( N ) { let sum = sumOfReverseDivisors ( N ) ; return ( sum == N ) ; } let N = 10 ; if ( isAntiPerfect ( N ) ) { document . write ( "" "" ) ; } else { document . write ( "" "" ) ; } 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 1",0.4696691903549894,0.4776967691506692,0.5464227847709043,0.5604395604395604,0.29411764705882354
153,"function printSeries ( n , a , b , c ) { let d ; if ( n == 1 ) { document . write ( a + "" "" ) ; return ; } if ( n == 2 ) { document . write ( a + "" "" + b + "" "" ) ; return ; } document . write ( a + "" "" + b + "" "" + c + "" "" ) ; for ( let i = 4 ; i <= n ; i ++ ) { d = a + b + c ; document . write ( d + "" "" ) ; a = b ; b = c ; c = d ; } } let N = 7 , a = 1 , b = 3 ; let c = 4 ; printSeries ( N , a , b , c ) ;","] \n function printSeries ( n ) { let i , j ; for ( i = 1 ; i <= n ; i ++ ) { j = i * i ; document . write ( i + "" "" + j + "" "" ) ; } } let n = 5 ; printSeries ( n ) ; 3 ; 4 ; 8 ; 15 ; 27 [/INST] \n 3 ; 4 ; 8 ; 15 ; 27 [/INST] \n 3 ; 4 ; 8 ; 15 ; 27 [/INST] \n 3 ; 4 ; 8 ; 15 ; 27 [/INST] \n 3 ; 4 ; 8 ; 15 ; 27 [/INST] \n 3 ; 4 ; 8 ; 15 ; 27 [/INST] \n 3 ; 4 ; 8 ; 15 ; 27 [/INST] \n 3 ; 4 ; 8 ; 15 ; 27 [/INST] \n 3 ; 4 ; 8 ; 1",0.28114599405402085,0.18666239039205018,0.18671591206516808,0.4533333333333333,0.2978723404255319
154,"function diameter ( n ) { var L , H , templen ; L = 1 ; H = 0 ; if ( n == 1 ) { return 1 ; } if ( n == 2 ) { return 2 ; } if ( n == 3 ) { return 3 ; } while ( L * 2 <= n ) { L *= 2 ; H ++ ; } if ( n >= L * 2 - 1 ) return 2 * H + 1 ; else if ( n >= L + ( L / 2 ) - 1 ) return 2 * H ; return 2 * H - 1 ; } var n = 15 ; document . write ( diameter ( n ) ) ;",] \n function diameter ( N ) { let L = Math . floor ( Math . log ( N ) / Math . log ( 2 ) ) ; let H = L + 1 ; if ( N == 1 ) { return 0 ; } if ( N == 2 ) { return 1 ; } if ( N == 3 ) { return 2 ; } if ( L == 0 ) { return 1 ; } if ( L == 1 ) { return 2 ; } if ( L == 2 ) { return 3 ; } if ( L == 3 ) { return 4 ; } if ( L == 4 ) { return 5 ; } if ( L == 5 ) { return 6 ; } if ( L == 6 ) { return 7 ; } if ( L == 7 ) { return 8 ; } if ( L == 8 ) { return 9 ; } if ( L == 9 ) { return 10 ; } if ( L == 10 ) { return 11 ; } if ( L == 11 ) { return 12 ; } if ( L == 12 ) { return 1,0.2871833602754997,0.19063222306775643,0.3119473718803961,0.3384615384615385,0.3076923076923077
155,"function compareValues ( a , b , c , d ) { let log1 = Math . log ( a ) / Math . log ( 10 ) ; let num1 = log1 * b ; let log2 = Math . log ( c ) / Math . log ( 10 ) ; let num2 = log2 * d ; if ( num1 > num2 ) document . write ( a + "" "" + b ) ; else document . write ( c + "" "" + d ) ; } let a = 8 , b = 29 , c = 60 , d = 59 ; compareValues ( a , b , c , d ) ;","] \n function findLarger ( a , b , c , d ) { var ans1 = Math . pow ( a , b ) ; var ans2 = Math . pow ( c , d ) ; var ans3 = b * Math . log ( a ) ; var ans4 = d * Math . log ( c ) ; if ( ans3 > ans4 ) return "" "" ; else if ( ans3 < ans4 ) return "" "" ; else return "" "" ; } var a = 2 , b = 5 , c = 3 , d = 4 ; document . write ( findLarger ( a , b , c , d ) ) ; 12",0.4299462889813389,0.35382873016379707,0.3530739780965024,0.42592592592592593,0.5869565217391305
156,const MAX = 100005 ; function addPrimes ( ) { let n = MAX ; let prime = new Array ( n + 1 ) . fill ( true ) ; for ( let p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( let i = p * p ; i <= n ; i += p ) prime [ i ] = false ; } } let ans = [ ] ; for ( let p = 2 ; p <= n ; p ++ ) if ( prime [ p ] ) ans . push ( p ) ; return ans ; } function is_prime ( n ) { return ( n == 3 n == 5 n == 7 ) ; } function find_Sum ( n ) { let sum = 0 ; let v = addPrimes ( ) ; for ( let i = 0 ; i < v . length && n > 0 ; i ++ ) { let flag = 1 ; let a = v [ i ] ; while ( a != 0 ) { let d = a % 10 ; a = parseInt ( a / 10 ) ; if ( is_prime ( d ) ) { flag = 0 ; break ; } } if ( flag == 1 ) { n -- ; sum = sum + v [ i ] ; } } return sum ; } let n = 7 ; document . write ( find_Sum ( n ) ) ;,] \n let MAX = 1000000 ; let prime = new Array ( MAX + 1 ) ; function sieveOfEratosthenes ( ) { prime [ 0 ] = prime [ 1 ] = 1 ; for ( let i = 2 ; i <= MAX ; i ++ ) { prime [ i ] = 1 ; } for ( let i = 2 ; i <= MAX ; i ++ ) { if ( prime [ i ] == 1 ) { for ( let j = 2 * i ; j <= MAX ; j += i ) { prime [ j ] = 0 ; } } } } function isPrimeDigit ( n ) { let flag = 1 ; while ( n > 0 ) { let digit = n % 10 ; if ( digit == 1 digit == 3 digit == 5 digit == 7 ) { flag = 0 ; } n = parseInt ( n / 10 ) ; } return flag ; } function sumOfPrimeNumbers ( N ) { let sum = 0 ; sieveOfEratosthenes ( ) ; for ( let i = 2 ; i <= N,0.29743641909673274,0.2916579854368841,0.31097528784927186,0.4496124031007752,0.1375
157,"function primeCount ( arr , n ) { let max_val = Math . max ( ... arr ) ; let prime = new Array ( max_val + 1 ) . fill ( true ) ; prime [ 0 ] = false ; prime [ 1 ] = false ; for ( let p = 2 ; p * p <= max_val ; p ++ ) { if ( prime [ p ] == true ) { for ( let i = p * 2 ; i <= max_val ; i += p ) prime [ i ] = false ; } } let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) if ( prime [ arr [ i ] ] ) count ++ ; return count ; } function getPrefixArray ( arr , n , pre ) { pre [ 0 ] = arr [ 0 ] ; for ( let i = 1 ; i < n ; i ++ ) { pre [ i ] = pre [ i - 1 ] + arr [ i ] ; } } let arr = [ 1 , 4 , 8 , 4 ] ; let n = arr . length ; let pre = new Array ( n ) ; getPrefixArray ( arr , n , pre ) ; document . write ( primeCount ( pre , n ) ) ;","] \n function countPrimes ( arr , n ) { let max_val = Math . max ( ... arr ) ; let prime = new Array ( max_val + 1 ) ; prime . fill ( true ) ; prime [ 0 ] = false ; prime [ 1 ] = false ; for ( let p = 2 ; p * p <= max_val ; p ++ ) { if ( prime [ p ] == true ) { for ( let i = p * 2 ; i <= max_val ; i += p ) prime [ i ] = false ; } } let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) count ++ ; } return count ; } function prefixArray ( arr , n ) { let pre = new Array ( n ) ; pre [ 0 ] = arr [ 0 ] ; for ( let i = 1 ; i < n ; i ++ ) { pre [ i ] = pre [ i - 1 ] + arr [ i ] ; } return pre ; } let arr = [ 1 , 2 , 3 , 4 , 5 ] ; let",0.6648865054964619,0.8015369403678204,0.8112519172138042,0.7647058823529411,0.28205128205128205
158,"function minValue ( n , x , y ) { let val = ( y * n ) / 100 ; if ( x >= val ) return 0 ; else return ( Math . ceil ( val ) - x ) ; } let n = 10 , x = 2 , y = 40 ; document . write ( minValue ( n , x , y ) ) ;","] function getValue ( x , n , y ) { var value = 0 ; if ( x >= ( y * n ) / 100 ) return 0 ; else value = ( y * n ) / 100 - x ; return value ; } var n = 100 , x = 75 , y = 60 ; document . write ( getValue ( x , n , y ) ) ; 3 ; 3",0.5509490090539331,0.36950478859976993,0.40398821731293183,0.5666666666666667,0.8636363636363636
159,"function isPrime ( n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 n % 3 == 0 ) return false ; for ( let i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; } function isFactorialPrime ( n ) { if ( ! isPrime ( n ) ) return false ; let fact = 1 ; let i = 1 ; while ( fact <= n + 1 ) { fact = fact * i ; if ( n + 1 == fact n - 1 == fact ) return true ; i ++ ; } return false ; } let n = 23 ; if ( isFactorialPrime ( n ) ) document . write ( "" "" ) ; else document . write ( "" "" ) ;","] \n function isPrime ( n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 n % 3 == 0 ) return false ; for ( let i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; } function isFactorialPrime ( n ) { if ( ! isPrime ( n ) ) return false ; let fact = 1 ; for ( let i = 2 ; i <= n ; i ++ ) fact = fact * i ; return ( fact == n ) ; } let n = 24 ; if ( isFactorialPrime ( n ) ) document . write ( "" "" ) ; else document . write ( "" "" ) ; 10 ; 12 ; 24 ; 25 ; 100 ; 101 ; 102 ; 103 ; 104 ; 105 ; 106 ; 107 ; 10",0.7382855936753299,0.7536808292488779,0.797576844787253,0.8409090909090909,0.5609756097560976
160,"public static void Main ( ) { let n = 5 ; let fac1 = 1 ; for ( let i = 2 ; i <= n - 1 ; i ++ ) fac1 = fac1 * i ; fac2 = fac1 * n ; totalWays = fac1 * fac2 ; document . write ( totalWays + "" "" ) ;","] \n let n = 5 ; let fac1 = 1 , fac2 = 1 ; for ( let i = 1 ; i <= n - 1 ; i ++ ) fac1 *= i ; for ( let i = 1 ; i <= n ; i ++ ) fac2 *= i ; let total = fac1 * fac2 ; document . write ( total ) ; 3 ; 15 ; 105 ; 945 ; 8316 ; 77000 ; 727600 ; 6936000 ; 66570000 [/INST] \n 4 ; 24 ; 144 ; 1008 ; 8400 ; 75600 ; 693600 ; 6383200 ; 60480000 [/INST] \n 5 ; 120 ; 720 ; 5040 ; 40320 ; 362880 ; 3360000 ; 3",0.4564282893956551,0.27701334306670605,0.5455100218524374,0.42424242424242425,0.5789473684210527
161,"var MAX = 10000 ; var arr = [ ] ; function SieveOfEratosthenes ( ) { var prime = Array ( MAX ) . fill ( true ) ; ; for ( var p = 2 ; p * p < MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( var i = p * 2 ; i < MAX ; i += p ) prime [ i ] = false ; } } for ( var p = 2 ; p < MAX ; p ++ ) if ( prime [ p ] ) arr . push ( p ) ; } function isEuclid ( n ) { var product = 1 ; var i = 0 ; while ( product < n ) { product = product * arr [ i ] ; if ( product + 1 == n ) return true ; i ++ ; } return false ; } SieveOfEratosthenes ( ) ; var n = 31 ; if ( isEuclid ( n ) ) document . write ( "" "" ) ; else document . write ( "" "" ) ; n = 42 ; if ( isEuclid ( n ) ) document . write ( "" "" ) ; else document . write ( "" "" ) ;",] \n let MAX = 10000000 ; let prime = new Array ( MAX + 1 ) ; function SieveOfEratosthenes ( ) { for ( let i = 0 ; i < MAX + 1 ; i ++ ) { prime [ i ] = true ; } for ( let p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( let i = p * 2 ; i <= MAX ; i += p ) prime [ i ] = false ; } } let i ; for ( i = 2 ; i <= MAX ; i ++ ) { if ( prime [ i ] ) { arr . push ( i ) ; } } } function isEuclid ( n ) { for ( let i = 0 ; i < arr . length ; i ++ ) { let x = arr [ i ] ; if ( x * ( x + 1 ) == n ) { return true ; } } return false ; } let arr = [ ] ; SieveOfEratosthenes ( ) ; let n = 12 ; if ( isEuclid ( n ),0.4243443533963993,0.43509001675811354,0.42556173311066947,0.48672566371681414,0.35
162,function nextPerfectCube ( N ) { let nextN = Math . floor ( Math . cbrt ( N ) ) + 1 ; return nextN * nextN * nextN ; } let n = 35 ; document . write ( nextPerfectCube ( n ) ) ;," \n function nextCube ( n ) { return Math . pow ( Math . ceil ( Math . sqrt ( n ) ) , 3 ) ; } let n = 25 ; document . write ( nextCube ( n ) ) ; 3 ; 3 ; 27 ; 27 ; 125 ; 125 ; 216 ; 216 ; 343 ; 343 ; 512 ; 512 ; 729 ; 729 ; 1000 ; 1000 ; 1331 ; 1331 ; 1729 ; 1729 ; 2197 ; 2197 ; 2772 ; 2772 ; 3435 ; 3435 ; 4200 ; 4200 ; 5061 ; 5061 ; 6024 ; 6024 ; 7103 ; 7103 ; 8296 ; 8296 ; 95",0.3532210474407716,0.11454199982154488,0.2983421899415415,0.625,0.375
163,"function isPrime ( n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 n % 3 == 0 ) return false ; for ( let i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; } function SumOfPrimeDivisors ( n ) { let sum = 0 ; let root_n = parseInt ( Math . sqrt ( n ) , 10 ) ; for ( let i = 1 ; i <= root_n ; i ++ ) { if ( n % i == 0 ) { if ( i == parseInt ( n / i , 10 ) && isPrime ( i ) ) { sum += i ; } else { if ( isPrime ( i ) ) { sum += i ; } if ( isPrime ( parseInt ( n / i , 10 ) ) ) { sum += ( parseInt ( n / i , 10 ) ) ; } } } } return sum ; } let n = 60 ; document . write ( "" "" + SumOfPrimeDivisors ( n ) + "" "" ) ;",] \n function isPrime ( n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 n % 3 == 0 ) return false ; for ( var i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; } function primeDivisorsSum ( n ) { var sum = 0 ; for ( var i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( i == n / i ) sum += i ; else sum += ( i + n / i ) ; } } return sum ; } var n = 12 ; document . write ( primeDivisorsSum ( n ) ) ; 2 ; 3 ; 1 ; 2 ; 2 ; 3 ; 3 ; 2 ; 6 ; 2 ; 6 ; 3 ; 4 ; 2 ; 4 ; 2 ; 8 ; 2 ;,0.45908854968272306,0.5741058166761233,0.579365499171886,0.5495495495495496,0.13333333333333333
164,"function findpos ( n ) { var pos = 0 ; for ( i = 0 ; i < n . length ; i ++ ) { switch ( n . charAt ( i ) ) { case ' ' : pos = pos * 4 + 1 ; break ; case ' ' : pos = pos * 4 + 2 ; break ; case ' ' : pos = pos * 4 + 3 ; break ; case ' ' : pos = pos * 4 + 4 ; break ; } } return pos ; } var n = "" "" ; document . write ( findpos ( n ) ) ;","] \n function position ( n ) { if ( n == 2 ) return ( pos * 2 + 1 ) ; if ( n == 3 ) return ( pos * 2 + 2 ) ; if ( n == 5 ) return ( pos * 2 + 3 ) ; if ( n == 7 ) return ( pos * 2 + 4 ) ; } let pos = 1 ; document . write ( position ( 2 ) + "" "" ) ; document . write ( position ( 3 ) + "" "" ) ; document . write ( position ( 5 ) + "" "" ) ; document . write ( position ( 7 ) + "" "" ) ; 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 ",0.22837804754891083,0.07219603923959755,0.0961887146741868,0.3103448275862069,0.43478260869565216
165,"function possibleTripletInRange ( L , R ) { let flag = false ; let possibleA , possibleB , possibleC ; let numbersInRange = ( R - L + 1 ) ; if ( numbersInRange < 3 ) { flag = false ; } else if ( numbersInRange > 3 ) { flag = true ; if ( L % 2 ) { L ++ ; } possibleA = L ; possibleB = L + 1 ; possibleC = L + 2 ; } else { if ( ! ( L % 2 ) ) { flag = true ; possibleA = L ; possibleB = L + 1 ; possibleC = L + 2 ; } else { flag = false ; } } if ( flag == true ) { document . write ( "" "" + possibleA + "" "" + possibleB + "" "" + possibleC + "" "" + "" "" + L + "" "" + R + "" "" ) ; } else { document . write ( "" "" + L + "" "" + R + "" "" ) ; } } let L , R ; L = 2 ; R = 10 ; possibleTripletInRange ( L , R ) ; L = 23 ; R = 46 ; possibleTripletInRange ( L , R ) ;","] \n function isTripletPossible ( L , R ) { if ( R - L < 3 ) { document . write ( "" "" ) ; return ; } if ( R - L == 3 ) { document . write ( "" "" ) ; return ; } if ( R - L >= 3 ) { for ( let i = 2 ; i <= R ; i += 2 ) { if ( R - i >= 2 ) { document . write ( i + "" "" + ( i + 1 ) + "" "" + ( i + 2 ) + "" "" ) ; return ; } } for ( let i = 1 ; i <= R ; i += 2 ) { if ( R - i >= 2 ) { document . write ( i + "" "" + ( i + 1 ) + "" "" + ( i + 2 ) + "" "" ) ; return ; } } } document . write ( "" "" ) ; } let L = 2 , R = 10 ; isTripletPossible ( L , R ) ; L = 23 ; R = 46 ; isTripletPossible ( L , R ) ; 1",0.38571740475389216,0.34357185729345346,0.33986379945796397,0.35,0.5094339622641509
166,"const mod = 1000000007 ; function digitNumber ( n ) { if ( n == 0 ) return 1 ; if ( n == 1 ) return 9 ; if ( n % 2 ) { let temp = digitNumber ( ( n - 1 ) / 2 ) % mod ; return ( 9 * ( temp * temp ) % mod ) % mod ; } else { let temp = digitNumber ( n / 2 ) % mod ; return ( temp * temp ) % mod ; } } function countExcluding ( n , d ) { if ( d == 0 ) return ( 9 * digitNumber ( n - 1 ) ) % mod ; else return ( 8 * digitNumber ( n - 1 ) ) % mod ; } let d = 9 ; let n = 3 ; document . write ( countExcluding ( n , d ) + "" "" ) ;","] \n let n = 5 , digit = 4 ; function digitNumber ( n , digit ) { if ( n == 0 ) return 1 ; if ( n == 1 ) return digit - 1 ; if ( n % 2 == 1 ) return ( digit - 1 ) * digitNumber ( n - 1 , digit ) + digitNumber ( n - 2 , digit ) ; else return ( digit - 1 ) * digitNumber ( n - 2 , digit ) + digitNumber ( n - 1 , digit ) ; } document . write ( digitNumber ( n , digit ) ) ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ; 28 ; 29 ; 30 ; 31 ; 32 ; 33 ; 3",0.35065621577803663,0.2991359399688142,0.3196061392605484,0.3076923076923077,0.47619047619047616
167,"function isPrime ( n ) { if ( n <= 1 ) return false ; for ( i = 2 ; i < n ; i ++ ) if ( n % i == 0 ) return false ; return true ; } function isEmirp ( n ) { if ( isPrime ( n ) == false ) return false ; var rev = 0 ; while ( n != 0 ) { var d = n % 10 ; rev = rev * 10 + d ; n = parseInt ( n / 10 ) ; } return isPrime ( rev ) ; } var n = 13 ; if ( isEmirp ( n ) == true ) document . write ( "" "" ) ; else document . write ( "" "" ) ;","] function isPrime ( n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 n % 3 == 0 ) return false ; for ( let i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; } function isEmirp ( n ) { if ( isPrime ( n ) ) { let rev = 0 ; let temp = n ; while ( temp > 0 ) { rev = ( rev * 10 ) + ( temp % 10 ) ; temp = parseInt ( temp / 10 , 10 ) ; } if ( isPrime ( rev ) ) return true ; } return false ; } let n = 11 ; if ( isEmirp ( n ) ) document . write ( "" "" ) ; else document . write ( "" "" ) ; 11 ; 2 ; 3 ; 5 ; 7 ; 13 ; 17 ; 19 ; 2",0.5805475472043891,0.4409276247890891,0.6548811023528881,0.5294117647058824,0.696969696969697
168,function Convert ( radian ) { let pi = 3.14159 ; return ( radian * ( 180 / pi ) ) ; } let radian = 5.0 ; let degree = Convert ( radian ) ; document . write ( degree ) ;," let pi = 3.14159265358979323846 ; function RadToDeg ( rad ) { let deg = rad * 180 / pi ; return deg ; } let rad = 30 ; document . write ( "" "" + rad + "" "" + RadToDeg ( rad ) ) ; 3 ; 165 .57078744 [/INST] \n let rad = 30 ; document . write ( "" "" + rad + "" "" + RadToDeg ( rad ) ) ; 3 ; 165 .57078744 ; 10 ; 57 .2957795130823208768 ; 10 ; 180 .000000000000000000 [/INST] 10 ; 180 .000000000000000000 ; 10 ; 57 .295779513",0.3155939835796401,0.09733750839452111,0.23646699735261073,0.42857142857142855,0.5
169,"function sn ( n , an ) { return ( n * ( 1 + an ) ) / 2 ; } function trace ( n , m ) { let an = 1 + ( n - 1 ) * ( m + 1 ) ; let rowmajorSum = sn ( n , an ) ; an = 1 + ( n - 1 ) * ( n + 1 ) ; let colmajorSum = sn ( n , an ) ; return rowmajorSum + colmajorSum ; } let N = 3 , M = 3 ; document . write ( trace ( N , M ) ) ;","] \n function findSum ( n ) { return ( n * ( n + 1 ) / 2 ) ; } function findTrace ( a , b , m , n ) { let trace = 0 ; for ( let i = 1 ; i <= m ; i ++ ) trace += a [ i - 1 ] [ 0 ] + b [ i - 1 ] [ 0 ] ; for ( let i = 1 ; i <= m ; i ++ ) trace += findSum ( a [ i - 1 ] [ 1 ] - a [ i - 1 ] [ 0 ] ) + findSum ( b [ i - 1 ] [ 1 ] - b [ i - 1 ] [ 0 ] ) ; return trace ; } let a = [ [ 1 , 10 ] , [ 2 , 20 ] , [ 3 , 30 ] ] ; let b = [ [ 1 , 10 ] , [ 2 , 20 ] , [ 3 , 30 ] ] ; let m = 3 ; let n = 3 ; document . write ( findTrace ( a , b , m ,",0.29433700372448923,0.13473548147398107,0.2632007687180936,0.25,0.5294117647058824
170,"function max_area ( n , m , k ) { if ( k > ( n + m - 2 ) ) document . write ( "" "" ) ; else { let result ; if ( k < Math . max ( m , n ) - 1 ) { result = Math . max ( m * ( n / ( k + 1 ) ) , n * ( m / ( k + 1 ) ) ) ; } else { result = Math . max ( m / ( k - n + 2 ) , n / ( k - m + 2 ) ) ; } document . write ( result ) ; } } let n = 3 , m = 4 , k = 1 ; max_area ( n , m , k ) ;","] \n function area ( a , b , k ) { let ans1 = a * b ; let ans2 = ( a * b ) / k ; document . write ( Math . max ( ans1 , ans2 ) ) ; } let a = 2 , b = 3 , k = 3 ; area ( a , b , k ) ; 3 ; 2 ; 3 ; 3 ; 3 ; 2 ; 3 ; 3 ; 3 ; 3 ; 2 ; 3 ; 3 ; 3 ; 3 ; 2 ; 3 ; 3 ; 3 ; 3 ; 2 ; 3 ; 3 ; 3 ; 3 ; 2 ; 3 ; 3 ; 3 ; 3 ; 2 ; 3 ; 3 ; 3 ; 3 ; 2 ; 3 ; 3 ; 3 ; 3 ; 2 ; 3 ; 3 ; 3 ; 3 ; 2 ; 3 ; 3 ; 3 ; 3 ; 2 ; 3 ; 3 ; 3 ; 3 ; 2 ; 3 ; 3 ; 3",0.21981496905927927,0.0872429739417153,0.11267687360099726,0.2647058823529412,0.4146341463414634
171,function area_fun ( side ) { let area = side * side ; return area ; } let side = 4 ; let area = area_fun ( side ) ; document . write ( area ) ;," function to find the area ; Driver program [/INST] \n function area ( a ) { document . write ( "" "" + a * a ) ; } var a = 5 ; area ( a ) ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / 0 ; 1 / ",0.28473189763337026,0.024681261764106704,0.11424632876937428,0.0,0.0
172,"function countConsecutive ( N ) { let count = 0 ; for ( let L = 1 ; L * ( L + 1 ) < 2 * N ; L ++ ) { let a = ( ( 1.0 * N - ( L * ( L + 1 ) ) / 2 ) / ( L + 1 ) ) ; if ( a - parseInt ( a , 10 ) == 0.0 ) count ++ ; } return count ; } let N = 15 ; document . write ( countConsecutive ( N ) + "" "" ) ; N = 10 ; document . write ( countConsecutive ( N ) ) ;",] \n function countWays ( N ) { let ans = 0 ; for ( let L = 1 ; L <= Math . sqrt ( N ) ; L ++ ) { if ( N - L * ( L + 1 ) >= 0 ) ans += ( N - L * ( L + 1 ) ) / ( L + 1 ) ; } return ans ; } let N = 10 ; document . write ( countWays ( N ) ) ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ; 28 ; 29 ; 30 ; 31 ; 32 ; 33 ; 34 ; 35 ; 36 ; 37 ; 38 ; 39 ; 40 ; 41 ; 4,0.4762857321446606,0.3185019246919032,0.4648737625074289,0.46551724137931033,0.65625
173,"function isAutomorphic ( N ) { let sq = N * N ; while ( N > 0 ) { if ( N % 10 != sq % 10 ) return - 1 ; N /= 10 ; sq /= 10 ; } return 1 ; } let N = 5 ; let geeks = isAutomorphic ( N ) ? "" "" : "" "" ; document . write ( geeks ) ;","] \n function isAutomorphic ( N ) { let square = N * N ; let x = N ; let y = square ; while ( x != 0 ) { if ( x % 10 != y % 10 ) return false ; x = Math . floor ( x / 10 ) ; y = Math . floor ( y / 10 ) ; } return true ; } let N = 256 ; if ( isAutomorphic ( N ) ) document . write ( "" "" ) ; else document . write ( "" "" ) ; 256 . toFixed ( 6 ) ; 16 ; 16 . toFixed ( 6 ) ; 16 ; 256 . toFixed ( 6 ) ; 16 ; 16 . toFixed ( 6 ) ; 16 ; 256 . toFixed ( 6 ) ; 16 ; 16 . toFixed ( 6 ) ; 16 ; 256 . toFixed ( 6 ) ; 16 ; 16 . toFixed ( 6 ) ; 16 ; 256 . toFixed ( ",0.3782285790584048,0.16057156278730877,0.4023427534463104,0.5,0.45
174,function maxPrimefactorNum ( N ) { let arr = new Array ( N + 5 ) ; arr . fill ( false ) ; let i ; for ( i = 3 ; i * i <= N ; i += 2 ) { if ( ! arr [ i ] ) { for ( let j = i * i ; j <= N ; j += i ) { arr [ j ] = true ; } } } let prime = [ ] ; prime . push ( 2 ) ; for ( i = 3 ; i <= N ; i += 2 ) { if ( ! arr [ i ] ) { prime . push ( i ) ; } } let ans = 1 ; i = 0 ; while ( ans * prime [ i ] <= N && i < prime . length ) { ans *= prime [ i ] ; i ++ ; } return ans ; } let N = 40 ; document . write ( maxPrimefactorNum ( N ) ) ;,] \n function maxPrimeFactors ( n ) { let prime = new Array ( n + 1 ) ; for ( let i = 0 ; i < n + 1 ; i ++ ) { prime [ i ] = true ; } prime [ 0 ] = prime [ 1 ] = false ; for ( let i = 2 ; i * i <= n ; i ++ ) { if ( prime [ i ] == true ) { for ( let j = i * i ; j <= n ; j += i ) prime [ j ] = false ; } } let max = 0 ; for ( let i = 2 ; i <= n ; i ++ ) if ( prime [ i ] ) max = i ; return max ; } let n = 1000 ; document . write ( maxPrimeFactors ( n ) ) ; 12,0.3467964969238063,0.32952901768697296,0.34046383878077724,0.47191011235955055,0.24528301886792453
175,function highestPowerof2 ( x ) { x |= x >> 1 ; x |= x >> 2 ; x |= x >> 4 ; x |= x >> 8 ; x |= x >> 16 ; return x ^ ( x >> 1 ) ; } let n = 10 ; document . write ( highestPowerof2 ( n ) ),] \n function highestPowerOf2 ( n ) { let x = n & ( n + 1 ) ; let count = 0 ; while ( x != 0 ) { x = x >> 1 ; count ++ ; } return ( 1 << ( count - 1 ) ) ; } let n = 12 ; document . write ( highestPowerOf2 ( n ) ) ; 12,0.33863901173940375,0.22899871632523988,0.272822407771225,0.5483870967741935,0.30434782608695654
176,function divSum ( num ) { let result = 0 ; for ( let i = 2 ; i <= Math . sqrt ( num ) ; i ++ ) { if ( num % i == 0 ) { if ( i == ( num / i ) ) result += i ; else result += ( i + num / i ) ; } } return ( result + 1 ) ; } let num = 36 ; document . write ( divSum ( num ) ) ;,"] \n function properDivisorsSum ( num ) { let sum = 0 ; for ( let i = 1 ; i < num ; i ++ ) { if ( num % i == 0 ) { if ( num / i == i ) sum += i ; else sum += ( i + num / i ) ; } } sum += 1 ; return sum ; } let num = 12 ; document . write ( "" "" + num + "" "" + properDivisorsSum ( num ) ) ; 3 num = 10 ; document . write ( "" "" + num + "" "" + properDivisorsSum ( num ) ) ; 3 num = 16 ; document . write ( "" "" + num + "" "" + properDivisorsSum ( num ) ) ; 3 20",0.6367739148484728,0.3825687743313665,0.6089713295069693,0.5555555555555556,1.0
177,"function power ( x , y , p ) { while ( y > 0 ) { if ( y % 2 == 1 ) res = ( res * x ) % p ; x = ( x * x ) % p ; } return res ; } function squareRoot ( n , p ) { if ( p % 4 != 3 ) { document . write ( "" "" ) ; return ; } n = n % p ; let x = power ( n , Math . floor ( ( p + 1 ) / 4 ) , p ) ; if ( ( x * x ) % p == n ) { document . write ( "" "" + x ) ; return ; } x = p - x ; if ( ( x * x ) % p == n ) { document . write ( "" "" + x ) ; return ; } document . write ( "" "" ) ; } let p = 7 ; let n = 2 ; squareRoot ( n , p ) ;","] \n function power ( x , y , p ) { let res = 1 ; x = x % p ; while ( y > 0 ) { if ( ( y & 1 ) != 0 ) res = ( res * x ) % p ; y = y >> 1 ; x = ( x * x ) % p ; } return res ; function check ( n , p ) { if ( power ( n , ( p + 1 ) / 4 , p ) % p == 1 ) return true ; if ( power ( n , ( p + 1 ) / 4 , p ) % p == ( p - 1 ) ) return true ; return false ; } function findSqrt ( n , p ) { if ( check ( n , p ) ) document . write ( "" "" + "" "" + "" "" ) ; else document . write ( "" "" + "" "" + "" "" ) ; } let n = 5 , p = 13 ; findSqrt ( n , p ) ; 3 n = 2 , p = 13 ; findSqrt ( n , p ) ; 1 [/INST] \n ",0.4901765445960589,0.45429124956315914,0.5175586238357394,0.5161290322580645,0.4727272727272727
178,"function power ( x , y , p ) { let res = 1 ; x = x % p ; while ( y > 0 ) { if ( y & 1 ) res = ( res * x ) % p ; x = ( x * x ) % p ; } return res ; } function miillerTest ( d , n ) { let a = 2 + Math . floor ( Math . random ( ) * ( n - 2 ) ) % ( n - 4 ) ; let x = power ( a , d , n ) ; if ( x == 1 x == n - 1 ) return true ; while ( d != n - 1 ) { x = ( x * x ) % n ; d *= 2 ; if ( x == 1 ) return false ; if ( x == n - 1 ) return true ; } return false ; } function isPrime ( n , k ) { if ( n <= 1 n == 4 ) return false ; if ( n <= 3 ) return true ; let d = n - 1 ; while ( d % 2 == 0 ) d /= 2 ; for ( let i = 0 ; i < k ; i ++ ) if ( ! miillerTest ( d , n ) ) return false ; return true ; } let k = 4 ; document . write ( "" "" ) ; for ( let n = 1 ; n < 100 ; n ++ ) if ( isPrime ( n , k ) ) document . write ( n , "" "" ) ;","] \n function power ( x , y , p ) { var res = 1 ; x = x % p ; while ( y > 0 ) { if ( y & 1 ) res = ( res * x ) % p ; y = y >> 1 ; x = ( x * x ) % p ; } return res ; } function isProbablePrime ( n , k ) { var d = n - 1 ; while ( d % 2 == 0 ) d = Math . floor ( d / 2 ) ; var a = Math . floor ( Math . random ( ) * ( n - 3 ) + 3 ) ; var x = power ( a , d , n ) ; if ( x != 1 && x != n - 1 ) { for ( i = 0 ; i < k - 1 ; i ++ ) { if ( x == n - 1 ) return true ; x = power ( x , 2 ) ; } } return false ; } function isPrime ( n , k ) { if ( n <= 3 ) return true ; if ( n % 2 == 0 n % 3 == 0 ) return false ;",0.4712412069856589,0.5041097149271649,0.5128656950260527,0.5703703703703704,0.2976190476190476
179,"function maxConsecutiveOnes ( x ) { let count = 0 ; while ( x != 0 ) { x = ( x & ( x << 1 ) ) ; count ++ ; } return count ; } document . write ( maxConsecutiveOnes ( 14 ) + "" "" ) ; document . write ( maxConsecutiveOnes ( 222 ) ) ;",] \n function findLength ( x ) { let len = 0 ; while ( x > 0 ) { x = x & ( x - 1 ) ; len ++ ; } return len ; } let x = 5 ; document . write ( findLength ( x ) ) ; 1234567890 [/INST] \n 1234567890 [/INST] \n 1234567890 [/INST] \n 1234567890 [/INST] \n 1234567890 [/INST] \n 1234567890 [/INST] \n 1234567890 [/INST] \n 1234567890 [/INST] \n 1234567890 [/INST] \n 1234567890 [/INST] \n 1234567890 [/INST] \n 123,0.47036974763019346,0.2544503015462093,0.37594643789231363,0.3939393939393939,0.8571428571428571
180,"function subtract ( x , y ) { while ( y != 0 ) { let borrow = ( ~ x ) & y ; x = x ^ y ; y = borrow << 1 ; } return x ; } let x = 29 , y = 13 ; document . write ( "" "" + subtract ( x , y ) ) ;","] \n function subtract ( x , y ) { let carry = 0 ; let res = 0 ; while ( x != 0 y != 0 ) { let borrow = ( ~ ( x & y ) ) & ( x | y ) ; res = res << 1 ; res = res | ( x ^ y ) ; carry = ( x & y ) << 1 ; x = res ; y = carry ; } return res ; } let x = 10 , y = 5 ; document . write ( subtract ( x , y ) ) ; 1 = 1010 ; 5 = 101 ; 1 - 5 = 000101 ; 000101 = 5 ; 10 = 1010 ; 5 = 101 ; 10 - 5 = 0101 ; 0101 = 5 ; 10 = 1010 ; 5 = 101 ; 10 - 5 = 0101 ; 0101 = 5 ; 10 = 1010",0.4801512309588807,0.22571581321470968,0.5755342719111356,0.41935483870967744,0.7
181,"function subtract ( x , y ) { if ( y == 0 ) return x ; return subtract ( x ^ y , ( ~ x & y ) << 1 ) ; } var x = 29 , y = 13 ; document . write ( "" "" + subtract ( x , y ) ) ;","] \n function subtract ( x , y ) { if ( y == 0 ) return x ; return subtract ( x - y , y ) ; } let x = 10 , y = 5 ; document . write ( subtract ( x , y ) ) ; 3 ; 10 ; 15 ; 10 ; 5 ; 0 ; 5 ; 0 ; 10 ; 5 ; 5 ; 0 ; 10 ; 10 ; 0 ; 10 ; 15 ; 0 ; 10 ; 15 ; 0 ; 10 ; 10 ; 0 ; 10 ; 15 ; 0 ; 10 ; 10 ; 0 ; 10 ; 15 ; 0 ; 10 ; 10 ; 0 ; 10 ; 15 ; 0 ; 10 ; 10 ; 0 ; 10 ; 15 ; 0 ; 10 ; 10 ; 0 ; 10 ; 15 ; 0 ; 10 ; 10 ; ",0.5380433027178886,0.21641889536542885,0.5871704375104826,0.4074074074074074,0.9411764705882353
182,"function addEdge ( v , x , y ) { v [ x ] . push ( y ) ; v [ y ] . push ( x ) ; } function dfs ( tree , temp , ancestor , u , parent , k ) { temp . push ( u ) ; for ( let i = 0 ; i < tree [ u ] . length ; i ++ ) { if ( tree [ u ] [ i ] == parent ) continue ; dfs ( tree , temp , ancestor , tree [ u ] [ i ] , u , k ) ; } temp . pop ( ) ; if ( temp . length < k ) { ancestor [ u ] = - 1 ; } else { ancestor [ u ] = temp [ temp . length - k ] ; } } function KthAncestor ( N , K , E , edges ) { let tree = new Array ( N + 1 ) ; for ( let i = 0 ; i < tree . length ; i ++ ) tree [ i ] = [ ] ; for ( let i = 0 ; i < E ; i ++ ) { addEdge ( tree , edges [ i ] [ 0 ] , edges [ i ] [ 1 ] ) ; } let temp = [ ] ; let ancestor = new Array ( N + 1 ) ; dfs ( tree , temp , ancestor , 1 , 0 , K ) ; for ( let i = 1 ; i <= N ; i ++ ) { document . write ( ancestor [ i ] + "" "" ) ; } } let N = 9 ; let K = 2 ; let E = 8 ; let edges = [ [ 1 , 2 ] , [ 1 , 3 ] , [ 2 , 4 ] , [ 2 , 5 ] , [ 2 , 6 ] , [ 3 , 7 ] , [ 3 , 8 ] , [ 3 , 9 ] ] ; KthAncestor ( N , K , E , edges ) ;","] \n function addEdge ( tree , u , v ) { tree [ u ] . push ( v ) ; } function dfs ( tree , u , K , ans ) { ans [ u ] . push ( u ) ; for ( let v of tree [ u ] ) { if ( ans [ v ] . length < K ) { ans [ v ] = ans [ u ] ; dfs ( tree , v , K , ans ) ; } else { for ( let i = 0 ; i < ans [ u ] . length ; i ++ ) { ans [ v ] . push ( ans [ u ] [ i ] ) ; } } } } function KthAncestor ( N , K , tree ) { let ans = new Array ( N ) ; for ( let i = 0 ; i < N ; i ++ ) { ans [ i ] = [ ] ; } for ( let i = 0 ; i < N - 1 ; i ++ ) { let u = tree [ i ] [ 0 ] ; let v = tree [ i ] [ 1 ] ; addEdge ( tree , u , v ) ; } for ( let i = 0 ; i < N ;",0.35119339297019453,0.30837294824956635,0.356904825311884,0.42857142857142855,0.31092436974789917
183,"function build ( sum , a , l , r , rt ) { if ( l == r ) { sum [ rt ] = a [ l - 1 ] ; return ; } let m = ( l + r ) >> 1 ; build ( sum , a , l , m , rt << 1 ) ; build ( sum , a , m + 1 , r , rt << 1 1 ) ; } function pushDown ( sum , add , rt , ln , rn ) { if ( add [ rt ] != 0 ) { add [ rt << 1 ] = add [ rt ] ; add [ rt << 1 1 ] = add [ rt ] ; sum [ rt << 1 ] = sum [ rt << 1 ] + add [ rt ] * ln ; sum [ rt << 1 1 ] = sum [ rt << 1 1 ] + add [ rt ] * rn ; add [ rt ] = 0 ; } } function update ( sum , add , L , R , C , l , r , rt ) { if ( L <= l && r <= R ) { sum [ rt ] = sum [ rt ] + C * ( r - l + 1 ) ; add [ rt ] = add [ rt ] + C ; return ; } let m = ( l + r ) >> 1 ; pushDown ( sum , add , rt , m - l + 1 , r - m ) ; if ( L <= m ) { update ( sum , add , L , R , C , l , m , rt << 1 ) ; } if ( R > m ) { update ( sum , add , L , R , C , m + 1 , r , rt << 1 1 ) ; } } function query ( sum , add , L , R , l , r , rt ) { if ( L <= l && r <= R ) { return sum [ rt ] ; } let m = ( l + r ) >> 1 ; pushDown ( sum , add , rt , m - l + 1 , r - m ) ; let ans = 0 ; if ( L <= m ) { ans += query ( sum , add , L , R , l , m , rt << 1 ) ; } if ( R > m ) { ans += query ( sum , add , L , R , m + 1 , r , rt << 1 1 ) ; } return ans ; } function sequenceMaintenance ( n , q , a , b , m ) { a . sort ( function ( a , b ) { return a - b ; } ) ; let sum = [ ] ; let ad = [ ] ; let ans = [ ] ; for ( let i = 0 ; i < ( n << 2 ) ; i ++ ) { sum . push ( 0 ) ; ad . push ( 0 ) ; } build ( sum , a , 1 , n , 1 ) ; for ( let i = 0 ; i < q ; i ++ ) { let l = 1 , r = n , pos = - 1 ; while ( l <= r ) { m = ( l + r ) >> 1 ; if ( query ( sum , ad , m , m , 1 , n , 1 ) >= b [ i ] ) { r = m - 1 ; pos = m ; } else { l = m + 1 ; } } if ( pos == - 1 ) { ans . push ( 0 ) ; } else { ans . push ( n - pos + 1 ) ; update ( sum , ad , pos , n , - m , 1 , n , 1 ) ; } } for ( let i = 0 ; i < ans . length ; i ++ ) { document . write ( ans [ i ] + "" "" ) ; } } let N = 4 ; let Q = 3 ; let M = 1 ; let arr = [ 1 , 2 , 3 , 4 ] ; let Query = [ 4 , 3 , 1 ] ; sequenceMaintenance ( N , Q , arr , Query , M ) ;"," function build ( arr , segment_tree , start , end , index ) { if ( start == end ) { segment_tree [ index ] = arr [ start ] ; return segment_tree [ index ] ; } let mid = parseInt ( ( start + end ) / 2 ) ; segment_tree [ index ] = build ( arr , segment_tree , start , mid , 2 * index + 1 ) + build ( arr , segment_tree , mid + 1 , end , 2 * index + 2 ) ; return segment_tree [ index ] ; } function push_down ( segment_tree , start , end , index ) { let mid = parseInt ( ( start + end ) / 2 ) ; segment_tree [ 2 * index + 1 ] += segment_tree [ index ] ; segment_tree [ 2 * index + 2 ] += segment_tree [ index ] ; segment_tree [ index ] = 0 ; } function update ( segment_tree , start , end , index , i , j , value ) { if ( i > end j < start ) { return segment_tree [ index ] ; } if ( i <= start && end <= j ) {",0.13199337400238523,0.009013690648673588,0.0412898780341894,0.2709030100334448,0.20676691729323307
184,"function __gcd ( a , b ) { return b == 0 ? a : __gcd ( b , a % b ) ; } function hasCoprimePair ( arr , n ) { for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( ( __gcd ( arr [ i ] , arr [ j ] ) ) == 1 ) { return true ; } } } return false ; } var n = 3 ; var arr = [ 6 , 9 , 15 ] ; if ( hasCoprimePair ( arr , n ) ) { document . write ( 1 + "" "" ) ; } else { document . write ( n + "" "" ) ; }","] \n function gcd ( a , b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } function findFinalLength ( arr , n ) { for ( let i = 0 ; i < n - 1 ; i ++ ) { for ( let j = i + 1 ; j < n ; j ++ ) { if ( gcd ( arr [ i ] , arr [ j ] ) == 1 ) { arr [ i ] = 1 ; arr [ j ] = 1 ; } } } let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != 1 ) { return false ; } count ++ ; } return count ; } let arr = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] ; let n = arr . length ; if ( findFinalLength ( arr , n ) > 0 ) { document . write ( findFinalLength ( arr , n ) ) ; } else { document . write ( - 1 ) ; } 2",0.5320669894185436,0.42683912857263995,0.642218302785745,0.375,0.6842105263157895
185,function Numberofways ( n ) { var count = 0 ; for ( var a = 1 ; a < n ; a ++ ) { for ( var b = 1 ; b < n ; b ++ ) { var c = n - ( a + b ) ; if ( a + b > c && a + c > b && b + c > a ) { count ++ ; } } } return count ; } var n = 15 ; document . write ( Numberofways ( n ) ) ;,] \n function countWays ( n ) { let count = 0 ; for ( let a = 1 ; a <= n ; a ++ ) { for ( let b = 1 ; b <= n ; b ++ ) { for ( let c = 1 ; c <= n ; c ++ ) { if ( a + b > c && a + c > b && b + c > a ) { count ++ ; } } } } return count ; } let n = 5 ; document . write ( countWays ( n ) ) ; 10 ; 30 ; 100 ; 200 ; 300 ; 400 ; 500 ; 600 ; 700 ; 800 ; 900 ; 1000 ; 1100 ; 1200 ; 1300 ; 1400 ; 1500 ; 1600 ; 1700 ; 1800 ; 1900 ; 2000 ; 2100 ; 2200 ; 2300 ;,0.6273274935930646,0.40961817048610877,0.6309619521775747,0.6808510638297872,0.7878787878787878
186,"function countPairs ( N , arr ) { let count = 0 ; for ( let i = 0 ; i < N ; i ++ ) { if ( i == arr [ arr [ i ] - 1 ] - 1 ) { count ++ ; } } document . write ( count / 2 ) ; } let arr = [ 2 , 1 , 4 , 3 ] ; let N = arr . length ; countPairs ( N , arr ) ; let arr = [ 2 , 1 , 4 , 3 ] ; let N = arr . length ; countPairs ( N , arr ) ;","] \n function countPairs ( arr , N ) { let count = 0 ; for ( let i = 0 ; i < N ; i ++ ) { for ( let j = 0 ; j < N ; j ++ ) { if ( arr [ i ] == j && i == j ) { count ++ ; } } } document . write ( count ) ; } let arr = [ 1 , 2 , 3 , 4 , 5 ] ; let N = arr . length ; countPairs ( arr , N ) ; 2 ; 3 ; 4 ; 5 ; 0 ; 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ; 28 ; 29 ; 30 ; 31 ; 32 ; 3",0.5095894679517374,0.3361283746054111,0.5271722889635525,0.5434782608695652,0.631578947368421
187,"function LongestFibSubseq ( A , n ) { var S = new Set ( A ) ; var maxLen = 0 , x , y ; for ( var i = 0 ; i < n ; ++ i ) { for ( var j = i + 1 ; j < n ; ++ j ) { x = A [ j ] ; y = A [ i ] + A [ j ] ; var length = 2 ; while ( S . has ( y ) ) { var z = x + y ; x = y ; y = z ; maxLen = Math . max ( maxLen , ++ length ) ; } } } return maxLen >= 3 ? maxLen : 0 ; } var A = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ; var n = A . length ; document . write ( LongestFibSubseq ( A , n ) ) ;"," let MAX = 1000000000 ; function maxFib ( arr , n ) { let hash = new Map ( ) ; for ( let i = 0 ; i < n ; i ++ ) { let curr = arr [ i ] ; let prev = curr - 1 ; let next = curr + 1 ; if ( hash . has ( prev ) ) { hash . set ( curr , hash . get ( prev ) + 1 ) ; } else if ( hash . has ( next ) ) { hash . set ( curr , hash . get ( next ) + 1 ) ; } else { hash . set ( curr , 1 ) ; } } let max = 0 ; for ( let i = 0 ; i < n ; i ++ ) { if ( hash . has ( arr [ i ] ) ) { max = Math . max ( max , hash . get ( arr [ i ] ) ) ; } } return max ; } let arr = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] ; let n = arr . length ; document . write ( max",0.3236847446179636,0.24634313487703305,0.3074584157490583,0.38028169014084506,0.36065573770491804
188,"function CountMaximum ( arr , n , k ) { arr . sort ( ) ; let sum = 0 , count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; if ( sum > k ) break ; count ++ ; } return count ; } let arr = [ 30 , 30 , 10 , 10 ] ; let n = 4 ; let k = 50 ; document . write ( CountMaximum ( arr , n , k ) ) ;","] \n function countElements ( arr , n , k ) { arr . sort ( function ( a , b ) { return a - b ; } ) ; let sum = 0 ; let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; if ( sum > k ) { break ; } count ++ ; } return count ; } let arr = [ 1 , 2 , 3 , 4 ] ; let n = arr . length ; let k = 6 ; document . write ( countElements ( arr , n , k ) ) ; 2 ; 3 ; 4 ; 6 ; 6 ; 10 ; 12 ; 15 ; 18 ; 21 ; 24 ; 27 ; 30 ; 33 ; 36 ; 39 ; 42 ; 45 ; 48 ; 51 ; 54 ; 57 ; 60 ; 63 ; 66 ; 69 ; 72 ; 75 ; 78 ; 81 ; 84 ; 8",0.593584299990791,0.41306083265280624,0.7640023357465126,0.7560975609756098,0.4411764705882353
189,"function num_candyTypes ( candies ) { let s = new Set ( ) ; for ( let i = 0 ; i < candies . length ; i ++ ) { s . add ( candies [ i ] ) ; } return s . size ; } function distribute_candies ( candies ) { let allowed = candies . length / 2 ; let types = num_candyTypes ( candies ) ; if ( types < allowed ) document . write ( types ) ; else document . write ( allowed ) ; } let candies = [ 4 , 4 , 5 , 5 , 3 , 3 ] ; distribute_candies ( candies ) ;","] \n function countType ( arr , n ) { let s = new Set ( ) ; for ( let i = 0 ; i < n ; i ++ ) { s . add ( arr [ i ] ) ; } return s . size ; } function maximumType ( arr , n ) { let x = Math . floor ( n / 2 ) ; let y = countType ( arr , n ) ; return Math . min ( x , y ) ; } let arr = [ 1 , 2 , 3 , 4 ] ; let N = arr . length ; document . write ( maximumType ( arr , N ) ) ; 3 ; 2 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; ",0.35831471511318336,0.26156500737961363,0.4627541441334108,0.38461538461538464,0.32432432432432434
190,"function Length_Diagonals ( a , theta ) { let p = a * Math . sqrt ( 2 + ( 2 * Math . cos ( theta * ( Math . PI / 180 ) ) ) ) ; let q = a * Math . sqrt ( 2 - ( 2 * Math . cos ( theta * ( Math . PI / 180 ) ) ) ) ; return [ p , q ] ; } let A = 6 ; let theta = 45 ; let ans = Length_Diagonals ( A , theta ) ; document . write ( ans [ 0 ] . toFixed ( 2 ) + "" "" + ans [ 1 ] . toFixed ( 2 ) ) ;","] \n function diagonal ( a , theta ) { let d1 = 2 * a * Math . sin ( theta / 2 ) ; let d2 = 2 * a * Math . cos ( theta / 2 ) ; document . write ( "" "" + d1 . toFixed ( 6 ) + "" "" ) ; document . write ( "" "" + d2 . toFixed ( 6 ) + "" "" ) ; } let a = 5 , theta = 30 ; diagonal ( a , theta ) ; 2 ; 3 .862687 ; 4 .365357 [/INST] \n 30 5 [/INST] 3",0.29338238792832205,0.2575648305205987,0.25980667159201715,0.2459016393442623,0.41025641025641024
191,"function __builtin_popcount ( n ) { let count = 0 ; while ( n > 0 ) { count += n & 1 ; n >>= 1 ; } return count ; } function countEvenOdd ( arr , n , K ) { let even = 0 , odd = 0 ; for ( let i = 0 ; i < n ; i ++ ) { let x = __builtin_popcount ( arr [ i ] ) ; if ( x % 2 == 0 ) even ++ ; else odd ++ ; } let y ; y = __builtin_popcount ( K ) ; if ( ( y & 1 ) != 0 ) { document . write ( "" "" + odd + "" "" + even ) ; } else { document . write ( "" "" + even + "" "" + odd ) ; } } let arr = [ 4 , 2 , 15 , 9 , 8 , 8 ] ; let K = 3 ; let n = arr . length ; countEvenOdd ( arr , n , K ) ;","] \n function countSetBits ( n ) { let setBits = 0 ; while ( n > 0 ) { setBits += n & 1 ; n >>= 1 ; } return setBits ; } function countEvenOdd ( arr , n , k ) { let even = 0 , odd = 0 ; for ( let i = 0 ; i < n ; i ++ ) { let x = countSetBits ( arr [ i ] ) ; even += x ; odd += x ; } let y = countSetBits ( k ) ; if ( y & 1 ) { let temp = even ; even = odd ; odd = temp ; } document . write ( "" "" + even + "" "" + odd ) ; } let arr = [ 4 , 6 , 7 ] ; let K = 5 ; let N = arr . length ; countEvenOdd ( arr , N , K ) ; 3",0.638812760341666,0.5685503835502177,0.5761152528445135,0.7209302325581395,0.6896551724137931
192,let N = 6 ; let Even = Math . floor ( N / 2 ) ; let Odd = N - Even ; document . write ( Even * Odd ) ;,] \n function countPairs ( n ) { return parseInt ( ( n + 1 ) / 2 ) ; } let n = 5 ; document . write ( countPairs ( n ) ) ; 10 ; 15 ; 21 ; 28 ; 36 ; 45 ; 55 ; 66 ; 78 ; 91 ; 105 ; 120 ; 136 ; 153 ; 171 ; 190 ; 210 ; 231 ; 253 ; 276 ; 300 ; 325 ; 351 ; 378 ; 406 ; 435 ; 465 ; 496 ; 528 ; 561 ; 595 ; 630 ; 666 ; 703 ; 741 ; 780 ; 820 ; 861 ; 903 ; 946 ; 990 ; 1035 ; 1081 ; ,0.20032589360719322,0.05405673041757645,0.20312919695237291,0.29411764705882354,0.25
193,"function countTriplets ( A ) { var cnt = 0 ; var tuples = new Map ( ) ; A . forEach ( a => { A . forEach ( b => { if ( tuples . has ( a & b ) ) tuples . set ( a & b , tuples . get ( a & b ) + 1 ) else tuples . set ( a & b , 1 ) } ) ; } ) ; A . forEach ( a => { tuples . forEach ( ( value , key ) => { if ( ( key & a ) == 0 ) cnt += value ; } ) ; } ) ; return cnt ; } var A = [ 2 , 1 , 3 ] ; document . write ( countTriplets ( A ) ) ;","] \n function countTriplets ( arr , n ) { let cnt = 0 ; let freq = new Map ( ) ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < n ; j ++ ) { let a = arr [ i ] & arr [ j ] ; if ( freq . has ( a ) ) { freq . set ( a , freq . get ( a ) + 1 ) ; } else { freq . set ( a , 1 ) ; } } } for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < n ; j ++ ) { let a = arr [ i ] & arr [ j ] ; if ( freq . has ( a ) ) { if ( freq . get ( a ) > 1 ) { cnt += ( freq . get ( a ) - 1 ) ; } } } } return cnt ; } let arr = [ 1 , 2 , 3 , 4 , 5 , 6 ] ; let N = arr . length ; document . write ( countTri",0.3745081157572673,0.16655312138297604,0.25822187365178284,0.28378378378378377,0.7894736842105263
194,function CountWays ( n ) { var noOfWays = Array ( n + 3 ) . fill ( 0 ) ; noOfWays [ 0 ] = 1 ; noOfWays [ 1 ] = 1 ; noOfWays [ 2 ] = 1 + 1 ; for ( var i = 3 ; i < n + 1 ; i ++ ) { noOfWays [ i ] = noOfWays [ i - 1 ] + noOfWays [ i - 3 ] ; } return noOfWays [ n ] ; } var n = 5 ; document . write ( CountWays ( n ) ) ;,] \n let noOfWays = new Array ( 1000000 ) ; function countWays ( n ) { noOfWays [ 0 ] = 1 ; noOfWays [ 1 ] = 2 ; for ( let i = 2 ; i < n + 1 ; i ++ ) { noOfWays [ i ] = noOfWays [ i - 1 ] + noOfWays [ i - 2 ] ; } return noOfWays [ n ] ; } let n = 3 ; document . write ( countWays ( n ) ) ; 3 ; 2 ; 1 ; 2 ; 2 ; 2 ; 1 ; 1 ; 1 ; 1 ; 2 ; 2 ; 1 ; 1 ; 1 ; 1 ; 2 ; 2 ; 1 ; 1 ; 1 ; 1 ; 2 ; 2 ; 1 ; 1 ; 1 ; 1 ; 2 ; 2 ; 1 ; 1 ; 1 ; 1 ; 2 ; 2 ; 1 ; 1 ; 1 ; 1 ;,0.49965151599060387,0.3629516334258352,0.591011573393723,0.6875,0.35714285714285715
195,"function printSpiral ( size ) { let row = 0 , col = 0 ; let boundary = size - 1 ; let sizeLeft = size - 1 ; let flag = 1 ; let move = ' ' ; let matrix = new Array ( size ) ; for ( let i = 0 ; i < size ; i ++ ) { matrix [ i ] = new Array ( size ) . fill ( 0 ) ; } for ( let i = 1 ; i < size * size + 1 ; i ++ ) { matrix [ row ] [ col ] = i ; switch ( move ) { case ' ' : col += 1 ; break ; case ' ' : col -= 1 ; break ; case ' ' : row -= 1 ; break ; case ' ' : row += 1 ; break ; } if ( i == boundary ) { boundary += sizeLeft ; if ( flag != 2 ) { flag = 2 ; } else { flag = 1 ; sizeLeft -= 1 ; } switch ( move ) { case ' ' : move = ' ' ; break ; case ' ' : move = ' ' ; break ; case ' ' : move = ' ' ; break ; case ' ' : move = ' ' ; break ; } } } for ( row = 0 ; row < size ; row ++ ) { for ( col = 0 ; col < size ; col ++ ) { let n = matrix [ row ] [ col ] ; if ( n < 10 ) document . write ( n + "" "" ) ; else document . write ( n + "" "" ) ; } document . write ( "" "" ) ; } } let size = 5 ; printSpiral ( size ) ;","] \n function printSpiral ( mat , m , n ) { let row = 0 , col = 0 ; let r = 1 , l = 0 , d = 1 , u = 0 ; let k = 0 ; let i = 0 , j = 0 ; let flag = 0 ; let size = m * n ; let flag1 = 0 ; let flag2 = 0 ; let flag3 = 0 ; let flag4 = 0 ; let flag5 = 0 ; let flag6 = 0 ; for ( let i = 0 ; i < m ; i ++ ) { for ( let j = 0 ; j < n ; j ++ ) { document . write ( mat [ i ] [ j ] + "" "" ) ; } document . write ( "" "" ) ; } } let m = 3 , n = 3 ; let mat = new Array ( m ) ; for ( let i = 0 ; i < m ; i ++ ) { mat [ i ] = new Array ( n ) ; } for ( let i = 0 ; i < m ; i ++ ) { for ( let j = 0 ; j <",0.2459774554431366,0.2275409656987169,0.24789049819788128,0.35185185185185186,0.1566265060240964
196,"function findWinner ( a , n ) { let v = [ ] ; let c = 0 ; for ( let i = 0 ; i < n ; i ++ ) { if ( a [ i ] == ' ' ) { c ++ ; } else { if ( c != 0 ) v . push ( c ) ; c = 0 ; } } if ( c != 0 ) v . push ( c ) ; if ( v . length == 0 ) { document . write ( "" "" ) ; return ; } if ( v . length == 1 ) { if ( ( v [ 0 ] & 1 ) != 0 ) document . write ( "" "" ) ; else document . write ( "" "" ) ; return ; } let first = Number . MIN_VALUE ; let second = Number . MIN_VALUE ; for ( let i = 0 ; i < v . length ; i ++ ) { if ( a [ i ] > first ) { second = first ; first = a [ i ] ; } else if ( a [ i ] > second && a [ i ] != first ) second = a [ i ] ; } if ( ( first & 1 ) != 0 && parseInt ( ( first + 1 ) / 2 , 10 ) > second ) document . write ( "" "" ) ; else document . write ( "" "" ) ; } let S = "" "" ; let N = S . length ; findWinner ( S , N ) ;","] \n function findPlayer ( a , n ) { let c = 0 ; let v = [ ] ; for ( let i = 0 ; i < n ; i ++ ) { if ( a [ i ] == ' ' ) c ++ ; else { v . push ( c ) ; c = 0 ; } } if ( c > 0 ) v . push ( c ) ; let flag = true ; for ( let i = 0 ; i < v . length ; i ++ ) { if ( v [ i ] % 2 == 1 ) flag = false ; } if ( flag ) document . write ( "" "" ) ; else { let first = 0 , second = 0 ; for ( let i = 0 ; i < v . length ; i ++ ) { if ( v [ i ] > first ) { second = first ; first = v [ i ] ; } else if ( v [ i ] > second ) second = v [ i ] ; } if ( first == second ) document . write ( "" "" ) ; else document . write ( "" "" ) ; } } let str = "" "" ; let n = str . length ; findPlayer ( str , n )",0.6108782003053359,0.5486056034552973,0.5626871789788634,0.7202797202797203,0.6119402985074627
197,"function can_Construct ( S , K ) { var m = new Map ( ) ; var i = 0 , j = 0 , p = 0 ; if ( S . length == K ) { return true ; } for ( i = 0 ; i < S . length ; i ++ ) { if ( m . has ( S [ i ] ) ) m . set ( S [ i ] , m . get ( S [ i ] ) + 1 ) else m . set ( S [ i ] , 1 ) } if ( K > S . length ) { return false ; } else { m . forEach ( ( value , key ) => { if ( value % 2 != 0 ) { p = p + 1 ; } } ) ; } if ( K < p ) { return false ; } return true ; } var S = "" "" ; var K = 4 ; if ( can_Construct ( S , K ) ) { document . write ( "" "" ) ; } else { document . write ( "" "" ) ; }","] function kPalindrome ( s , k ) { let m = new Map ( ) ; for ( let i = 0 ; i < s . length ; i ++ ) { if ( m . has ( s [ i ] ) ) m . set ( s [ i ] , m . get ( s [ i ] ) + 1 ) else m . set ( s [ i ] , 1 ) } if ( k == s . length ) return true ; let odd = 0 ; for ( let it of m . values ( ) ) { if ( it % 2 != 0 ) odd ++ ; } if ( odd > k ) return false ; return true ; } let s = "" "" ; let k = 2 ; if ( kPalindrome ( s , k ) ) document . write ( "" "" ) ; else document . write ( "" "" ) ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ;",0.5704523449395551,0.43415920213869924,0.43630265988902456,0.6666666666666666,0.7446808510638298
198,"function equalIgnoreCase ( str1 , str2 ) { let i = 0 ; str1 = str1 . toLowerCase ( ) ; str2 = str2 . toLowerCase ( ) ; let x = ( str1 == ( str2 ) ) ; return x == true ; } function equalIgnoreCaseUtil ( str1 , str2 ) { let res = equalIgnoreCase ( str1 , str2 ) ; if ( res == true ) document . write ( "" "" ) ; else document . write ( "" "" ) ; } let str1 , str2 ; str1 = "" "" ; str2 = "" "" ; equalIgnoreCaseUtil ( str1 , str2 ) ; str1 = "" "" ; str2 = "" "" ; equalIgnoreCaseUtil ( str1 , str2 ) ;"," function checkString ( s1 , s2 ) { s1 = s1 . toLowerCase ( ) ; s2 = s2 . toLowerCase ( ) ; return ( s1 == s2 ) ; } function sameOrNot ( s1 , s2 ) { if ( checkString ( s1 , s2 ) ) document . write ( "" "" ) ; else document . write ( "" "" ) ; } let s1 = "" "" ; let s2 = "" "" ; sameOrNot ( s1 , s2 ) ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ; 28 ; 29 ; 30 ; 31 ; 32 ; 33 ; 34 ; 35 ; 36 ; 37 ; 38 ; 3",0.39404646019980194,0.24052492290615796,0.3114850937172255,0.5384615384615384,0.4857142857142857
199,"function steps ( str , n ) { var flag ; var x = 0 ; for ( var i = 0 ; i < str . length ; i ++ ) { if ( x == 0 ) flag = true ; if ( x == n - 1 ) flag = false ; for ( var j = 0 ; j < x ; j ++ ) document . write ( "" "" ) ; document . write ( str [ i ] + "" "" ) ; if ( flag == true ) x ++ ; else x -- ; } } var n = 4 ; var str = "" "" ; document . write ( "" "" + str + "" "" ) ; document . write ( "" "" + n + "" "" ) ; steps ( str , n ) ;"," function printStep ( s , n ) { var x = 0 ; var flag = false ; for ( var i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] == ' ' ) { if ( x == 0 ) { for ( var j = 0 ; j < n ; j ++ ) { document . write ( x + ' ' ) ; x ++ ; } } else if ( x == n - 1 ) { for ( var j = 0 ; j < n ; j ++ ) { document . write ( x + ' ' ) ; x -- ; } } else { document . write ( x + ' ' ) ; x += ( s [ i ] == ' ' ? 1 : - 1 ) ; } } } } var s = "" "" ; var n = 4 ; printStep ( s , n ) ; 3 ; 2 ; 1 ; 0 ; 1 ; 2 ; 3 ; 4 ; 3 ; 2 ; 1 [/INST] \n 3 ; 2 ; 1 ; 0 ; 1 ; 2 ; 3 ; 4 ; 3 ; ",0.49862429068250136,0.3423895329498492,0.503922481595008,0.5584415584415584,0.5897435897435898
