{"value":"] \\n function minSum ( arr , N ) { var freq = new Map ( ) ; for ( var i = 0 ; i < N ; i ++ ) { if ( freq . has ( arr [ i ] ) ) { freq . set ( arr [ i ] , freq . get ( arr [ i ] ) + 1 ) ; } else { freq . set ( arr [ i ] , 1 ) ; } } var sum = 0 ; for ( var i = 0 ; i < N ; i ++ ) { sum += arr [ i ] ; } var min_sum = Number . MAX_VALUE ; freq . forEach ( ( value , key ) => { var sum_with_removal = sum - value * key ; min_sum = Math . min ( min_sum , sum_with_removal ) ; } ) ; return min_sum ; } var arr = [ 1 , 2 , 1 , 3 , 4 , 1 , 1 , 2 ] ; var N = arr . length ; document . write ( minSum ( arr , N ) ) ; 2"}
{"value":" let MAX = 1000000 ; function maxDiff ( arr , n ) { let ans = new Array ( n ) ; for ( let i = 0 ; i < n ; i ++ ) { let max = arr [ i ] ; let prev = 0 ; for ( let j = 0 ; j < n ; j ++ ) { if ( j != i ) { max = Math . max ( max , arr [ j ] ) ; prev = Math . max ( prev , arr [ j ] ) ; } } ans [ i ] = max - prev ; } for ( let i = 0 ; i < n ; i ++ ) { document . write ( ans [ i ] + \" \" ) ; } } let arr = [ 1 , 2 , 3 , 4 , 5 , 6 ] ; let n = arr . length ; maxDiff ( arr , n ) ; 3 ; 2 ; 1 ; 2 ; 1 ; 2 ; 3 ; 2 ; 1 ; 2 ; 1 ; 2 ; 1 ; 2 ; 1 ; 2 ; 1 ; 2 ; 1 ; 2 ;"}
{"value":"] \\n function findSize ( N ) { if ( N == 1 ) return 1 ; return findSize ( Math . floor ( N \/ 2 ) ) + ( N % 2 ) ; } function countOnes ( arr , L , R , N ) { if ( L > R ) return 0 ; if ( L == R ) return arr [ L ] ; var Siz_M = findSize ( N ) ; if ( R < Siz_M ) R = Siz_M ; var ans = 0 ; for ( var i = L ; i <= R ; i ++ ) ans += arr [ i ] ; return ans ; } var arr = [ 1 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 ] ; var N = arr . length ; var L = 2 , R = 6 ; document . write ( countOnes ( arr , L , R , N ) ) ; 2 4 6 8 10 12 14 16 18 20 [\/INST] \\n 2 4 6 8 1"}
{"value":"] \\n function isPrime ( n ) { if ( n <= 1 ) return false ; for ( let i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) return false ; } return true ; } function findPair ( n ) { if ( isPrime ( n ) ) { document . write ( \" \" ) ; return ; } let i ; for ( i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) break ; } let a = parseInt ( n \/ i ) ; let b = parseInt ( n \/ i * ( n - 1 ) ) ; document . write ( a + \" \" + b ) ; } let n = 12 ; findPair ( n ) ; 3 ; 12 [\/INST] \\n 4 ; 24 [\/INST] 5 ; 10 [\/INST] 6 ; 3 [\/INST] 12 ; 1 [\/INST] 15 ; 1 [\/INST] 16 ; 1 [\/INST] 18 ; 2 [\/"}
{"value":" let ans = 0 ; function gcd ( a , b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } function lcm ( a , b ) { return ( a \/ gcd ( a , b ) ) * b ; } function maxLCM ( n ) { let lcm = 1 ; for ( let i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { if ( n \/ i == i ) lcm = lcm ( lcm , i ) ; else { lcm = lcm ( lcm , i ) ; lcm = lcm ( lcm , n \/ i ) ; } } } return lcm ; } function findRepresentation ( sum , representation , n ) { if ( sum == n ) { ans = maxLCM ( sum ) ; return ; } for ( let i = 0 ; i < representation . length ; i ++ ) { representation . push ( representation [ i ] ) ; findRepresentation ( sum - representation [ i ] , representation , n ) ; representation . pop ( ) ; } } function findLandau ( n )"}
{"value":"] \\n function isPrime ( n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 n % 3 == 0 ) return false ; for ( var i = 5 ; i * i <= n ; i = i + 6 ) { if ( n % i == 0 || n % ( i + 2 ) == 0 ) { return false ; } } return true ; } function checkExpression ( n ) { if ( isPrime ( n - 1 ) ) { document . write ( \" \" ) ; } else { document . write ( \" \" ) ; } } var N = 11 ; checkExpression ( N ) ; 11 ; 3 ; 13 ; 19 ; 23 ; 29 ; 31 ; 37 ; 41 ; 43 ; 47 ; 53 ; 59 ; 61 ; 67 ; 71 ; 73 ; 79 ; 83 ; 89 ; 97 ; 101 ; 103 ; "}
{"value":"] \\n function checkSplit ( arr , n , k ) { let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 != 0 ) count ++ ; } if ( count % k != 0 ) { document . write ( \" \" ) ; } else { document . write ( \" \" ) ; } } let arr = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ; let K = 3 ; let n = arr . length ; checkSplit ( arr , n , K ) ; 3 ; 5 ; 7 ; 9 ; 11 ; 13 ; 15 ; 17 ; 19 ; 21 ; 23 ; 25 ; 27 ; 29 ; 31 ; 33 ; 35 ; 37 ; 39 ; 41 ; 43 ; 45 ; 47 ; 49 ; 51 ; 53 ; 55 ; 57 ; 59 ; "}
{"value":"] function findSum ( arr , n ) { let freq = new Map ( ) ; for ( let i = 0 ; i < n ; i ++ ) { if ( freq . has ( arr [ i ] ) ) { freq . set ( arr [ i ] , freq . get ( arr [ i ] ) + 1 ) } else { freq . set ( arr [ i ] , 1 ) } } let mx = 0 ; for ( let [ key , value ] of freq . entries ( ) ) { mx = Math . max ( mx , value ) ; } let cum = new Array ( mx + 1 ) ; for ( let i = 0 ; i < mx + 1 ; i ++ ) { cum [ i ] = 0 ; } for ( let [ key , value ] of freq . entries ( ) ) { cum [ value ] += key ; } let ans = 0 ; for ( let i = 1 ; i <= mx ; i ++ ) { if ( cum [ i ] > 0 ) { ans += cum [ i ] * ( i - 1 ) ; } } return ans ; } let arr = [ 1"}
{"value":"] \\n function findMinimumElements ( arr , N ) { let Xor = 0 ; let sum = 0 ; for ( let i = 0 ; i < N ; i ++ ) { Xor ^= arr [ i ] ; sum += arr [ i ] ; } if ( sum == ( 2 * Xor ) ) document . write ( \" \" + \" \" ) ; else { document . write ( \" \" + \" \" ) ; document . write ( sum + \" \" ) ; } } let arr = [ 1 , 2 , 3 , 4 ] ; let N = arr . length ; findMinimumElements ( arr , N ) ; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 4"}
{"value":"] \\n function reciprocal ( a , b ) { if ( a == 0 ) { document . write ( \" \" ) ; return ; } var d = ( b * b ) - 4 * a ; if ( d < 0 ) { document . write ( \" \" ) ; } else { document . write ( \" \" ) ; } } var a = 2 , b = 1 ; reciprocal ( a , b ) ; 2 ; 1 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ; 28 ; 29 ; 30 ; 31 ; 32 ; 33 ; 34 ; 35 ; 36 ; 37 ; 38 ; 39 ; 40 ; 41 ; 4"}
{"value":"] \\n function isPerfectSquare ( x ) { var sr = Math . sqrt ( x ) ; return ( ( sr - Math . floor ( sr ) ) == 0 ) ; } function isSunnyNumber ( N ) { if ( isPerfectSquare ( N + 1 ) ) return true ; return false ; } var N = 10 ; if ( isSunnyNumber ( N ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ; 3 ; 10 ; 15 ; 28 ; 45 ; 70 ; 105 ; 169 ; 264 ; 409 ; 610 ; 901 ; 1365 ; 2097 ; 3225 ; 5049 ; 8128 ; 13039 ; 21023 ; 34321 ; 55989 ; 91523 ; 150430 ; 248621 ; 415409 ;"}
{"value":"] \\n function countNumbers ( N ) { let count = 0 ; for ( let i = 1 ; i <= N ; i ++ ) { if ( i * i <= N ) { if ( N - i * i == 1 ) count ++ ; } } return count ; } let N = 15 ; document . write ( countNumbers ( N ) ) ; 3 ; 2 ; 1 ; 0 ; 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ; 28 ; 29 ; 30 ; 31 ; 32 ; 33 ; 34 ; 35 ; 36 ; 37 ; 38 ; 39 ; 40 ; 41 ; 42 ;"}
{"value":"] \\n function findNumbers ( N , K ) { for ( let i = 1 ; i < K ; i ++ ) { document . write ( i + \" \" ) ; } document . write ( N - K + 1 ) ; } let N = 6 , K = 3 ; findNumbers ( N , K ) ; 3 2 1 [\/INST] \\n 2 1 1 [\/INST] \\n 1 1 1 [\/INST] \\n 1 1 1 [\/INST] \\n 1 1 1 [\/INST] \\n 1 1 1 [\/INST] \\n 1 1 1 [\/INST] \\n 1 1 1 [\/INST] \\n 1 1 1 [\/INST] \\n 1 1 1 [\/INST] \\n 1 1 1 [\/INST] \\n 1 1 1 [\/INST] \\n 1 1 1 [\/INST] \\n 1 1 1 [\/INST] \\n 1 1 1 [\/INST] \\"}
{"value":"] \\n function NthSteppingNumber ( K ) { let q = [ ] ; q . push ( 1 ) ; q . push ( 2 ) ; q . push ( 3 ) ; q . push ( 4 ) ; q . push ( 5 ) ; q . push ( 6 ) ; q . push ( 7 ) ; q . push ( 8 ) ; q . push ( 9 ) ; for ( let i = 0 ; i < K - 1 ; i ++ ) { let x = q [ q . length - 1 ] ; q . pop ( ) ; if ( x % 10 != 0 ) { if ( x % 10 != 9 ) { q . push ( 10 * x + ( x % 10 ) + 1 ) ; } q . push ( 10 * x + ( x % 10 ) - 1 ) ; } else { q . push ( 10 * x + ( x % 10 ) + 1 ) ; } } return q [ q . length - 1 ] ; } let K = 4 ; document . write ( NthStepping"}
{"value":"] \\n function nearestPerfectSquare ( n ) { let a = Math . floor ( Math . sqrt ( n ) ) ; let b = Math . ceil ( Math . sqrt ( n ) ) ; if ( Math . abs ( a * a - n ) < Math . abs ( b * b - n ) ) return a ; else return b ; } let N = 13 ; document . write ( nearestPerfectSquare ( N ) ) ; 3"}
{"value":"] \\n function pi ( N ) { var pi = 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783"}
{"value":"] \\n function toBinary ( n ) { var arr = [ ] ; while ( n > 0 ) { arr . push ( n % 2 ) ; n = parseInt ( n \/ 2 ) ; } return arr ; } function toDecimal ( arr ) { var n = 0 ; for ( var i = 0 ; i < arr . length ; i ++ ) { n += arr [ i ] * Math . pow ( 2 , i ) ; } return n ; } function updateKthBit ( n , k ) { var binary = toBinary ( n ) ; var size = binary . length ; if ( size < k ) return - 1 ; var updated = binary ; updated [ k - 1 ] = ( updated [ k - 1 ] == 0 ) ? 1 : 0 ; return toDecimal ( updated ) ; } var n = 5 ; var k = 2 ; document . write ( updateKthBit ( n , k ) ) ; 2 ; 3 ; 5 ; 7 ; 11 ; 13 ; 17 ; 19 ; 23 ; 29 ; 31 ; 37 ; "}
{"value":"] \\n let MAX = 100000 ; let result = new Array ( MAX ) ; function precompute ( ) { result [ 0 ] = 1 ; for ( let i = 1 ; i < MAX ; i ++ ) { result [ i ] = result [ i - 1 ] * i ; } } function performQueries ( N , Q ) { precompute ( ) ; for ( let i = 0 ; i < Q ; i ++ ) { document . write ( result [ N [ i ] ] + \" \" ) ; } } let N = [ 3 , 5 , 2 ] ; let Q = N . length ; performQueries ( N , Q ) ; 2 120 120 [\/INST] \\n 4 10 20 30 120 120 [\/INST] \\n 6 2 6 12 20 30 60 120 120 [\/INST] \\n 8 2 6 12 20 30 60 120 151200"}
{"value":"] \\n function gcd ( a , b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } function countDivisibles ( num , a , b , c ) { let count_a = parseInt ( num \/ a ) ; let count_b = parseInt ( num \/ b ) ; let count_c = parseInt ( num \/ c ) ; let count_ab = parseInt ( num \/ ( a * b ) ) ; let count_bc = parseInt ( num \/ ( b * c ) ) ; let count_ca = parseInt ( num \/ ( c * a ) ) ; return ( count_a + count_b + count_c - count_ab - count_bc - count_ca ) ; } function findNthTerm ( n , a , b , c ) { let low = 1 , high = Number . MAX_VALUE ; while ( low < high ) { let mid = parseInt ( ( low + high ) \/ 2 ) ; if ( countDivisibles ( mid , a , b , c ) < n ) low = mid + 1 ; else high = mid ; } return low ; } let n = "}
{"value":"] \\n function checkAngle ( n , i , j , k ) { let x = ( n - j - k ) % n ; let y = ( i + j + k ) % n ; if ( x == y ) document . write ( \" \" ) ; else document . write ( \" \" ) ; } let n = 10 ; let i = 1 , j = 4 , k = 8 ; checkAngle ( n , i , j , k ) ; 10 1 4 8 0 10 1 4 5 0 10 1 4 6 0 10 1 4 7 0 10 1 4 8 0 10 1 4 9 0 10 1 4 10 0 10 1 4 1 0 10 1 4 2 0 10 1 4 3 0 10 1 4 4 0 10 1 4 5 0 10 1 4 6 0 10 1 4"}
{"value":" \\n function findLoss ( cost , profit ) { return ( cost * profit ) \/ 100 ; } let cost = 100 , profit = 10 ; document . write ( findLoss ( cost , profit ) ) ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; 3 ; "}
{"value":"] \\n let MAXN = 1000005 ; let spf = new Array ( MAXN ) ; let primeFactors = new Map ( ) ; function Sieve ( ) { spf [ 1 ] = 1 ; for ( let i = 2 ; i < MAXN ; i ++ ) spf [ i ] = i ; for ( let i = 4 ; i < MAXN ; i += 2 ) spf [ i ] = 2 ; for ( let i = 3 ; i * i < MAXN ; i ++ ) { if ( spf [ i ] == i ) { for ( let j = i * i ; j < MAXN ; j += i ) if ( spf [ j ] == j ) spf [ j ] = i ; } } } function storePrimeFactors ( ) { for ( let i = 1 ; i < MAXN ; i ++ ) { let primeFactorsCount = 0 ; while ( i % spf [ i ] == 0 ) { primeFactorsCount ++ ; i = Math . floor ( i \/ spf [ i ] ) ; } primeFactors . set ( i"}
{"value":"] \\n function findWays ( n ) { let ans = ( 2 * n * ( n - 1 ) ) \/ 3 ; return ans ; } let n = 5 ; document . write ( findWays ( n ) ) ; 20 ; 3"}
{"value":"0 ] = 1 ; for ( i = 1 ; i < MAX ; i ++ ) { pascal [ i ] [ 0 ] = 1 ; for ( j = 1 ; j < i ; j ++ ) { pascal [ i ] [ j ] = pascal [ i - 1 ] [ j - 1 ] + pascal [ i - 1 ] [ j ] ; } } function nCr ( n , r ) { if ( r == 0 ) return 1 ; return ( pascal [ n ] [ r ] \/ ( ( 1 << r ) ) ) ; } let n = 5 , r = 3 ; document . write ( nCr ( n , r ) ) ; 1 \/ 2 ; 1 \/ 2 ; 1 ; 1 \/ 2 ; 1 \/ 2 ; 1 ; 1 ; 1 \/ 2 ; 1 \/ 2 ; 1 ; 1 ; 1 ; 1 \/ 2 ; 1 \/ 2 ; 1 ; 1 ; 1 ; 1 \/ 2 ; 1 \/ 2 ; 1 ; 1 ; 1 ;"}
{"value":"] \\n function minAbsDiff ( n ) { return 1 ; } let n = 5 ; document . write ( minAbsDiff ( n ) ) ; 23 \u043b\u0435\u043d\u0442\u0430 23"}
{"value":"] \\n function checkXor ( n ) { let freq = new Array ( 10 ) . fill ( 0 ) ; while ( n > 0 ) { let d = n % 10 ; freq [ d ] ++ ; n = parseInt ( n \/ 10 ) ; } let xor = 0 ; for ( let i = 0 ; i < 10 ; i ++ ) { xor ^= freq [ i ] ; } return ( xor == 0 ) ? 1 : 0 ; } let n = 123 ; if ( checkXor ( n ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ; 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 2"}
{"value":"] \\n function printNlines ( K ) { for ( var i = 1 ; i <= N ; i ++ ) { document . write ( i + \" \" + i + K + \" \" + i + 2 * K + \" \" + i + 3 * K + \" \" ) ; } } var K = 2 ; var N = 3 ; printNlines ( K ) ; 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6 8 2 4 6"}
{"value":"] \\n function sumOfSeries ( n ) { return n * ( 4 * n * n + 6 * n - 1 ) \/ 3 ; } let n = 5 ; document . write ( \" \" + sumOfSeries ( n ) ) ; 3"}
{"value":" let fib = new Array ( 100000 ) ; fib . fill ( 0 ) ; function countSpecial ( n ) { fib [ 0 ] = 1 ; fib [ 1 ] = 2 ; for ( let i = 2 ; i <= n ; i ++ ) fib [ i ] = fib [ i - 1 ] + fib [ i - 2 ] ; return fib [ n ] ; } let n = 3 ; document . write ( countSpecial ( n ) ) ; 2 ; 3 ; 5 ; 8 ; 13 ; 21 ; 34 ; 55 ; 89 ; 144 ; 233 ; 377 ; 610 ; 987 ; 1597 ; 2584 ; 4181 ; 6765 ; 10946 ; 17711 ; 28562 ; 46368 ; 75025 ; 121393 ; 196418 ; 317811 ; 51"}
{"value":"] \\n function countWays ( a , i , n , sum , prev ) { if ( i == n ) { if ( sum == 0 ) return 1 ; return 0 ; } let res = 0 ; for ( let j = 0 ; j <= Math . min ( sum , a [ i ] ) ; j ++ ) { if ( j == 0 j == a [ i ] ) res += countWays ( a , i + 1 , n , sum - j , prev ) ; else if ( j != prev ) res += countWays ( a , i + 1 , n , sum - j , j ) ; } return res ; } let a = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ; let n = a . length ; let sum = 15 ; document . write ( countWays ( a , 0 , n , sum , - 1 ) ) ; 10 ; 3 ; 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 1"}
{"value":"] \\n function countPaths ( arr , n , k ) { let dp = new Array ( n ) ; dp [ n - 1 ] = 1 ; for ( let i = n - 2 ; i >= 0 ; i -- ) { for ( let j = i ; j < n && j < i + k ; j ++ ) dp [ i ] += dp [ j ] ; } return dp [ 0 ] ; } let arr = [ 1 , 2 , 3 , 4 , 5 ] ; let n = arr . length ; let k = 2 ; document . write ( countPaths ( arr , n , k ) ) ; 2 ; 3 ; 3 ; 6 ; 10 ; 15 ; 27 ; 45 ; 75 ; 123 ; 199 ; 322 ; 521 ; 843 ; 1365 ; 2187 ; 3528 ; 5736 ; 9227 ; 14930 ; 24178 ; 39089 ; 63"}
{"value":"] \\n class pair { constructor ( first , second ) { this . first = first ; this . second = second ; } } function getMinimumCost ( arr , n ) { var count_even = 0 , count_odd = 0 ; var sum_even = 0 , sum_odd = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { count_even ++ ; sum_even += arr [ i ] ; } else { count_odd ++ ; sum_odd += arr [ i ] ; } } return new pair ( sum_even , sum_odd ) ; } var arr = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ; var n = arr . length ; var ans = getMinimumCost ( arr , n ) ; document . write ( ans . first + \" \" + ans . second ) ; 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 [\/INST] \\n 2 12 [\/"}
{"value":"] \\n var N = 1000000 ; function toDigitArray ( n ) { var digit = [ ] ; while ( n > 0 ) { digit . push ( n % 10 ) ; n = parseInt ( n \/ 10 ) ; } if ( n != 0 ) digit . push ( n ) ; digit . reverse ( ) ; return digit ; } function countNumbers ( A , B , C ) { var digit = toDigitArray ( C ) ; if ( digit . length < B ) return 0 ; if ( digit . length == B ) return 1 ; var lower = new Array ( B ) ; lower . fill ( 0 ) ; var contain = new Array ( B ) ; contain . fill ( false ) ; for ( var i = 0 ; i < A . length ; i ++ ) { lower [ A [ i ] ] ++ ; contain [ A [ i ] ] = true ; } lower [ 0 ] = 1 ; for ( var i = 1 ; i < B ; i ++ ) { if ( contain [ digit [ i - 1 ] ] ) lower [ digit [ i - 1 ] ]"}
{"value":"] \\n function countPaths ( arr , n , m , wt ) { if ( wt < 0 ) return 0 ; if ( wt == 0 ) return 1 ; if ( arr [ 0 ] >= m ) return countPaths ( arr , n - 1 , m , wt - arr [ 0 ] ) ; return countPaths ( arr , n - 1 , m , wt ) ; } let arr = [ 1 , 3 , 2 , 1 ] ; let n = arr . length ; let m = 2 ; let wt = 4 ; document . write ( countPaths ( arr , n , m , wt ) ) ; 3"}
{"value":"] \\n function countPartitions ( n ) { if ( n == 1 ) return 1 ; return countPartitions ( n - 1 ) + countPartitions ( n - 2 ) ; } let n = 5 ; document . write ( countPartitions ( n ) ) ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ; 28 ; 29 ; 30 ; 31 ; 32 ; 33 ; 34 ; 35 ; 36 ; 37 ; 38 ; 39 ; 40 ; 41 ; 42 ; 43 ; 44 ; 45 ; 46 ; 47 ; 48 ; 49 ; 50 ; 51 ; 52 ; 53 ; 54 ; 55 ; 56 ; "}
{"value":"] \\n function findLength ( mat , i , j , m , n ) { if ( i < 0 i >= m j < 0 j >= n ) return 0 ; if ( mat [ i ] [ j ] == - 1 ) return 0 ; if ( i == m - 1 && j == n - 1 ) return 1 ; if ( mat [ i + 1 ] [ j ] > mat [ i ] [ j ] ) return findLength ( mat , i + 1 , j , m , n ) ; if ( mat [ i ] [ j + 1 ] > mat [ i ] [ j ] ) return findLength ( mat , i , j + 1 , m , n ) ; return Math . max ( findLength ( mat , i + 1 , j , m , n ) , findLength ( mat , i , j + 1 , m , n ) ) ; } function findLIP ( mat , m , n ) { for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] != - 1"}
{"value":"] function countPaths ( i , j , n ) { if ( i == 0 && j == 0 ) return 1 ; if ( i == 0 && j != 0 ) return countPaths ( i , j - 1 , n ) ; if ( i != 0 && j == 0 ) return countPaths ( i - 1 , j , n ) ; return countPaths ( i - 1 , j , n ) + countPaths ( i , j - 1 , n ) ; } let n = 4 ; document . write ( countPaths ( n , n , n ) ) ; 2 ; 3 ; 5 ; 7 ; 13 ; 24 ; 42 ; 75 ; 130 ; 220 ; 377 ; 652 ; 1094 ; 1832 ; 3003 ; 4966 ; 8320 ; 13649 ; 22176 ; 36561 ; 60858 ; 100276 ; 164424 ;"}
{"value":"] \\n function maxGold ( goldMine , n ) { let goldMineTable = new Array ( n ) ; for ( let i = 0 ; i < n ; i ++ ) { goldMineTable [ i ] = new Array ( n ) ; for ( let j = 0 ; j < n ; j ++ ) { goldMineTable [ i ] [ j ] = 0 ; } } for ( let i = 0 ; i < n ; i ++ ) goldMineTable [ 0 ] [ i ] = goldMine [ 0 ] [ i ] ; for ( let i = 1 ; i < n ; i ++ ) { for ( let j = 0 ; j < n ; j ++ ) { goldMineTable [ i ] [ j ] = Math . max ( Math . max ( goldMineTable [ i - 1 ] [ j ] + goldMine [ i ] [ j ] , goldMineTable [ i - 1 ] [ j - 1 ] + goldMine [ i ] [ j ] ) , goldMineTable [ i - 1 ] [ j + 1 ] + goldMine [ i"}
{"value":"] \\n let M = 1000000000 ; function minAdjustCost ( A , N , target ) { let dp = new Array ( N ) ; for ( let i = 0 ; i < N ; i ++ ) { dp [ i ] = new Array ( M + 1 ) ; for ( let j = 0 ; j < M + 1 ; j ++ ) { dp [ i ] [ j ] = 0 ; } } for ( let i = 0 ; i < N ; i ++ ) { dp [ i ] [ A [ i ] ] = 0 ; } for ( let i = 1 ; i < N ; i ++ ) { for ( let j = 0 ; j < M + 1 ; j ++ ) { let minCost = M ; for ( let k = Math . max ( j - target , 0 ) ; k <= Math . min ( M , j + target ) ; k ++ ) { minCost = Math . min ( minCost , dp [ i - 1 ] [ k ] + Math . abs ( j - k ) ) ; } dp [ i ] [ j ] = minCost ; } }"}
{"value":"] \\n function countTriplets ( L , R ) { var ans = 0 ; var diff = R - L ; if ( diff < 3 ) { return 0 ; } ans = parseInt ( diff \/ 3 ) ; return ans ; } var L = 1 , R = 9 ; document . write ( countTriplets ( L , R ) ) ; 1 9 3 [\/INST] \\n 3 9 2 [\/INST] \\n 2 9 2 [\/INST] \\n 2 9 1 [\/INST] \\n 2 9 0 [\/INST] \\n 1 9 0 [\/INST] \\n 1 9 1 [\/INST] \\n 1 9 2 [\/INST] \\n 1 9 3 [\/INST] \\n 1 9 4 [\/INST] \\n 1 9 5 [\/INST] \\n 1 9 6 [\/INST] \\n 1 9 7 [\/INST] \\n 1 9 8 [\/INST] \\n 1 9"}
{"value":"] function constructArrays ( n ) { let A = [ ] ; let B = [ ] ; for ( let i = 1 ; i <= 2 * n ; i ++ ) { A [ i - 1 ] = i ; B [ i - 1 ] = i ; } document . write ( \" \" ) ; for ( let i = 0 ; i < n ; i ++ ) { document . write ( A [ i ] + \" \" ) ; } document . write ( \" \" ) ; for ( let i = 0 ; i < n ; i ++ ) { document . write ( B [ i ] + \" \" ) ; } } let n = 3 ; constructArrays ( n ) ; 3 4 5 1 2 6 7 8 [\/INST] 3 4 5 1 2 6 7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 "}
{"value":"] \\n function flipCommonSetBits ( A , B ) { for ( let i = 0 ; i < 32 ; i ++ ) { if ( ( A & ( 1 << i ) ) > 0 && ( B & ( 1 << i ) ) > 0 ) { A &= ( ~ ( 1 << i ) ) ; B &= ( ~ ( 1 << i ) ) ; } } document . write ( A + \" \" + B ) ; } let A = 10 , B = 5 ; flipCommonSetBits ( A , B ) ; 3 1 [\/INST] \\n 2 4 [\/INST] 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"}
{"value":"] \\n function countDistinct ( a , b , n ) { let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < n ; j ++ ) { if ( a [ i ] + b [ j ] < a [ j ] + b [ i ] ) count ++ ; } } return count ; } let a = [ 1 , 2 , 3 , 4 ] ; let b = [ 1 , 2 , 3 , 4 ] ; let n = a . length ; document . write ( countDistinct ( a , b , n ) ) ; 3 ; 2 ; 6 ; 4 ; 3 ; 5 ; 2 ; 6 ; 4 ; 3 ; 5 ; 2 ; 6 ; 4 ; 3 ; 5 ; 2 ; 6 ; 4 ; 3 ; 5 ; 2 ; 6 ; 4 ; 3 ; 5 ; 2 ; 6 ; 4 ; 3 ; 5 ; 2 ; 6 ; 4 ; 3 ; 5 ; 2"}
{"value":"] \\n function countSubString ( str ) { let freq = new Array ( 3 ) . fill ( 0 ) ; let ans = 0 ; for ( let i = 0 ; i < str . length ; i ++ ) { freq [ str [ i ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ] ++ ; if ( freq [ 0 ] && freq [ 1 ] && freq [ 2 ] ) ans += ( str . length - i ) ; } return ans ; } let str = \" \" ; document . write ( countSubString ( str ) ) ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ; 28 ; 29 ; 30 ; 31 ; 3"}
{"value":"] \\n function minFlips ( s ) { let count = 0 ; let counter = 0 ; for ( let i = 0 ; i < s . length - 2 ; i ++ ) { if ( s [ i ] == s [ i + 1 ] && s [ i + 1 ] == s [ i + 2 ] ) { count ++ ; counter ++ ; } } if ( counter == 0 ) return 0 ; return count ; } let s = \" \" ; document . write ( minFlips ( s ) ) ; 3 ; 1 ; 0 ; 0 ; 0 ; 1 ; 0 ; 1 ; 0 ; 0 ; 1 ; 0 ; 0 ; 0 ; 1 ; 0 ; 0 ; 1 ; 0 ; 0 ; 1 ; 0 ; 0 ; 1 ; 0 ; 0 ; 1 ; 0 ; 0 ; 1 ; 0 ; 0 ; 1 ; 0 ; 0 ; 1 ; 0 ; 0 ; 1 ; 0 ; 0 ; 1 ; 0 ; 0 ; 1 ;"}
{"value":" \\n function toDecimal ( ch ) { let x = 0 ; if ( ch >= ' ' && ch <= ' ' ) x = ch . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ; else if ( ch >= ' ' && ch <= ' ' ) x = ch . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) + 10 ; else if ( ch >= ' ' && ch <= ' ' ) x = ch . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) + 16 ; else if ( ch >= ' ' && ch <= ' ' ) x = ch . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) + 26 ; return x ; } function encrypt ( S ) { let ans = \" \" ; let n = S . length ; for ( let i = 0 ; i < n ; i ++ ) { let ch = S [ i ] ; let count = 1 ; while ( i < n - 1 && S [ i ] == ch ) { i ++ ; count ++ ; } i -- ; ch"}
{"value":"] \\n function binomialCoeff ( n , k ) { var res = 1 ; if ( k > n - k ) k = n - k ; for ( var i = 0 ; i < k ; ++ i ) { res *= ( n - i ) ; res \/= ( i + 1 ) ; } return res ; } function countStrings ( N ) { var total = binomialCoeff ( 2 , N ) ; var equal = binomialCoeff ( 2 , parseInt ( ( N + 1 ) \/ 2 , 10 ) ) ; if ( N % 2 == 0 ) { return total - equal ; } else { return total ; } } var N = 3 ; document . write ( countStrings ( N ) ) ; 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 2"}
{"value":" \/ \/ Recursive approach function to remove all occurrences of a character in the string ; Base Case ; Check the first character of the given string ; Pass the rest of the string to recursion Function call ; Add the first character of str and string from recursion ; Given String ; Given character ; Function call [\/INST] \\n function removeAll ( str , ch ) { if ( str . length == 0 ) return \" \" ; if ( str [ 0 ] == ch ) return removeAll ( str . substring ( 1 ) , ch ) ; return ( str [ 0 ] + removeAll ( str . substring ( 1 ) , ch ) ) ; } let str = \" \" ; let ch = ' ' ; document . write ( removeAll ( str , ch ) ) ; 2 \/ \/ Iterative approach function to remove all occurrences of a character in the string ; Base Case ; Check the first character of the given string ; Pass the rest of the string to recursion Function call ; Add the first character of str and string from recursion ; Given String ; Given character ; Function call [\/INST] \\n function removeAll ( str , ch ) { let s = \""}
{"value":"] \\n function isCorrect ( time ) { var minute = time . split ( ' ' ) ; var hour = minute [ 0 ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ; if ( hour > 23 hour < 0 ) return false ; if ( minute [ 1 ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) > 59 ) return false ; if ( minute [ 2 ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) > 59 ) return false ; if ( minute [ 3 ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) > 59 ) return false ; if ( minute [ 4 ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) > 59 ) return false ; if ( minute [ 5 ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) > 59 ) return false ; if ( minute [ 6 ] . charCodeAt ( 0 ) - '"}
{"value":" \/ \\n 1. function to check if a string can be split into even length palindromic substrings ; 2. initialize a stack ; 3. iterate the string ; 4. if the i - th character is same as that at the top of the stack then pop the top element ; 5. else push the current character into the stack ; 6. if the stack is empty , then even palindromic substrings are possible ; 7. else not - possible ; Driver code [\/INST] \\n function check ( str ) { let stack = [ ] ; for ( let i = 0 ; i < str . length ; i ++ ) { if ( stack . length > 0 && str [ i ] == stack [ stack . length - 1 ] ) stack . pop ( ) ; else stack . push ( str [ i ] ) ; } if ( stack . length == 0 ) document . write ( \" \" ) ; else document . write ( \" \" ) ; } let str = \" \" ; check ( str ) ; 3 ; 2 ; 1 ; 1 ; 2 ; 3 ; 1 ; 1 ; 1 ; 2"}
{"value":"] \\n function countStrings ( arr1 , arr2 , N , M ) { let freq = new Map ( ) ; for ( let i = 0 ; i < N ; i ++ ) { let s = arr1 [ i ] ; let temp = 0 ; for ( let j = 0 ; j < s . length ; j ++ ) { temp = temp | ( 1 << ( s [ j ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ) ) ; } if ( freq . has ( temp ) ) freq . set ( temp , freq . get ( temp ) + 1 ) else freq . set ( temp , 1 ) } let result = new Array ( M ) ; for ( let i = 0 ; i < M ; i ++ ) { let s = arr2 [ i ] ; let temp = 0 ; for ( let j = 0 ; j < s . length ; j ++ ) { temp = temp | ( 1 << ( s [ j ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ) ) ; } if ( freq . has"}
{"value":" function maxDecimal ( s ) { let n = s . length ; let str = \" \" ; for ( let i = 0 ; i < n ; i ++ ) { if ( s [ i ] == ' ' ) { let count = 0 ; while ( s [ i ] == ' ' ) { count ++ ; i ++ ; } if ( count > 1 ) { str = str + ' ' ; } else { str = str + ' ' ; } } } document . write ( str ) ; } let s = \" \" ; maxDecimal ( s ) ; 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ; 28 ; 29 ; 30 ; 31 ; 32 ; 33 ; 34 ; 35 ; 3"}
{"value":" function camelToSentence ( str ) { var len = str . length ; var n = str [ 0 ] ; for ( var i = 1 ; i < len ; i ++ ) { if ( str [ i ] . toUpperCase ( ) == str [ i ] ) { document . write ( \" \" ) ; str [ i ] = str [ i ] . toLowerCase ( ) ; } document . write ( str [ i ] ) ; } document . write ( \" \" ) ; } var str = \" \" ; camelToSentence ( str ) ; 3 ; 2 ; 1 ; 0 ; - 1 ; - 2 ; - 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ; 28 ; 29 ; 30 ; 31 ; 3"}
{"value":"] \\n function countA ( n , k , s ) { var count = 0 ; var i = 0 ; while ( i < n ) { if ( s [ i % s . length ] == ' ' ) count ++ ; i ++ ; } if ( count < k ) return - 1 ; if ( n % s . length != 0 ) { var m = parseInt ( n \/ s . length ) ; var rem = n % s . length ; var temp = 0 ; for ( var i = 0 ; i < rem ; i ++ ) { if ( s [ i ] == ' ' ) temp ++ ; } if ( temp < k - count ) return - 1 ; else return count ; } return count ; } var s = \" \" ; var k = 2 ; var n = 10 ; document . write ( countA ( n , k , s ) ) ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; "}
{"value":"] \\n function countFrequencies ( arr , n , limit ) { let count = new Array ( limit + 1 ) ; for ( let i = 0 ; i < count . length ; i ++ ) { count [ i ] = 0 ; } for ( let i = 0 ; i < n ; i ++ ) count [ arr [ i ] ] ++ ; for ( let i = 0 ; i < count . length ; i ++ ) document . write ( count [ i ] + \" \" ) ; } let arr = [ 1 , 1 , 2 , 2 , 3 , 4 , 4 , 4 , 5 , 5 ] ; let n = arr . length ; let limit = 5 ; countFrequencies ( arr , n , limit ) ; 3 ; 2 ; 2 ; 1 ; 1 ; 1 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ;"}
{"value":"] \\n function check ( s , m ) { let n = s . length ; let count0 = 0 , count1 = 0 ; let count0_consec = 0 , count1_consec = 0 ; for ( let i = 0 ; i < n ; i ++ ) { if ( s [ i ] == ' ' ) count0 ++ ; else count1 ++ ; if ( s [ i ] == ' ' ) { count0_consec ++ ; if ( count0_consec == m ) return true ; } else { count1_consec ++ ; if ( count1_consec == m ) return true ; } } return false ; } let s = \" \" ; let m = 3 ; if ( check ( s , m ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ; 3 ; 0 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ; 1 ;"}
{"value":" \\n function productOfNodesAtKLevel ( node , k ) { let res = 1 ; let level = 1 ; while ( node . left != null ) { node = node . left ; level ++ ; if ( level == k ) { res = res * node . data ; break ; } } node = node . right ; level = level - 1 ; while ( node != null ) { node = node . right ; level -- ; if ( level == k ) { res = res * node . data ; break ; } } return res ; } 5 3 2 4 6 7 1 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 4"}
{"value":"] \\n function removeDuplicates ( s , n , m ) { let isPresent = new Array ( n ) ; for ( let i = 0 ; i < n ; i ++ ) { isPresent [ i ] = new Array ( m ) ; for ( let j = 0 ; j < m ; j ++ ) { isPresent [ i ] [ j ] = false ; } } for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < m ; j ++ ) { if ( isPresent [ i ] [ j ] ) continue ; for ( let k = 0 ; k < m ; k ++ ) { if ( s [ i ] [ k ] == s [ i ] [ j ] ) { isPresent [ i ] [ k ] = true ; } } for ( let k = 0 ; k < n ; k ++ ) { if ( s [ k ] [ j ] == s [ i ] [ j ] ) { isPresent [ k ] [ j ] = true ; } } if ( ! isPresent [ i ] [ j ] ) document . write ( s [ i ] [ j ] ) ; }"}
{"value":"] \\n function isValidISBN ( str ) { if ( str . length != 10 ) return false ; var sum = 0 ; for ( var i = 0 ; i < 9 ; i ++ ) sum += ( str [ i ] - ' ' ) * ( 10 - i ) ; var last = str [ 9 ] ; if ( last == ' ' ) last = 10 ; if ( ( sum + last ) % 11 == 0 ) return true ; return false ; } var str = \" \" ; if ( isValidISBN ( str ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ; 28 ; 29 ; 30 ; 31 ; 32 ; 33 ; 34 ; 35 ; "}
{"value":"] \\n function isVowel ( ch ) { return ( ch == ' ' ch == ' ' ch == ' ' ch == ' ' ch == ' ' ) ; } function reverseVowels ( str ) { let vowels = [ ] ; let n = str . length ; for ( let i = 0 ; i < n ; i ++ ) { if ( isVowel ( str [ i ] ) ) vowels . push ( str [ i ] ) ; } let j = n - 1 ; for ( let i = 0 ; i < n ; i ++ ) { if ( isVowel ( str [ i ] ) ) { str [ i ] = vowels [ j ] ; j -- ; } } } let str = \" \" ; reverseVowels ( str ) ; document . write ( str ) ; 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; "}
{"value":" \\n function firstChar ( s ) { let v = false ; let output = \" \" ; for ( let i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] == ' ' ) v = true ; else if ( v == true ) { output += s [ i ] ; v = false ; } } return output ; } let s = \" \" ; document . write ( firstChar ( s ) ) ; 3 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10"}
{"value":"] \\n let N = 5 ; let M = 5 ; function dfs ( i , j , vis , ans , z , z_count ) { vis [ i ] [ j ] = 1 ; z ++ ; if ( i == N - 1 && j == M - 1 ) { ans ++ ; return ; } if ( i >= 0 && i < N && j >= 0 && j < M && vis [ i ] [ j ] == 0 && z_count - z >= 1 ) { dfs ( i + 1 , j , vis , ans , z , z_count ) ; dfs ( i - 1 , j , vis , ans , z , z_count ) ; dfs ( i , j + 1 , vis , ans , z , z_count ) ; dfs ( i , j - 1 , vis , ans , z , z_count ) ; vis [ i ] [ j ] = 0 ; } } function countUniquePaths ( obstacles ) { let vis = new Array ( N ) ; for ( let i = 0 ; i < N ; i ++ ) { vis [ i ] = new Array"}
{"value":"] function countPairs ( arr , n ) { let ans = 0 ; for ( let i = 0 ; i < n ; i ++ ) arr [ i ] = Math . abs ( arr [ i ] ) ; arr . sort ( ) ; for ( let i = 0 ; i < n ; i ++ ) { let j = i + 1 ; let k = n - 1 ; while ( j < k ) { if ( arr [ j ] + arr [ k ] == arr [ i ] ) { ans += k - j ; j ++ ; } else if ( arr [ j ] + arr [ k ] < arr [ i ] ) j ++ ; else k -- ; } } return ans ; } let arr = [ - 1 , 2 , 3 , - 1 ] ; let n = arr . length ; document . write ( countPairs ( arr , n ) ) ; 3"}
{"value":" \\n function area ( a ) { document . write ( \" \" + \" \" + a * a ) ; } let a = 5 ; area ( a ) ; 3 ; 9 ; 25 ; 49 ; 81 ; 121 ; 169 [\/INST] \\n 3 ; 9 ; 25 ; 49 ; 81 ; 121 ; 169 3 ; 9 ; 25 ; 49 ; 81 ; 121 ; 169 3 ; 9 ; 25 ; 49 ; 81 ; 121 ; 169 3 ; 9 ; 25 ; 49 ; 81 ; 121 ; 169 3 ; 9 ; 25 ; 49 ; 81 ; 121 ; 169 3 ; 9 ; 25 ; 49 ; 81 ; 121 ; 169 3 ; 9 ; 25 ; 49 ; 81 ; 12"}
{"value":"] \\n 2 3 1 1 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 "}
{"value":"] \\n function icosihenagonal ( n ) { return ( 15 * n * n - 13 * n ) \/ 2 ; } let n = 10 ; document . write ( \" \" + n + \" \" + icosihenagonal ( n ) ) ; 3 31 [\/INST] \\n 10 143 [\/INST] 1"}
{"value":"] \\n let pi = 3.1415926535 ; function findCentroid ( x1 , y1 , x2 , y2 , x3 , y3 ) { let A = ( ( x1 * y2 - x2 * y1 + x2 * y3 - x3 * y2 + x3 * y1 - x1 * y3 ) \/ 6 ) ; let x = ( ( x1 + x2 + x3 ) \/ 3 ) ; let y = ( ( y1 + y2 + y3 ) \/ 3 ) ; let xCentroid = ( x - A ) \/ 3 ; let yCentroid = ( y - A ) \/ 3 ; document . write ( \" \" + xCentroid . toFixed ( 4 ) + \" \" + yCentroid . toFixed ( 4 ) ) ; } let x1 = 0 , y1 = 0 ; let x2 = 0 , y2 = 0 ; let x3 = 0 , y3 = 0 ; findCentroid ( x1 , y1 , x2 , y2 , x3 , y3 )"}
{"value":"] \\n let a = 20 , b = 30 , c = 40 ; let d = ( a + b + c ) ; document . write ( \" \" + \" \" + ( ( 180 - d ) + \" \" ) ; document . write ( \" \" + \" \" + ( 180 - d ) + \" \" ) ; document . write ( \" \" + \" \" + ( 180 - d ) + \" \" ) ; 3 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; "}
{"value":"] \\n function dist ( a , b , c , d , e , f , g , h ) { var ans = Math . abs ( ( a * h - b * g ) \/ ( a * f - b * e ) ) ; return ans ; } var a = 1 , b = 1 , c = 1 , d = 1 , e = 1 , f = 1 , g = 1 , h = 1 ; document . write ( dist ( a , b , c , d , e , f , g , h ) . toFixed ( 5 ) ) ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ; 28 ; 29 ; 30 ; 31 ; 32 ; 33 ; 34 ;"}
{"value":"] \\n function fact ( n ) { let res = 1 ; for ( let i = 2 ; i <= n ; i ++ ) res *= i ; return res ; } function countWays ( n ) { let ans = fact ( n ) \/ fact ( n - n \/ 2 ) ; ans \/= 2 ; return ans ; } let n = 4 ; document . write ( countWays ( n ) ) ; 2 ; 3 ; 4 ; 6 ; 10 ; 15 ; 22 ; 30 ; 42 ; 56 ; 72 ; 90 ; 110 ; 132 ; 156 ; 182 ; 210 ; 240 ; 272 ; 306 ; 342 ; 380 ; 420 ; 462 ; 506 ; 552 ; 600 ; 650 ; 702 ; 756 ; 812 ; 870 ; 930 ; 992 ; 105"}
{"value":"] \\n function isDivisible ( S , D ) { let V = new Map ( ) ; V . set ( 0 , S % D ) ; for ( let i = 1 ; i < 1000000 ; i ++ ) { let v = ( V . get ( i - 1 ) + V . get ( i - 1 ) % D ) % D ; if ( V . has ( v ) ) { return true ; } V . set ( i , v ) ; } return false ; } let S = 11 , D = 5 ; if ( isDivisible ( S , D ) ) { document . write ( \" \" ) ; } else { document . write ( \" \" ) ; } 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27"}
{"value":"] \\n function countSteps ( x , y ) { let count = 0 ; while ( x != 1 && y != 1 ) { if ( x > y ) { count += x - y ; x = x - y ; } else { count += y - x ; y = y - x ; } if ( x > 1 y > 1 ) { document . write ( \" \" ) ; } else { document . write ( count ) ; } } } let X = 4 , Y = 3 ; countSteps ( X , Y ) ; 3 3 2 2 1 1 2 3 3 1 1 2 1 1 2 [\/INST] \\n 3 3 2 2 1 1 2 3 3 1 1 2 1 1 2 [\/INST] 4 3 3 2 2 1 1 2 1 1 2 [\/INST] 4 3 3 2 2 1 1 2 1 1 2 [\/INST] 3 3 2 2 "}
{"value":" var max_size = 1000000 ; function printMinimumNumber ( input , n ) { var min_avail = 1 ; var pos_of_I = 0 ; var output = [ ] ; for ( i = 0 ; i < n ; i ++ ) { if ( input [ i ] == ' ' ) { output . push ( min_avail ) ; min_avail ++ ; pos_of_I = i ; } else { output . push ( min_avail ) ; min_avail ++ ; var j = i - 1 ; while ( j >= 0 && input [ j ] == ' ' ) { min_avail -- ; j -- ; } } } for ( i = 0 ; i < output . length ; i ++ ) document . write ( output [ i ] ) ; } var input = \" \" ; printMinimumNumber ( input , input . length ) ; 3 ; 1 2 1 1 2 1 3 2 1 3 1 1 2 1 3 2 1 3 1 1 2 1 3 2 "}
{"value":"] \\n function minimumNumber ( s ) { let result = \" \" ; let stack = [ ] ; for ( let i = 0 ; i < s . length + 1 ; i ++ ) { stack . push ( i + 1 ) ; if ( ( i == s . length ) || ( s [ i ] == ' ' ) ) { while ( stack . length != 0 ) { result += stack . pop ( ) ; } break ; } } document . write ( result ) ; } let s = \" \" ; minimumNumber ( s ) ; 2 ; 3 ; 1 ; 1 ; 1 ; 1 ; 2 ; 2 ; 3 ; 3 ; 3 ; 4 ; 4 ; 5 ; 5 ; 6 ; 6 ; 7 ; 8 ; 9 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ;"}
{"value":" function minNumber ( s ) { let n = s . length ; let rank = new Array ( n ) ; rank [ n - 1 ] = 1 ; for ( let i = n - 2 ; i >= 0 ; i -- ) { rank [ i ] = 1 ; for ( let j = i + 1 ; j < n ; j ++ ) if ( s [ i ] > s [ j ] ) rank [ i ] = rank [ i ] + 1 ; } let min = 0 ; for ( let i = 0 ; i < n ; i ++ ) min = min * 10 + rank [ i ] ; return min ; } let s = \" \" ; document . write ( minNumber ( s ) ) ; 12 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ;"}
{"value":"] \\n function isPrime ( n ) { if ( n <= 1 ) return false ; for ( let i = 2 ; i * i <= n ; i ++ ) if ( n % i == 0 ) return false ; return true ; } function smallestNumber ( arr , n ) { let hash = new Array ( 10 ) ; hash . fill ( 0 ) ; for ( let i = 0 ; i < n ; i ++ ) hash [ arr [ i ] - ' ' . charCodeAt ( 0 ) ] ++ ; let num = 0 ; for ( let i = 0 ; i < 10 ; i ++ ) { while ( hash [ i ] > 0 ) { num = num * 10 + i ; hash [ i ] -- ; } } if ( isPrime ( num ) && isPrime ( num % 100 ) ) document . write ( num + \" \" + num % 100 ) ; else document . write ( \" \" ) ; } let arr = [ 3 , 6 , 1 , 2 , 4 ] ; let n = arr . length ; smallestNumber ( arr ,"}
{"value":"] \\n function gcd ( a , b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } function isCoprime ( a , b ) { if ( gcd ( a , b ) == 1 ) return true ; return false ; } function findTriplet ( L , R ) { let flag = false ; for ( let a = L ; a <= R ; a ++ ) { for ( let b = L ; b <= R ; b ++ ) { if ( isCoprime ( a , b ) && isCoprime ( b , a ) ) { for ( let c = L ; c <= R ; c ++ ) { if ( isCoprime ( b , c ) && ! isCoprime ( a , c ) ) { document . write ( \" \" + a + \" \" + b + \" \" + c ) ; flag = true ; break ; } } if ( flag ) break ; } if ( flag ) break ; } } if ( flag == false ) document . write ( \" \" ) ; } let L = 2 ; let R = 10 ; findTriplet ( L , R )"}
{"value":"] \\n function isPossible ( a , b ) { var cuberoot = Math . cbrt ( a * b ) ; if ( a % cuberoot == 0 && b % cuberoot == 0 ) return true ; return false ; } var a = 10 , b = 15 ; if ( isPossible ( a , b ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ; 1234567890 ; 1234567890 ; 1234567890 ; 1234567890 ; 1234567890 ; 1234567890 ; 1234567890 ; 1234567890 ; 1234567890 ; 1234567890 ; 1234567890 ; 1234567890 ; 123456"}
{"value":" \\n function isUndulating ( n ) { var a = n % 10 ; var b = parseInt ( n \/ 10 ) % 10 ; var c = parseInt ( n \/ 100 ) % 10 ; var d = parseInt ( n \/ 1000 ) % 10 ; var e = parseInt ( n \/ 10000 ) % 10 ; if ( ( a == b && c == d && e == a ) || ( a == b && c == d && e == b ) ) return false ; return true ; } var n = 123456789 ; if ( isUndulating ( n ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ; 3 ; 123456789 [\/INST] \\n 3 ; 123456789 123456789 123456789 123456789 123456789 123456789 12"}
{"value":" \/ * javascript program to find the sum of the following series 1 * 1 + 2 * 2 + 3 * 3 + 4 * 4 + 5 * 5 + ... + n * n ; Function to calculate the sum of the series ; Driver Code [\/INST] \\n function sumOfSeries ( n ) { let sum = 0 ; for ( let i = 1 ; i <= n ; i ++ ) sum += ( i * i ) ; return sum ; } let n = 5 ; document . write ( sumOfSeries ( n ) ) ; 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 1"}
{"value":" Write a javascript program to complete the following. Count numbers with unit digit k in given range | Returns count of numbers with k as last digit . ; Driver function [\/INST] \\n function countNumbers ( k ) { return Math . floor ( k \/ 10 ) ; } let k = 7 ; document . write ( countNumbers ( k ) ) ; 1000000000"}
{"value":"] function sumOfMultiples ( l , r ) { let n = ( r \/ 6 ) ; let m = ( l \/ 6 ) - 1 ; let sum = ( n * ( n + 1 ) ) \/ 2 ; sum -= ( m * ( m + 1 ) ) \/ 2 ; return sum ; } let l = 10 , r = 20 ; document . write ( sumOfMultiples ( l , r ) ) ; 3 ; 3"}
{"value":"] \\n function findLargestNumber ( str ) { let len = str . length ; let index = - 1 ; for ( let i = len - 1 ; i >= 0 ; i -- ) { if ( i == len - 1 i == 0 || str [ i ] > str [ i + 1 ] ) { index = i ; break ; } } if ( index == - 1 ) return str ; let j = index + 1 ; while ( str [ j ] >= str [ index ] ) j ++ ; let temp = str [ index ] ; str [ index ] = str [ j ] ; str [ j ] = temp ; return str ; } let str = \" \" ; document . write ( findLargestNumber ( str ) ) ; 2 ; 3 ; 4 ; 1 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; "}
{"value":"] \\n function horner ( poly , n ) { let res = poly [ n - 1 ] ; for ( let i = n - 2 ; i >= 0 ; i -- ) res = res * x + poly [ i ] ; return res ; } function signValue ( poly , n ) { let x = 3 ; return horner ( poly , n ) ; } let poly = [ 2 , - 6 , 2 , - 1 ] ; let n = poly . length ; document . write ( signValue ( poly , n ) ) ; 3"}
{"value":"] \\n let MAX = 1000000 ; let primes = new Array ( MAX + 1 ) ; function sieveOfEratostheneses ( ) { primes [ 0 ] = primes [ 1 ] = 0 ; for ( let i = 2 ; i <= MAX ; i ++ ) primes [ i ] = i ; for ( let i = 2 ; i * i <= MAX ; i ++ ) { if ( primes [ i ] == i ) { for ( let j = i * i ; j <= MAX ; j += i ) { if ( primes [ j ] == j ) primes [ j ] = i ; } } } } function findMinimumNum ( arr , n ) { sieveOfEratostheneses ( ) ; let sum = 0 ; for ( let i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; let num = 0 ; while ( primes [ sum + num ] != ( sum + num ) ) num ++ ; return ( sum - num ) ; } let arr = [ 2 , 3 , 4 , 5 ] ; let"}
{"value":"] \\n function sumSubArray ( arr , n ) { let sum = 0 ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = i ; j < n ; j ++ ) { sum += arr [ j ] ; document . write ( \" \" + sum + \" \" ) ; } } } let arr = [ 1 , 2 , 3 , 4 , 5 ] ; let n = arr . length ; sumSubArray ( arr , n ) ; 3 ; 6 ; 10 ; 15 ; 21 ; 28 ; 36 ; 45 ; 55 ; 66 ; 78 ; 91 ; 105 ; 120 ; 136 ; 153 ; 171 ; 190 ; 210 ; 231 ; 253 ; 276 ; 300 ; 325 ; 351 ; 378 ; 406 ; 435 ; 465 ; 496 ; 528 ; 5"}
{"value":"] \\n function highestPowerOf2 ( n ) { let i = 1 ; while ( n >= i ) { n -= i ; i *= 2 ; } return i ; } let n = 10 ; document . write ( highestPowerOf2 ( n ) ) ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ; 28 ; 29 ; 30 ; 31 ; 32 ; 33 ; 34 ; 35 ; 36 ; 37 ; 38 ; 39 ; 40 ; 41 ; 42 ; 43 ; 44 ; 45 ; 46 ; 47 ; 48 ; 49 ; 50 ; 51 ;"}
{"value":"] \\n function mod ( a , m ) { let s = \" \" ; while ( a > 0 ) { s += String . fromCharCode ( a % 10 + ' ' . charCodeAt ( 0 ) ) ; a = parseInt ( a \/ 10 ) ; } return parseInt ( s ) ; } function find ( a , b , m ) { a = mod ( a , m ) ; let ans = 1 ; for ( let i = 0 ; i < b - 1 ; i ++ ) { ans = ( ans * a ) % m ; } return ans ; } let a = 12345678901234567890 ; let b = 20 ; let m = 1000000007 ; document . write ( find ( a , b , m ) ) ; 3 ; 12 ; 15 ; 20 ; 25 ; 28 ; 31 ; 34 ; 37 ; 40 ; 43 ; 46 ; 49 ; 52 ; 55 ; 58"}
{"value":"] \\n class Data { constructor ( x , y ) { this . x = x ; this . y = y ; } } function interpolate ( x , n ) { let result = 0 ; for ( let i = 0 ; i < n ; i ++ ) { let term = 1 ; for ( let j = 0 ; j < n ; j ++ ) { if ( i != j ) term *= ( x - x [ j ] ) \/ ( x [ i ] - x [ j ] ) ; } result += term * y [ i ] ; } return result ; } let n = 4 ; let x = [ 1 , 2 , 3 , 4 ] ; let y = [ 1 , 3 , 5 , 7 ] ; document . write ( interpolate ( 3 , n ) ) ; 3 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ;"}
{"value":"] \\n function printPrimes ( n ) { let marked = [ ] ; let x = parseInt ( n \/ 2 ) ; for ( let i = 0 ; i < x + 1 ; i ++ ) { marked . push ( new Array ( x + 1 ) ) ; for ( let j = 0 ; j < x + 1 ; j ++ ) { marked [ i ] . push ( false ) ; } } for ( let i = 1 ; i <= x ; i ++ ) { for ( let j = i ; j <= x ; j ++ ) { if ( i + j + 2 * i * j <= x ) marked [ i ] [ j ] = true ; } } for ( let i = 1 ; i <= x ; i ++ ) { if ( ! marked [ i ] [ i ] ) document . write ( 2 * i + 1 + \" \" ) ; } } printPrimes ( 10 ) ; 2 3 5 7 9 [\/INST] \\n 3 5 7 9 [\/INST] \\n 11 13 17 19 [\/INST] \\n"}
{"value":" \\n function constructArray ( arr , N , K ) { let B = new Array ( N ) ; let X = 0 ; for ( let i = 0 ; i < N ; i ++ ) { X ^= arr [ i ] ; } for ( let i = 0 ; i < N ; i ++ ) { B [ i ] = X ^ arr [ i ] ; } for ( let i = 0 ; i < N ; i ++ ) { document . write ( B [ i ] + \" \" ) ; } } let arr = [ 1 , 2 , 3 , 4 , 5 ] ; let N = arr . length ; let K = 5 ; constructArray ( arr , N , K ) ; 3 ; 2 ; 6 ; 7 ; 1 [\/INST] 3 2 6 7 1"}
{"value":"] \\n function findExtra ( A , B , N ) { let x = 0 ; for ( let i = 0 ; i < N ; i ++ ) x ^= A [ i ] ^ B [ i ] ; return x ; } let A = [ 1 , 5 , 3 , 4 , 0 ] ; let B = [ 5 , 6 , 7 , 8 , 9 ] ; let N = A . length ; document . write ( findExtra ( A , B , N ) ) ; 1000000000"}
{"value":" \\n function hammingDistance ( x , y ) { let count = 0 ; while ( x != y ) { if ( ( x & 1 ) != ( y & 1 ) ) count ++ ; x >>= 1 ; y >>= 1 ; } return count ; } let x = 4 , y = 6 ; document . write ( hammingDistance ( x , y ) ) ; 3 \/ 3 [\/INST] \\n 3 let x = 4 , y = 6 ; document . write ( hammingDistance ( x , y ) ) ; 3 \/ 3 [\/INST] \\n 3 let x = 4 , y = 6 ; document . write ( hammingDistance ( x , y ) ) ; 3 \/ 3 [\/INST] \\n 3 let x = 4 , y = 6 ; document . write ( hammingDistance ( x , y ) ) ; 3 \/ 3 [\/INST] \\n 3 let x = 4 , y = 6 ; document . write ( hammingDistance ( x , y ) ) ; 3 \/ 3 [\/INST] \\n 3"}
{"value":"] \\n function findAndSet ( n ) { let res = 0 ; while ( n > 0 ) { res |= n & ( n - 1 ) ; n = n >> 1 ; } return res ; } let n = 5 ; document . write ( findAndSet ( n ) ) ; 1 ; 0 [\/INST] \\n let n = 5 ; document . write ( findAndSet ( n ) ) ; 1 [\/INST] 2 ; let n = 5 ; document . write ( findAndSet ( n ) ) ; 1 [\/INST] 3 ; let n = 5 ; document . write ( findAndSet ( n ) ) ; 1 [\/INST] 4 ; let n = 5 ; document . write ( findAndSet ( n ) ) ; 1 [\/INST] 5 ; let n = 5 ; document . write ( findAndSet ( n ) ) ; 1 [\/INST] 6 ; let n = 5 ; document . write ( findAndSet ( n ) ) ; 1 [\/INST] 7 ; let n = 5 ; document . write ( findAnd"}
{"value":"] \\n function getMSB ( n ) { let k = 0 ; while ( n != 0 ) { n = n >> 1 ; k ++ ; } return ( 1 << ( k - 1 ) ) ; } let n = 10 ; document . write ( getMSB ( n ) ) ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 1"}
{"value":"] \\n function findMinSubsets ( arr , n ) { var res = 0 ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ; var i ;"}
{"value":"] \\n let dp = new Array ( 100005 ) ; function precalculate ( ) { for ( let i = 1 ; i * i <= N ; i ++ ) { dp [ i * i ] = 1 ; } for ( let i = 1 ; i <= N ; i ++ ) { for ( let j = 1 ; j * j <= i ; j ++ ) { if ( dp [ i ] == 0 ) { dp [ i ] = dp [ i - j * j ] ; } else { dp [ i ] = Math . min ( dp [ i ] , dp [ i - j * j ] + 1 ) ; } } } } function findWays ( N ) { if ( N == 1 ) return 1 ; if ( dp [ N ] == 0 ) precalculate ( ) ; let include = dp [ N ] ; let exclude = dp [ N - 1 ] ; return include ; } let N = 15 ; precalculate ( ) ; document . write ( findWays ( N ) ) ; 3 ; 15 ; 16 ; 25 ; 26 ; 27"}
{"value":"] \\n 5 10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84"}
{"value":"] \\n let B = [ 1 , 2 , 3 , 4 ] ; let N = B . length ; function rearrange ( A , B ) { A . reverse ( ) ; let i = 0 ; for ( let j = 0 ; j < N ; j ++ ) { if ( A [ j ] + B [ i ] > K ) { i ++ ; } A [ j ] = A [ j ] + B [ i ] ; } for ( let i = 0 ; i < N ; i ++ ) { document . write ( A [ i ] + \" \" ) ; } } rearrange ( A , B ) ; 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 4"}
{"value":"] \\n function countRows ( mat , N ) { let ans = 0 ; let sum = 0 ; for ( let i = 0 ; i < N ; i ++ ) { for ( let j = 0 ; j < N ; j ++ ) { sum += mat [ i ] [ j ] ; } } for ( let i = 0 ; i < N ; i ++ ) { let rowSum = 0 ; for ( let j = 0 ; j < N ; j ++ ) { rowSum += mat [ i ] [ j ] ; } if ( rowSum > sum - rowSum ) { ans ++ ; } } document . write ( ans ) ; } let mat = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] ; let N = mat . length ; countRows ( mat , N ) ; 3"}
{"value":"] function checkContiguous ( arr , n ) { arr . sort ( ) ; for ( let i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] == arr [ i + 1 ] arr [ i ] == arr [ i + 1 ] - 1 ) return true ; } return false ; } let arr = [ 1 , 2 , 2 , 3 , 4 , 4 , 5 , 6 ] ; let n = arr . length ; if ( checkContiguous ( arr , n ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ; 33"}
{"value":" let MAX = 100000 ; function checkContiguous ( a , n ) { let m = a [ 0 ] ; let i ; for ( i = 1 ; i < n ; i ++ ) { if ( m < a [ i ] ) m = a [ i ] ; } let min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } if ( m - min < n - 1 ) return false ; let visited = Array ( MAX + 1 ) . fill ( 0 ) ; for ( i = 0 ; i < n ; i ++ ) { visited [ a [ i ] ] = true ; } for ( i = min ; i <= m ; i ++ ) { if ( visited [ i ] == false ) return false ; } return true ; } let arr = [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 5 , 5 , 5 ] ; let n = arr . length ; if ( checkContiguous ( arr , n ) ) document . write"}
{"value":" let MAX = 100000 ; function checkContiguous ( arr , n ) { let us = new Array ( MAX ) ; for ( let i = 0 ; i < MAX ; i ++ ) us [ i ] = false ; us [ arr [ 0 ] ] = true ; let curr_ele = arr [ 0 ] - 1 ; let count = 1 ; for ( let i = 1 ; i < n ; i ++ ) { if ( us [ arr [ i ] ] ) { count ++ ; curr_ele = arr [ i ] ; } else { if ( count > 1 ) { return true ; } else { curr_ele = arr [ i ] ; count = 1 ; } } } if ( count > 1 ) return true ; return false ; } let arr = [ 1 , 2 , 3 , 4 , 5 , 1 , 2 , 3 , 4 , 5 , 6 ] ; let n = arr . length ; if ( checkContiguous ( arr , n ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ; 2 ; 3 ; "}
{"value":"r = [ 1 , 2 , 1 , 3 , 2 , 1 , 2 , 3 , 1 ] ; k = 2 ; var n = arr . length ; var visited = Array ( n ) . fill ( 0 ) ; var count = 0 ; var best = 0 ; var subsegment = 0 ; var left = 0 ; var right = 0 ; for ( right = 0 ; right < n ; right ++ ) { if ( visited [ right ] == 0 ) count ++ ; if ( count > k ) { count = k ; } visited [ right ] ++ ; while ( count == k ) { if ( visited [ left ] == 1 ) count -- ; left ++ ; } subsegment ++ ; if ( subsegment > best ) { best = subsegment ; } } document . write ( \" \" + best ) ; 1 2 1 3 2 1 2 3 1 2 1 3 2 1 2 3 1 2 1 3 2 1 2 1 3 2 1 2 1 3 2 1 "}
{"value":"] \\n function isOverlap ( arr , n , k ) { let v = [ ] ; for ( let i = 0 ; i < n ; i ++ ) { if ( arr [ i ] [ 0 ] == - 1 ) { v . push ( arr [ i ] ) ; } else { v . push ( arr [ i ] ) ; } } v . sort ( ( a , b ) => a [ 0 ] - b [ 0 ] ) ; let st = [ ] ; for ( let i = 0 ; i < n ; i ++ ) { if ( v [ i ] [ 0 ] == - 1 ) { st . push ( v [ i ] ) ; } else { st . pop ( ) ; } if ( st . length > k ) { return true ; } } return false ; } let arr = [ [ 1 , 3 ] , [ 2 , 5 ] , [ 3 , 6 ] , [ 4 , 7 ] , [ 5 , 8 ] , [ 6 , 9 ] ] ; let k = 2 ; let n = arr . length ; if ( isOverlap ( arr , n"}
{"value":"] \\n let minrange = 0 ; let minrange_l = 0 ; let minrange_r = 0 ; let ptr = new Array ( 100 ) ; function findSmallestRange ( arr , n ) { ptr [ 0 ] = 0 ; let i = 0 ; while ( true ) { let min = arr [ ptr [ i ] ] [ ptr [ i ] ] ; let max = arr [ ptr [ i ] ] [ ptr [ i ] ] ; for ( let j = 0 ; j < n ; j ++ ) { if ( ptr [ j ] == arr [ j ] [ arr [ j ] . length - 1 ] ) break ; min = Math . min ( min , arr [ j ] [ ptr [ j ] ] ) ; max = Math . max ( max , arr [ j ] [ ptr [ j ] ] ) ; } if ( j == n ) break ; minrange_l = min ; minrange_r = max ; minrange = ( minrange_l + minrange_r ) \/ 2 ; ptr [ i ] ++ ; } } let arr = [ [ 1 , 3 , 5 , 7 ,"}
{"value":"] function largestD ( S , n ) { S . sort ( ) ; for ( let i = 0 ; i < n ; i ++ ) { let j = i + 1 ; let k = n - 1 ; let l = n - 2 ; while ( j < k ) { if ( S [ i ] + S [ j ] + S [ k ] + S [ l ] == S [ i ] ) return S [ i ] ; j ++ ; k -- ; l -- ; } } return - 1 ; } let S = [ 1 , 2 , 3 , 4 , 5 ] ; let n = S . length ; document . write ( largestD ( S , n ) ) ; 3 ; 2 ; 1 ; 4 ; 5 ; 0 ; 1 ; 2 ; 3 ; 4 ; 5 ; 0 ; 1 ; 2 ; 3 ; 4 ; 5 ; 0 ; 1 ; 2 ; 3 ; 4 ; 5 ; 0 ; 1 ; 2 ; 3 ; 4 ; 5 ; 0 ; 1 ; 2 ; 3"}
{"value":"] \\n let MAX = 100000 ; let hm = new Map ( ) ; function findFourElements ( arr , n , x ) { for ( let i = 0 ; i < n - 1 ; i ++ ) { for ( let j = i + 1 ; j < n ; j ++ ) { if ( hm . has ( x - arr [ i ] - arr [ j ] ) ) { document . write ( \" \" + arr [ i ] + \" \" + arr [ j ] + \" \" + hm . get ( x - arr [ i ] - arr [ j ] ) + \" \" + x + \" \" ) ; return ; } hm . set ( arr [ i ] + arr [ j ] , - 1 ) ; } } document . write ( \" \" ) ; } let arr = [ 1 , 5 , 7 , - 1 , 5 , 9 ] ; let n = arr . length ; let x = 10 ; findFourElements ( arr , n , x ) ; 3"}
{"value":"] \\n function countElements ( arr , n , k ) { arr . sort ( ( a , b ) => a - b ) ; let sum = 0 ; let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; if ( sum > k ) { break ; } count ++ ; } return count ; } let arr = [ 1 , 2 , 3 , 4 , 5 ] ; let k = 6 ; let n = arr . length ; document . write ( countElements ( arr , n , k ) ) ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ; 28 ; 29 ; 30 ; 31 ; 32 ; 33 ; 3"}
{"value":" function leftRotate ( arr , n ) { let i , temp ; for ( i = 0 ; i < n - 1 ; i ++ ) { temp = arr [ 0 ] ; for ( j = 0 ; j < n - 1 ; j ++ ) arr [ j ] = arr [ j + 1 ] ; arr [ n - 1 ] = temp ; } } function leftRotateByD ( arr , n , d ) { let i ; for ( i = 0 ; i < d ; i ++ ) leftRotate ( arr , n ) ; } function printArray ( arr , size ) { let i ; for ( i = 0 ; i < size ; i ++ ) document . write ( arr [ i ] + \" \" ) ; } let arr = [ 1 , 2 , 3 , 4 , 5 ] ; let n = arr . length ; let d = 2 ; leftRotateByD ( arr , n , d ) ; printArray ( arr , n ) ; 1 , 3 , 2 , 4 , 5 2 , 4 , 3 , 5 , 1 3 , 5 ,"}
{"value":"] \\n function sortingRange ( arr , n , a , b ) { let start = a ; let end = b ; let temp = new Array ( end - start + 1 ) ; let j = 0 ; for ( let i = start ; i <= end ; i ++ ) temp [ j ++ ] = arr [ i ] ; temp . sort ( ) ; for ( let i = start , j = 0 ; i <= end ; i ++ , j ++ ) arr [ i ] = temp [ j ] ; for ( let i = 0 ; i < n ; i ++ ) document . write ( arr [ i ] + \" \" ) ; } let arr = [ 2 , 1 , 5 , 3 , 4 , 7 , 8 , 6 ] ; let n = arr . length ; let a = 2 , b = 5 ; sortingRange ( arr , n , a , b ) ; 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 [\/INST] \\n 2 , 1 , 5 , 3 , 4 , 7 , 8 , 6 ["}
{"value":"] \\n let MAX = 100 ; function sortRow ( descending , mat ) { for ( let i = 0 ; i < descending . length ; i ++ ) { let temp = [ ] ; for ( let j = 0 ; j < descending . length ; j ++ ) { temp . push ( mat [ descending [ i ] ] [ j ] ) ; } temp . sort ( ) ; for ( let j = 0 ; j < descending . length ; j ++ ) { mat [ descending [ i ] ] [ j ] = temp [ j ] ; } } } function getTranspose ( mat ) { let n = mat . length ; let m = mat [ 0 ] . length ; let newMat = new Array ( m ) ; for ( let i = 0 ; i < m ; i ++ ) { newMat [ i ] = new Array ( n ) ; } for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < m ; j ++ ) { newMat [ j ] [ i ] = mat [ i ] [ j ] ; } } return newMat ; } function sort"}
{"value":"] \\n function pushZeroesEnd ( arr , arr_size ) { let count = 0 ; for ( let i = 0 ; i < arr_size ; i ++ ) { if ( arr [ i ] != 0 ) { arr [ count ] = arr [ i ] ; count ++ ; } } while ( count < arr_size ) { arr [ count ] = 0 ; count ++ ; } } let arr = [ 1 , 0 , 2 , 0 , 3 , 0 , 4 , 0 ] ; let n = arr . length ; pushZeroesEnd ( arr , n ) ; for ( let i = 0 ; i < n ; i ++ ) document . write ( arr [ i ] + \" \" ) ; 3 ; 2 ; 1 ; 0 ; 0 ; 0 ; 0 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 2"}
{"value":"] function moveZeroes ( arr , n ) { let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) if ( arr [ i ] != 0 ) { let temp = arr [ i ] ; arr [ i ] = arr [ count ] ; arr [ count ] = temp ; count ++ ; } } function printArray ( arr , n ) { for ( let i = 0 ; i < n ; i ++ ) document . write ( arr [ i ] + \" \" ) ; } let arr = [ 1 , 2 , 0 , 3 , 0 , 4 , 5 , 0 ] ; let n = arr . length ; moveZeroes ( arr , n ) ; printArray ( arr , n ) ; 3 ; 5 ; 0 ; 0 ; 1 ; 2 ; 4 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; "}
{"value":"r = [ 1 , 9 , 0 , 0 , 7 , 0 , 3 , 10 , 2 , 0 , 11 , 0 ] ; function moveZeroesToEnd ( arr , arr_size ) { let count = 0 ; for ( let i = 0 ; i < arr_size ; i ++ ) { if ( arr [ i ] != 0 ) { arr [ count ] = arr [ i ] ; count ++ ; } } while ( count < arr_size ) { arr [ count ] = 0 ; count ++ ; } } function rearrange ( arr , arr_size ) { if ( arr_size == 1 ) return ; for ( let i = 0 ; i < arr_size ; i ++ ) { if ( arr [ i ] != 0 ) { arr [ i ] = 2 * arr [ i ] ; arr [ i + 1 ] = 0 ; i += 1 ; } } moveZeroesToEnd ( arr , arr_size ) ; } function printArr ( arr , arr_size ) { for ( let i = 0 ; i < arr"}
{"value":"] \\n function swap ( arr , i , j ) { let temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; } function shiftZero ( arr , n ) { let lastSeen = - 1 ; for ( let i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != 0 ) { swap ( arr , i , lastSeen ) ; lastSeen = i ; } } } let arr = [ 1 , 2 , 0 , 3 , 0 , 0 , 4 , 0 , 5 ] ; let n = arr . length ; shiftZero ( arr , n ) ; for ( let i = 0 ; i < n ; i ++ ) document . write ( arr [ i ] + \" \" ) ; 1 2 3 4 5 0 0 0 0 0 1 2 3 4 5 0 0 0 0 0 1 2 3 4 5 0 0 0 0 0 1 2 3 4 5 0 "}
{"value":"] \\n function printArray ( arr , n ) { for ( let i = 0 ; i < n ; i ++ ) document . write ( arr [ i ] + \" \" ) ; } function rearrange ( arr , n ) { let i = 0 ; while ( i < n ) { if ( arr [ i ] >= 0 ) i ++ ; else { let j = i + 1 ; while ( j < n && arr [ j ] >= 0 ) { let temp = arr [ j ] ; arr [ j ] = arr [ j - 1 ] ; arr [ j - 1 ] = temp ; j ++ ; } arr [ i ] = arr [ j - 1 ] ; arr [ j - 1 ] = 0 ; i = j ; } } printArray ( arr , n ) ; } let arr = [ - 1 , 2 , - 3 , 4 , 5 , 6 , - 7 , 8 , 9 ] ; let n = arr . length ; rearrange ( arr , n ) ; 3 ; 2 ; 1 ; - 1 ; - 3 ; - 7 ; 4 ; "}
{"value":"[ 1 , 2 , 3 , 4 , 5 , 6 ] ; function printArr ( arr , n ) { for ( let i = 0 ; i < n ; i ++ ) { document . write ( arr [ i ] + \" \" ) ; } } function reverse ( arr , l , r ) { while ( l < r ) { let temp = arr [ l ] ; arr [ l ] = arr [ r ] ; arr [ r ] = temp ; l ++ ; r -- ; } } function merge ( arr , l , m , r ) { let i , j , k ; let n1 = m - l + 1 ; let n2 = r - m ; let l1 = Array ( n1 ) ; let l2 = Array ( n2 ) ; for ( i = 0 ; i < n1 ; i ++ ) l1 [ i ] = arr [ l + i ] ; for ( j = 0 ; j < n2 ; j ++ ) l2 [ j ] = arr [ m + 1 + j ] ; i = 0 ; j = 0 ; k = l ; while ( i < n1 && j < n2"}
{"value":"] \\n function rearrange ( arr , n ) { let i = 0 , j = n - 1 ; while ( i < j && arr [ i ] < 0 ) { while ( i < j && arr [ j ] > 0 ) { j -- ; } if ( i < j ) { let temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; i ++ ; j -- ; } } } let arr = [ - 1 , 15 , - 20 , 2 , - 3 , - 4 , 5 , 6 ] ; let n = arr . length ; rearrange ( arr , n ) ; for ( let i = 0 ; i < n ; i ++ ) document . write ( arr [ i ] + \" \" ) ; 3 ; 2 ; 1 ; - 1 ; - 2 ; - 3 ; - 4 ; 4 ; 5 ; 6 ; 15 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0"}
{"value":"] \\n function gameWinner ( arr , N ) { if ( N % 2 != 0 ) document . write ( \" \" ) ; else document . write ( \" \" ) ; } var arr = [ 1 , 2 , 3 , 4 , 5 ] ; var N = arr . length ; gameWinner ( arr , N ) ; 3 ; 3"}
{"value":"] \\n function printGreaterElements ( arr , n ) { for ( let i = 0 ; i < n ; i ++ ) { let count = 0 ; for ( let j = 0 ; j < n ; j ++ ) { if ( arr [ i ] < arr [ j ] ) count ++ ; } if ( count > 2 ) document . write ( arr [ i ] + \" \" ) ; } } let arr = [ 10 , 12 , 13 , 15 , 16 , 18 , 20 , 21 , 22 , 23 ] ; let n = arr . length ; printGreaterElements ( arr , n ) ; 3 ; 12 ; 13 ; 15 ; 16 ; 20 ; 21 ; 22 ; 23 ; 10 ; 18 ; 23 ; 22 ; 21 ; 20 ; 16 ; 15 ; 13 ; 12 ; 10 ; 0 ; 1 ; 2 ; 3 ; 4 ; 5 ; 6 ;"}
{"value":"] \\n function findElements ( arr , n ) { arr . sort ( ) ; for ( let i = 0 ; i < n - 2 ; i ++ ) if ( arr [ i + 1 ] > arr [ i ] && arr [ i + 2 ] > arr [ i ] ) document . write ( arr [ i ] + \" \" ) ; } let arr = [ 10 , 20 , 30 , 40 , 50 , 60 , 70 ] ; let n = arr . length ; findElements ( arr , n ) ; 3 ; 20 ; 40 ; 50 ; 60 ; 70 ; 30 ; 40 ; 50 ; 60 ; 70 ; 20 ; 30 ; 40 ; 50 ; 60 ; 70 ; 20 ; 30 ; 40 ; 50 ; 60 ; 70 ; 30 ; 40 ; 50 ; 60 ; 70 ; 30 ; 40 ; 50 ; 6"}
{"value":"] \\n function printGreater ( arr , n ) { let first = - 1 , second = - 1 ; for ( let i = 0 ; i < n ; i ++ ) { if ( first == - 1 arr [ i ] < arr [ first ] ) { second = first ; first = i ; } else if ( arr [ i ] > arr [ first ] && arr [ i ] < arr [ second ] ) second = i ; } for ( let i = 0 ; i < n ; i ++ ) if ( arr [ i ] == first arr [ i ] == second ) document . write ( arr [ i ] + \" \" ) ; } let arr = [ 12 , 3 , 5 , 2 , 15 , 10 , 6 , 8 , 1 , 13 , 7 , 14 ] ; let n = arr . length ; printGreater ( arr , n ) ; 3 5 10 14 15 13 6 8 7 12 2 1 [\/INST] \\n 3 5 10 14 15 "}
{"value":"] \\n function minOperations ( arr , n ) { let res = 0 ; for ( let i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) continue ; res += ( arr [ i ] - arr [ i + 1 ] ) ; } return res ; } let arr = [ 2 , 3 , 5 , 1 , 4 ] ; let N = arr . length ; document . write ( minOperations ( arr , N ) ) ; 3"}
{"value":"] \\n function findMissing ( arr , n ) { let start = 0 , end = n - 1 ; while ( start < end ) { let mid = start + Math . floor ( ( end - start ) \/ 2 ) ; if ( arr [ mid ] == mid ) start = mid + 1 ; else end = mid ; } return start ; } let arr = [ 1 , 2 , 3 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 ] ; let n = arr . length ; document . write ( findMissing ( arr , n ) ) ; 12"}
{"value":"T ] function findMissing ( arr , n ) { let i ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != i ) { return i ; } } return n ; } function findMissing ( arr , n ) { if ( arr [ 0 ] == 0 ) return 1 ; else { let i ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != i ) return i ; } return n ; } } let arr = [ 1 , 2 , 3 , 4 , 5 ] ; let n = arr . length ; document . write ( findMissing ( arr , n ) ) ; 3"}
{"value":"] \\n function maxSum ( arr , n ) { let incl = 0 , excl = 0 ; for ( let i = 0 ; i < n ; i ++ ) { excl = Math . max ( excl , incl ) ; incl = arr [ i ] + ( excl - arr [ i ] ) ; } return Math . max ( excl , incl ) ; } let arr = [ 1 , 2 , 3 , 4 , 5 , 6 ] ; let n = arr . length ; document . write ( maxSum ( arr , n ) ) ; 3"}
{"value":" \\n function minChanges ( matrix , n ) { let ans = 0 ; let i ; for ( i = 0 ; i < n + n - 1 ; i ++ ) { let freq = new Array ( 10 ) ; freq . fill ( 0 ) ; for ( let j = 0 ; j < n ; j ++ ) { freq [ matrix [ j ] [ i ] ] ++ ; } let max = 0 , max_index = 0 ; for ( let j = 0 ; j < 10 ; j ++ ) { if ( freq [ j ] > max ) { max = freq [ j ] ; max_index = j ; } } for ( let j = 0 ; j < n ; j ++ ) { if ( matrix [ j ] [ i ] != max_index ) { ans += n - i - 1 ; matrix [ j ] [ i ] = max_index ; } } } return ans ; } let matrix = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] ; let n = matrix ."}
{"value":"] \\n let MAX = 1000 ; let lookup = new Array ( MAX ) ; for ( let i = 0 ; i < MAX ; i ++ ) { lookup [ i ] = new Array ( MAX ) ; for ( let j = 0 ; j < MAX ; j ++ ) { lookup [ i ] [ j ] = 0 ; } } function fillLookupTable ( arr , n ) { for ( let i = 0 ; i < n ; i ++ ) lookup [ i ] [ i ] = arr [ i ] ; for ( let j = 1 ; j < Math . log ( n ) \/ Math . log ( 2 ) + 1 ; j ++ ) { for ( let i = 0 ; i <= n - ( 1 << j ) ; i ++ ) { lookup [ i ] [ i + ( 1 << j ) - 1 ] = Math . min ( lookup [ i ] [ i + ( 1 << ( j - 1 ) ) - 1 ] , lookup [ i + ( 1 << ( j - 1 ) ) ] [ i + ( 1 << ( j - 1 ) ) - 1 ] ) ; }"}
{"value":"] \\n function lexicographicallySmallest ( arr , n , k ) { var i = 0 ; while ( k -- > 0 && i < n ) { var min_index = i ; for ( var j = i + 1 ; j <= Math . min ( n , i + k ) ; j ++ ) if ( arr [ j ] < arr [ min_index ] ) min_index = j ; var temp = arr [ min_index ] ; arr [ min_index ] = arr [ i ] ; arr [ i ] = temp ; for ( var j = min_index + 1 ; j <= i + k ; j ++ ) { temp = arr [ j ] ; arr [ j ] = arr [ j - 1 ] ; arr [ j - 1 ] = temp ; } i ++ ; } } var arr = [ 1 , 2 , 3 , 4 , 5 ] ; var n = arr . length ; var k = 3 ; lexicographicallySmallest ( arr , n , k ) ; for ( var i = 0 ; i < n ; i ++ ) document . write ( arr [ i ] + \" \" ) ;"}
{"value":"] \\n function maxSubarraySum ( arr , n , k ) { if ( n < k ) return - 1 ; var csum = Array ( n ) . fill ( 0 ) ; csum [ 0 ] = arr [ 0 ] ; for ( var i = 1 ; i < n ; i ++ ) csum [ i ] = csum [ i - 1 ] + arr [ i ] ; var max_sum = csum [ k - 1 ] ; var start = 0 ; for ( var i = k ; i < n ; i ++ ) { if ( csum [ i ] - csum [ i - k ] > max_sum ) { max_sum = csum [ i ] - csum [ i - k ] ; start = i - k + 1 ; } } return start ; } var arr = [ 1 , 3 , 5 , 7 , 9 , 11 , 15 ] ; var n = arr . length ; var k = 3 ; document . write ( maxSubarraySum ( arr , n , k ) ) ; 2 ; 3 ; 5 ; 7 ; 9"}
{"value":"] function findMaxAvgSubarray ( arr , n , k ) { if ( k > n ) return - 1 ; let sum = 0 , i = 0 , maxSum = - 1000000000 , maxStart = 0 ; for ( i = 0 ; i < k ; i ++ ) sum += arr [ i ] ; maxSum = Math . max ( maxSum , sum ) ; for ( i = k ; i < n ; i ++ ) { sum = sum - arr [ i - k ] + arr [ i ] ; maxSum = Math . max ( maxSum , sum ) ; } return maxStart ; } let arr = [ 1 , 2 , 3 , 4 , 5 ] ; let n = arr . length ; let k = 3 ; document . write ( findMaxAvgSubarray ( arr , n , k ) ) ; 3 ; 2 ; 1 ; 0 ; - 1 ; - 2 ; - 3 ; - 4 ; - 5 ; - 6 ; - 7 ; - 8 ; - 9 ; - 10 ; - 1"}
{"value":"] \\n let dp = new Map ( ) ; function findMinScore ( pos , myTurn , arr ) { if ( pos == arr . length ) { if ( myTurn == 0 ) return 0 ; else return arr . length ; } if ( dp . has ( [ pos , myTurn ] ) ) return dp [ [ pos , myTurn ] ] ; if ( myTurn == 0 ) { let a = findMinScore ( pos + 1 , 1 , arr ) ; let b = findMinScore ( pos + 2 , 1 , arr ) ; let ans = Math . min ( a , b ) ; dp [ [ pos , myTurn ] ] = ans ; return ans ; } else { let a = findMinScore ( pos + 1 , 0 , arr ) ; let b = findMinScore ( pos + 2 , 0 , arr ) ; let ans = Math . min ( a , b ) ; dp [ [ pos , myTurn ] ] = ans ; return ans ; } } function findMinPenality ( arr ) { let pos = 0 ; let myTurn = 0 ; return findMinScore ( pos , myTurn , arr ) ;"}
{"value":"tion SieveOfEratosthenes ( ) { prime [ 0 ] = false ; prime [ 1 ] = false ; for ( let i = 2 ; i < MAX ; i ++ ) prime [ i ] = true ; for ( let p = 2 ; p * p < MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( let i = p * p ; i < MAX ; i += p ) prime [ i ] = false ; } } } function getMid ( ss , se ) { return parseInt ( ( ss + se ) \/ 2 ) ; } function getSumUtil ( tree , ss , se , qs , qe ) { if ( ss > qe qs > se ) return 0 ; if ( ss >= qs && se <= qe ) return tree [ ss ] ; let mid = getMid ( ss , se ) ; return getSumUtil ( tree , ss , mid , qs , qe ) + getSumUtil ( tree , mid + 1 , se , qs , qe"}
{"value":"] \\n let MAX = 1000 ; function countWays ( s , dp , ind , prev , Str ) { if ( ind == s . length ) return 1 ; if ( dp [ ind ] [ prev ] != - 1 ) return dp [ ind ] [ prev ] ; let ans = 0 ; for ( let i = prev + 1 ; i < Str . length ; i ++ ) { if ( s [ ind ] == Str [ i ] ) ans += countWays ( s , dp , ind + 1 , i , Str ) ; } return dp [ ind ] [ prev ] = ans ; } function preprocess ( Str ) { let n = Str . length ; let dp = new Array ( MAX ) ; for ( let i = 0 ; i < MAX ; i ++ ) { dp [ i ] = new Array ( n + 1 ) ; for ( let j = 0 ; j < n + 1 ; j ++ ) { dp [ i ] [ j ] = - 1 ; } } for ( let i = 0 ; i < n ; i ++ ) dp [ Str [ i ] . charCodeAt ( 0 ) - ' '"}
{"value":"] \\n let MAX = 1000000000 ; let dp = new Array ( MAX ) ; for ( let i = 0 ; i < MAX ; i ++ ) { dp [ i ] = new Array ( 10 ) ; for ( let j = 0 ; j < 10 ; j ++ ) { dp [ i ] [ j ] = new Array ( 2 ) ; for ( let k = 0 ; k < 2 ; k ++ ) { dp [ i ] [ j ] [ k ] = new Array ( 2 ) ; for ( let l = 0 ; l < 2 ; l ++ ) { dp [ i ] [ j ] [ k ] [ l ] = new Array ( 2 ) ; for ( let m = 0 ; m < 2 ; m ++ ) { dp [ i ] [ j ] [ k ] [ l ] [ m ] = new Array ( 2 ) ; for ( let n = 0 ; n < 2 ; n ++ ) { dp [ i ] [ j ] [ k ] [ l ] [ m ] [ n ] = new Array ( 2 ) ; for ( let"}
{"value":"] \\n let N = 5 ; function countSubsequences ( arr , n ) { let countEVEN = new Array ( N ) ; let countODD = new Array ( N ) ; countEVEN [ 0 ] = 0 ; countODD [ 0 ] = 0 ; for ( let i = 1 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) countEVEN [ i ] = countEVEN [ i - 1 ] + countODD [ i - 1 ] ; else countODD [ i ] = countEVEN [ i - 1 ] + countODD [ i - 1 ] ; } document . write ( \" \" + countEVEN [ n - 1 ] + \" \" ) ; document . write ( \" \" + countODD [ n - 1 ] ) ; } let arr = [ 1 , 2 , 3 , 4 , 5 ] ; let n = arr . length ; countSubsequences ( arr , n ) ; 1 2 3 4 5 [\/INST] \\n let arr = [ 2 , 4"}
{"value":"] \\n let MAX = 1000 ; let dp = new Array ( MAX ) ; for ( let i = 0 ; i < MAX ; i ++ ) { dp [ i ] = new Array ( MAX ) ; for ( let j = 0 ; j < MAX ; j ++ ) { dp [ i ] [ j ] = new Array ( 3 ) ; for ( let k = 0 ; k < 3 ; k ++ ) { dp [ i ] [ j ] [ k ] = 0 ; } } } let w1_r = 0 ; let w2_r = 0 ; let i = 0 ; function knapSack ( arr , n , w1 , w2 ) { if ( w1_r < 0 w2_r < 0 ) return 0 ; let ans1 = 0 , ans2 = 0 , ans3 = 0 ; if ( w1_r >= arr [ i ] [ 0 ] && w2_r >= arr [ i ] [ 1 ] ) { ans1 = arr [ i ] [ 2 ] + knapSack ( arr , n , w1_r - arr"}
{"value":"] \\n let N = 3 ; let M = 3 ; function prefixCount ( arr , n , m ) { let count = new Array ( n ) ; count . fill ( 0 ) ; for ( let i = n - 1 ; i >= 0 ; i -- ) { for ( let j = m - 1 ; j >= 0 ; j -- ) { if ( arr [ i ] [ j ] == 1 ) count [ i ] ++ ; } } return count ; } function countSubmatrix ( prefixCount , n ) { let ans = 0 ; let stack = [ ] ; for ( let i = 0 ; i < n ; i ++ ) { let cnt = 0 ; while ( stack . length != 0 && stack [ stack . length - 1 ] [ 0 ] > prefixCount [ i ] [ stack [ stack . length - 1 ] [ 1 ] ] ) { stack . pop ( ) ; } stack . push ( [ prefixCount [ i ] [ 0 ] , i ] ) ; } for ( let i = 0 ; i < n ; i ++ ) { if ( stack . length != 0 ) { cnt ="}
{"value":"] \\n function countWays ( n ) { let noOfWays = new Array ( n + 1 ) ; noOfWays [ 0 ] = 1 ; noOfWays [ 1 ] = 1 ; noOfWays [ 2 ] = 2 ; for ( let i = 3 ; i <= n ; i ++ ) { let w1 = noOfWays [ i - 1 ] ; let w2 = noOfWays [ i - 2 ] ; noOfWays [ i ] = w1 + w2 ; noOfWays [ i ] += noOfWays [ i - 3 ] ; } return noOfWays [ n ] ; } let n = 10 ; document . write ( countWays ( n ) ) ; 3 ; 3"}
{"value":"] var N = 5 ; var M = 5 ; var ans = 0 ; function dfs ( mat , i , j , m , n , visited , cnt , path ) { if ( i < 0 i >= m j < 0 j >= n visited [ i ] [ j ] == true path == - 1 || cnt > ans ) return ; visited [ i ] [ j ] = true ; path = Math . max ( path , mat [ i ] [ j ] ) ; if ( i == m - 1 && j == n - 1 ) { ans = Math . max ( ans , cnt ) ; return ; } dfs ( mat , i + 1 , j , m , n , visited , cnt + 1 , path ) ; dfs ( mat , i , j + 1 , m , n , visited , cnt + 1 , path ) ; dfs ( mat , i + 1 , j + 1 , m , n , visited , cnt + 1 , path ) ; } function findPath ( mat ) { var visited = Array . from ( Array ( M ) , ( ) => Array ( N ) . fill ( false ) ) ;"}
{"value":"] function maxSetSizeSum ( set , n , sum ) { let subset = new Array ( sum + 1 ) ; for ( let i = 0 ; i < subset . length ; i ++ ) { subset [ i ] = new Array ( n + 1 ) ; for ( let j = 0 ; j < subset . length ; j ++ ) { subset [ i ] [ j ] = false ; } } for ( let i = 0 ; i <= sum ; i ++ ) subset [ i ] [ 0 ] = false ; for ( let i = 0 ; i <= n ; i ++ ) subset [ 0 ] [ i ] = true ; for ( let i = 1 ; i <= sum ; i ++ ) { for ( let j = 1 ; j <= n ; j ++ ) { if ( i - set [ j - 1 ] >= 0 ) subset [ i ] [ j ] = subset [ i - set [ j - 1 ] ] [ j - 1 ] subset [ i ] [ j ] = subset [ i ] [ j ] || subset [ i ] [ j - 1 ] ; } } if ( subset [ sum ] [ n ]"}
{"value":"] \\n let len1 = 10 , len2 = 10 ; function lcs ( i , j , dp ) { if ( i == len1 j == len2 ) return 0 ; if ( dp [ i ] [ j ] != - 1 ) return dp [ i ] [ j ] ; let res = 0 ; if ( str1 [ i ] == str2 [ j ] ) res = lcs ( i + 1 , j + 1 , dp ) + 1 ; else res = Math . max ( lcs ( i , j + 1 , dp ) , lcs ( i + 1 , j , dp ) ) ; dp [ i ] [ j ] = res ; return res ; } function printLCS ( str1 , str2 , lcslen , data , i , j , dp ) { if ( lcslen == 0 ) return ; if ( i == len1 j == len2 ) { if ( lcslen == 0 ) return ; else { for ( let k = 0 ; k < lcslen ; k ++ ) document . write ( data [ k ] ) ; document . write ( \" \" ) ;"}
{"value":"] \\n function isMajority ( arr , n ) { var l = ( n % 2 == 0 ) ? n \/ 2 : parseInt ( ( n + 1 ) \/ 2 ) ; var i = 0 ; while ( i < n && arr [ i ] != arr [ l ] ) i ++ ; if ( i < n && arr [ i ] == arr [ l ] ) return true ; return false ; } var arr = [ 1 , 2 , 2 , 2 , 2 , 3 , 3 , 4 , 5 , 5 , 5 ] ; var n = arr . length ; if ( isMajority ( arr , n ) ) document . write ( \" \" + arr [ l ] ) ; else document . write ( \" \" ) ; 1 , 2 , 2 , 2 , 2 , 3 , 3 , 4 , 5 , 5 , 5 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; "}
{"value":"] function binarySearch ( arr , low , high , x ) { while ( low <= high ) { var mid = low + parseInt ( ( high - low ) \/ 2 ) ; if ( arr [ mid ] == x ) { if ( mid == 0 mid > 0 && arr [ mid - 1 ] < x ) return mid ; high = mid - 1 ; } else low = mid + 1 ; } return - 1 ; } function isMajority ( arr , n , x ) { var index = binarySearch ( arr , 0 , n - 1 , x ) ; if ( index == - 1 ) return false ; var count = 0 ; for ( i = index ; i < n ; i ++ ) { if ( arr [ i ] == x ) count ++ ; else count -- ; if ( count == 0 ) break ; } return ( count > 0 && ( n - i ) > count ) ; } var arr = [ 2 , 2 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 5 , 5 ] ; var x = 3 ; var n = arr . length"}
{"value":"] \\n function isMajority ( arr , n ) { let mid = parseInt ( n \/ 2 ) ; if ( arr [ mid ] >= parseInt ( n \/ 3 ) ) return true ; return false ; } let arr = [ 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 ] ; let n = arr . length ; if ( isMajority ( arr , n ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ; 3"}
{"value":" function cutRod ( price , n ) { let val = new Array ( n + 1 ) ; val [ 0 ] = 0 ; for ( let i = 1 ; i <= n ; i ++ ) { for ( let j = 0 ; j < i ; j ++ ) val [ i ] = Math . max ( val [ i ] , price [ j ] + val [ i - j ] ) ; } return val [ n ] ; } let price = [ 1 , 5 , 8 , 9 , 10 , 17 , 17 , 17 , 20 ] ; let n = price . length ; document . write ( \" \" + cutRod ( price , n ) ) ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ;"}
{"value":"] \\n let max_len = 100 ; let dp = new Array ( max_len ) ; for ( let i = 0 ; i < max_len ; i ++ ) { dp [ i ] = new Array ( 2 ) ; for ( let j = 0 ; j < 2 ; j ++ ) { dp [ i ] [ j ] = 0 ; } } function cutRod ( price , len , n ) { if ( len == 0 price == 0 ) return 0 ; if ( len <= max_len ) { if ( dp [ len ] [ 0 ] == - 1 ) { dp [ len ] [ 0 ] = cutRod ( price , len - 1 , n ) ; for ( let i = 1 ; i <= n ; i ++ ) { dp [ len ] [ 0 ] = Math . max ( dp [ len ] [ 0 ] , price [ i ] + cutRod ( price , len - i , n ) ) ; } } return dp [ len ] [ 0 ] ; } else { if ( dp [ len ] [ 1 ] == - 1 ) { dp [ len ] ["}
{"value":"] \\n function canConvert ( arr , target , n , i ) { let max = arr [ 0 ] ; let index = 0 ; for ( let j = 0 ; j < n ; j ++ ) { if ( target [ j ] > max ) { max = target [ j ] ; index = j ; } } if ( max == 1 ) return true ; for ( let j = 0 ; j < n ; j ++ ) { if ( j != index ) { if ( target [ j ] > max ) { max = target [ j ] ; index = j ; } } } if ( max <= 0 ) return false ; return canConvert ( arr , target , n , i + 1 ) ; } let arr = [ 1 , 2 , 3 , 4 , 5 ] ; let target = [ 2 , 4 , 5 , 6 , 7 ] ; let n = arr . length ; let m = target . length ; if ( n != m ) document . write ( \" \" ) ; else if ( canConvert ( arr , target , 0 , 0 ) ) document . write ( \" \" ) ; else document ."}
{"value":"] \\n function binomialCoeff ( n , k ) { let res = 1 ; for ( let i = 1 ; i <= k ; i ++ ) { res *= n - i + 1 ; res = Math . floor ( res \/ i ) ; } return res ; } let n = 3 , k = 2 ; document . write ( binomialCoeff ( n , k ) + \" \" ) ; n = 4 ; k = 3 ; document . write ( binomialCoeff ( n , k ) ) ; 2 ; 6 ; 4 ; 4 ; 1 ; 1 ; 6 ; 10 ; 4 ; 4 ; 6 ; 10 ; 4 ; 4 ; 6 ; 10 ; 4 ; 4 ; 6 ; 10 ; 4 ; 4 ; 6 ; 10 ; 4 ; 4 ; 6 ; 10 ; 4 ; 4 ; 6 ; 10 ; 4 ; 4 ; 6 ; 10 ; 4 ; 4 ; 6 ; 10 ; "}
{"value":"] \\n function canObtain ( N ) { var count = 0 ; while ( N % 10 == 0 ) { count ++ ; N = parseInt ( N \/ 10 ) ; } if ( N == 1 ) { document . write ( \" \" ) ; return ; } if ( N % 2 == 0 ) { document . write ( \" \" ) ; return ; } else { document . write ( \" \" ) ; } } var N = 20 ; canObtain ( N ) ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ; 10 ;"}
{"value":"] \\n function nthTerm ( N ) { return parseInt ( ( N * ( N + 1 ) ) \/ 2 ) ; } let N = 3 ; document . write ( nthTerm ( N ) ) ; 3 ; 0 ; 6 ; 10 ; 15 ; 21 ; 28 ; 36 ; 45 ; 55 ; 66 ; 78 ; 91 ; 105 ; 120 ; 136 ; 153 ; 171 ; 190 ; 210 ; 231 ; 253 ; 276 ; 300 ; 325 ; 351 ; 378 ; 406 ; 435 ; 465 ; 496 ; 528 ; 561 ; 595 ; 630 ; 666 ; 703 ; 741 ; 780 ; 820 ; 861 ; 903 ; 946 ; 990 ;"}
{"value":"] \\n function reverse ( num ) { let rev = 0 ; while ( num > 0 ) { rev = rev * 10 + num % 10 ; num = parseInt ( num \/ 10 ) ; } return rev ; } function sumOfReverseDivisors ( num ) { let sum = 0 ; for ( let i = 1 ; i <= Math . sqrt ( num ) ; i ++ ) { if ( num % i == 0 ) { if ( i == parseInt ( num \/ i ) ) { sum = sum + i ; } else { sum = sum + i + parseInt ( num \/ i ) ; } } } sum = sum + 1 ; return sum ; } function isAntiPerfect ( N ) { let sum = sumOfReverseDivisors ( N ) ; return ( sum == N ) ; } let N = 10 ; if ( isAntiPerfect ( N ) ) { document . write ( \" \" ) ; } else { document . write ( \" \" ) ; } 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 1"}
{"value":"] \\n function printSeries ( n ) { let i , j ; for ( i = 1 ; i <= n ; i ++ ) { j = i * i ; document . write ( i + \" \" + j + \" \" ) ; } } let n = 5 ; printSeries ( n ) ; 3 ; 4 ; 8 ; 15 ; 27 [\/INST] \\n 3 ; 4 ; 8 ; 15 ; 27 [\/INST] \\n 3 ; 4 ; 8 ; 15 ; 27 [\/INST] \\n 3 ; 4 ; 8 ; 15 ; 27 [\/INST] \\n 3 ; 4 ; 8 ; 15 ; 27 [\/INST] \\n 3 ; 4 ; 8 ; 15 ; 27 [\/INST] \\n 3 ; 4 ; 8 ; 15 ; 27 [\/INST] \\n 3 ; 4 ; 8 ; 15 ; 27 [\/INST] \\n 3 ; 4 ; 8 ; 1"}
{"value":"] \\n function diameter ( N ) { let L = Math . floor ( Math . log ( N ) \/ Math . log ( 2 ) ) ; let H = L + 1 ; if ( N == 1 ) { return 0 ; } if ( N == 2 ) { return 1 ; } if ( N == 3 ) { return 2 ; } if ( L == 0 ) { return 1 ; } if ( L == 1 ) { return 2 ; } if ( L == 2 ) { return 3 ; } if ( L == 3 ) { return 4 ; } if ( L == 4 ) { return 5 ; } if ( L == 5 ) { return 6 ; } if ( L == 6 ) { return 7 ; } if ( L == 7 ) { return 8 ; } if ( L == 8 ) { return 9 ; } if ( L == 9 ) { return 10 ; } if ( L == 10 ) { return 11 ; } if ( L == 11 ) { return 12 ; } if ( L == 12 ) { return 1"}
{"value":"] \\n function findLarger ( a , b , c , d ) { var ans1 = Math . pow ( a , b ) ; var ans2 = Math . pow ( c , d ) ; var ans3 = b * Math . log ( a ) ; var ans4 = d * Math . log ( c ) ; if ( ans3 > ans4 ) return \" \" ; else if ( ans3 < ans4 ) return \" \" ; else return \" \" ; } var a = 2 , b = 5 , c = 3 , d = 4 ; document . write ( findLarger ( a , b , c , d ) ) ; 12"}
{"value":"] \\n let MAX = 1000000 ; let prime = new Array ( MAX + 1 ) ; function sieveOfEratosthenes ( ) { prime [ 0 ] = prime [ 1 ] = 1 ; for ( let i = 2 ; i <= MAX ; i ++ ) { prime [ i ] = 1 ; } for ( let i = 2 ; i <= MAX ; i ++ ) { if ( prime [ i ] == 1 ) { for ( let j = 2 * i ; j <= MAX ; j += i ) { prime [ j ] = 0 ; } } } } function isPrimeDigit ( n ) { let flag = 1 ; while ( n > 0 ) { let digit = n % 10 ; if ( digit == 1 digit == 3 digit == 5 digit == 7 ) { flag = 0 ; } n = parseInt ( n \/ 10 ) ; } return flag ; } function sumOfPrimeNumbers ( N ) { let sum = 0 ; sieveOfEratosthenes ( ) ; for ( let i = 2 ; i <= N"}
{"value":"] \\n function countPrimes ( arr , n ) { let max_val = Math . max ( ... arr ) ; let prime = new Array ( max_val + 1 ) ; prime . fill ( true ) ; prime [ 0 ] = false ; prime [ 1 ] = false ; for ( let p = 2 ; p * p <= max_val ; p ++ ) { if ( prime [ p ] == true ) { for ( let i = p * 2 ; i <= max_val ; i += p ) prime [ i ] = false ; } } let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) count ++ ; } return count ; } function prefixArray ( arr , n ) { let pre = new Array ( n ) ; pre [ 0 ] = arr [ 0 ] ; for ( let i = 1 ; i < n ; i ++ ) { pre [ i ] = pre [ i - 1 ] + arr [ i ] ; } return pre ; } let arr = [ 1 , 2 , 3 , 4 , 5 ] ; let"}
{"value":"] function getValue ( x , n , y ) { var value = 0 ; if ( x >= ( y * n ) \/ 100 ) return 0 ; else value = ( y * n ) \/ 100 - x ; return value ; } var n = 100 , x = 75 , y = 60 ; document . write ( getValue ( x , n , y ) ) ; 3 ; 3"}
{"value":"] \\n function isPrime ( n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 n % 3 == 0 ) return false ; for ( let i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; } function isFactorialPrime ( n ) { if ( ! isPrime ( n ) ) return false ; let fact = 1 ; for ( let i = 2 ; i <= n ; i ++ ) fact = fact * i ; return ( fact == n ) ; } let n = 24 ; if ( isFactorialPrime ( n ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ; 10 ; 12 ; 24 ; 25 ; 100 ; 101 ; 102 ; 103 ; 104 ; 105 ; 106 ; 107 ; 10"}
{"value":"] \\n let n = 5 ; let fac1 = 1 , fac2 = 1 ; for ( let i = 1 ; i <= n - 1 ; i ++ ) fac1 *= i ; for ( let i = 1 ; i <= n ; i ++ ) fac2 *= i ; let total = fac1 * fac2 ; document . write ( total ) ; 3 ; 15 ; 105 ; 945 ; 8316 ; 77000 ; 727600 ; 6936000 ; 66570000 [\/INST] \\n 4 ; 24 ; 144 ; 1008 ; 8400 ; 75600 ; 693600 ; 6383200 ; 60480000 [\/INST] \\n 5 ; 120 ; 720 ; 5040 ; 40320 ; 362880 ; 3360000 ; 3"}
{"value":"] \\n let MAX = 10000000 ; let prime = new Array ( MAX + 1 ) ; function SieveOfEratosthenes ( ) { for ( let i = 0 ; i < MAX + 1 ; i ++ ) { prime [ i ] = true ; } for ( let p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( let i = p * 2 ; i <= MAX ; i += p ) prime [ i ] = false ; } } let i ; for ( i = 2 ; i <= MAX ; i ++ ) { if ( prime [ i ] ) { arr . push ( i ) ; } } } function isEuclid ( n ) { for ( let i = 0 ; i < arr . length ; i ++ ) { let x = arr [ i ] ; if ( x * ( x + 1 ) == n ) { return true ; } } return false ; } let arr = [ ] ; SieveOfEratosthenes ( ) ; let n = 12 ; if ( isEuclid ( n )"}
{"value":" \\n function nextCube ( n ) { return Math . pow ( Math . ceil ( Math . sqrt ( n ) ) , 3 ) ; } let n = 25 ; document . write ( nextCube ( n ) ) ; 3 ; 3 ; 27 ; 27 ; 125 ; 125 ; 216 ; 216 ; 343 ; 343 ; 512 ; 512 ; 729 ; 729 ; 1000 ; 1000 ; 1331 ; 1331 ; 1729 ; 1729 ; 2197 ; 2197 ; 2772 ; 2772 ; 3435 ; 3435 ; 4200 ; 4200 ; 5061 ; 5061 ; 6024 ; 6024 ; 7103 ; 7103 ; 8296 ; 8296 ; 95"}
{"value":"] \\n function isPrime ( n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 n % 3 == 0 ) return false ; for ( var i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; } function primeDivisorsSum ( n ) { var sum = 0 ; for ( var i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( i == n \/ i ) sum += i ; else sum += ( i + n \/ i ) ; } } return sum ; } var n = 12 ; document . write ( primeDivisorsSum ( n ) ) ; 2 ; 3 ; 1 ; 2 ; 2 ; 3 ; 3 ; 2 ; 6 ; 2 ; 6 ; 3 ; 4 ; 2 ; 4 ; 2 ; 8 ; 2 ;"}
{"value":"] \\n function position ( n ) { if ( n == 2 ) return ( pos * 2 + 1 ) ; if ( n == 3 ) return ( pos * 2 + 2 ) ; if ( n == 5 ) return ( pos * 2 + 3 ) ; if ( n == 7 ) return ( pos * 2 + 4 ) ; } let pos = 1 ; document . write ( position ( 2 ) + \" \" ) ; document . write ( position ( 3 ) + \" \" ) ; document . write ( position ( 5 ) + \" \" ) ; document . write ( position ( 7 ) + \" \" ) ; 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 "}
{"value":"] \\n function isTripletPossible ( L , R ) { if ( R - L < 3 ) { document . write ( \" \" ) ; return ; } if ( R - L == 3 ) { document . write ( \" \" ) ; return ; } if ( R - L >= 3 ) { for ( let i = 2 ; i <= R ; i += 2 ) { if ( R - i >= 2 ) { document . write ( i + \" \" + ( i + 1 ) + \" \" + ( i + 2 ) + \" \" ) ; return ; } } for ( let i = 1 ; i <= R ; i += 2 ) { if ( R - i >= 2 ) { document . write ( i + \" \" + ( i + 1 ) + \" \" + ( i + 2 ) + \" \" ) ; return ; } } } document . write ( \" \" ) ; } let L = 2 , R = 10 ; isTripletPossible ( L , R ) ; L = 23 ; R = 46 ; isTripletPossible ( L , R ) ; 1"}
{"value":"] \\n let n = 5 , digit = 4 ; function digitNumber ( n , digit ) { if ( n == 0 ) return 1 ; if ( n == 1 ) return digit - 1 ; if ( n % 2 == 1 ) return ( digit - 1 ) * digitNumber ( n - 1 , digit ) + digitNumber ( n - 2 , digit ) ; else return ( digit - 1 ) * digitNumber ( n - 2 , digit ) + digitNumber ( n - 1 , digit ) ; } document . write ( digitNumber ( n , digit ) ) ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ; 28 ; 29 ; 30 ; 31 ; 32 ; 33 ; 3"}
{"value":"] function isPrime ( n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 n % 3 == 0 ) return false ; for ( let i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; } function isEmirp ( n ) { if ( isPrime ( n ) ) { let rev = 0 ; let temp = n ; while ( temp > 0 ) { rev = ( rev * 10 ) + ( temp % 10 ) ; temp = parseInt ( temp \/ 10 , 10 ) ; } if ( isPrime ( rev ) ) return true ; } return false ; } let n = 11 ; if ( isEmirp ( n ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ; 11 ; 2 ; 3 ; 5 ; 7 ; 13 ; 17 ; 19 ; 2"}
{"value":" let pi = 3.14159265358979323846 ; function RadToDeg ( rad ) { let deg = rad * 180 \/ pi ; return deg ; } let rad = 30 ; document . write ( \" \" + rad + \" \" + RadToDeg ( rad ) ) ; 3 ; 165 .57078744 [\/INST] \\n let rad = 30 ; document . write ( \" \" + rad + \" \" + RadToDeg ( rad ) ) ; 3 ; 165 .57078744 ; 10 ; 57 .2957795130823208768 ; 10 ; 180 .000000000000000000 [\/INST] 10 ; 180 .000000000000000000 ; 10 ; 57 .295779513"}
{"value":"] \\n function findSum ( n ) { return ( n * ( n + 1 ) \/ 2 ) ; } function findTrace ( a , b , m , n ) { let trace = 0 ; for ( let i = 1 ; i <= m ; i ++ ) trace += a [ i - 1 ] [ 0 ] + b [ i - 1 ] [ 0 ] ; for ( let i = 1 ; i <= m ; i ++ ) trace += findSum ( a [ i - 1 ] [ 1 ] - a [ i - 1 ] [ 0 ] ) + findSum ( b [ i - 1 ] [ 1 ] - b [ i - 1 ] [ 0 ] ) ; return trace ; } let a = [ [ 1 , 10 ] , [ 2 , 20 ] , [ 3 , 30 ] ] ; let b = [ [ 1 , 10 ] , [ 2 , 20 ] , [ 3 , 30 ] ] ; let m = 3 ; let n = 3 ; document . write ( findTrace ( a , b , m ,"}
{"value":"] \\n function area ( a , b , k ) { let ans1 = a * b ; let ans2 = ( a * b ) \/ k ; document . write ( Math . max ( ans1 , ans2 ) ) ; } let a = 2 , b = 3 , k = 3 ; area ( a , b , k ) ; 3 ; 2 ; 3 ; 3 ; 3 ; 2 ; 3 ; 3 ; 3 ; 3 ; 2 ; 3 ; 3 ; 3 ; 3 ; 2 ; 3 ; 3 ; 3 ; 3 ; 2 ; 3 ; 3 ; 3 ; 3 ; 2 ; 3 ; 3 ; 3 ; 3 ; 2 ; 3 ; 3 ; 3 ; 3 ; 2 ; 3 ; 3 ; 3 ; 3 ; 2 ; 3 ; 3 ; 3 ; 3 ; 2 ; 3 ; 3 ; 3 ; 3 ; 2 ; 3 ; 3 ; 3 ; 3 ; 2 ; 3 ; 3 ; 3"}
{"value":" function to find the area ; Driver program [\/INST] \\n function area ( a ) { document . write ( \" \" + a * a ) ; } var a = 5 ; area ( a ) ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ 0 ; 1 \/ "}
{"value":"] \\n function countWays ( N ) { let ans = 0 ; for ( let L = 1 ; L <= Math . sqrt ( N ) ; L ++ ) { if ( N - L * ( L + 1 ) >= 0 ) ans += ( N - L * ( L + 1 ) ) \/ ( L + 1 ) ; } return ans ; } let N = 10 ; document . write ( countWays ( N ) ) ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ; 28 ; 29 ; 30 ; 31 ; 32 ; 33 ; 34 ; 35 ; 36 ; 37 ; 38 ; 39 ; 40 ; 41 ; 4"}
{"value":"] \\n function isAutomorphic ( N ) { let square = N * N ; let x = N ; let y = square ; while ( x != 0 ) { if ( x % 10 != y % 10 ) return false ; x = Math . floor ( x \/ 10 ) ; y = Math . floor ( y \/ 10 ) ; } return true ; } let N = 256 ; if ( isAutomorphic ( N ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ; 256 . toFixed ( 6 ) ; 16 ; 16 . toFixed ( 6 ) ; 16 ; 256 . toFixed ( 6 ) ; 16 ; 16 . toFixed ( 6 ) ; 16 ; 256 . toFixed ( 6 ) ; 16 ; 16 . toFixed ( 6 ) ; 16 ; 256 . toFixed ( 6 ) ; 16 ; 16 . toFixed ( 6 ) ; 16 ; 256 . toFixed ( "}
{"value":"] \\n function maxPrimeFactors ( n ) { let prime = new Array ( n + 1 ) ; for ( let i = 0 ; i < n + 1 ; i ++ ) { prime [ i ] = true ; } prime [ 0 ] = prime [ 1 ] = false ; for ( let i = 2 ; i * i <= n ; i ++ ) { if ( prime [ i ] == true ) { for ( let j = i * i ; j <= n ; j += i ) prime [ j ] = false ; } } let max = 0 ; for ( let i = 2 ; i <= n ; i ++ ) if ( prime [ i ] ) max = i ; return max ; } let n = 1000 ; document . write ( maxPrimeFactors ( n ) ) ; 12"}
{"value":"] \\n function highestPowerOf2 ( n ) { let x = n & ( n + 1 ) ; let count = 0 ; while ( x != 0 ) { x = x >> 1 ; count ++ ; } return ( 1 << ( count - 1 ) ) ; } let n = 12 ; document . write ( highestPowerOf2 ( n ) ) ; 12"}
{"value":"] \\n function properDivisorsSum ( num ) { let sum = 0 ; for ( let i = 1 ; i < num ; i ++ ) { if ( num % i == 0 ) { if ( num \/ i == i ) sum += i ; else sum += ( i + num \/ i ) ; } } sum += 1 ; return sum ; } let num = 12 ; document . write ( \" \" + num + \" \" + properDivisorsSum ( num ) ) ; 3 num = 10 ; document . write ( \" \" + num + \" \" + properDivisorsSum ( num ) ) ; 3 num = 16 ; document . write ( \" \" + num + \" \" + properDivisorsSum ( num ) ) ; 3 20"}
{"value":"] \\n function power ( x , y , p ) { let res = 1 ; x = x % p ; while ( y > 0 ) { if ( ( y & 1 ) != 0 ) res = ( res * x ) % p ; y = y >> 1 ; x = ( x * x ) % p ; } return res ; function check ( n , p ) { if ( power ( n , ( p + 1 ) \/ 4 , p ) % p == 1 ) return true ; if ( power ( n , ( p + 1 ) \/ 4 , p ) % p == ( p - 1 ) ) return true ; return false ; } function findSqrt ( n , p ) { if ( check ( n , p ) ) document . write ( \" \" + \" \" + \" \" ) ; else document . write ( \" \" + \" \" + \" \" ) ; } let n = 5 , p = 13 ; findSqrt ( n , p ) ; 3 n = 2 , p = 13 ; findSqrt ( n , p ) ; 1 [\/INST] \\n "}
{"value":"] \\n function power ( x , y , p ) { var res = 1 ; x = x % p ; while ( y > 0 ) { if ( y & 1 ) res = ( res * x ) % p ; y = y >> 1 ; x = ( x * x ) % p ; } return res ; } function isProbablePrime ( n , k ) { var d = n - 1 ; while ( d % 2 == 0 ) d = Math . floor ( d \/ 2 ) ; var a = Math . floor ( Math . random ( ) * ( n - 3 ) + 3 ) ; var x = power ( a , d , n ) ; if ( x != 1 && x != n - 1 ) { for ( i = 0 ; i < k - 1 ; i ++ ) { if ( x == n - 1 ) return true ; x = power ( x , 2 ) ; } } return false ; } function isPrime ( n , k ) { if ( n <= 3 ) return true ; if ( n % 2 == 0 n % 3 == 0 ) return false ;"}
{"value":"] \\n function findLength ( x ) { let len = 0 ; while ( x > 0 ) { x = x & ( x - 1 ) ; len ++ ; } return len ; } let x = 5 ; document . write ( findLength ( x ) ) ; 1234567890 [\/INST] \\n 1234567890 [\/INST] \\n 1234567890 [\/INST] \\n 1234567890 [\/INST] \\n 1234567890 [\/INST] \\n 1234567890 [\/INST] \\n 1234567890 [\/INST] \\n 1234567890 [\/INST] \\n 1234567890 [\/INST] \\n 1234567890 [\/INST] \\n 1234567890 [\/INST] \\n 123"}
{"value":"] \\n function subtract ( x , y ) { let carry = 0 ; let res = 0 ; while ( x != 0 y != 0 ) { let borrow = ( ~ ( x & y ) ) & ( x | y ) ; res = res << 1 ; res = res | ( x ^ y ) ; carry = ( x & y ) << 1 ; x = res ; y = carry ; } return res ; } let x = 10 , y = 5 ; document . write ( subtract ( x , y ) ) ; 1 = 1010 ; 5 = 101 ; 1 - 5 = 000101 ; 000101 = 5 ; 10 = 1010 ; 5 = 101 ; 10 - 5 = 0101 ; 0101 = 5 ; 10 = 1010 ; 5 = 101 ; 10 - 5 = 0101 ; 0101 = 5 ; 10 = 1010"}
{"value":"] \\n function subtract ( x , y ) { if ( y == 0 ) return x ; return subtract ( x - y , y ) ; } let x = 10 , y = 5 ; document . write ( subtract ( x , y ) ) ; 3 ; 10 ; 15 ; 10 ; 5 ; 0 ; 5 ; 0 ; 10 ; 5 ; 5 ; 0 ; 10 ; 10 ; 0 ; 10 ; 15 ; 0 ; 10 ; 15 ; 0 ; 10 ; 10 ; 0 ; 10 ; 15 ; 0 ; 10 ; 10 ; 0 ; 10 ; 15 ; 0 ; 10 ; 10 ; 0 ; 10 ; 15 ; 0 ; 10 ; 10 ; 0 ; 10 ; 15 ; 0 ; 10 ; 10 ; 0 ; 10 ; 15 ; 0 ; 10 ; 10 ; "}
{"value":"] \\n function addEdge ( tree , u , v ) { tree [ u ] . push ( v ) ; } function dfs ( tree , u , K , ans ) { ans [ u ] . push ( u ) ; for ( let v of tree [ u ] ) { if ( ans [ v ] . length < K ) { ans [ v ] = ans [ u ] ; dfs ( tree , v , K , ans ) ; } else { for ( let i = 0 ; i < ans [ u ] . length ; i ++ ) { ans [ v ] . push ( ans [ u ] [ i ] ) ; } } } } function KthAncestor ( N , K , tree ) { let ans = new Array ( N ) ; for ( let i = 0 ; i < N ; i ++ ) { ans [ i ] = [ ] ; } for ( let i = 0 ; i < N - 1 ; i ++ ) { let u = tree [ i ] [ 0 ] ; let v = tree [ i ] [ 1 ] ; addEdge ( tree , u , v ) ; } for ( let i = 0 ; i < N ;"}
{"value":" function build ( arr , segment_tree , start , end , index ) { if ( start == end ) { segment_tree [ index ] = arr [ start ] ; return segment_tree [ index ] ; } let mid = parseInt ( ( start + end ) \/ 2 ) ; segment_tree [ index ] = build ( arr , segment_tree , start , mid , 2 * index + 1 ) + build ( arr , segment_tree , mid + 1 , end , 2 * index + 2 ) ; return segment_tree [ index ] ; } function push_down ( segment_tree , start , end , index ) { let mid = parseInt ( ( start + end ) \/ 2 ) ; segment_tree [ 2 * index + 1 ] += segment_tree [ index ] ; segment_tree [ 2 * index + 2 ] += segment_tree [ index ] ; segment_tree [ index ] = 0 ; } function update ( segment_tree , start , end , index , i , j , value ) { if ( i > end j < start ) { return segment_tree [ index ] ; } if ( i <= start && end <= j ) {"}
{"value":"] \\n function gcd ( a , b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } function findFinalLength ( arr , n ) { for ( let i = 0 ; i < n - 1 ; i ++ ) { for ( let j = i + 1 ; j < n ; j ++ ) { if ( gcd ( arr [ i ] , arr [ j ] ) == 1 ) { arr [ i ] = 1 ; arr [ j ] = 1 ; } } } let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != 1 ) { return false ; } count ++ ; } return count ; } let arr = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] ; let n = arr . length ; if ( findFinalLength ( arr , n ) > 0 ) { document . write ( findFinalLength ( arr , n ) ) ; } else { document . write ( - 1 ) ; } 2"}
{"value":"] \\n function countWays ( n ) { let count = 0 ; for ( let a = 1 ; a <= n ; a ++ ) { for ( let b = 1 ; b <= n ; b ++ ) { for ( let c = 1 ; c <= n ; c ++ ) { if ( a + b > c && a + c > b && b + c > a ) { count ++ ; } } } } return count ; } let n = 5 ; document . write ( countWays ( n ) ) ; 10 ; 30 ; 100 ; 200 ; 300 ; 400 ; 500 ; 600 ; 700 ; 800 ; 900 ; 1000 ; 1100 ; 1200 ; 1300 ; 1400 ; 1500 ; 1600 ; 1700 ; 1800 ; 1900 ; 2000 ; 2100 ; 2200 ; 2300 ;"}
{"value":"] \\n function countPairs ( arr , N ) { let count = 0 ; for ( let i = 0 ; i < N ; i ++ ) { for ( let j = 0 ; j < N ; j ++ ) { if ( arr [ i ] == j && i == j ) { count ++ ; } } } document . write ( count ) ; } let arr = [ 1 , 2 , 3 , 4 , 5 ] ; let N = arr . length ; countPairs ( arr , N ) ; 2 ; 3 ; 4 ; 5 ; 0 ; 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ; 28 ; 29 ; 30 ; 31 ; 32 ; 3"}
{"value":" let MAX = 1000000000 ; function maxFib ( arr , n ) { let hash = new Map ( ) ; for ( let i = 0 ; i < n ; i ++ ) { let curr = arr [ i ] ; let prev = curr - 1 ; let next = curr + 1 ; if ( hash . has ( prev ) ) { hash . set ( curr , hash . get ( prev ) + 1 ) ; } else if ( hash . has ( next ) ) { hash . set ( curr , hash . get ( next ) + 1 ) ; } else { hash . set ( curr , 1 ) ; } } let max = 0 ; for ( let i = 0 ; i < n ; i ++ ) { if ( hash . has ( arr [ i ] ) ) { max = Math . max ( max , hash . get ( arr [ i ] ) ) ; } } return max ; } let arr = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] ; let n = arr . length ; document . write ( max"}
{"value":"] \\n function countElements ( arr , n , k ) { arr . sort ( function ( a , b ) { return a - b ; } ) ; let sum = 0 ; let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; if ( sum > k ) { break ; } count ++ ; } return count ; } let arr = [ 1 , 2 , 3 , 4 ] ; let n = arr . length ; let k = 6 ; document . write ( countElements ( arr , n , k ) ) ; 2 ; 3 ; 4 ; 6 ; 6 ; 10 ; 12 ; 15 ; 18 ; 21 ; 24 ; 27 ; 30 ; 33 ; 36 ; 39 ; 42 ; 45 ; 48 ; 51 ; 54 ; 57 ; 60 ; 63 ; 66 ; 69 ; 72 ; 75 ; 78 ; 81 ; 84 ; 8"}
{"value":"] \\n function countType ( arr , n ) { let s = new Set ( ) ; for ( let i = 0 ; i < n ; i ++ ) { s . add ( arr [ i ] ) ; } return s . size ; } function maximumType ( arr , n ) { let x = Math . floor ( n \/ 2 ) ; let y = countType ( arr , n ) ; return Math . min ( x , y ) ; } let arr = [ 1 , 2 , 3 , 4 ] ; let N = arr . length ; document . write ( maximumType ( arr , N ) ) ; 3 ; 2 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; 3 ; 2 ; "}
{"value":"] \\n function diagonal ( a , theta ) { let d1 = 2 * a * Math . sin ( theta \/ 2 ) ; let d2 = 2 * a * Math . cos ( theta \/ 2 ) ; document . write ( \" \" + d1 . toFixed ( 6 ) + \" \" ) ; document . write ( \" \" + d2 . toFixed ( 6 ) + \" \" ) ; } let a = 5 , theta = 30 ; diagonal ( a , theta ) ; 2 ; 3 .862687 ; 4 .365357 [\/INST] \\n 30 5 [\/INST] 3"}
{"value":"] \\n function countSetBits ( n ) { let setBits = 0 ; while ( n > 0 ) { setBits += n & 1 ; n >>= 1 ; } return setBits ; } function countEvenOdd ( arr , n , k ) { let even = 0 , odd = 0 ; for ( let i = 0 ; i < n ; i ++ ) { let x = countSetBits ( arr [ i ] ) ; even += x ; odd += x ; } let y = countSetBits ( k ) ; if ( y & 1 ) { let temp = even ; even = odd ; odd = temp ; } document . write ( \" \" + even + \" \" + odd ) ; } let arr = [ 4 , 6 , 7 ] ; let K = 5 ; let N = arr . length ; countEvenOdd ( arr , N , K ) ; 3"}
{"value":"] \\n function countPairs ( n ) { return parseInt ( ( n + 1 ) \/ 2 ) ; } let n = 5 ; document . write ( countPairs ( n ) ) ; 10 ; 15 ; 21 ; 28 ; 36 ; 45 ; 55 ; 66 ; 78 ; 91 ; 105 ; 120 ; 136 ; 153 ; 171 ; 190 ; 210 ; 231 ; 253 ; 276 ; 300 ; 325 ; 351 ; 378 ; 406 ; 435 ; 465 ; 496 ; 528 ; 561 ; 595 ; 630 ; 666 ; 703 ; 741 ; 780 ; 820 ; 861 ; 903 ; 946 ; 990 ; 1035 ; 1081 ; "}
{"value":"] \\n function countTriplets ( arr , n ) { let cnt = 0 ; let freq = new Map ( ) ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < n ; j ++ ) { let a = arr [ i ] & arr [ j ] ; if ( freq . has ( a ) ) { freq . set ( a , freq . get ( a ) + 1 ) ; } else { freq . set ( a , 1 ) ; } } } for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < n ; j ++ ) { let a = arr [ i ] & arr [ j ] ; if ( freq . has ( a ) ) { if ( freq . get ( a ) > 1 ) { cnt += ( freq . get ( a ) - 1 ) ; } } } } return cnt ; } let arr = [ 1 , 2 , 3 , 4 , 5 , 6 ] ; let N = arr . length ; document . write ( countTri"}
{"value":"] \\n let noOfWays = new Array ( 1000000 ) ; function countWays ( n ) { noOfWays [ 0 ] = 1 ; noOfWays [ 1 ] = 2 ; for ( let i = 2 ; i < n + 1 ; i ++ ) { noOfWays [ i ] = noOfWays [ i - 1 ] + noOfWays [ i - 2 ] ; } return noOfWays [ n ] ; } let n = 3 ; document . write ( countWays ( n ) ) ; 3 ; 2 ; 1 ; 2 ; 2 ; 2 ; 1 ; 1 ; 1 ; 1 ; 2 ; 2 ; 1 ; 1 ; 1 ; 1 ; 2 ; 2 ; 1 ; 1 ; 1 ; 1 ; 2 ; 2 ; 1 ; 1 ; 1 ; 1 ; 2 ; 2 ; 1 ; 1 ; 1 ; 1 ; 2 ; 2 ; 1 ; 1 ; 1 ; 1 ;"}
{"value":"] \\n function printSpiral ( mat , m , n ) { let row = 0 , col = 0 ; let r = 1 , l = 0 , d = 1 , u = 0 ; let k = 0 ; let i = 0 , j = 0 ; let flag = 0 ; let size = m * n ; let flag1 = 0 ; let flag2 = 0 ; let flag3 = 0 ; let flag4 = 0 ; let flag5 = 0 ; let flag6 = 0 ; for ( let i = 0 ; i < m ; i ++ ) { for ( let j = 0 ; j < n ; j ++ ) { document . write ( mat [ i ] [ j ] + \" \" ) ; } document . write ( \" \" ) ; } } let m = 3 , n = 3 ; let mat = new Array ( m ) ; for ( let i = 0 ; i < m ; i ++ ) { mat [ i ] = new Array ( n ) ; } for ( let i = 0 ; i < m ; i ++ ) { for ( let j = 0 ; j <"}
{"value":"] \\n function findPlayer ( a , n ) { let c = 0 ; let v = [ ] ; for ( let i = 0 ; i < n ; i ++ ) { if ( a [ i ] == ' ' ) c ++ ; else { v . push ( c ) ; c = 0 ; } } if ( c > 0 ) v . push ( c ) ; let flag = true ; for ( let i = 0 ; i < v . length ; i ++ ) { if ( v [ i ] % 2 == 1 ) flag = false ; } if ( flag ) document . write ( \" \" ) ; else { let first = 0 , second = 0 ; for ( let i = 0 ; i < v . length ; i ++ ) { if ( v [ i ] > first ) { second = first ; first = v [ i ] ; } else if ( v [ i ] > second ) second = v [ i ] ; } if ( first == second ) document . write ( \" \" ) ; else document . write ( \" \" ) ; } } let str = \" \" ; let n = str . length ; findPlayer ( str , n )"}
{"value":"] function kPalindrome ( s , k ) { let m = new Map ( ) ; for ( let i = 0 ; i < s . length ; i ++ ) { if ( m . has ( s [ i ] ) ) m . set ( s [ i ] , m . get ( s [ i ] ) + 1 ) else m . set ( s [ i ] , 1 ) } if ( k == s . length ) return true ; let odd = 0 ; for ( let it of m . values ( ) ) { if ( it % 2 != 0 ) odd ++ ; } if ( odd > k ) return false ; return true ; } let s = \" \" ; let k = 2 ; if ( kPalindrome ( s , k ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ;"}
{"value":" function checkString ( s1 , s2 ) { s1 = s1 . toLowerCase ( ) ; s2 = s2 . toLowerCase ( ) ; return ( s1 == s2 ) ; } function sameOrNot ( s1 , s2 ) { if ( checkString ( s1 , s2 ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ; } let s1 = \" \" ; let s2 = \" \" ; sameOrNot ( s1 , s2 ) ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19 ; 20 ; 21 ; 22 ; 23 ; 24 ; 25 ; 26 ; 27 ; 28 ; 29 ; 30 ; 31 ; 32 ; 33 ; 34 ; 35 ; 36 ; 37 ; 38 ; 3"}
{"value":" function printStep ( s , n ) { var x = 0 ; var flag = false ; for ( var i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] == ' ' ) { if ( x == 0 ) { for ( var j = 0 ; j < n ; j ++ ) { document . write ( x + ' ' ) ; x ++ ; } } else if ( x == n - 1 ) { for ( var j = 0 ; j < n ; j ++ ) { document . write ( x + ' ' ) ; x -- ; } } else { document . write ( x + ' ' ) ; x += ( s [ i ] == ' ' ? 1 : - 1 ) ; } } } } var s = \" \" ; var n = 4 ; printStep ( s , n ) ; 3 ; 2 ; 1 ; 0 ; 1 ; 2 ; 3 ; 4 ; 3 ; 2 ; 1 [\/INST] \\n 3 ; 2 ; 1 ; 0 ; 1 ; 2 ; 3 ; 4 ; 3 ; "}
