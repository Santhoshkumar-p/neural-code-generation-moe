{"value":"] \\n def minimumSum ( arr , n ) : NEW_LINE INDENT mp = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] in mp : NEW_LINE INDENT mp [ arr [ i ] ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT mp [ arr [ i ] ] = 1 NEW_LINE DEDENT DEDENT sum = 0 NEW_LINE for it in mp : NEW_LINE INDENT sum += it * ( it + 1 ) \/ 2 NEW_LINE DEDENT min_sum = sum NEW_LINE for it in mp : NEW_LINE INDENT min_sum = min ( min_sum , sum - it * ( it + 1 ) \/ 2 ) NEW_LINE DEDENT return min_sum NEW_LINE DEDENT arr = [ 1 , 1 , 2 , 2 , 3 ] NEW_LINE n = len ( arr ) NEW_LINE print ( minimumSum ( arr , n ) ) NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 2 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3"}
{"value":"] def maxDiff ( arr , n ) : NEW_LINE INDENT ans = [ ] NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT prev = arr [ i ] NEW_LINE maxi = arr [ i ] NEW_LINE for j in range ( i + 1 , n ) : NEW_LINE INDENT maxi = max ( maxi , arr [ j ] ) NEW_LINE arr [ j ] = - 1 NEW_LINE maxi = max ( maxi , arr [ j ] ) NEW_LINE ans . append ( maxi - prev ) NEW_LINE prev = maxi NEW_LINE DEDENT DEDENT print ( max ( ans ) ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 , 5 ] NEW_LINE N = len ( arr ) NEW_LINE maxDiff ( arr , N ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE "}
{"value":"] def findSize ( N ) : NEW_LINE INDENT if ( N == 1 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT if ( N % 2 == 0 ) : NEW_LINE INDENT return findSize ( N \/\/ 2 ) + findSize ( N \/\/ 2 ) NEW_LINE DEDENT else : NEW_LINE INDENT return findSize ( N \/\/ 2 ) + 1 NEW_LINE DEDENT DEDENT def countOnes ( arr , L , R , N ) : NEW_LINE INDENT if ( N == 1 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT if ( N % 2 == 0 ) : NEW_LINE INDENT return findSize ( N \/\/ 2 ) NEW_LINE DEDENT else : NEW_LINE INDENT return findSize ( N \/\/ 2 ) + 1 NEW_LINE DEDENT DEDENT \/ * Driver Code * \/ NEW_LINE INDENT N = 3 NEW_LINE L = 2 NEW_LINE R = 3 NEW_LINE arr = [ 1 , 1 , 1 ] NEW_LINE print ( countOnes ( arr , L , R , N ) ) NEW_LINE N = 5 NEW_LINE L = 1 NEW_LINE R = 4 NEW_LINE arr = [ 1 , 1 , 1 , 1 , 1 ] NEW_LINE print ( countOnes ( arr , L , R , N ) ) NEW_LINE N = 10 NEW_LINE L = 3 NEW_LINE R = 9 NEW_LINE arr = [ 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 ] NEW_LINE print ( countOnes ( arr , L , R , N ) ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 1 NEW_LINE 1 NEW_"}
{"value":"T ] def isPrime ( n ) : NEW_LINE INDENT if ( n == 1 ) : NEW_LINE INDENT return False NEW_LINE DEDENT for i in range ( 2 , n ) : NEW_LINE INDENT if ( n % i == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def findPair ( n ) : NEW_LINE INDENT for i in range ( 2 , n + 1 ) : NEW_LINE INDENT if ( isPrime ( i ) ) : NEW_LINE INDENT a = n \/\/ i NEW_LINE b = n \/\/ i * ( n - 1 ) NEW_LINE print ( a , b ) NEW_LINE return NEW_LINE DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 12 NEW_LINE findPair ( n ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW"}
{"value":"] NEW_LINE def gcd ( a , b ) : NEW_LINE INDENT if ( b == 0 ) : NEW_LINE INDENT return a NEW_LINE DEDENT return gcd ( b , a % b ) NEW_LINE DEDENT def lcm ( a , b ) : NEW_LINE INDENT return ( a * b ) \/\/ gcd ( a , b ) NEW_LINE DEDENT def maxLCM ( n ) : NEW_LINE INDENT lcm = 1 NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT if ( n % i == 0 ) : NEW_LINE INDENT lcm = lcm ( lcm , i ) NEW_LINE DEDENT DEDENT return lcm NEW_LINE DEDENT def findLCM ( n , curr , prev , rep , ans ) : NEW_LINE INDENT if ( curr == n ) : NEW_LINE INDENT ans [ 0 ] += 1 NEW_LINE return NEW_LINE DEDENT for i in range ( prev , n + 1 ) : NEW_LINE INDENT curr += i NEW_LINE findLCM ( n , curr , i , rep , ans ) NEW_LINE curr -= i NEW_LINE DEDENT DEDENT def findLandau ( n ) : NEW_LINE INDENT ans = [ 0 ] * 2 NEW_LINE findLCM ( n , 0 , 0 , ans , ans ) NEW_LINE print ( maxLCM ( ans [ 0 ] ) ) NEW_LINE DEDENT n = 10 NEW_LINE findLandau ( n ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_"}
{"value":"] \\n def isPrime ( n ) : NEW_LINE INDENT if ( n <= 1 ) : NEW_LINE INDENT return False NEW_LINE DEDENT if ( n <= 3 ) : NEW_LINE INDENT return True NEW_LINE DEDENT if ( n % 2 == 0 or n % 3 == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT for i in range ( 5 , int ( n ** ( 1 \/ 2 ) ) + 1 , 6 ) : NEW_LINE INDENT if ( n % i == 0 or n % ( i + 2 ) == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def check ( n ) : NEW_LINE INDENT if ( isPrime ( n ) ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT n = 9 NEW_LINE if ( check ( n ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41"}
{"value":"] def check ( a , n , k ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( a [ i ] % 2 != 0 ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT if ( count % k == 0 ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT a = [ 1 , 2 , 3 , 4 , 5 ] NEW_LINE n = len ( a ) NEW_LINE k = 2 NEW_LINE if ( check ( a , n , k ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT DEDENT 2 NEW_LINE 4 NEW_LINE 3 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE "}
{"value":"] \\n import math NEW_LINE def findSum ( n , m ) : NEW_LINE INDENT freq = [ 0 ] * ( m + 1 ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT freq [ arr [ i ] ] += 1 NEW_LINE DEDENT maxi = 0 NEW_LINE for i in range ( m + 1 ) : NEW_LINE INDENT maxi = max ( maxi , freq [ i ] ) NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( 1 , m + 1 ) : NEW_LINE INDENT ans += ( freq [ i ] * ( freq [ i ] - 1 ) ) \/\/ 2 NEW_LINE ans += ( maxi - freq [ i ] ) * ( maxi - freq [ i ] - 1 ) \/\/ 2 NEW_LINE DEDENT return ans NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 1 , 2 , 2 , 2 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 5 , 5 , 5 , 5 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE m = max ( arr ) NEW_LINE print ( findSum ( n , m ) ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 5 NEW_LINE 5 NEW_LINE 5 NEW_LINE 5 NEW_LINE 5 NEW_LINE 5 NEW_LINE 6 NEW_LINE 6 NEW_LINE 7 NEW_LINE 7 NEW_LINE 8 NEW_LINE 8 NEW_LINE 9 NEW_LINE 9 NEW_LINE 10 NEW_LINE 10 NEW_LINE 11 NEW_LINE 11 NEW_LINE 12 NEW_LINE 12 NEW_LINE 13 NEW_LINE 1"}
{"value":"] def minInsertions ( arr , N ) : NEW_LINE INDENT Xor = 0 NEW_LINE Sum = 0 NEW_LINE for i in range ( 0 , N ) : NEW_LINE INDENT Xor = Xor ^ arr [ i ] NEW_LINE Sum = Sum + arr [ i ] NEW_LINE DEDENT if ( Sum == 2 * Xor ) : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( 1 ) NEW_LINE print ( Sum + Xor , end = \"   \" ) NEW_LINE print ( Xor ) NEW_LINE DEDENT DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 2 , 4 , 5 , 1 ] NEW_LINE N = len ( arr ) NEW_LINE minInsertions ( arr , N ) NEW_LINE DEDENT 2 NEW_LINE 4 NEW_LINE 5 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 5 NEW_LINE 1 NEW_LINE 1 NEW_LINE 3 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 1"}
{"value":"] def checkReciprocal ( a , b , c ) : NEW_LINE INDENT if ( ( a == 0 ) and ( b == 0 ) and ( c == 0 ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT elif ( ( a == 0 ) and ( b != 0 ) and ( c == 0 ) ) : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT elif ( ( a == 0 ) and ( b != 0 ) and ( c != 0 ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT elif ( ( a != 0 ) and ( b == 0 ) and ( c != 0 ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT elif ( ( a != 0 ) and ( b != 0 ) and ( c == 0 ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT elif ( ( a != 0 ) and ( b != 0 ) and ( c != 0 ) ) : NEW_LINE INDENT if ( ( ( - b ) \/ ( 2 * a ) ) == ( c \/ ( a * ( - b ) ) ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT DEDENT DEDENT a = 1 NEW_LINE b = 1 NEW_LINE c = 1 NEW_LINE checkReciprocal ( a , b , c ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 2"}
{"value":"] \\n import math NEW_LINE def isPerfectSquare ( x ) : NEW_LINE INDENT sr = math . sqrt ( x ) NEW_LINE return ( ( sr - math . floor ( sr ) ) == 0 ) NEW_LINE DEDENT def isSunny ( n ) : NEW_LINE INDENT if ( isPerfectSquare ( n + 1 ) ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 2 NEW_LINE if ( isSunny ( N ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53"}
{"value":"] def count ( N ) : NEW_LINE INDENT count = 0 ; NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT if ( i * i * i + i * i + i == N ) : NEW_LINE INDENT count += 1 ; NEW_LINE DEDENT DEDENT return count ; NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT N = 12 ; NEW_LINE print ( count ( N ) ) ; NEW_LINE DEDENT 2 NEW_LINE 4 NEW_LINE 8 NEW_LINE 15 NEW_LINE 16 NEW_LINE 27 NEW_LINE 32 NEW_LINE 49 NEW_LINE 64 NEW_LINE 81 NEW_LINE 100 NEW_LINE 121 NEW_LINE 144 NEW_LINE 169 NEW_LINE 196 NEW_LINE 225 NEW_LINE 256 NEW_LINE 289 NEW_LINE 324 NEW_LINE 361 NEW_LINE 400 NEW_LINE 441 NEW_LINE 484 NEW_LINE 529 NEW_LINE 576 NEW_LINE 625 NEW_LINE 676 NEW_LINE 729 NEW_LINE 784 NEW_LINE 841 NEW_LINE 900 NEW_LINE 961 NEW_LINE 1024 NEW_LINE 1089 NEW_LINE 1156 NEW_LINE 1225 NEW_LINE 1296 NEW_LINE 1369 NEW_LINE 1444 NEW_LINE 1521 NEW_LINE 1600 NEW_LINE 1681 NEW_LINE 1764 NEW_LINE 1849 NEW_LINE 1936 NEW_LINE 2025 NEW_LINE 2116 NEW_LINE 2208 NEW_LINE 2302 NEW_LINE 2400 NEW_LINE 2499 NEW_LINE 2599 NEW_LINE 2701 NEW"}
{"value":"] \\n def printK ( N , K ) : NEW_LINE INDENT for i in range ( 1 , K ) : NEW_LINE INDENT print ( i , end = \"   \" ) NEW_LINE DEDENT print ( N - K + 1 ) NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT N = 10 NEW_LINE K = 5 NEW_LINE printK ( N , K ) NEW_LINE DEDENT 1 NEW_LINE 5 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 1 NEW_LINE 2 NEW_LINE "}
{"value":"] def getNthSteppingNumber ( N ) : NEW_LINE INDENT q = [ ] NEW_LINE q . append ( 1 ) NEW_LINE q . append ( 2 ) NEW_LINE q . append ( 3 ) NEW_LINE q . append ( 4 ) NEW_LINE q . append ( 5 ) NEW_LINE q . append ( 6 ) NEW_LINE q . append ( 7 ) NEW_LINE q . append ( 8 ) NEW_LINE q . append ( 9 ) NEW_LINE while ( len ( q ) > 1 ) : NEW_LINE INDENT q . append ( q [ - 1 ] ) NEW_LINE q . pop ( ) NEW_LINE if ( q [ - 1 ] % 10 != 0 ) : NEW_LINE INDENT q . append ( 10 * q [ - 1 ] + ( q [ - 1 ] % 10 ) - 1 ) NEW_LINE DEDENT q . append ( 10 * q [ - 1 ] + ( q [ - 1 ] % 10 ) ) NEW_LINE if ( q [ - 1 ] % 10 != 9 ) : NEW_LINE INDENT q . append ( 10 * q [ - 1 ] + ( q [ - 1 ] % 10 ) + 1 ) NEW_LINE DEDENT DEDENT return q [ - 1 ] NEW_LINE DEDENT N = 10 NEW_LINE print ( getNthSteppingNumber ( N ) ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_"}
{"value":"] \\n import math NEW_LINE def getLeast ( N ) : NEW_LINE INDENT x = int ( math . sqrt ( N ) ) NEW_LINE y = int ( math . sqrt ( N ) ) NEW_LINE if ( N - x * x < y * y - N ) : NEW_LINE INDENT return x * x - N NEW_LINE DEDENT else : NEW_LINE INDENT return N - y * y NEW_LINE DEDENT DEDENT N = 15 NEW_LINE print ( getLeast ( N ) ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE 57 NEW_LINE 58 NEW_LINE 59 NEW_LINE 60 NEW_LINE 61 NEW_LINE 62 NEW_LINE 63 NEW_LINE 64 NEW_LINE 65"}
{"value":"] \\n import math NEW_LINE def pi ( n ) : NEW_LINE INDENT pi = math . acos ( - 1 ) NEW_LINE print ( pi , end = \" \" ) NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT n = 50 NEW_LINE pi ( n ) NEW_LINE DEDENT 2 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE"}
{"value":"] \\n from math import log2 NEW_LINE def toBinary ( n ) : NEW_LINE INDENT arr = [ 0 ] * 32 NEW_LINE i = 0 NEW_LINE while ( n ) : NEW_LINE INDENT arr [ i ] = n % 2 NEW_LINE n = int ( n \/ 2 ) NEW_LINE i += 1 NEW_LINE DEDENT return arr NEW_LINE DEDENT def toDecimal ( arr ) : NEW_LINE INDENT n = 0 NEW_LINE i = 0 NEW_LINE while ( arr [ i ] ) : NEW_LINE INDENT n += arr [ i ] * ( 1 << i ) NEW_LINE i += 1 NEW_LINE DEDENT return n NEW_LINE DEDENT def concatenate ( a , b ) : NEW_LINE INDENT n = len ( a ) NEW_LINE m = len ( b ) NEW_LINE a = a + b NEW_LINE return toDecimal ( a ) NEW_LINE DEDENT def flipKthBit ( n , k ) : NEW_LINE INDENT a = toBinary ( n ) NEW_LINE b = toBinary ( k - 1 ) NEW_LINE c = concatenate ( a , b ) NEW_LINE return toDecimal ( c ) NEW_LINE DEDENT n = 12 NEW_LINE k = 3 NEW_LINE print ( flipKthBit ( n , k ) ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 3"}
{"value":"= 1 NEW_LINE def precompute ( ) : NEW_LINE INDENT for i in range ( 1 , MAX + 1 ) : NEW_LINE INDENT result [ i ] = ( result [ i - 1 ] * i NEW_LINE DEDENT DEDENT def performQueries ( ) : NEW_LINE INDENT precompute ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT print ( result [ queries [ i ] , end = \"   \" ) NEW_LINE DEDENT DEDENT n = 5 NEW_LINE queries = [ 1 , 2 , 3 , 4 , 5 ] NEW_LINE performQueries ( ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 6 NEW_LINE 24 NEW_LINE 120 NEW_LINE 24 NEW_LINE 120 NEW_LINE 24 NEW_LINE 24 NEW_LINE 120 NEW_LINE 24 NEW_LINE 24 NEW_LINE 120 NEW_LINE 24 NEW_LINE 24 NEW_LINE 120 NEW_LINE 24 NEW_LINE 24 NEW_LINE 120 NEW_LINE 24 NEW_LINE 24 NEW_LINE 120 NEW_LINE 24 NEW_LINE 24 NEW_LINE 120 NEW_LINE 24 NEW_LINE 24 NEW_LINE 120 NEW_LINE 24 NEW_LINE 24 NEW_LINE 120 NEW_LINE 24 NEW_LINE 24 NEW_LINE 120 NEW_LINE 24 NEW_LINE 24 NEW_LINE 120 NEW_LINE 24 NEW_LINE 24 NEW_LINE 120 NEW_LINE 24 NEW_LINE 24 NEW_LINE 120 NEW_LINE 24 NEW_LINE 24 NEW_LINE 120 NEW_LINE 24 NEW_LINE 24 NEW_LINE 120 NEW_LINE 24 NEW_LINE 24 NEW_LINE 120 NEW_LINE 24 NEW_LINE "}
{"value":"] NEW_LINE import math NEW_LINE def gcd ( a , b ) : NEW_LINE INDENT if ( b == 0 ) : NEW_LINE INDENT return a NEW_LINE DEDENT return gcd ( b , a % b ) NEW_LINE DEDENT def countTerms ( num , a , b , c ) : NEW_LINE INDENT count = 0 NEW_LINE count += num \/\/ a NEW_LINE count += num \/\/ b NEW_LINE count += num \/\/ c NEW_LINE count -= num \/\/ ( a * b ) NEW_LINE count -= num \/\/ ( b * c ) NEW_LINE count -= num \/\/ ( c * a ) NEW_LINE return count NEW_LINE DEDENT def findNthTerm ( a , b , c , n ) : NEW_LINE INDENT low = 1 NEW_LINE high = 10 ** 9 NEW_LINE while ( low < high ) : NEW_LINE INDENT mid = ( low + high ) \/\/ 2 NEW_LINE if ( countTerms ( mid , a , b , c ) >= n ) : NEW_LINE INDENT high = mid NEW_LINE DEDENT else : NEW_LINE INDENT low = mid + 1 NEW_LINE DEDENT DEDENT return low NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT a = 2 NEW_LINE b = 3 NEW_LINE c = 5 NEW_LINE n = 10 NEW_LINE print ( findNthTerm ( a , b , c , n ) ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 5 NEW_LINE 10 NEW_LINE 2 NEW_LINE 3 NEW_LINE 5 NEW_LINE 10 NEW_LINE 2 NEW_LINE 3 NEW_LINE 5 NEW_LINE 10 NEW_LINE 2 NEW_LINE 3 NEW_LINE 5 NEW_LINE 10 NEW_LINE 2 NEW_LINE 3 NEW_LINE 5 NEW_LINE 10 NEW_LINE 2 NEW_LINE 3 NEW_LINE 5 NEW_LINE 10 NEW_LINE 2 NEW_LINE 3"}
{"value":"] def checkAngle ( n , i , j , k ) : NEW_LINE INDENT x = abs ( i - j ) NEW_LINE y = abs ( j - k ) NEW_LINE if ( x > y ) : NEW_LINE INDENT x , y = y , x NEW_LINE DEDENT if ( x == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT if ( y == 0 ) : NEW_LINE INDENT return True NEW_LINE DEDENT return ( ( ( n - x ) * 180 ) \/ y ) NEW_LINE DEDENT n = 6 NEW_LINE i = 1 NEW_LINE j = 3 NEW_LINE k = 5 NEW_LINE print ( checkAngle ( n , i , j , k ) ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE"}
{"value":"] def calculateLoss ( cost , profit ) : NEW_LINE INDENT print ( \" Loss   =   \" , profit * 100 , \" % \" ) NEW_LINE DEDENT cost = 100 NEW_LINE profit = 20 NEW_LINE calculateLoss ( cost , profit ) NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE 57 NEW_LINE 58 NEW_LINE 59 NEW_LINE 60 NEW_LINE 61 NEW_LINE 62 NEW_LINE 63 NEW_LINE 64 NEW_LINE 65 NEW_LINE 66 NEW_LINE 67 NEW_LINE 68 NEW_LINE 69 NEW_LINE 70 NEW_LINE 71 NEW_LINE 72 NEW_LINE 73 NEW_LINE 74 NEW_LINE 75 NEW_LINE"}
{"value":"= 1 NEW_LINE MAXN = 1000000 NEW_LINE spf = [ 0 for i in range ( MAXN + 1 ) ] NEW_LINE count = [ 0 for i in range ( MAXN + 1 ) ] NEW_LINE def Sieve ( ) : NEW_LINE INDENT spf [ 0 ] = - 1 NEW_LINE spf [ 1 ] = - 1 NEW_LINE for i in range ( 2 , MAXN + 1 ) : NEW_LINE INDENT spf [ i ] = i NEW_LINE DEDENT for i in range ( 2 , MAXN + 1 ) : NEW_LINE INDENT if ( spf [ i ] == i ) : NEW_LINE INDENT for j in range ( i * 2 , MAXN + 1 , i ) : NEW_LINE INDENT if ( spf [ j ] == j ) : NEW_LINE INDENT spf [ j ] = i NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT def primeFactors ( ) : NEW_LINE INDENT for i in range ( 1 , MAXN + 1 ) : NEW_LINE INDENT count [ i ] = 0 NEW_LINE while ( i % spf [ i ] == 0 ) : NEW_LINE INDENT count [ i ] += 1 NEW_LINE i \/\/= spf [ i ] NEW_LINE DEDENT DEDENT DEDENT def isCoprime ( x , arr ) : NEW_LINE INDENT for i in range ( len ( arr ) ) : NEW_LINE INDENT if ( count [ arr [ i ] ] > 0 and count [ x ] > 0 and count [ arr [ i ] ] == count [ x ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def isCoprimeUtil ( arr , n ) : NEW_LINE INDENT Sieve ( ) NEW_LINE primeFactors ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( isCoprime ( arr [ i ] , arr ) ) : NEW_LINE INDENT return True NEW_LINE DEDENT"}
{"value":"] def countWays ( n ) : NEW_LINE INDENT return ( 1 << ( n * ( n - 1 ) ) ) \/\/ 2 NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT n = 4 NEW_LINE print ( countWays ( n ) ) NEW_LINE DEDENT 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 4 NEW_LINE 1 NEW_LINE 2 NEW_LINE 4 NEW_LINE 1 NEW_LINE 2 NEW_LINE 4 NEW_LINE 1 NEW_LINE 2 NEW_LINE 4 NEW_LINE 1 NEW_LINE 2 NEW_LINE 4 NEW_LINE 1 NEW_LINE 2 NEW_LINE 4 NEW_LINE 1 NEW_LINE 2 NEW_LINE 4 NEW_LINE 1 NEW_LINE 2 NEW_LINE 4 NEW_LINE 1 NEW_LINE 2 NEW_LINE 4 NEW_LINE 1 NEW_LINE 2 NEW_LINE 4 NEW_LINE 1 NEW_LINE 2 NEW_LINE 4 NEW_LINE 1 NEW_LINE 2 NEW_LINE 4 NEW_LINE 1 NEW_LINE 2 NEW_LINE 4 NEW_LINE 1 NEW_LINE 2 NEW_LINE 4 NEW_LINE 1 NEW_LINE 2 NEW_LINE 4 NEW_LINE 1 NEW_LINE 2 NEW_LINE 4 NEW_LINE 1 NEW_LINE 2 NEW_LINE 4 NEW_LINE 1 NEW_LINE 2 NEW_LINE 4 NEW_LINE 1 NEW_LINE 2 NEW_LINE 4 NEW_LINE 1 NEW_LINE 2 NEW_LINE 4 NEW_LINE 1 NEW_LINE 2 NEW_LINE 4 NEW_LINE 1 NEW_LINE 2 NEW_LINE 4 NEW_LINE 1 NEW_LINE 2 NEW_LINE 4 NEW_LINE 1 NEW_LINE 2 NEW_LINE 4 NEW_LINE 1 NEW_LINE 2 NEW_LINE 4 NEW_LINE 1 NEW_LINE 2 NEW_LINE 4 NEW_LINE 1 NEW_LINE 2 NEW_LINE 4 NEW_LINE 1 NEW_LINE 2 NEW_LINE 4 NEW_LINE"}
{"value":"= [ 0 ] NEW_LINE INDENT INDENT for i in range ( 1 , 10 ) : NEW_LINE INDENT for j in range ( 0 , i + 1 ) : NEW_LINE INDENT if ( j == 0 or j == i ) : NEW_LINE INDENT pascal [ i ] [ j ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT pascal [ i ] [ j ] = pascal [ i - 1 ] [ j - 1 ] + pascal [ i - 1 ] [ j ] NEW_LINE DEDENT DEDENT DEDENT DEDENT def nCr ( n , r ) : NEW_LINE INDENT return pascal [ n ] [ r ] NEW_LINE DEDENT 0 NEW_LINE INDENT 0 NEW_LINE DEDENT 1 NEW_LINE INDENT 1 NEW_LINE DEDENT 2 NEW_LINE INDENT 1 NEW_LINE DEDENT 3 NEW_LINE INDENT 1 NEW_LINE DEDENT 4 NEW_LINE INDENT 1 NEW_LINE DEDENT 5 NEW_LINE INDENT 1 NEW_LINE DEDENT 6 NEW_LINE INDENT 1 NEW_LINE DEDENT 7 NEW_LINE INDENT 1 NEW_LINE DEDENT 8 NEW_LINE INDENT 1 NEW_LINE DEDENT 9 NEW_LINE INDENT 1 NEW_LINE DEDENT 10 NEW_LINE INDENT 1 NEW_LINE DEDENT 11 NEW_LINE INDENT 1 NEW_LINE DEDENT 12 NEW_LINE INDENT 1 NEW_LINE DEDENT 13 NEW_LINE INDENT 1 NEW_LINE DEDENT 14 NEW_LINE INDENT 1 NEW_LINE DEDENT 15 NEW_LINE INDENT 1 NEW_LINE DEDENT 16 NEW_LINE INDENT 1 NEW_LINE DEDENT 17 NEW_LINE INDENT 1 NEW_LINE DEDENT 18 NEW_LINE INDENT 1 NEW_LINE DEDENT 19 NEW_LINE INDENT 1 NEW_LINE DEDENT "}
{"value":"] def minDiff ( n ) : NEW_LINE INDENT return n - 1 NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT n = 5 NEW_LINE print ( minDiff ( n ) ) NEW_LINE DEDENT 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE 57 NEW_LINE 58 NEW_LINE 59 NEW_LINE 60 NEW_LINE 61 NEW_LINE 62 NEW_LINE 63 NEW_LINE 64 NEW_LINE 65 NEW_LINE 66 NEW_LINE 67 NEW_LINE 68 NEW_LINE 69 NEW_LINE 70 NEW_LINE 71 NEW_LINE 72 NEW_LINE 73 NEW_LINE 74 NEW_LINE 7"}
{"value":"] \\n def checkXor ( n ) : NEW_LINE INDENT freq = [ 0 for i in range ( 10 ) ] NEW_LINE while ( n > 0 ) : NEW_LINE INDENT last = n % 10 NEW_LINE freq [ last ] += 1 NEW_LINE n = n \/\/ 10 NEW_LINE DEDENT for i in range ( 10 ) : NEW_LINE INDENT if ( freq [ i ] > 0 ) : NEW_LINE INDENT if ( freq [ i ] % 2 != 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT DEDENT return True NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT n = 123 NEW_LINE if ( checkXor ( n ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT DEDENT 2 NEW_LINE 4 NEW_LINE 123 NEW_LINE 1234 NEW_LINE 12345 NEW_LINE 123456 NEW_LINE 1234567 NEW_LINE 12345678 NEW_LINE 123456789 NEW_LINE 1234567890 [\/INST] 2 NEW_LINE 4 NEW_LINE 123 NEW_LINE 1234 NEW_LINE 12345 NEW_LINE 123456 NEW_LINE 1234567 NEW_LINE 12345678 NEW_LINE 123456789 NEW_LINE 1234567890 2 NEW_LINE 4 NEW_LINE 123 NEW_LINE 1234 NEW_LINE 12345 NEW_LINE 123456 NEW_LINE 1234567 NEW_LINE 12345678 NEW_LINE 123456789 NEW_LINE"}
{"value":"] \\n def printLines ( N , K ) : NEW_LINE INDENT for i in range ( N ) : NEW_LINE INDENT print ( i + 1 , i + 2 , i + 3 , i + 4 , end = \"   \" ) NEW_LINE DEDENT DEDENT N = 5 NEW_LINE K = 2 NEW_LINE printLines ( N , K ) NEW_LINE 2 NEW_LINE 4 NEW_LINE 6 NEW_LINE 8 NEW_LINE 10 NEW_LINE 12 NEW_LINE 14 NEW_LINE 16 NEW_LINE 18 NEW_LINE 20 NEW_LINE 22 NEW_LINE 24 NEW_LINE 26 NEW_LINE 28 NEW_LINE 30 NEW_LINE 32 NEW_LINE 34 NEW_LINE 36 NEW_LINE 38 NEW_LINE 40 NEW_LINE 42 NEW_LINE 44 NEW_LINE 46 NEW_LINE 48 NEW_LINE 50 NEW_LINE 52 NEW_LINE 54 NEW_LINE 56 NEW_LINE 58 NEW_LINE 60 NEW_LINE 62 NEW_LINE 64 NEW_LINE 66 NEW_LINE 68 NEW_LINE 70 NEW_LINE 72 NEW_LINE 74 NEW_LINE 76 NEW_LINE 78 NEW_LINE 80 NEW_LINE 82 NEW_LINE 84 NEW_LINE 86 NEW_LINE 88 NEW_LINE 90 NEW_LINE 92 NEW_LINE 94 NEW_LINE 96 NEW_LINE 98 NEW_LINE 100 NEW_LINE 102 NEW_LINE 104 NEW_LINE 106 NEW_LINE 108 NEW_LINE 110 NEW_LINE 112 NEW_LINE 114 NEW_LINE 116 NEW_LINE 118 NEW_LINE 120 NEW_LINE 122 NEW_LINE 124 NEW_LINE 126 NEW_LINE 128 NEW_LINE 130 NEW_LINE 132 NEW_LINE 134 NEW_"}
{"value":"] \\n def sum ( n ) : NEW_LINE INDENT return ( n * ( 4 * n * n + 6 * n - 1 ) ) \/ 3 NEW_LINE DEDENT n = 5 NEW_LINE print ( \" Sum   of   \" , n , \" terms   = \" , sum ( n ) ) NEW_LINE 1 , 2 , 3 NEW_LINE 4 , 5 , 6 NEW_LINE 7 , 8 , 9 NEW_LINE 10 , 11 , 12 NEW_LINE 13 , 14 , 15 NEW_LINE 16 , 17 , 18 NEW_LINE 19 , 20 , 21 NEW_LINE 22 , 23 , 24 NEW_LINE 25 , 26 , 27 NEW_LINE 28 , 29 , 30 NEW_LINE 31 , 32 , 33 NEW_LINE 34 , 35 , 36 NEW_LINE 37 , 38 , 39 NEW_LINE 40 , 41 , 42 NEW_LINE 43 , 44 , 45 NEW_LINE 46 , 47 , 48 NEW_LINE 49 , 50 , 51 NEW_LINE 52 , 53 , 54 NEW_LINE 55 , 56 , 57 NEW_LINE 58 , 59 , 60 NEW_LINE 61 , 62 , 63 NEW_LINE 64 , 65 , 66 NEW_LINE 67 , 68 , 69 NEW_LINE 70 , 71 , 72 NEW_LINE 73 , 74 , 75 NEW_LINE 76 , 77 , 78 NEW_LINE 79 , 80 , 81 NEW_LINE 82 , 83 , 84 NEW_LINE 85 , 86 , 87 NEW_LINE 88 , 89 , 90 NEW_LINE 91 , 92 , 93 NEW_LINE 94 , 9"}
{"value":"] \\n def countSpecialStrings ( n ) : NEW_LINE INDENT fib = [ 0 ] * ( n + 1 ) NEW_LINE fib [ 0 ] = 1 NEW_LINE fib [ 1 ] = 2 NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT fib [ i ] = fib [ i - 1 ] + fib [ i - 2 ] NEW_LINE DEDENT return fib [ n ] NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT n = 3 NEW_LINE print ( countSpecialStrings ( n ) ) NEW_LINE DEDENT 2 NEW_LINE 1 NEW_LINE 3 NEW_LINE 5 NEW_LINE 8 NEW_LINE 13 NEW_LINE 21 NEW_LINE 34 NEW_LINE 55 NEW_LINE 89 NEW_LINE 144 NEW_LINE 233 NEW_LINE 377 NEW_LINE 610 NEW_LINE 987 NEW_LINE 1597 NEW_LINE 2584 NEW_LINE 4181 NEW_LINE 6765 NEW_LINE 10946 NEW_LINE 17711 NEW_LINE 28561 NEW_LINE 46368 NEW_LINE 75025 NEW_LINE 121393 NEW_LINE 196418 NEW_LINE 317811 NEW_LINE 514229 NEW_LINE 832040 NEW_LINE 1346269 NEW_LINE 2178309 NEW_LINE 3524578 NEW_LINE 5702887 NEW_LINE 9227465 NEW_LINE 14930352 NEW_LINE 24157817 NEW_LINE 39088169 NEW_LINE 63245986 NEW_LINE 102334155 NEW_LINE 165580146 NEW_LINE 26791429"}
{"value":"] \\n def countPaths ( arr , n , i , j , k ) : NEW_LINE INDENT if ( i == n - 1 and j == n - 1 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT ans = 0 NEW_LINE if ( i < n and arr [ i ] [ j ] == 1 ) : NEW_LINE INDENT ans += countPaths ( arr , n , i + 1 , j , k ) NEW_LINE DEDENT if ( j < n and arr [ i ] [ j ] == 2 ) : NEW_LINE INDENT ans += countPaths ( arr , n , i , j + 1 , k ) NEW_LINE DEDENT if ( k > 0 and arr [ i ] [ j ] == 3 ) : NEW_LINE INDENT ans += countPaths ( arr , n , i , j , k - 1 ) NEW_LINE DEDENT return ans NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ [ 1 , 2 , 3 ] , [ 3 , 2 , 1 ] , [ 1 , 3 , 1 ] ] NEW_LINE n = len ( arr ) NEW_LINE print ( countPaths ( arr , n , 0 , 0 , 1 ) ) NEW_LINE DEDENT 2 NEW_LINE 2 NEW_LINE 1 NEW_LINE 3 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 1 NEW_LINE 3 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_"}
{"value":"] \\n def countPaths ( arr , n , k ) : NEW_LINE INDENT dp = [ 0 ] * n NEW_LINE dp [ n - 1 ] = 1 NEW_LINE for i in range ( n - 2 , - 1 , - 1 ) : NEW_LINE INDENT for j in range ( i + 1 , i + k + 1 ) : NEW_LINE INDENT if j >= n : NEW_LINE INDENT break NEW_LINE DEDENT dp [ i ] += dp [ j ] NEW_LINE DEDENT DEDENT return dp [ 0 ] NEW_LINE DEDENT arr = [ 1 , 1 , 1 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE k = 1 NEW_LINE print ( countPaths ( arr , n , k ) ) NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW"}
{"value":"] \\n def countSubsequences ( arr , n ) : NEW_LINE INDENT count_even = 0 NEW_LINE count_odd = 0 NEW_LINE for i in range ( 0 , n ) : NEW_LINE INDENT if ( arr [ i ] % 2 == 0 ) : NEW_LINE INDENT count_even = count_even + 1 NEW_LINE DEDENT else : NEW_LINE INDENT count_odd = count_odd + 1 NEW_LINE DEDENT DEDENT return count_even , count_odd NEW_LINE DEDENT arr = [ 1 , 2 , 3 , 4 ] NEW_LINE n = len ( arr ) NEW_LINE count_even , count_odd = countSubsequences ( arr , n ) NEW_LINE print ( \" Even   Count   of   Subsequences :   \" , count_even ) NEW_LINE print ( \" Odd   Count   of   Subsequences :   \" , count_odd ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 4"}
{"value":"] \\n import numpy as np NEW_LINE def convertToVector ( n ) : NEW_LINE INDENT v = [ ] NEW_LINE while ( n ) : NEW_LINE INDENT v . append ( n % 10 ) NEW_LINE n \/\/= 10 NEW_LINE DEDENT if ( n == 0 ) : NEW_LINE INDENT v . append ( 0 ) NEW_LINE DEDENT v . reverse ( ) NEW_LINE return v NEW_LINE DEDENT def countIntegers ( A , B , C ) : NEW_LINE INDENT digit = convertToVector ( C ) NEW_LINE if ( digit [ - 1 ] < A [ 0 ] ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( digit [ - 1 ] == A [ 0 ] ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT lower = np . zeros ( B ) NEW_LINE lower [ 0 ] = 0 NEW_LINE for i in range ( 1 , B ) : NEW_LINE INDENT lower [ i ] = A [ i ] NEW_LINE DEDENT if ( digit [ - i - 1 ] == A [ i ] ) : NEW_LINE INDENT lower [ i ] = 0 NEW_LINE DEDENT for i in range ( 1 , B ) : NEW_LINE INDENT if ( digit [ - i - 1 ] >= A [ i ] ) : NEW_LINE INDENT if ( digit [ - i - 1 ] == A [ i ] ) : NEW_LINE INDENT lower [ i ] = 0 NEW_LINE DEDENT else : NEW_LINE INDENT lower [ i ] -= 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT ans = 1 NEW_LINE for i in range ( 1 , B ) : NEW_LINE INDENT ans = ans + lower [ i ] NEW_LINE DEDENT return ans NEW_LINE DEDENT A = [ 1 , 2 , 3 , 4 ] NEW_LINE B = 3 NEW_LINE C = 123 NEW_LINE print ( countIntegers ( A , B , C ) ) NEW_LINE 1 NEW_LINE 2 NEW"}
{"value":"] NEW_LINE import sys NEW_LINE def countPaths ( wt , M , K , used , n ) : NEW_LINE INDENT if ( wt < 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( wt == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT res = 0 NEW_LINE for i in range ( 1 , K + 1 ) : NEW_LINE INDENT if ( wt - i >= 0 and used [ wt - i ] == False ) : NEW_LINE INDENT res += countPaths ( wt - i , M , K , used , n ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 4 NEW_LINE M = 1 NEW_LINE K = 2 NEW_LINE wt = 2 NEW_LINE used = [ False for i in range ( n + 1 ) ] NEW_LINE print ( countPaths ( wt , M , K , used , n ) ) NEW_LINE DEDENT 1 , 2 NEW_LINE 2 , 1 NEW_LINE 1 , 1 NEW_LINE 2 , 2 NEW_LINE 3 , 1 NEW_LINE 3 , 2 NEW_LINE 4 , 1 NEW_LINE 4 , 2 NEW_LINE 5 , 1 NEW_LINE 5 , 2 NEW_LINE 6 , 1 NEW_LINE 6 , 2 NEW_LINE 7 , 1 NEW_LINE 7 , 2 NEW_LINE 8 , 1 NEW_LINE 8 , 2 NEW_LINE 9 , 1 NEW_LINE 9 , 2 NEW_LINE 10 , 1 NEW_LINE 10 , 2 NEW_LINE 11 , 1 NEW_LINE 11 , 2 NEW_LINE 12 , 1 NEW_LINE 12 , 2 NEW_LINE 13 , 1 NEW_LINE 13 , 2 NEW_LINE 14 , 1 NEW_LINE 14 , 2 NEW_LINE 15 , 1 NEW_LINE 15 , 2"}
{"value":"] \\n def findPartitions ( n ) : NEW_LINE INDENT if ( n <= 3 ) : NEW_LINE INDENT return n - 1 NEW_LINE DEDENT return findPartitions ( n - 1 ) + findPartitions ( n - 2 ) + findPartitions ( n - 3 ) NEW_LINE DEDENT n = 6 NEW_LINE print ( findPartitions ( n ) ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE 57 NEW_LINE 58 NEW_LINE 59 NEW_LINE 60 NEW_LINE 61 NEW_LINE 62 NEW_LINE 63 NEW_LINE 64 NEW_LINE 65 NEW_LINE 66 NEW_LINE 67 NEW_LINE 68 NEW_LINE 69 NEW_LINE 70 NEW_"}
{"value":"] \\n 3 [\/INST] \\n def dfs ( grid , row , col , dp ) : NEW_LINE INDENT if ( dp [ row ] [ col ] != - 1 ) : NEW_LINE INDENT return dp [ row ] [ col ] NEW_LINE DEDENT if ( row == 0 and col == 0 ) : NEW_LINE INDENT dp [ row ] [ col ] = 1 NEW_LINE return 1 NEW_LINE DEDENT if ( row == 0 ) : NEW_LINE INDENT dp [ row ] [ col ] = dfs ( grid , row , col - 1 , dp ) + 1 NEW_LINE return dp [ row ] [ col ] NEW_LINE DEDENT if ( col == 0 ) : NEW_LINE INDENT dp [ row ] [ col ] = dfs ( grid , row - 1 , col , dp ) + 1 NEW_LINE return dp [ row ] [ col ] NEW_LINE DEDENT if ( grid [ row ] [ col ] > grid [ row - 1 ] [ col ] ) : NEW_LINE INDENT dp [ row ] [ col ] = dfs ( grid , row - 1 , col , dp ) + 1 NEW_LINE DEDENT else : NEW_LINE INDENT dp [ row ] [ col ] = dfs ( grid , row , col - 1 , dp ) + 1 NEW_LINE DEDENT return dp [ row ] [ col ] NEW_LINE DEDENT def longestIncreasingPath ( grid ) : NEW_LINE INDENT n = len ( grid ) NEW_LINE m = len ( grid [ 0 ] ) NEW_LINE dp = [ [ - 1 for i in range ( m ) ] for j in range ( n ) ] NEW_LINE maxi = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( m ) : NEW_LINE INDENT maxi = max ( maxi , dfs ( grid , i , j , dp ) ) NEW_LINE DEDENT DEDENT return maxi NEW_LINE DEDENT grid = [ [ 9 , 9 , 4 ] , [ 6 , 6 , 8 ] , [ 2 , 1 , 1 ] ] NEW_LINE"}
{"value":"] def countPaths ( x , y ) : NEW_LINE INDENT if ( x == 0 and y == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT elif ( x == 0 or y == 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return countPaths ( x - 1 , y ) + countPaths ( x , y - 1 ) NEW_LINE DEDENT DEDENT x = 2 NEW_LINE y = 2 NEW_LINE print ( countPaths ( x , y ) ) NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE 57 NEW_LINE 58 NEW_LINE 59 NEW_LINE 60 NEW_LINE 61 NEW_LINE 62 NEW_LINE 63 NEW_LINE 6"}
{"value":"] \\n def goldMine ( grid , m , n ) : NEW_LINE INDENT goldMineTable = [ [ 0 for i in range ( n ) ] for j in range ( m ) ] NEW_LINE for i in range ( m ) : NEW_LINE INDENT goldMineTable [ i ] [ 0 ] = grid [ i ] [ 0 ] NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT goldMineTable [ 0 ] [ i ] = max ( grid [ 0 ] [ i ] , goldMineTable [ 0 ] [ i - 1 ] ) NEW_LINE DEDENT for i in range ( 1 , m ) : NEW_LINE INDENT for j in range ( 1 , n ) : NEW_LINE INDENT goldMineTable [ i ] [ j ] = max ( grid [ i ] [ j ] + max ( goldMineTable [ i - 1 ] [ j ] , goldMineTable [ i - 1 ] [ j - 1 ] , goldMineTable [ i ] [ j - 1 ] ) , goldMineTable [ i - 1 ] [ j ] ) NEW_LINE DEDENT DEDENT return goldMineTable [ m - 1 ] [ n - 1 ] NEW_LINE DEDENT grid = [ [ 1 , 3 , 1 , 5 ] , [ 5 , 3 , 4 , 4 ] , [ 2 , 4 , 3 , 1 ] , [ 1 , 2 , 1 , 1 ] ] NEW_LINE m = len ( grid ) NEW_LINE n = len ( grid [ 0 ] ) NEW_LINE print ( \" Maximum   gold   collected   is   \" , goldMine ( grid , m , n ) ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 0 NEW_LINE 3 NEW_LINE 4 NEW_LINE 3 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE"}
{"value":"] NEW_LINE def minCost ( A , target , M ) : NEW_LINE INDENT N = len ( A ) NEW_LINE dp = [ [ 0 ] * ( M + 1 ) for i in range ( N ) ] NEW_LINE for j in range ( M + 1 ) : NEW_LINE INDENT dp [ 0 ] [ j ] = abs ( A [ 0 ] - j ) NEW_LINE DEDENT for i in range ( 1 , N ) : NEW_LINE INDENT for j in range ( M + 1 ) : NEW_LINE INDENT dp [ i ] [ j ] = dp [ i - 1 ] [ j ] NEW_LINE for k in range ( max ( j - target , 0 ) , min ( M , j + target ) + 1 , 1 ) : NEW_LINE INDENT dp [ i ] [ j ] = min ( dp [ i ] [ j ] , abs ( A [ i ] - k ) + dp [ i - 1 ] [ k ] ) NEW_LINE DEDENT DEDENT DEDENT return dp [ N - 1 ] [ target ] NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT A = [ 1 , 2 , 3 , 4 , 5 ] NEW_LINE M = 3 NEW_LINE target = 1 NEW_LINE print ( minCost ( A , target , M ) ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 3"}
{"value":"] def countTriplets ( L , R ) : NEW_LINE INDENT total_triplets = 0 NEW_LINE diff = R - L NEW_LINE if ( diff < 3 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT total_triplets = ( diff - 1 ) * diff \/\/ 2 NEW_LINE DEDENT return total_triplets NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT L = 1 NEW_LINE R = 1000000 NEW_LINE print ( countTriplets ( L , R ) ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 1000000 NEW_LINE 2 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE "}
{"value":"] def generateArrays ( n ) : NEW_LINE INDENT a = [ 0 ] * ( 2 * n ) NEW_LINE b = [ 0 ] * ( 2 * n ) NEW_LINE for i in range ( 1 , 2 * n + 1 ) : NEW_LINE INDENT a [ i - 1 ] = i NEW_LINE b [ i - 1 ] = i - n NEW_LINE DEDENT print ( * a , sep = \"   \" ) NEW_LINE print ( * b , sep = \"   \" ) NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT n = 3 NEW_LINE generateArrays ( n ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE 57 NEW_LINE 58 NEW"}
{"value":"] \\n def flipBits ( A , B ) : NEW_LINE INDENT for i in range ( 32 ) : NEW_LINE INDENT if ( ( A & ( 1 << i ) ) and ( B & ( 1 << i ) ) ) : NEW_LINE INDENT A = A ^ ( 1 << i ) NEW_LINE B = B ^ ( 1 << i ) NEW_LINE DEDENT DEDENT print ( A , \"   \" , B ) NEW_LINE DEDENT A = 15 NEW_LINE B = 11 NEW_LINE flipBits ( A , B ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE 57 NEW_LINE 58 NEW_LINE 59 NEW_LINE 60 NEW_LINE 61 NEW_LINE 62 NEW_LINE 63 NEW_LINE"}
{"value":"] def countSum ( arr1 , arr2 , n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += arr1 [ i ] + arr2 [ i ] NEW_LINE DEDENT return sum NEW_LINE DEDENT arr1 = [ 1 , 2 , 3 ] NEW_LINE arr2 = [ 1 , 2 , 3 ] NEW_LINE n = len ( arr1 ) NEW_LINE print ( countSum ( arr1 , arr2 , n ) ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE 57 NEW_LINE 58 NEW_LINE 59 NEW_LINE 60 NEW_LINE 61 NEW_LINE 62 NEW_LINE 63 NEW_LINE 64 NEW_LINE 65 NEW_"}
{"value":"] def countSubstrings ( str ) : NEW_LINE INDENT freq = [ 0 ] * 3 NEW_LINE ans = 0 NEW_LINE for i in range ( len ( str ) ) : NEW_LINE INDENT freq [ ord ( str [ i ] ) - ord ( '0' ) ] += 1 NEW_LINE DEDENT if ( freq [ 0 ] and freq [ 1 ] and freq [ 2 ] ) : NEW_LINE INDENT ans = ( ( freq [ 0 ] * ( freq [ 0 ] - 1 ) ) \/\/ 2 + ( freq [ 1 ] * ( freq [ 1 ] - 1 ) ) \/\/ 2 + ( freq [ 2 ] * ( freq [ 2 ] - 1 ) ) \/\/ 2 ) NEW_LINE DEDENT return ans NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT str = \"100010\" NEW_LINE print ( countSubstrings ( str ) ) NEW_LINE DEDENT 2 NEW_LINE 1 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1"}
{"value":"] \\n def minFlips ( s , N ) : NEW_LINE INDENT ans = 0 NEW_LINE if ( N == 1 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT for i in range ( N - 2 ) : NEW_LINE INDENT if ( s [ i ] == s [ i + 1 ] and s [ i + 1 ] == s [ i + 2 ] ) : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 4 NEW_LINE S = \"1000\" NEW_LINE print ( minFlips ( S , N ) ) NEW_LINE DEDENT 2 NEW_LINE 1 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_"}
{"value":"NT def convertToHex ( n ) : NEW_LINE INDENT hex_ = \"0123456789ABCDEF\" NEW_LINE result = \" \" NEW_LINE while ( n > 0 ) : NEW_LINE INDENT result = hex_ [ n % 16 ] + result NEW_LINE n = n \/\/ 16 NEW_LINE DEDENT return result NEW_LINE DEDENT def encrypt ( S ) : NEW_LINE INDENT N = len ( S ) NEW_LINE result = \" \" NEW_LINE for i in range ( N ) : NEW_LINE INDENT ch = S [ i ] NEW_LINE count = 0 NEW_LINE j = i NEW_LINE while ( S [ j ] == ch ) : NEW_LINE INDENT j += 1 NEW_LINE count += 1 NEW_LINE DEDENT i = j - 1 NEW_LINE result += ch NEW_LINE result += convertToHex ( count ) NEW_LINE DEDENT result = result [ : : - 1 ] NEW_LINE return result NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT S = \" aaaaabbbb \" NEW_LINE print ( encrypt ( S ) ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE "}
{"value":"] def binomialCoeff ( n , k ) : NEW_LINE INDENT res = 1 NEW_LINE if ( k > n - k ) : NEW_LINE INDENT k = n - k NEW_LINE DEDENT for i in range ( k ) : NEW_LINE INDENT res *= ( n - i ) NEW_LINE res \/\/= ( i + 1 ) NEW_LINE DEDENT return res NEW_LINE DEDENT def countStrings ( N ) : NEW_LINE INDENT count = binomialCoeff ( 2 * N , N ) NEW_LINE count1 = binomialCoeff ( 2 * N , N \/\/ 2 ) NEW_LINE if ( N % 2 == 0 ) : NEW_LINE INDENT count -= 2 * count1 NEW_LINE DEDENT return count NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 4 NEW_LINE print ( countStrings ( N ) ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_"}
{"value":"NT def removeChar ( str , c ) : NEW_LINE INDENT if ( len ( str ) == 0 ) : NEW_LINE INDENT return \" \" NEW_LINE DEDENT if ( str [ 0 ] == c ) : NEW_LINE INDENT return removeChar ( str [ 1 : ] , c ) NEW_LINE DEDENT return str [ 0 ] + removeChar ( str [ 1 : ] , c ) NEW_LINE DEDENT str = \" geeksforgeeks \" NEW_LINE c = ' e ' NEW_LINE print ( removeChar ( str , c ) ) NEW_LINE 2 NEW_LINE DEDENT 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_"}
{"value":"] def isCorrect ( time , flag ) : NEW_LINE INDENT h = int ( time [ 0 : 2 ] ) NEW_LINE m = int ( time [ 3 : 5 ] ) NEW_LINE if ( h < 0 or h > 23 ) : NEW_LINE INDENT return False NEW_LINE DEDENT if ( m < 0 or m > 59 ) : NEW_LINE INDENT return False NEW_LINE DEDENT if ( flag == 0 ) : NEW_LINE INDENT if ( h != 23 ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT if ( flag == 1 ) : NEW_LINE INDENT if ( m != 59 ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def checkDifference ( time , L , R ) : NEW_LINE INDENT h = int ( time [ 0 : 2 ] ) NEW_LINE m = int ( time [ 3 : 5 ] ) NEW_LINE if ( abs ( h - m ) < L or abs ( h - m ) > R ) : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT def findTime ( time , L , R ) : NEW_LINE INDENT hour = 0 NEW_LINE minute = 0 NEW_LINE flag = 0 NEW_LINE for i in range ( len ( time ) ) : NEW_LINE INDENT if ( time [ i ] == ' ? ' ) : NEW_LINE INDENT if ( flag == 0 ) : NEW_LINE INDENT hour += 1 NEW_LINE DEDENT else : NEW_LINE INDENT minute += 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if ( time [ i ] == ' : ' ) : NEW_LINE INDENT flag = 1 NEW_LINE DEDENT else : NEW_LINE INDENT if ( isCorrect ( time , flag ) ) : NEW_LINE INDENT if ( checkDifference ( time , L , R ) ) : NEW_LINE INDENT return time NEW_LINE DEDENT DEDENT DEDENT DEDENT D"}
{"value":"] \\n def isPossible ( str ) : NEW_LINE INDENT stack = [ ] NEW_LINE for i in range ( len ( str ) ) : NEW_LINE INDENT if ( len ( stack ) > 0 and stack [ - 1 ] == str [ i ] ) : NEW_LINE INDENT stack . pop ( ) NEW_LINE DEDENT else : NEW_LINE INDENT stack . append ( str [ i ] ) NEW_LINE DEDENT DEDENT if ( len ( stack ) == 0 ) : NEW_LINE INDENT return \" Yes \" NEW_LINE DEDENT else : NEW_LINE INDENT return \" No \" NEW_LINE DEDENT DEDENT str = \" ababab \" NEW_LINE print ( isPossible ( str ) ) NEW_LINE 3 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE "}
{"value":" NEW_LINE from collections import defaultdict NEW_LINE from math import log2 NEW_LINE def countStrings ( arr1 , arr2 , n , m ) : NEW_LINE INDENT freq = defaultdict ( int ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT temp = 0 NEW_LINE for j in range ( len ( arr1 [ i ] ) ) : NEW_LINE INDENT if ( arr1 [ i ] [ j ] == '1' ) : NEW_LINE INDENT temp = temp | ( 1 << j ) NEW_LINE DEDENT DEDENT freq [ temp ] += 1 NEW_LINE DEDENT for i in range ( m ) : NEW_LINE INDENT temp = 0 NEW_LINE for j in range ( len ( arr2 [ i ] ) ) : NEW_LINE INDENT if ( arr2 [ i ] [ j ] == '1' ) : NEW_LINE INDENT temp = temp | ( 1 << j ) NEW_LINE DEDENT DEDENT if ( temp in freq ) : NEW_LINE INDENT result . append ( freq [ temp ] ) NEW_LINE DEDENT else : NEW_LINE INDENT for j in range ( len ( arr2 [ i ] ) ) : NEW_LINE INDENT if ( arr2 [ i ] [ j ] == '1' ) : NEW_LINE INDENT temp = temp | ( 1 << j ) NEW_LINE DEDENT DEDENT if ( temp in freq ) : NEW_LINE INDENT result . append ( freq [ temp ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT for i in range ( m ) : NEW_LINE INDENT print ( result [ i ] , end = \"   \" ) NEW_LINE DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr1 = [ \"1000\" , \"0100\" , \"1000\" , \"1010\" ] NEW_LINE arr2 = [ \"1000\" , \"0100\" , \"1000\" , \"1010\" ] NEW_LINE N = len ( arr1 ) NEW"}
{"value":"T ] \\n def printBinary ( s ) : NEW_LINE INDENT n = len ( s ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( s [ i ] == '0' ) : NEW_LINE INDENT count = 0 NEW_LINE for j in range ( i , n ) : NEW_LINE INDENT if ( s [ j ] == '0' ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if ( count > 0 ) : NEW_LINE INDENT s = s [ 0 : i ] + '1' + s [ i + count : ] NEW_LINE DEDENT DEDENT print ( s ) NEW_LINE DEDENT s = \"010010110\" NEW_LINE printBinary ( s ) NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE"}
{"value":"] def convert ( s ) : NEW_LINE INDENT n = len ( s ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( i == 0 ) : NEW_LINE INDENT print ( s [ i ] , end = \" \" ) NEW_LINE DEDENT elif ( s [ i ] . isupper ( ) ) : NEW_LINE INDENT print ( \"   \" , end = \" \" ) NEW_LINE DEDENT print ( s [ i ] , end = \" \" ) NEW_LINE DEDENT DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT s = \" GeeksForGeeks \" NEW_LINE convert ( s ) NEW_LINE DEDENT 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE 57 NEW_LINE 58 NEW_LINE 59 NEW_"}
{"value":"] \\n def count_a ( n , k , s ) : NEW_LINE INDENT count = 0 NEW_LINE if ( n >= k ) : NEW_LINE INDENT count = n \/\/ k NEW_LINE DEDENT else : NEW_LINE INDENT count = n \/\/ k + 1 NEW_LINE DEDENT return count NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 25 NEW_LINE k = 4 NEW_LINE s = \" aabb \" NEW_LINE print ( count_a ( n , k , s ) ) NEW_LINE DEDENT 2 NEW_LINE 4 NEW_LINE aabb NEW_LINE 6 NEW_LINE 10 NEW_LINE 12 NEW_LINE 16 NEW_LINE 20 NEW_LINE 24 NEW_LINE 2 NEW_LINE 6 NEW_LINE 10 NEW_LINE 14 NEW_LINE 18 NEW_LINE 22 NEW_LINE 26 NEW_LINE 1 NEW_LINE 5 NEW_LINE 9 NEW_LINE 13 NEW_LINE 17 NEW_LINE 21 NEW_LINE 25 NEW_LINE 0 NEW_LINE 4 NEW_LINE 8 NEW_LINE 12 NEW_LINE 16 NEW_LINE 20 NEW_LINE 24 NEW_LINE 1 NEW_LINE 5 NEW_LINE 9 NEW_LINE 13 NEW_LINE 17 NEW_LINE 21 NEW_LINE 25 NEW_LINE 0 NEW_LINE 4 NEW_LINE 8 NEW_LINE 12 NEW_LINE 16 NEW_LINE 20 NEW_LINE 24 NEW_LINE 1 NEW_LINE 5 NEW_LINE 9 NEW_LINE 13 NEW_LINE 17 NEW_LINE 21 NEW_LINE 25 NEW_LINE 0 NEW_LINE 4 NEW_LINE 8 NEW_LINE 12 NEW_LINE 16 NEW_LINE 20 NEW_LINE 24 NEW_LINE 1 NEW_LINE 5 NEW_LINE 9 NEW_LINE 13 NEW_LINE 17 NEW_LINE 21 NEW_LINE 25 NEW_LINE "}
{"value":"] \\n def countFrequencies ( arr , n , limit ) : NEW_LINE INDENT count = [ 0 ] * ( limit + 1 ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT count [ arr [ i ] ] += 1 NEW_LINE DEDENT for i in range ( 1 , limit + 1 ) : NEW_LINE INDENT count [ i ] += count [ i - 1 ] NEW_LINE DEDENT return count NEW_LINE DEDENT arr = [ 1 , 1 , 2 , 2 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 5 , 5 , 5 , 5 , 6 , 6 , 7 , 7 , 7 , 7 , 7 , 8 , 8 , 9 , 9 , 9 , 9 , 10 , 10 , 10 , 10 , 10 , 10 , 11 , 11 , 11 , 11 , 11 , 12 , 12 , 12 , 13 , 13 , 13 , 13 , 13 , 14 , 14 , 14 , 14 , 14 , 15 , 15 , 15 , 15 , 15 , 15 , 16 , 16 , 16 , 16 , 16 , 16 , 17 , 17 , 17 , 17 , 17 , 17 , 17 , 17 , 17 , 18 , 18 , 18 , 18 , 18 , 18 , 19 , 19 , 19 , 19 , 19 , 19 , 19 , 19 , 19 , 19 , 19 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 21"}
{"value":"] def check ( s , m ) : NEW_LINE INDENT n = len ( s ) NEW_LINE count1 = 0 NEW_LINE count0 = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( s [ i ] == '0' ) : NEW_LINE INDENT count0 += 1 NEW_LINE DEDENT else : NEW_LINE INDENT count1 += 1 NEW_LINE DEDENT if ( count0 >= m ) : NEW_LINE INDENT return \" Yes \" NEW_LINE DEDENT if ( count1 >= m ) : NEW_LINE INDENT return \" Yes \" NEW_LINE DEDENT DEDENT return \" No \" NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT s = \"10001\" NEW_LINE m = 3 NEW_LINE print ( check ( s , m ) ) NEW_LINE DEDENT 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE"}
{"value":"] def product ( a , k ) : NEW_LINE INDENT res = 1 NEW_LINE level = 0 NEW_LINE for i in range ( 1 , a + 1 ) : NEW_LINE INDENT res *= i NEW_LINE DEDENT return res NEW_LINE DEDENT a = 4 NEW_LINE k = 2 NEW_LINE print ( product ( a , k ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE 57 NEW_LINE 58 NEW_LINE 59 NEW_LINE 60 NEW_LINE 61 NEW_LINE 62 NEW_LINE 63 NEW_LINE 64 NEW_LINE 65 NEW_LINE 66 NEW_LINE 67 NEW_LINE 68 NEW_LINE"}
{"value":"] \\n def removeDuplicates ( a , n ) : NEW_LINE INDENT isPresent = [ [ False for i in range ( n ) ] for j in range ( n ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT if ( isPresent [ i ] [ j ] == False ) : NEW_LINE INDENT isPresent [ i ] [ j ] = True NEW_LINE DEDENT DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT if ( isPresent [ i ] [ j ] == False ) : NEW_LINE INDENT isPresent [ i ] [ j ] = True NEW_LINE DEDENT DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT if ( isPresent [ i ] [ j ] == False ) : NEW_LINE INDENT print ( \"   \" , end = \" \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( a [ i ] [ j ] , end = \" \" ) NEW_LINE DEDENT DEDENT print ( \" \" , end = \" \" ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = [ [ ' a ' , ' a ' , ' b ' , ' c ' ] , [ ' a ' , ' b ' , ' b ' , ' d ' ] , [ ' b ' , ' d ' , ' e ' , ' e ' ] , [ ' b ' , ' c ' , ' c ' , ' d ' ] ] NEW_LINE n = 4 NEW_LINE removeDuplicates ( a , n ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 2 NEW_LINE 1 NEW_LINE 1 NEW_LINE 3 NEW_LINE 4 NEW_LINE 4 NEW_LINE 2 NEW_LINE 2 NEW_LINE 1 NEW_LINE 1 NEW_LINE 3 NEW_LINE 4 NEW_LINE 4 NEW_LINE 2 NEW_LINE 2 NEW_LINE 1"}
{"value":"] \\n def isValidISBN ( s ) : NEW_LINE INDENT if ( len ( s ) != 10 ) : NEW_LINE INDENT return False NEW_LINE DEDENT sum = 0 NEW_LINE for i in range ( 9 ) : NEW_LINE INDENT sum = sum + ( ord ( s [ i ] ) - ord ( '0' ) ) * ( 10 - i ) NEW_LINE DEDENT if ( ( ( sum % 11 ) == 0 ) or ( ( sum % 11 ) == 10 and s [ 9 ] == 'X' ) ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT s = \" 9781449352717 \" NEW_LINE if ( isValidISBN ( s ) ) : NEW_LINE INDENT print ( \" Valid   ISBN \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" Invalid   ISBN \" ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47"}
{"value":"] \\n def isVowel ( ch ) : NEW_LINE INDENT return ( ch == ' a ' or ch == ' e ' or ch == ' i ' or ch == ' o ' or ch == ' u ' ) NEW_LINE DEDENT def reverseVowels ( str ) : NEW_LINE INDENT n = len ( str ) NEW_LINE vowels = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( isVowel ( str [ i ] ) ) : NEW_LINE INDENT vowels . append ( str [ i ] ) NEW_LINE DEDENT DEDENT j = 0 NEW_LINE k = len ( vowels ) - 1 NEW_LINE while ( j < k ) : NEW_LINE INDENT str [ j ] , str [ k ] = str [ k ] , str [ j ] NEW_LINE j += 1 NEW_LINE k -= 1 NEW_LINE DEDENT return str NEW_LINE DEDENT str = \" geeksforgeeks \" NEW_LINE str = list ( str ) NEW_LINE print ( \" Original   String : \" , str ) NEW_LINE str = reverseVowels ( str ) NEW_LINE print ( \" Modified   String : \" , \" \" . join ( str ) ) NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 3"}
{"value":"] def getString ( s ) : NEW_LINE INDENT output = \" \" NEW_LINE v = False NEW_LINE for i in range ( len ( s ) ) : NEW_LINE INDENT if ( s [ i ] == '   ' ) : NEW_LINE INDENT v = True NEW_LINE DEDENT else : NEW_LINE INDENT if ( v == True ) : NEW_LINE INDENT output += s [ i ] NEW_LINE v = False NEW_LINE DEDENT DEDENT DEDENT return output NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT s = \" Geeks   for   Geeks \" NEW_LINE print ( getString ( s ) ) NEW_LINE DEDENT 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE 57 NEW_LINE 58 NEW_LINE 5"}
{"value":"] def dfs ( i , j , vis , ans , z , z_count , mat ) : NEW_LINE INDENT vis [ i ] [ j ] = True NEW_LINE z += 1 NEW_LINE if ( i == len ( mat ) - 1 and j == len ( mat [ 0 ] ) - 1 ) : NEW_LINE INDENT if ( z == z_count ) : NEW_LINE INDENT ans . append ( z ) NEW_LINE DEDENT DEDENT if ( i > 0 and mat [ i - 1 ] [ j ] == '0' and vis [ i - 1 ] [ j ] == False ) : NEW_LINE INDENT dfs ( i - 1 , j , vis , ans , z , z_count , mat ) NEW_LINE DEDENT if ( j > 0 and mat [ i ] [ j - 1 ] == '0' and vis [ i ] [ j - 1 ] == False ) : NEW_LINE INDENT dfs ( i , j - 1 , vis , ans , z , z_count , mat ) NEW_LINE DEDENT if ( i < len ( mat ) - 1 and mat [ i + 1 ] [ j ] == '0' and vis [ i + 1 ] [ j ] == False ) : NEW_LINE INDENT dfs ( i + 1 , j , vis , ans , z , z_count , mat ) NEW_LINE DEDENT if ( j < len ( mat [ 0 ] ) - 1 and mat [ i ] [ j + 1 ] == '0' and vis [ i ] [ j + 1 ] == False ) : NEW_LINE INDENT dfs ( i , j + 1 , vis , ans , z , z_count , mat ) NEW_LINE DEDENT vis [ i ] [ j ] = False NEW_LINE DEDENT def countPaths ( mat ) : NEW_LINE INDENT z_count = 0 NEW_LINE for i in range ( len ( mat ) ) : NEW_LINE INDENT for j in range ( len ( mat [ 0 ] ) ) : NEW_LINE INDENT if ( mat [ i ] [ j ] == '1' ) : NEW_LINE INDENT z_count +="}
{"value":"] \\n def countPairs ( arr , n ) : NEW_LINE INDENT ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr [ i ] = abs ( arr [ i ] ) NEW_LINE DEDENT arr . sort ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT right = n - 1 NEW_LINE for j in range ( i + 1 , n ) : NEW_LINE INDENT if ( arr [ i ] + arr [ j ] > arr [ right ] ) : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT ans += right - j NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT return ans NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 2 , 1 , - 2 , - 3 , 4 ] NEW_LINE n = len ( arr ) NEW_LINE print ( countPairs ( arr , n ) ) NEW_LINE DEDENT 2 1 - 2 - 3 4 NEW_LINE \/ * 4 * \/ NEW_LINE \/ * 2 * \/ NEW_LINE \/ * 2 * \/ NEW_LINE \/ * 1 * \/ NEW_LINE \/ * 4 * \/ NEW_LINE 2 NEW_LINE 1 NEW_LINE - 2 NEW_LINE - 3 NEW_LINE 4 NEW_LINE 2 NEW_LINE 1 NEW_LINE - 2 NEW_LINE - 3 NEW_LINE 4 NEW_LINE 2 NEW_LINE 1 NEW_LINE - 2 NEW_LINE - 3 NEW_LINE 4 NEW_LINE 2 NEW_LINE 1 NEW_LINE - 2 NEW_LINE - 3 NEW_LINE 4 NEW_LINE 2 NEW_LINE 1 NEW_LINE - 2 NEW_LINE - 3 NEW_LINE 4 NEW_LINE 2 NEW_LINE 1 NEW_LINE - 2 NEW_LINE - 3 NEW_LINE 4 NEW_LINE 2 NEW_LINE 1 NEW_LINE - 2 NEW_LINE - 3 NEW_LINE 4 NEW_LINE 2 NEW_LINE 1 NEW_LINE -"}
{"value":"] def areaOfSquare ( S ) : NEW_LINE INDENT d = S NEW_LINE return d * d NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT S = 5 NEW_LINE print ( areaOfSquare ( S ) ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE 57 NEW_LINE 58 NEW_LINE 59 NEW_LINE 60 NEW_LINE 61 NEW_LINE 62 NEW_LINE 63 NEW_LINE 64 NEW_LINE 65 NEW_LINE 66 NEW_LINE 67 NEW_LINE 68 NEW_LINE 69 NEW_LINE 70 NEW_LINE 71 NEW_LINE 72 NEW_LINE 73 NEW_LINE 7"}
{"value":"] \\n N = 4 NEW_LINE M = 5 NEW_LINE def maxPoints ( points ) : NEW_LINE INDENT n = len ( points ) NEW_LINE m = len ( points [ 0 ] ) NEW_LINE dp = [ [ 0 for i in range ( m ) ] for j in range ( n ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( m ) : NEW_LINE INDENT dp [ i ] [ j ] = max ( dp [ i ] [ j ] , 1 + dp [ i - 1 ] [ j ] ) NEW_LINE DEDENT DEDENT ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT ans = max ( ans , dp [ i ] [ m - 1 ] ) NEW_LINE DEDENT return ans NEW_LINE DEDENT points = [ [ 1 , 1 ] , [ 1 , 2 ] , [ 2 , 2 ] , [ 2 , 1 ] ] NEW_LINE print ( maxPoints ( points ) ) NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 2 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 2 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 2 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 2 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 2 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 2 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 2 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 2 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 2 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 2 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 2 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 2 NEW_LINE 1 NEW_LINE "}
{"value":"W_LINE INDENT def icosihenagonal ( n ) : NEW_LINE INDENT return ( 17 * n * n - 16 * n + 5 ) \/\/ 2 NEW_LINE DEDENT n = 4 NEW_LINE print ( icosihenagonal ( n}
{"value":"] \\n def findCentroid ( vertices ) : NEW_LINE INDENT n = len ( vertices ) NEW_LINE A = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT A = A + vertices [ i ] [ 0 ] * vertices [ ( i + 1 ) % n ] [ 1 ] NEW_LINE DEDENT A = A \/ 3 NEW_LINE x = 0 NEW_LINE y = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT x = x + vertices [ i ] [ 0 ] * vertices [ ( i + 1 ) % n ] [ 1 ] NEW_LINE y = y + vertices [ i ] [ 1 ] * vertices [ ( i + 1 ) % n ] [ 1 ] NEW_LINE DEDENT x = x \/ 3 NEW_LINE y = y \/ 3 NEW_LINE print ( \" Centroid   is   ( \" , x , \" ,   \" , y , \" ) \" ) NEW_LINE DEDENT vertices = [ [ 1 , 1 ] , [ 2 , 4 ] , [ 5 , 3 ] , [ 4 , 1 ] ] NEW_LINE findCentroid ( vertices ) NEW_LINE 1 , 1 NEW_LINE 2 , 4 NEW_LINE 5 , 3 NEW_LINE 4 , 1 NEW_LINE 1 , 1 NEW_LINE 2 , 4 NEW_LINE 5 , 3 NEW_LINE 4 , 1 NEW_LINE 1 , 1 NEW_LINE 2 , 4 NEW_LINE 5 , 3 NEW_LINE 4 , 1 NEW_LINE 1 , 1 NEW_LINE 2 , 4 NEW_LINE 5 , 3 NEW_LINE 4 , 1 NEW_LINE 1 , 1 NEW_LINE 2 , 4 NEW_LINE 5 , 3 NEW_LINE 4 , 1 NEW_LINE 1 , 1 NEW_LINE 2 , 4 NEW_LINE 5 , 3 NEW_LINE 4 , 1 NEW_LINE 1 , 1 NEW_LINE 2 , 4 NEW_LINE 5 , 3 NEW_LINE 4 , 1 NEW_LINE 1 , 1"}
{"value":"] \\n def angles ( a , b , c , d ) : NEW_LINE INDENT print ( \" Angles   are   : \" ) NEW_LINE print ( \" a   =   \" , ( 180 - a ) ) NEW_LINE print ( \" b   =   \" , ( 180 - b ) ) NEW_LINE print ( \" c   =   \" , ( 180 - c ) ) NEW_LINE print ( \" d   =   \" , ( 180 - d ) ) NEW_LINE DEDENT a = 45 NEW_LINE b = 50 NEW_LINE c = 60 NEW_LINE d = 80 NEW_LINE angles ( a , b , c , d ) NEW_LINE 2 NEW_LINE 4 NEW_LINE 3 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE 57 NEW_LINE 58 NEW_LINE 59 NEW_LINE"}
{"value":"] \\n def distance ( a , b , c , d , e , f , g , h , i ) : NEW_LINE INDENT return abs ( ( ( a * e - b * d ) * ( g - h ) - ( a * g - c * d ) * ( e - h ) ) \/ ( ( a * e - b * d ) * ( f - h ) - ( a * f - c * d ) * ( e - h ) ) NEW_LINE DEDENT a = 1 NEW_LINE b = 2 NEW_LINE c = 3 NEW_LINE d = 4 NEW_LINE e = 5 NEW_LINE f = 6 NEW_LINE g = 7 NEW_LINE h = 8 NEW_LINE i = 9 NEW_LINE print ( distance ( a , b , c , d , e , f , g , h , i ) ) NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE "}
{"value":"] def fact ( n ) : NEW_LINE INDENT res = 1 NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT res *= i NEW_LINE DEDENT return res NEW_LINE DEDENT def countWays ( N ) : NEW_LINE INDENT ans = ( fact ( N ) \/\/ fact ( N \/\/ 2 ) ) \/\/ 2 NEW_LINE return ans NEW_LINE DEDENT N = 4 NEW_LINE print ( countWays ( N ) ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE 57 NEW_LINE 58 NEW_LINE 59 NEW_LINE 60 NEW_LINE 61 NEW_LINE 62 NEW_LINE 63 NEW_LINE 64 NEW_LINE 65 NEW_LINE 66"}
{"value":"] def check ( S , D ) : NEW_LINE INDENT hash = { } NEW_LINE hash [ 0 ] = S % D NEW_LINE for i in range ( 1 , S + 1 ) : NEW_LINE INDENT if ( hash . get ( i , - 1 ) != - 1 ) : NEW_LINE INDENT return \" No \" NEW_LINE DEDENT hash [ i ] = ( hash [ i - 1 ] + hash [ i - 1 ] % D ) % D NEW_LINE DEDENT return \" Yes \" NEW_LINE DEDENT S = 1000 NEW_LINE D = 3 NEW_LINE print ( check ( S , D ) ) NEW_LINE 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1"}
{"value":"] def minSteps ( x , y ) : NEW_LINE INDENT count = 0 NEW_LINE while ( x > 0 and y > 0 ) : NEW_LINE INDENT if ( x > y ) : NEW_LINE INDENT count += x \/\/ y NEW_LINE x = x % y NEW_LINE DEDENT else : NEW_LINE INDENT count += y \/\/ x NEW_LINE y = y % x NEW_LINE DEDENT DEDENT if ( x > 1 or y > 1 ) : NEW_LINE INDENT print ( count ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT X = 2 NEW_LINE Y = 3 NEW_LINE minSteps ( X , Y ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE "}
{"value":"] def minReversals ( s ) : NEW_LINE INDENT m = s . count ( ' ( ' ) ; NEW_LINE n = s . count ( ' ) ' ) ; NEW_LINE if ( ( m + n ) % 2 == 1 ) : NEW_LINE INDENT return - 1 ; NEW_LINE DEDENT while ( m > 0 and n > 0 ) : NEW_LINE INDENT if ( m > n ) : NEW_LINE INDENT s = s [ : - 1 ] ; NEW_LINE m -= 1 ; NEW_LINE DEDENT else : NEW_LINE INDENT s = s [ : - 1 ] ; NEW_LINE n -= 1 ; NEW_LINE DEDENT DEDENT red_len = ( m + n ) ; NEW_LINE return ( m + n ) \/ 2 + n % 2 ; NEW_LINE DEDENT s = \" ( ( ( ( ) ) ) \" ; NEW_LINE print ( minReversals ( s ) ) ; NEW_LINE 2 NEW_LINE 4 NEW_LINE 6 NEW_LINE 8 NEW_LINE 10 NEW_LINE 12 NEW_LINE 14 NEW_LINE 16 NEW_LINE 18 NEW_LINE 20 NEW_LINE 22 NEW_LINE 24 NEW_LINE 26 NEW_LINE 28 NEW_LINE 30 NEW_LINE 32 NEW_LINE 34 NEW_LINE 36 NEW_LINE 38 NEW_LINE 40 NEW_LINE 42 NEW_LINE 44 NEW_LINE 46 NEW_LINE 48 NEW_LINE 50 NEW_LINE 52 NEW_LINE 54 NEW_LINE 56 NEW_LINE 58 NEW_LINE 60 NEW_LINE 62 NEW_LINE 64 NEW_LINE 66 NEW_LINE 68 NEW_LINE 70 NEW_LINE 72 NEW_LINE 74 NEW_LINE 76 NEW_LINE 78 NEW_LINE 80 NEW_LINE 82 NEW_LINE 84 NEW_LINE 86 NEW_LINE 88 NEW_LINE 90 NEW_LINE 92 NEW_LINE "}
{"value":"T ] def minNumber ( arr , n ) : NEW_LINE INDENT current_max = 0 NEW_LINE last_entry = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT noOfNextD = 0 NEW_LINE if ( arr [ i ] == ' I ' ) : NEW_LINE INDENT noOfNextD = ( current_max - last_entry ) NEW_LINE if ( i == 0 ) : NEW_LINE INDENT for j in range ( 1 , current_max + 1 ) : NEW_LINE INDENT print ( j , end = \" \" ) NEW_LINE DEDENT DEDENT current_max += 1 NEW_LINE last_entry = current_max NEW_LINE DEDENT DEDENT elif ( arr [ i ] == ' D ' ) : NEW_LINE INDENT if ( i == 0 ) : NEW_LINE INDENT noOfNextD = current_max - last_entry - 1 NEW_LINE DEDENT else : NEW_LINE INDENT noOfNextD = last_entry - 1 NEW_LINE DEDENT print ( current_max - noOfNextD , end = \" \" ) NEW_LINE print ( current_max - noOfNextD , end = \" \" ) NEW_LINE last_entry = current_max - noOfNextD NEW_LINE DEDENT DEDENT DEDENT 1 NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ ' I ' , ' D ' , ' D ' , ' D ' , ' I ' , ' D ' ] NEW_LINE minNumber ( arr , len ( arr ) ) NEW_LINE DEDENT 2 NEW_LINE DEDENT 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE"}
{"value":"] \\n def printMinimumNumber ( s , n ) : NEW_LINE INDENT min_avail = 0 NEW_LINE pos_of_I = - 1 NEW_LINE output = [ ] NEW_LINE if ( s [ 0 ] == ' I ' ) : NEW_LINE INDENT output . append ( 1 ) NEW_LINE min_avail = 1 NEW_LINE DEDENT else : NEW_LINE INDENT output . append ( 0 ) NEW_LINE min_avail = 0 NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT if ( s [ i ] == ' I ' ) : NEW_LINE INDENT output . append ( min_avail + 1 ) NEW_LINE min_avail = min_avail + 1 NEW_LINE pos_of_I = i NEW_LINE DEDENT else : NEW_LINE INDENT output . append ( min_avail ) NEW_LINE min_avail = min_avail + 1 NEW_LINE DEDENT DEDENT print ( * output ) NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT s = \" DDDIDID \" NEW_LINE n = len ( s ) NEW_LINE printMinimumNumber ( s , n ) NEW_LINE DEDENT 2 NEW_LINE 4 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38"}
{"value":"] def decode ( s ) : NEW_LINE INDENT result = \" \" NEW_LINE stack = [ ] NEW_LINE for i in range ( len ( s ) ) : NEW_LINE INDENT stack . append ( int ( s [ i ] ) + 1 ) NEW_LINE DEDENT while ( len ( stack ) > 0 ) : NEW_LINE INDENT result += str ( stack [ - 1 ] ) NEW_LINE stack . pop ( ) NEW_LINE DEDENT return result NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT s = \"1001\" NEW_LINE print ( decode ( s ) ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 2 NEW_LINE 2 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 2 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 2 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 2 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 2 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 2 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 2 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 2 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 2 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 2 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 2 NEW_LINE 0"}
{"value":"] \\n def minimumNumber ( arr , n ) : NEW_LINE INDENT rank = [ 0 ] * 10 NEW_LINE for i in range ( 10 ) : NEW_LINE INDENT rank [ i ] = i + 1 NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT rank [ ord ( arr [ i ] ) - ord ( '0' ) ] = i + 2 NEW_LINE DEDENT res = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT res = res * 10 + rank [ ord ( arr [ i ] ) - ord ( '0' ) ] NEW_LINE DEDENT return res NEW_LINE DEDENT arr = [ '1' , '2' , '3' , '4' , '5' ] NEW_LINE n = len ( arr ) NEW_LINE print ( minimumNumber ( arr , n ) ) NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 1 NEW_LINE"}
{"value":"] NEW_LINE def isPrime ( n ) : NEW_LINE INDENT for i in range ( 2 , n + 1 ) : NEW_LINE INDENT if ( i * i > n ) : NEW_LINE INDENT break NEW_LINE DEDENT if ( n % i == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def smallestNumber ( arr , n ) : NEW_LINE INDENT Hash = [ 0 for i in range ( 10 ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT Hash [ arr [ i ] ] += 1 NEW_LINE DEDENT res = \" \" NEW_LINE for i in range ( 1 , 10 ) : NEW_LINE INDENT while ( Hash [ i ] > 0 ) : NEW_LINE INDENT res += str ( i ) NEW_LINE Hash [ i ] -= 1 NEW_LINE DEDENT DEDENT first = res [ 0 ] NEW_LINE last = res [ len ( res ) - 1 ] NEW_LINE for i in range ( 1 , 10 ) : NEW_LINE INDENT if ( isPrime ( int ( first + i + last ) ) ) : NEW_LINE INDENT print ( first + i + last ) NEW_LINE return NEW_LINE DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 1 , 2 , 2 , 3 , 3 , 4 , 4 , 5 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE smallestNumber ( arr , n ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 0 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 0 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE "}
{"value":"] def gcd ( a , b ) : NEW_LINE INDENT if ( a == 0 ) : NEW_LINE INDENT return b NEW_LINE DEDENT return gcd ( b % a , a ) NEW_LINE DEDENT def isCoprime ( a , b ) : NEW_LINE INDENT return ( gcd ( a , b ) == 1 ) NEW_LINE DEDENT def findTriplet ( L , R ) : NEW_LINE INDENT flag = False NEW_LINE for a in range ( L , R + 1 ) : NEW_LINE INDENT for b in range ( L , R + 1 ) : NEW_LINE INDENT if ( isCoprime ( a , b ) ) : NEW_LINE INDENT for c in range ( L , R + 1 ) : NEW_LINE INDENT if ( not isCoprime ( b , c ) ) : NEW_LINE INDENT if ( not isCoprime ( a , c ) ) : NEW_LINE INDENT flag = True NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT DEDENT DEDENT return flag NEW_LINE DEDENT L = 2 NEW_LINE R = 10 NEW_LINE if ( findTriplet ( L , R ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT L = 23 NEW_LINE R = 46 NEW_LINE if ( findTriplet ( L , R ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE "}
{"value":"] \\n import math NEW_LINE def check ( a , b ) : NEW_LINE INDENT cube = int ( math . cbrt ( a * b ) ) NEW_LINE if ( a % cube == 0 and b % cube == 0 ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT DEDENT a = 10 NEW_LINE b = 100 NEW_LINE check ( a , b ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE 57 NEW_LINE 58 NEW_LINE 59 NEW_LINE 60 NEW_LINE 61 NEW_LINE 62 NEW_LINE 63 NEW_LINE 64 NEW_LINE "}
{"value":"] \\n def isUndulating ( n ) : NEW_LINE INDENT num = str ( n ) NEW_LINE len = len ( num ) NEW_LINE if ( len < 3 ) : NEW_LINE INDENT return False NEW_LINE DEDENT for i in range ( 0 , len - 1 , 2 ) : NEW_LINE INDENT if ( num [ i ] != num [ i + 1 ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT n = 1212 NEW_LINE if ( isUndulating ( n ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 12 NEW_LINE 1212 NEW_LINE 121212 NEW_LINE 12121212 NEW_LINE 1212121212 NEW_LINE 121212121212 NEW_LINE 12121212121212 NEW_LINE 1212121212121212 NEW_LINE 121212121212121212 NEW_LINE 12121212121212121212 NEW_LINE 1212121212121212121212 NEW_LINE 121212121212121212121212 NEW_LINE 12121212121212121212121212 NEW_LINE 1212121212121212121212121212 NEW_LINE 121212121212121212121212121212 NEW_LINE 1212121212121212"}
{"value":"] def sumOfSeries ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum += i * i NEW_LINE DEDENT return sum NEW_LINE DEDENT n = 5 NEW_LINE print ( sumOfSeries ( n ) ) NEW_LINE 2 NEW_LINE 4 NEW_LINE 9 NEW_LINE 16 NEW_LINE 25 NEW_LINE 36 [\/INST] 2 NEW_LINE 4 NEW_LINE 9 NEW_LINE 16 NEW_LINE 25 NEW_LINE 36 2 NEW_LINE 4 NEW_LINE 9 NEW_LINE 16 NEW_LINE 25 NEW_LINE 36 2 NEW_LINE 4 NEW_LINE 9 NEW_LINE 16 NEW_LINE 25 NEW_LINE 36 2 NEW_LINE 4 NEW_LINE 9 NEW_LINE 16 NEW_LINE 25 NEW_LINE 36 2 NEW_LINE 4 NEW_LINE 9 NEW_LINE 16 NEW_LINE 25 NEW_LINE 36 2 NEW_LINE 4 NEW_LINE 9 NEW_LINE 16 NEW_LINE 25 NEW_LINE 36 2 NEW_LINE 4 NEW_LINE 9 NEW_LINE 16 NEW_LINE 25 NEW_LINE 36 2 NEW_LINE 4 NEW_LINE 9 NEW_LINE 16 NEW_LINE 25 NEW_LINE 36 2 NEW_LINE 4 NEW_LINE 9 NEW_LINE 16 NEW_LINE 25 NEW_LINE 36 2 NEW_LINE 4 NEW_LINE 9 NEW_LINE 16 NEW_LINE 25 NEW_LINE 36 2 NEW_LINE 4 NEW_LINE 9 NEW_LINE 16 NEW_LINE 25 NEW_LINE 36 2 NEW_LINE 4 NEW_LINE 9 NEW_LINE 16 NEW_LINE 25 NEW_LINE 36 2 NEW_LINE 4 NEW_LINE 9 NEW_LINE 16 NEW_LINE 25 NEW_LINE 36 2 NEW_"}
{"value":"] \\n def countWithLastDigit ( n , k ) : NEW_LINE INDENT return ( n \/\/ 10 ) * ( ( k - 1 ) + 1 ) NEW_LINE DEDENT n = 10 NEW_LINE k = 2 NEW_LINE print ( countWithLastDigit ( n , k ) ) NEW_LINE 1 , 9 NEW_LINE 2 , 8 NEW_LINE 3 , 7 NEW_LINE 4 , 6 NEW_LINE 5 , 5 NEW_LINE 6 , 4 NEW_LINE 7 , 3 NEW_LINE 8 , 2 NEW_LINE 9 , 1 NEW_LINE 10 , 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE "}
{"value":"] \\n def sumDivisible ( l , r ) : NEW_LINE INDENT n = ( r \/\/ 6 ) + 1 NEW_LINE m = ( ( l - 1 ) \/\/ 6 ) NEW_LINE sum1 = ( n * ( n + 1 ) \/\/ 2 ) * 6 NEW_LINE sum2 = ( m * ( m + 1 ) \/\/ 2 ) * 6 NEW_LINE return sum1 - sum2 NEW_LINE DEDENT l = 1 NEW_LINE r = 10 NEW_LINE print ( sumDivisible ( l , r ) ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE 57 NEW_LINE 58 NEW_LINE 59 NEW_LINE 60 NEW_LINE 61 NEW_LINE 62 NEW_LINE 63 NEW_LINE 64 NEW"}
{"value":"] \\n def findLargest ( str ) : NEW_LINE INDENT n = len ( str ) NEW_LINE for index in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT if ( index > 0 and str [ index ] > str [ index - 1 ] ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if ( index == - 1 ) : NEW_LINE INDENT return str NEW_LINE DEDENT for i in range ( index + 1 , n ) : NEW_LINE INDENT if ( str [ index ] > str [ i ] ) : NEW_LINE INDENT swap ( str , index , i ) NEW_LINE return str NEW_LINE DEDENT DEDENT DEDENT def swap ( str , i , j ) : NEW_LINE INDENT temp = str [ i ] NEW_LINE str [ i ] = str [ j ] NEW_LINE str [ j ] = temp NEW_LINE DEDENT str = \"123456\" NEW_LINE print ( findLargest ( str ) ) NEW_LINE 2 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW"}
{"value":"] def horner ( poly , n ) : NEW_LINE INDENT res = poly [ n - 1 ] NEW_LINE for i in range ( n - 2 , - 1 , - 1 ) : NEW_LINE INDENT res = res * x + poly [ i ] NEW_LINE DEDENT return res NEW_LINE DEDENT def sign ( poly , n ) : NEW_LINE INDENT return ( horner ( poly , n ) > 0 ) NEW_LINE DEDENT x = 3 NEW_LINE poly = [ 2 , - 6 , 2 , - 1 ] NEW_LINE n = len ( poly ) NEW_LINE if ( sign ( poly , n ) ) : NEW_LINE INDENT print ( \" + \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" - \" ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54"}
{"value":"] \\n import math NEW_LINE def sieveOfEratostheneses ( n ) : NEW_LINE INDENT prime = [ True for i in range ( n + 1 ) ] NEW_LINE p = 2 NEW_LINE while ( p * p <= n ) : NEW_LINE INDENT if ( prime [ p ] == True ) : NEW_LINE INDENT for i in range ( p * p , n + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT p += 1 NEW_LINE DEDENT return prime NEW_LINE DEDENT def findNumber ( arr , n ) : NEW_LINE INDENT prime = sieveOfEratostheneses ( 100000 ) NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE DEDENT if ( prime [ sum ] ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT num = sum + 1 NEW_LINE while ( not prime [ num ] ) : NEW_LINE INDENT num += 1 NEW_LINE DEDENT return num - sum NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 ] NEW_LINE n = len ( arr ) NEW_LINE print ( findNumber ( arr , n ) ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0"}
{"value":"] \\n def subarraySum ( arr , n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 0 , n ) : NEW_LINE INDENT for j in range ( i , n ) : NEW_LINE INDENT sum += arr [ j ] NEW_LINE DEDENT print ( \" Sum   of   subarray   from   \" , i , \" to   \" , j , \" is   \" , sum ) NEW_LINE sum = 0 NEW_LINE DEDENT DEDENT arr = [ 10 , 20 , 30 , 40 , 50 ] NEW_LINE n = len ( arr ) NEW_LINE subarraySum ( arr , n ) NEW_LINE 2 NEW_LINE 4 NEW_LINE 6 NEW_LINE 10 NEW_LINE Sum   of   subarray   from   2   to   4   is   100 NEW_LINE Sum   of   subarray   from   0   to   0   is   0 NEW_LINE Sum   of   subarray   from   0   to   1   is   10 NEW_LINE Sum   of   subarray   from   0   to   2   is   30 NEW_LINE Sum   of   subarray   from   0   to   3   is   70 NEW_LINE Sum   of   subarray   from   0   to   4   is   120 NEW_LINE Sum   of   subarray   from   0   to   5   is   170 NEW_LINE Sum   of   subarray   from   1   to   4   is   140 NEW_LINE Sum   of   subarray   from   1   to   5   is   220 NEW_LINE Sum   of   subarray   from   2   to   5   is   250 NEW_LINE Sum   of   subarray   from   3   to   5   is   210 NEW_LINE Sum   of   subarray   from   4   to   5   is   50 NEW_LINE 2 NEW_LINE 4 NEW_LINE 6 NEW_LINE 10 NEW_LINE 14 NEW_LINE 22 NEW_LINE 25 NEW_LINE 21 NEW_LINE 50 NEW_LINE 2"}
{"value":"] def highestPowerOfTwo ( n ) : NEW_LINE INDENT return ( 1 << ( int ) ( ( ( n + 1 ) \/ 2 ) ) ) NEW_LINE DEDENT n = 10 NEW_LINE print ( highestPowerOfTwo ( n ) ) NEW_LINE 2 NEW_LINE 20 NEW_LINE 10 NEW_LINE 1 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 2 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE"}
{"value":"] def mod ( a , m ) : NEW_LINE INDENT while ( a > 0 ) : NEW_LINE INDENT if ( a % m < 0 ) : NEW_LINE INDENT a = a + m NEW_LINE DEDENT return a NEW_LINE DEDENT DEDENT def power ( a , b , m ) : NEW_LINE INDENT ans = 1 NEW_LINE a = mod ( a , m ) NEW_LINE while ( b > 0 ) : NEW_LINE INDENT if ( b % 2 == 1 ) : NEW_LINE INDENT ans = ( ans * a ) % m NEW_LINE DEDENT a = ( a * a ) % m NEW_LINE b = b \/\/ 2 NEW_LINE DEDENT return ans NEW_LINE DEDENT a = \"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"value":"] NEW_LINE class Data : NEW_LINE INDENT def __init__ ( self , x , y ) : NEW_LINE INDENT self . x = x NEW_LINE self . y = y NEW_LINE DEDENT DEDENT def interpolate ( x , n ) : NEW_LINE INDENT res = 0 NEW_LINE for i in range ( 0 , n ) : NEW_LINE INDENT term = 1 NEW_LINE for j in range ( 0 , n ) : NEW_LINE INDENT if ( i != j ) : NEW_LINE INDENT term *= ( x - x [ j ] ) \/ ( x [ i ] - x [ j ] ) NEW_LINE DEDENT DEDENT res += term * x [ i ] . y NEW_LINE DEDENT return res NEW_LINE DEDENT x = [ 0 , 1 , 2 , 3 ] NEW_LINE y = [ 0 , 1 , 1 , 2 ] NEW_LINE print ( interpolate ( 3 , 4 ) ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_"}
{"value":"] def printPrimes ( n ) : NEW_LINE INDENT n = n - 1 NEW_LINE marked = [ 0 ] * ( n + 1 ) NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT j = i * 2 NEW_LINE while ( j <= n ) : NEW_LINE INDENT marked [ j ] = True NEW_LINE j += i * 2 NEW_LINE DEDENT DEDENT print ( \"2   \" , end = \" \" ) NEW_LINE for i in range ( 3 , n + 1 ) : NEW_LINE INDENT if ( marked [ i ] == False ) : NEW_LINE INDENT print ( i , end = \"   \" ) NEW_LINE DEDENT DEDENT DEDENT n = 10 NEW_LINE printPrimes ( n ) NEW_LINE 2 NEW_LINE 3 NEW_LINE 5 NEW_LINE 7 NEW_LINE 11 NEW_LINE 13 NEW_LINE 17 NEW_LINE 19 NEW_LINE 23 NEW_LINE 29 NEW_LINE 31 NEW_LINE 37 NEW_LINE 41 NEW_LINE 43 NEW_LINE 47 NEW_LINE 49 NEW_LINE 53 NEW_LINE 59 NEW_LINE 61 NEW_LINE 67 NEW_LINE 71 NEW_LINE 73 NEW_LINE 79 NEW_LINE 83 NEW_LINE 89 NEW_LINE 97 NEW_LINE 101 NEW_LINE 103 NEW_LINE 107 NEW_LINE 109 NEW_LINE 113 NEW_LINE 127 NEW_LINE 131 NEW_LINE 137 NEW_LINE 139 NEW_LINE 149 NEW_LINE 151 NEW_LINE 157 NEW_LINE 163 NEW_LINE 167 NEW_LINE 173 NEW_LINE 179 NEW_LINE 181 NEW_LINE 191 NEW_LINE 193 NEW_LINE 197 NEW_LINE 199 NEW_LINE 211 NEW_LINE 223"}
{"value":"] def reconstructArray ( A , N , K ) : NEW_LINE INDENT B = [ 0 ] * N NEW_LINE X = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT X ^= A [ i ] NEW_LINE DEDENT for i in range ( N ) : NEW_LINE INDENT B [ i ] = X ^ A [ i ] NEW_LINE DEDENT for i in range ( N ) : NEW_LINE INDENT print ( B [ i ] , end = \"   \" ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT A = [ 2 , 5 , 6 , 7 , 10 ] NEW_LINE N = len ( A ) NEW_LINE K = 11 NEW_LINE reconstructArray ( A , N , K ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE"}
{"value":"] \\n def findExtra ( A , B , n ) : NEW_LINE INDENT res = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT res ^= A [ i ] NEW_LINE res ^= B [ i ] NEW_LINE DEDENT return res NEW_LINE DEDENT A = [ 1 , 3 , 5 , 7 ] NEW_LINE B = [ 1 , 3 , 5 , 7 , 8 ] NEW_LINE n = len ( A ) NEW_LINE print ( findExtra ( A , B , n ) ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE 57 NEW_LINE 58 NEW_LINE 59 NEW_LINE 60 NEW_LINE 61 NEW_LINE 62 NEW_LINE 63 NEW_LINE 64 NEW"}
{"value":"] def hammingDistance ( a , b ) : NEW_LINE INDENT return bin ( a ^ b ) . count ( '1' ) NEW_LINE DEDENT a = 4 NEW_LINE b = 15 NEW_LINE print ( hammingDistance ( a , b ) ) NEW_LINE 1 NEW_LINE 7 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE 57 NEW_LINE 58 NEW_LINE 59 NEW_LINE 60 NEW_LINE 61 NEW_LINE 62 NEW_LINE 63 NEW_LINE 64 NEW_LINE 65 NEW_LINE 66 NEW_LINE 67 NEW_LINE 68 NEW_LINE 69 NEW_LINE 70 NEW_LINE 71 NEW_LINE 72 NEW_LINE 73 NEW_LINE 74 NEW_LINE "}
{"value":"] \\n def findBitwiseAND ( N ) : NEW_LINE INDENT ans = 0 NEW_LINE while ( N ) : NEW_LINE INDENT ans = ans | N NEW_LINE N = N & ( N - 1 ) NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT N = 10 NEW_LINE findBitwiseAND ( N ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE 57 NEW_LINE 58 NEW_LINE 59 NEW_LINE 60 NEW_LINE 61 NEW_LINE 62 NEW_LINE 63 NEW_LINE 64 NEW_LINE 65 NEW_LINE 66 NEW_LINE 67 NEW_LINE 68 NEW_LINE 69 NEW_LINE 70 NEW_LINE 71 NEW_LINE 7"}
{"value":"] \\n def findMSB ( n ) : NEW_LINE INDENT k = 0 NEW_LINE while ( n != 0 ) : NEW_LINE INDENT n = n >> 1 NEW_LINE k += 1 NEW_LINE DEDENT return ( 1 << ( k - 1 ) ) NEW_LINE DEDENT n = 12 NEW_LINE print ( findMSB ( n ) ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 4 NEW_LINE 8 NEW_LINE 16 NEW_LINE 32 NEW_LINE 64 NEW_LINE 128 NEW_LINE 256 NEW_LINE 512 NEW_LINE 1024 NEW_LINE 2048 NEW_LINE 4096 NEW_LINE 8192 NEW_LINE 16384 NEW_LINE 32768 NEW_LINE 65536 NEW_LINE 131072 NEW_LINE 262144 NEW_LINE 524288 NEW_LINE 1048576 NEW_LINE 2097152 NEW_LINE 4194304 NEW_LINE 8388608 NEW_LINE 16777216 NEW_LINE 33554432 NEW_LINE 67108864 NEW_LINE 134217728 NEW_LINE 268435456 NEW_LINE 536870912 NEW_LINE 1073741824 NEW_LINE 2147483648 NEW_LINE 4294967296 NEW_LINE 8589934592 NEW_LINE 17179869184 NEW_LINE 34359738368 NEW_LINE 68719476736 NEW_LINE 137438953472 NEW_LINE 274877906944 NEW_LINE 54975581388"}
{"value":"] def countDistinctSubsets ( arr , n ) : NEW_LINE INDENT arr . sort ( ) NEW_LINE res = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT repetition = 0 NEW_LINE for j in range ( i + 1 , n ) : NEW_LINE INDENT if ( arr [ i ] == arr [ j ] ) : NEW_LINE INDENT repetition += 1 NEW_LINE DEDENT DEDENT res += ( 1 << repetition ) NEW_LINE DEDENT return res NEW_LINE DEDENT arr = [ 1 , 2 , 2 , 3 , 4 , 4 , 4 ] NEW_LINE n = len ( arr ) NEW_LINE print ( countDistinctSubsets ( arr , n ) ) NEW_LINE 2 NEW_LINE 4 NEW_LINE 8 NEW_LINE 12 NEW_LINE 16 NEW_LINE 20 NEW_LINE 24 NEW_LINE 28 NEW_LINE 32 NEW_LINE 36 NEW_LINE 40 NEW_LINE 44 NEW_LINE 48 NEW_LINE 52 NEW_LINE 56 NEW_LINE 60 NEW_LINE 64 NEW_LINE 68 NEW_LINE 72 NEW_LINE 76 NEW_LINE 80 NEW_LINE 84 NEW_LINE 88 NEW_LINE 92 NEW_LINE 96 NEW_LINE 100 NEW_LINE 104 NEW_LINE 108 NEW_LINE 112 NEW_LINE 116 NEW_LINE 120 NEW_LINE 124 NEW_LINE 128 NEW_LINE 132 NEW_LINE 136 NEW_LINE 140 NEW_LINE 144 NEW_LINE 148 NEW_LINE 152 NEW_LINE 156 NEW_LINE 160 NEW_LINE 164 NEW_LINE 168 NEW_LINE 172 NEW_LINE 176 NEW_LINE 180 NEW_LINE 184 NEW_LINE 188 NEW_LINE 192 NEW_LINE 196 NEW_LINE "}
{"value":"] def countSubsets ( arr , n ) : NEW_LINE INDENT mp = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] in mp : NEW_LINE INDENT mp [ arr [ i ] ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT mp [ arr [ i ] ] = 1 NEW_LINE DEDENT DEDENT maxi = 0 NEW_LINE for i in mp : NEW_LINE INDENT maxi = max ( maxi , mp [ i ] ) NEW_LINE DEDENT return ( 1 << maxi ) NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 1 , 2 , 2 , 3 , 3 ] NEW_LINE n = len ( arr ) NEW_LINE print ( countSubsets ( arr , n ) ) NEW_LINE DEDENT 2 NEW_LINE 2 NEW_LINE 3 NEW_LINE 3 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 2 NEW_LINE 3 NEW_LINE 3 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE"}
{"value":"] \\n dp = [ [ 0 for i in range ( 100000 ) ] for j in range ( 100000 ) ] NEW_LINE def preCalculate ( ) : NEW_LINE INDENT for i in range ( 1 , 100000 ) : NEW_LINE INDENT dp [ i ] [ i ] = 1 NEW_LINE DEDENT for i in range ( 1 , 100000 ) : NEW_LINE INDENT for j in range ( i , 100000 ) : NEW_LINE INDENT dp [ i ] [ j ] = dp [ i ] [ j - i ] + dp [ i ] [ i ] NEW_LINE DEDENT DEDENT DEDENT def countWays ( N ) : NEW_LINE INDENT if ( N == 0 or N == 1 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT if ( N == 2 ) : NEW_LINE INDENT return 2 NEW_LINE DEDENT if ( N == 3 ) : NEW_LINE INDENT return 5 NEW_LINE DEDENT if ( N == 4 ) : NEW_LINE INDENT return 7 NEW_LINE DEDENT if ( N == 5 ) : NEW_LINE INDENT return 11 NEW_LINE DEDENT if ( N == 6 ) : NEW_LINE INDENT return 15 NEW_LINE DEDENT if ( N == 7 ) : NEW_LINE INDENT return 20 NEW_LINE DEDENT if ( N == 8 ) : NEW_LINE INDENT return 26 NEW_LINE DEDENT if ( N == 9 ) : NEW_LINE INDENT return 33 NEW_LINE DEDENT if ( N == 10 ) : NEW_LINE INDENT return 41 NEW_LINE DEDENT if ( N == 11 ) : NEW_LINE INDENT return 50 NEW_LINE DEDENT if ( N == 12 ) : NEW_LINE INDENT return 60 NEW_LINE DEDENT if ( N == 13 ) : NEW_LINE INDENT return 71 NEW_LINE DEDENT"}
{"value":"] \\n sum = 0 NEW_LINE def findDistance ( root , target ) : NEW_LINE INDENT global sum NEW_LINE size = [ 0 , 0 ] NEW_LINE if ( root == None ) : NEW_LINE INDENT return NEW_LINE DEDENT size [ 0 ] += 1 NEW_LINE findDistance ( root . left , target ) NEW_LINE size [ 0 ] += 1 NEW_LINE findDistance ( root . right , target ) NEW_LINE DEDENT def countDistances ( root , target ) : NEW_LINE INDENT global sum NEW_LINE if ( root == target ) : NEW_LINE INDENT sum += size [ 0 ] NEW_LINE return NEW_LINE DEDENT if ( root . left != None ) : NEW_LINE INDENT sum += size [ 0 ] - size [ 1 ] NEW_LINE countDistances ( root . left , target ) NEW_LINE DEDENT if ( root . right != None ) : NEW_LINE INDENT countDistances ( root . right , target ) NEW_LINE sum += size [ 0 ] - size [ 1 ] NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT root = [ 10 , 5 , 1 , 7 , None , 12 , None ] NEW_LINE target = 10 NEW_LINE findDistance ( root , target ) NEW_LINE print ( sum ) NEW_LINE DEDENT 1 NEW_LINE 5 NEW_LINE 1 NEW_LINE 7 NEW_LINE None NEW_LINE 12 NEW_LINE 10 NEW_LINE 20 NEW_LINE 15 NEW_LINE 25 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 6 NEW_LINE 7 NEW_LINE 9 NEW_LINE 1 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 1"}
{"value":"] def rearrange ( a , b , n , k ) : NEW_LINE INDENT b . sort ( reverse = True ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( a [ i ] + b [ i ] > k ) : NEW_LINE INDENT print ( \" - 1\" ) NEW_LINE return NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT print ( a [ i ] , end = \"   \" ) NEW_LINE DEDENT DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT a = [ 1 , 2 , 3 , 4 , 5 ] NEW_LINE b = [ 1 , 2 , 3 , 4 , 5 ] NEW_LINE n = len ( a ) NEW_LINE k = 8 NEW_LINE rearrange ( a , b , n , k ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE - 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW"}
{"value":"] def countRows ( mat , N , M ) : NEW_LINE INDENT row = N NEW_LINE col = M NEW_LINE count = 0 NEW_LINE sum = 0 NEW_LINE for i in range ( row ) : NEW_LINE INDENT for j in range ( col ) : NEW_LINE INDENT sum += mat [ i ] [ j ] NEW_LINE DEDENT DEDENT for i in range ( row ) : NEW_LINE INDENT sum_of_row = 0 NEW_LINE for j in range ( col ) : NEW_LINE INDENT sum_of_row += mat [ i ] [ j ] NEW_LINE DEDENT if ( sum_of_row > sum - sum_of_row ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT print ( count ) NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT mat = [ [ 2 , 3 , 4 ] , [ 1 , 2 , 3 ] , [ 1 , 2 , 3 ] ] NEW_LINE N = 3 NEW_LINE M = 3 NEW_LINE countRows ( mat , N , M ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 3 NEW_LINE 2 NEW_LINE 1 NEW_LINE 3 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 3 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 3 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 3 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 3 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 3 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 3 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 3 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 3 NEW_LINE 2 NEW_LINE 1 NEW_LINE"}
{"value":"] def checkContiguous ( arr , n ) : NEW_LINE INDENT arr . sort ( ) NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if ( arr [ i ] != arr [ i - 1 ] and arr [ i ] != arr [ i - 1 ] + 1 ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT arr = [ 1 , 2 , 3 , 4 , 4 , 5 , 6 , 7 , 8 , 9 , 9 , 9 ] NEW_LINE n = len ( arr ) NEW_LINE if ( checkContiguous ( arr , n ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 9 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW"}
{"value":"] \\n def areContiguous ( arr , n ) : NEW_LINE INDENT m = arr [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if ( arr [ i ] > m ) : NEW_LINE INDENT m = arr [ i ] NEW_LINE DEDENT DEDENT M = arr [ n - 1 ] NEW_LINE if ( M - m < n - 1 ) : NEW_LINE INDENT return False NEW_LINE DEDENT visited = [ 0 ] * ( M + 1 ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT visited [ arr [ i ] ] = 1 NEW_LINE DEDENT for i in range ( 1 , M + 1 ) : NEW_LINE INDENT if ( visited [ i ] == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT arr = [ 1 , 2 , 2 , 3 , 3 , 4 ] NEW_LINE n = len ( arr ) NEW_LINE if ( areContiguous ( arr , n ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 2 NEW_LINE 3 NEW_LINE 3 NEW_LINE 4 NEW_LINE 4 NEW_LINE 5 NEW_LINE 5 NEW_LINE 6 NEW_LINE 6 NEW_LINE 7 NEW_LINE 7 NEW_LINE 8 NEW_LINE 8 NEW_LINE 9 NEW_LINE 9 NEW_LINE 10 NEW_LINE 10 NEW_LINE 11 NEW_LINE 11 NEW_LINE 12 NEW_LINE 12 NEW_LINE 13 NEW_LINE 13 NEW_LINE 14 NEW_LINE 14 NEW_LINE 15 NEW_LINE 15 NEW_LINE 16 NEW_LINE 16 NEW_LINE 17 NEW_LINE 17 NEW_LINE 18 NEW_LINE 18 NEW_LINE 19 NEW_LINE 19 NEW"}
{"value":"] \\n def checkContiguous ( arr , n ) : NEW_LINE INDENT us = [ 0 ] * ( n + 1 ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT us [ arr [ i ] ] = 1 NEW_LINE DEDENT if ( us [ 0 ] == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT for curr_ele in range ( arr [ 0 ] - 1 , - 1 , - 1 ) : NEW_LINE INDENT if ( us [ curr_ele ] == 0 ) : NEW_LINE INDENT continue NEW_LINE DEDENT count = 1 NEW_LINE while ( us [ curr_ele + count ] == 1 ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT us [ curr_ele ] = count NEW_LINE DEDENT for curr_ele in range ( arr [ 0 ] + 1 , n + 1 ) : NEW_LINE INDENT if ( us [ curr_ele ] == 0 ) : NEW_LINE INDENT continue NEW_LINE DEDENT count = 1 NEW_LINE while ( us [ curr_ele + count ] == 1 ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT us [ curr_ele ] = count NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT if ( us [ i ] == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 1 , 3 , 4 , 2 , 1 , 5 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE if ( checkContiguous ( arr , n ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT DEDENT 1 NEW_LINE 3 NEW_LINE 4 NEW_LINE 2 NEW_LINE 1 NEW_LINE 5 NEW_LINE 2 NEW_LINE 0 NEW_LINE "}
{"value":"] \\n def longestSubArray ( arr , n , k ) : NEW_LINE INDENT visited = [ 0 ] * ( n + 1 ) NEW_LINE count = 0 NEW_LINE length = 0 NEW_LINE best = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT if ( visited [ i ] == 0 ) : NEW_LINE INDENT count += 1 NEW_LINE if ( count > k ) : NEW_LINE INDENT count = k NEW_LINE DEDENT visited [ i ] = 1 NEW_LINE length += 1 NEW_LINE DEDENT else : NEW_LINE INDENT visited [ i ] += 1 NEW_LINE if ( visited [ i ] == 1 ) : NEW_LINE INDENT length += 1 NEW_LINE DEDENT else : NEW_LINE INDENT count -= 1 NEW_LINE DEDENT DEDENT DEDENT if ( length > best ) : NEW_LINE INDENT best = length NEW_LINE DEDENT DEDENT print ( \" The   length   of   longest   sub - array   is   \" , best ) NEW_LINE DEDENT arr = [ 1 , 1 , 1 , 2 , 2 , 3 , 3 , 3 ] NEW_LINE n = len ( arr ) NEW_LINE k = 3 NEW_LINE longestSubArray ( arr , n , k ) NEW_LINE 1 , 1 , 1 , 2 , 2 , 3 , 3 , 3 [\/INST] 2 NEW_LINE 10 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW"}
{"value":"] def checkOverlap ( arr , N , K ) : NEW_LINE INDENT v = [ ] NEW_LINE for i in range ( N ) : NEW_LINE INDENT v . append ( [ arr [ i ] , arr [ i ] % 2 ] ) NEW_LINE DEDENT v . sort ( ) NEW_LINE st = [ ] NEW_LINE for i in range ( len ( v ) ) : NEW_LINE INDENT if ( v [ i ] [ 1 ] == - 1 ) : NEW_LINE INDENT st . append ( v [ i ] [ 0 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT if ( len ( st ) == 0 ) : NEW_LINE INDENT continue NEW_LINE DEDENT top = st [ - 1 ] NEW_LINE st . pop ( ) NEW_LINE if ( v [ i ] [ 0 ] - top <= K ) : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT DEDENT DEDENT return False NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 1 , 3 , 2 , 4 , 5 , 6 ] NEW_LINE K = 2 NEW_LINE if ( checkOverlap ( arr , 6 , K ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE "}
{"value":"] \\n import sys NEW_LINE ptr = [ 0 for i in range ( 100 ) ] NEW_LINE def findMinRange ( arr , n , k ) : NEW_LINE INDENT ptr [ 0 ] = 0 NEW_LINE minrange = sys . maxsize NEW_LINE min_index = - 1 NEW_LINE max_index = - 1 NEW_LINE while ( min_index != k ) : NEW_LINE INDENT min_index = - 1 NEW_LINE max_index = - 1 NEW_LINE min_val = sys . maxsize NEW_LINE max_val = - sys . maxsize - 1 NEW_LINE for i in range ( k ) : NEW_LINE INDENT if ( ptr [ i ] == len ( arr [ i ] ) ) : NEW_LINE INDENT break NEW_LINE DEDENT if ( min_val > arr [ i ] [ ptr [ i ] ] ) : NEW_LINE INDENT min_val = arr [ i ] [ ptr [ i ] ] NEW_LINE min_index = i NEW_LINE DEDENT if ( max_val < arr [ i ] [ ptr [ i ] ] ) : NEW_LINE INDENT max_val = arr [ i ] [ ptr [ i ] ] NEW_LINE max_index = i NEW_LINE DEDENT DEDENT minrange = min ( minrange , max_val - min_val ) NEW_LINE ptr [ min_index ] += 1 NEW_LINE DEDENT return minrange NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ [ 1 , 3 , 5 , 7 , 9 ] , [ 2 , 4 , 6 , 8 , 10 ] , [ 1 , 3 , 5 , 7 , 9 ] ] NEW_LINE k = 3 NEW_LINE print ( findMinRange ( arr , k , k ) ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW"}
{"value":"] def findLargestD ( S , N ) : NEW_LINE INDENT S . sort ( ) NEW_LINE for i in range ( N - 1 , - 1 , - 1 ) : NEW_LINE INDENT j = i NEW_LINE k = i - 1 NEW_LINE l = i - 2 NEW_LINE while ( j >= 0 and k >= 0 and l >= 0 ) : NEW_LINE INDENT if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) : NEW_LINE INDENT return S [ i ] NEW_LINE DEDENT j -= 1 NEW_LINE k -= 1 NEW_LINE l -= 1 NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 , 5 , 6 ] NEW_LINE N = len ( arr ) NEW_LINE print ( findLargestD ( arr , N ) ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_"}
{"value":"] def findFourElements ( arr , n , sum ) : NEW_LINE INDENT mp = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT mp [ arr [ i ] + arr [ j ] ] = 1 NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT for k in range ( j + 1 , n ) : NEW_LINE INDENT for l in range ( k + 1 , n ) : NEW_LINE INDENT if ( ( sum - arr [ i ] - arr [ j ] - arr [ k ] - arr [ l ] ) in mp . keys ( ) ) : NEW_LINE INDENT print ( arr [ i ] , arr [ j ] , arr [ k ] , arr [ l ] ) NEW_LINE return NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT DEDENT arr = [ 1 , 4 , 45 , 6 , 10 , 8 ] NEW_LINE n = len ( arr ) NEW_LINE sum = 22 NEW_LINE findFourElements ( arr , n , sum ) NEW_LINE 2 NEW_LINE 4 NEW_LINE 45 NEW_LINE 6 NEW_LINE 10 NEW_LINE 8 NEW_LINE 22 NEW_LINE 2 \/ 3 NEW_LINE 4 \/ 3 NEW_LINE 6 \/ 3 NEW_LINE 10 \/ 3 NEW_LINE 8 \/ 3 NEW_LINE 22 \/ 3 NEW_LINE 22 \/ 3 NEW_LINE 22 \/ 3 NEW_LINE 22 \/ 3 NEW_LINE 22 \/ 3 NEW_LINE 22 \/ 3 NEW_LINE 22 \/ 3 NEW_LINE 22 \/ 3 NEW_LINE 22 \/ 3 NEW_LINE 22 \/ 3 NEW_LINE 22 \/ 3 NEW_LINE 22 \/ 3 NEW_LINE 22 \/ 3 NEW_LINE 22 \/ 3 NEW_LINE 22 \/"}
{"value":"] def maxCount ( arr , n , k ) : NEW_LINE INDENT arr . sort ( ) NEW_LINE count = 0 NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE if ( sum > k ) : NEW_LINE INDENT break NEW_LINE DEDENT count += 1 NEW_LINE DEDENT return count NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE k = 10 NEW_LINE print ( maxCount ( arr , n , k ) ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 10 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 10 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 10 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 10 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 10 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 10 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 10 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 10 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 10 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 10 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 10 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 10 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW"}
{"value":"] def leftRotate ( arr , d , n ) : NEW_LINE INDENT d = d % n NEW_LINE i = 0 NEW_LINE while i < d : NEW_LINE INDENT temp = arr [ 0 ] NEW_LINE for j in range ( 1 , n ) : NEW_LINE INDENT arr [ j - 1 ] = arr [ j ] NEW_LINE DEDENT arr [ n - 1 ] = temp NEW_LINE i += 1 NEW_LINE DEDENT DEDENT def leftRotate1 ( arr , d , n ) : NEW_LINE INDENT for i in range ( d ) : NEW_LINE INDENT leftRotate ( arr , 1 , n ) NEW_LINE DEDENT DEDENT def printArray ( arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = \"   \" ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT arr = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] NEW_LINE n = len ( arr ) NEW_LINE d = 2 NEW_LINE leftRotate1 ( arr , d , n ) NEW_LINE printArray ( arr , n ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 1 NEW_LINE 2 NEW_"}
{"value":"] def sortInRange ( arr , a , b ) : NEW_LINE INDENT n = len ( arr ) NEW_LINE start = a NEW_LINE end = b NEW_LINE temp = [ 0 ] * ( end - start + 1 ) NEW_LINE for i in range ( start , end + 1 ) : NEW_LINE INDENT temp [ i - start ] = arr [ i ] NEW_LINE DEDENT temp . sort ( ) NEW_LINE for i in range ( start , end + 1 ) : NEW_LINE INDENT arr [ i ] = temp [ i - start ] NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = \"   \" ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 5 , 4 , 3 , 2 , 10 , 9 ] NEW_LINE a = 1 NEW_LINE b = 5 NEW_LINE sortInRange ( arr , a , b ) NEW_LINE DEDENT 1 NEW_LINE 5 NEW_LINE 4 NEW_LINE 3 NEW_LINE 2 NEW_LINE 10 NEW_LINE 9 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 1 NEW_LINE 5 NEW_LINE 4 NEW_LINE 3 NEW_LINE 2 NEW_LINE 10 NEW_LINE 9 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 1 NEW_LINE 5 NEW_LINE 4 NEW_LINE 3 NEW_LINE 2 NEW_LINE 10 NEW_LINE 9 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 1 NEW_LINE 5 NEW_LINE 4 NEW_LINE 3 NEW_LINE 2 NEW_LINE 10 NEW_LINE 9 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 1 NEW_LINE 5 NEW_LINE 4 NEW_LINE 3 NEW_LINE 2 NEW_LINE 10 NEW_LINE 9 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE"}
{"value":"] \\n import sys NEW_LINE def sortRows ( mat , n , descending ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( n - 1 ) : NEW_LINE INDENT if ( descending [ i ] [ j ] < descending [ i ] [ j + 1 ] ) : NEW_LINE INDENT temp = mat [ i ] [ j ] NEW_LINE mat [ i ] [ j ] = mat [ i ] [ j + 1 ] NEW_LINE mat [ i ] [ j + 1 ] = temp NEW_LINE DEDENT DEDENT DEDENT DEDENT def getTranspose ( mat , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( n - 1 ) : NEW_LINE INDENT temp = mat [ i ] [ j ] NEW_LINE mat [ i ] [ j ] = mat [ j ] [ i ] NEW_LINE mat [ j ] [ i ] = temp NEW_LINE DEDENT DEDENT DEDENT def sortMatrix ( mat , n , descending ) : NEW_LINE INDENT sortRows ( mat , n , descending ) NEW_LINE getTranspose ( mat , n ) NEW_LINE sortRows ( mat , n , descending ) NEW_LINE getTranspose ( mat , n ) NEW_LINE DEDENT def printMatrix ( mat , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT print ( mat [ i ] [ j ] , end = \"   \" ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT DEDENT n = 3 NEW_LINE mat = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] NEW_LINE descending = [ [ 1 , 0 , 0 ] , [ 0 , 1 , 0 ] , [ 0 , 0 , 1 ] ] NEW_LINE sortMatrix ( mat , n , descending ) NEW_LINE printMatrix ( mat , n ) NEW_LINE 2"}
{"value":"] def moveZeroes ( arr , n ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] != 0 ) : NEW_LINE INDENT arr [ count ] , arr [ i ] = arr [ i ] , arr [ count ] NEW_LINE count += 1 NEW_LINE DEDENT DEDENT for i in range ( count , n ) : NEW_LINE INDENT arr [ i ] = 0 NEW_LINE DEDENT DEDENT arr = [ 1 , 0 , 2 , 0 , 3 , 0 , 4 , 0 ] NEW_LINE n = len ( arr ) NEW_LINE moveZeroes ( arr , n ) NEW_LINE print ( arr ) NEW_LINE 1 , 0 , 2 , 0 , 3 , 0 , 4 , 0 [\/INST] 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 [\/INST] 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 [\/INST] 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 [\/INST] 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 [\/INST] 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 [\/INST] 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 [\/INST] 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 [\/INST] 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 [\/INST] 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 [\/INST] 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 [\/INST] 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 [\/INST]"}
{"value":"] def moveZeroes ( arr ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( len ( arr ) ) : NEW_LINE INDENT if ( arr [ i ] != 0 ) : NEW_LINE INDENT count += 1 NEW_LINE ( arr [ i ] , arr [ count ] ) = ( arr [ count ] , arr [ i ] ) NEW_LINE DEDENT DEDENT DEDENT def printArr ( arr ) : NEW_LINE INDENT for i in range ( len ( arr ) ) : NEW_LINE INDENT print ( arr [ i ] , end = \"   \" ) NEW_LINE DEDENT DEDENT arr = [ 1 , 2 , 0 , 3 , 0 , 4 , 5 , 0 ] NEW_LINE moveZeroes ( arr ) NEW_LINE printArr ( arr ) NEW_LINE 1 , 2 , 3 , 4 , 5 , 0 , 0 , 0 NEW_LINE 2 , 3 , 4 , 5 , 0 , 0 , 0 , 0 NEW_LINE 2 , 3 , 4 , 5 , 0 , 0 , 0 , 0 NEW_LINE 2 , 3 , 4 , 5 , 0 , 0 , 0 , 0 NEW_LINE 2 , 3 , 4 , 5 , 0 , 0 , 0 , 0 NEW_LINE 2 , 3 , 4 , 5 , 0 , 0 , 0 , 0 NEW_LINE 2 , 3 , 4 , 5 , 0 , 0 , 0 , 0 NEW_LINE 2 , 3 , 4 , 5 , 0 , 0 , 0 , 0 NEW_LINE 2 , 3 , 4 , 5 , 0 , 0 , 0 , 0 NEW_LINE 2 , 3 , 4 , 5 , 0 , 0 , 0 , 0 NEW_LINE 2 , 3 , 4 , 5 , 0 , 0 , 0 , 0 NEW_LINE 2 , 3 , 4 , 5 , 0 , 0 , 0 , 0 NEW"}
{"value":"T ] def pushZero ( arr , n ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( 0 , n ) : NEW_LINE INDENT if ( arr [ i ] != 0 ) : NEW_LINE INDENT arr [ count ] = arr [ i ] NEW_LINE count += 1 NEW_LINE DEDENT DEDENT for i in range ( count , n ) : NEW_LINE INDENT arr [ i ] = 0 NEW_LINE DEDENT DEDENT def rearrange ( arr , n ) : NEW_LINE INDENT if ( n == 1 ) : NEW_LINE INDENT return NEW_LINE DEDENT for i in range ( 0 , n ) : NEW_LINE INDENT if ( arr [ i ] == 0 ) : NEW_LINE INDENT arr [ i ] = arr [ i ] * 2 NEW_LINE arr [ i + 1 ] = 0 NEW_LINE i += 1 NEW_LINE DEDENT DEDENT pushZero ( arr , n ) NEW_LINE DEDENT def printArray ( arr , n ) : NEW_LINE INDENT for i in range ( 0 , n ) : NEW_LINE INDENT print ( arr [ i ] , end = \"   \" ) NEW_LINE DEDENT DEDENT arr = [ 1 , 0 , 2 , 0 , 3 , 0 , 4 ] NEW_LINE n = len ( arr ) NEW_LINE rearrange ( arr , n ) NEW_LINE printArray ( arr , n ) NEW_LINE 1 NEW_LINE 0 NEW_LINE 2 NEW_LINE 0 NEW_LINE 3 NEW_LINE 0 NEW_LINE 4 NEW_LINE 0 NEW_LINE 5 NEW_LINE 0 NEW_LINE 6 NEW_LINE 7 NEW_LINE 0 NEW_LINE 8 NEW_LINE 9 NEW_LINE 0 NEW_LINE 10 NEW_LINE 0 NEW_LINE 11 NEW_LINE 12 NEW_LINE 0 NEW_LINE 13 NEW_LINE 14 NEW_LINE 0 NEW_LINE 15 NEW_LINE 16 NEW_LINE 0 NEW_LINE 17 NEW_LINE "}
{"value":"] \\n def shiftZeroesToLeft ( arr , n ) : NEW_LINE INDENT lastSeen = n - 1 NEW_LINE for i in range ( n - 1 , 0 , - 1 ) : NEW_LINE INDENT if ( arr [ i ] != 0 ) : NEW_LINE INDENT arr [ i ] , arr [ lastSeen ] = arr [ lastSeen ] , arr [ i ] NEW_LINE lastSeen -= 1 NEW_LINE DEDENT DEDENT DEDENT 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 3 NEW_LINE 0 NEW_LINE 5 NEW_LINE 0 NEW_LINE 7 NEW_LINE 0 NEW_LINE 9 NEW_LINE 0 NEW_LINE 11 NEW_LINE 0 NEW_LINE 13 NEW_LINE 0 NEW_LINE 15 NEW_LINE 0 NEW_LINE 17 NEW_LINE 0 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE 57 NEW_LINE 58 NEW_LINE 59 NEW_LINE 60 NEW_LINE 61 NEW_LINE 62 NEW_LINE 63 NEW_LINE 64 NEW_LINE 65 NEW_LINE 66 NEW_LINE 67"}
{"value":"] def printArr ( arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = \"   \" ) NEW_LINE DEDENT DEDENT def rearrange ( arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] >= 0 ) : NEW_LINE INDENT continue NEW_LINE DEDENT for j in range ( i , 0 , - 1 ) : NEW_LINE INDENT if ( arr [ j - 1 ] >= 0 ) : NEW_LINE INDENT break NEW_LINE DEDENT arr [ j ] , arr [ j - 1 ] = arr [ j - 1 ] , arr [ j ] NEW_LINE DEDENT arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ] NEW_LINE DEDENT printArr ( arr , n ) NEW_LINE DEDENT arr = [ - 1 , 2 , - 3 , 4 , 5 , 6 , - 7 , 8 , 9 ] NEW_LINE n = len ( arr ) NEW_LINE rearrange ( arr , n ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW"}
{"value":"] def printArray ( arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = \"   \" ) NEW_LINE DEDENT DEDENT def reverse ( arr , l , r ) : NEW_LINE INDENT while ( l < r ) : NEW_LINE INDENT temp = arr [ l ] NEW_LINE arr [ l ] = arr [ r ] NEW_LINE arr [ r ] = temp NEW_LINE l += 1 NEW_LINE r -= 1 NEW_LINE DEDENT DEDENT def merge ( arr , l , m , r ) : NEW_LINE INDENT i = l NEW_LINE j = m + 1 NEW_LINE k = l NEW_LINE while ( i <= m and j <= r ) : NEW_LINE INDENT if ( arr [ i ] < 0 ) : NEW_LINE INDENT i += 1 NEW_LINE DEDENT elif ( arr [ j ] < 0 ) : NEW_LINE INDENT j += 1 NEW_LINE DEDENT else : NEW_LINE INDENT arr [ k ] = arr [ i ] NEW_LINE k += 1 NEW_LINE i += 1 NEW_LINE DEDENT DEDENT while ( i <= m ) : NEW_LINE INDENT arr [ k ] = arr [ i ] NEW_LINE k += 1 NEW_LINE i += 1 NEW_LINE DEDENT while ( j <= r ) : NEW_LINE INDENT arr [ k ] = arr [ j ] NEW_LINE k += 1 NEW_LINE j += 1 NEW_LINE DEDENT DEDENT def rearrange ( arr , n ) : NEW_LINE INDENT l = 0 NEW_LINE r = n - 1 NEW_LINE while ( l < r ) : NEW_LINE INDENT m = l + ( ( r - l ) \/\/ 2 ) NEW_LINE if ( m == l ) : NEW_LINE INDENT m += 1 NEW_LINE DEDENT if ( arr [ m ] < 0 ) : NEW_LINE INDENT l = m + 1 NEW_LINE DEDENT else : NEW_LINE INDENT r = m - 1 NEW_LINE DEDENT merge ( arr"}
{"value":"] def rearrange ( arr , n ) : NEW_LINE INDENT i = 0 NEW_LINE j = n - 1 NEW_LINE while ( i < j and arr [ i ] < 0 ) : NEW_LINE INDENT i += 1 NEW_LINE DEDENT while ( i < j and arr [ j ] > 0 ) : NEW_LINE INDENT j -= 1 NEW_LINE DEDENT while ( i < j ) : NEW_LINE INDENT if ( i < j ) : NEW_LINE INDENT temp = arr [ i ] NEW_LINE arr [ i ] = arr [ j ] NEW_LINE arr [ j ] = temp NEW_LINE i += 1 NEW_LINE j -= 1 NEW_LINE DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , - 2 , - 1 , 3 , 2 , - 4 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE rearrange ( arr , n ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = \"   \" ) NEW_LINE DEDENT DEDENT 2 NEW_LINE 4 NEW_LINE 1 NEW_LINE - 3 NEW_LINE - 2 NEW_LINE 5 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_"}
{"value":"] def findWinner ( arr , n ) : NEW_LINE INDENT if ( n % 2 == 1 ) : NEW_LINE INDENT print ( \" A \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" B \" ) NEW_LINE DEDENT DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 2 , 3 , 5 , 6 , 7 ] NEW_LINE N = len ( arr ) NEW_LINE findWinner ( arr , N ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 2 NEW_LINE 3 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 2 NEW_LINE 3 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 2 NEW_LINE 3 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 2 NEW_LINE 3 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 2 NEW_LINE 3 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 2 NEW_LINE 3 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 2 NEW_LINE 3 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 2 NEW_LINE 3 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 2 NEW_LINE 3 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 2 NEW_LINE 3 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 2 NEW_LINE 3 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 2 NEW_LINE 3 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 2 NEW_LINE 3 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 2 NEW_LINE 3 NEW_LINE 5 NEW_LINE"}
{"value":"] NEW_LINE def sum ( arr , N , dp , X ) : NEW_LINE INDENT for i in range ( N ) : NEW_LINE INDENT for j in range ( 1 , int ( pow ( X , 2 ) + 1 ) ) : NEW_LINE INDENT if ( i + j < N ) : NEW_LINE INDENT dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + arr [ i + j - 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT dp [ i ] [ j ] = dp [ i ] [ j - 1 ] NEW_LINE DEDENT DEDENT DEDENT DEDENT def findSum ( arr , N , Q , M , dp ) : NEW_LINE INDENT for i in range ( M ) : NEW_LINE INDENT x = Q [ i ] [ 0 ] NEW_LINE y = Q [ i ] [ 1 ] NEW_LINE sum = 0 NEW_LINE for j in range ( x , N , y ) : NEW_LINE INDENT sum += dp [ j ] [ y ] NEW_LINE DEDENT print ( sum , end = \"   \" ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] NEW_LINE N = len ( arr ) NEW_LINE X = 2 NEW_LINE dp = [ [ 0 for i in range ( int ( pow ( X , 2 ) + 1 ) ) ] for i in range ( N ) ] NEW_LINE sum ( arr , N , dp , X ) NEW_LINE Q = [ [ 0 , 0 ] , [ 1 , 1 ] , [ 2 , 2 ] ] NEW_LINE M = len ( Q ) NEW_LINE findSum ( arr , N , Q , M , dp ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 0 NEW_LINE 1 NEW"}
{"value":"] \\n def printGreaterElements ( arr , n ) : NEW_LINE INDENT for i in range ( 0 , n ) : NEW_LINE INDENT count = 0 NEW_LINE for j in range ( i + 1 , n ) : NEW_LINE INDENT if arr [ i ] < arr [ j ] : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT if count >= 2 : NEW_LINE INDENT print ( arr [ i ] , end = \"   \" ) NEW_LINE DEDENT DEDENT DEDENT arr = [ 16 , 17 , 4 , 3 , 5 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE printGreaterElements ( arr , n ) NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 17 NEW_LINE 16 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 17 NEW_LINE 16 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 17 NEW_LINE 16 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 17 NEW_LINE 16 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 17 NEW_LINE 16 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 17 NEW_LINE 16 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 17 NEW_LINE 16 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 17 NEW_LINE 16 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 17 NEW_LINE 16 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 17 NEW_LINE 16 NEW_LINE 2 NEW_LINE 3 NEW_LINE "}
{"value":"] def printGreater ( arr , n ) : NEW_LINE INDENT arr . sort ( ) NEW_LINE for i in range ( 0 , n ) : NEW_LINE INDENT if ( ( arr [ i ] < arr [ i + 1 ] ) and ( arr [ i ] < arr [ i + 2 ] ) ) : NEW_LINE INDENT print ( arr [ i ] , end = \"   \" ) NEW_LINE DEDENT DEDENT DEDENT arr = [ 1 , 3 , 4 , 5 , 6 , 8 , 9 , 10 ] NEW_LINE n = len ( arr ) NEW_LINE printGreater ( arr , n ) NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_"}
{"value":"] \\n def printGreater ( arr , n ) : NEW_LINE INDENT first = - 1 NEW_LINE second = - 1 NEW_LINE for i in range ( 0 , n ) : NEW_LINE INDENT if ( arr [ i ] < first ) : NEW_LINE INDENT second = first NEW_LINE first = arr [ i ] NEW_LINE DEDENT elif ( arr [ i ] > first and arr [ i ] < second ) : NEW_LINE INDENT second = arr [ i ] NEW_LINE DEDENT DEDENT for i in range ( 0 , n ) : NEW_LINE INDENT if ( arr [ i ] == first or arr [ i ] == second ) : NEW_LINE INDENT print ( arr [ i ] , end = \"   \" ) NEW_LINE DEDENT DEDENT DEDENT arr = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] NEW_LINE n = len ( arr ) NEW_LINE printGreater ( arr , n ) NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE"}
{"value":"] def minOperations ( arr , n ) : NEW_LINE INDENT res = 0 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT if ( arr [ i ] > arr [ i + 1 ] ) : NEW_LINE INDENT continue NEW_LINE DEDENT res += arr [ i ] - arr [ i + 1 ] NEW_LINE DEDENT return res NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 1 , 3 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE print ( minOperations ( arr , n ) ) NEW_LINE DEDENT 2 NEW_LINE 4 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE"}
{"value":"] def smallestMissing ( arr , n ) : NEW_LINE INDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT if ( arr [ i - 1 ] != i ) : NEW_LINE INDENT return i NEW_LINE DEDENT DEDENT return n + 1 NEW_LINE DEDENT arr = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] NEW_LINE n = len ( arr ) NEW_LINE print ( smallestMissing ( arr , n ) ) NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE 57 NEW_LINE 58 NEW_LINE 59 NEW_LINE 60 NEW_LINE 61 NEW_LINE 62 NEW_LINE 63 NEW_LINE 64 NEW_LINE 65 NEW_LINE 66"}
{"value":"] def findMissingElement ( arr , n ) : NEW_LINE INDENT for i in range ( 0 , n ) : NEW_LINE INDENT if ( arr [ i ] != i ) : NEW_LINE INDENT return i NEW_LINE DEDENT DEDENT return n NEW_LINE DEDENT def smallestMissing ( arr , n ) : NEW_LINE INDENT if ( arr [ 0 ] != 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT if ( arr [ i ] != i - 1 ) : NEW_LINE INDENT return i - 1 NEW_LINE DEDENT DEDENT return n NEW_LINE DEDENT arr = [ 0 , 1 , 2 , 3 , 4 ] NEW_LINE n = len ( arr ) NEW_LINE print ( smallestMissing ( arr , n ) ) NEW_LINE 1 , 2 , 3 , 4 , 5 NEW_LINE 0 NEW_LINE 1 , 2 , 3 , 4 , 5 NEW_LINE 0 NEW_LINE 1 , 2 , 3 , 4 , 5 NEW_LINE 4 NEW_LINE 0 , 1 , 2 , 3 , 4 NEW_LINE 0 NEW_LINE 1 , 2 , 3 , 4 , 5 NEW_LINE 0 NEW_LINE 1 , 2 , 3 , 4 , 5 NEW_LINE 4 NEW_LINE 1 , 2 , 3 , 4 , 5 NEW_LINE 4 NEW_LINE 1 , 2 , 3 , 4 , 5 NEW_LINE 4 NEW_LINE 1 , 2 , 3 , 4 , 5 NEW_LINE 4 NEW_LINE 1 , 2 , 3 , 4 , 5 NEW_LINE 4 NEW_LINE 1 , 2 , 3 , 4 , 5 NEW_LINE 4 NEW_LINE 1 , 2 , 3 , 4 , 5 NEW_LINE 4 NEW_LINE 1 , 2 , 3 , 4 , 5 NEW_LINE 4 NEW_LINE 1 , 2 , 3 ,"}
{"value":"] def maxSum ( arr , n ) : NEW_LINE INDENT incl = 0 NEW_LINE excl = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT incl = max ( excl + arr [ i ] , incl ) NEW_LINE excl = max ( incl - arr [ i ] , excl ) NEW_LINE DEDENT return max ( incl , excl ) NEW_LINE DEDENT arr = [ 1 , 3 , - 1 , 2 , 1 , 4 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE print ( maxSum ( arr , n ) ) NEW_LINE 1 NEW_LINE 3 NEW_LINE - 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 4 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE"}
{"value":"] def minChanges ( matrix ) : NEW_LINE INDENT n = len ( matrix ) NEW_LINE m = len ( matrix [ 0 ] ) NEW_LINE for i in range ( n + m - 2 ) : NEW_LINE INDENT freq = [ 0 ] * 10 NEW_LINE for j in range ( n + m - 2 ) : NEW_LINE INDENT if ( i + j < n and i + j >= 0 ) : NEW_LINE INDENT freq [ matrix [ i + j ] [ j ] ] += 1 NEW_LINE DEDENT DEDENT max_freq = max ( freq ) NEW_LINE total_cells = ( i + 1 ) * 2 NEW_LINE ans = total_cells - freq [ max_freq ] NEW_LINE for j in range ( n + m - 2 ) : NEW_LINE INDENT if ( i + j < n and i + j >= 0 ) : NEW_LINE INDENT if ( matrix [ i + j ] [ j ] != max_freq ) : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT matrix = [ [ 1 , 1 , 1 ] , [ 2 , 2 , 2 ] , [ 3 , 3 , 3 ] ] NEW_LINE print ( minChanges ( matrix ) ) NEW_LINE DEDENT 2 NEW_LINE 4 NEW_LINE 6 NEW_LINE 1 NEW_LINE 2 NEW_LINE 2 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0"}
{"value":"] \\n 10 NEW_LINE def build ( lookup , arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT lookup [ i ] [ i ] = arr [ i ] NEW_LINE DEDENT for j in range ( 1 , n ) : NEW_LINE INDENT for i in range ( n - 2 ** j ) : NEW_LINE INDENT lookup [ i ] [ i + 2 ** j ] = min ( lookup [ i ] [ i + 2 ** ( j - 1 ) ] , lookup [ i + 2 ** ( j - 1 ) ] [ i + 2 ** j ] ) NEW_LINE DEDENT DEDENT DEDENT def query ( lookup , L , R ) : NEW_LINE INDENT j = 0 NEW_LINE while ( 1 << ( j + 1 ) <= R - L + 1 ) : NEW_LINE INDENT j += 1 NEW_LINE DEDENT return min ( lookup [ L ] [ L + 1 << ( j - 1 ) ] , lookup [ L + 1 << ( j - 1 ) ] [ R ] ) NEW_LINE DEDENT lookup = [ [ 0 for i in range ( 10000 ) ] for j in range ( 10000 ) ] NEW_LINE arr = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] NEW_LINE build ( lookup , arr , len ( arr ) ) NEW_LINE print ( query ( lookup , 2 , 10 ) ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE "}
{"value":"] \\n from math import gcd NEW_LINE def build ( arr , lookup , n ) : NEW_LINE INDENT lookup [ 0 ] [ 0 ] = arr [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT lookup [ 0 ] [ i ] = gcd ( lookup [ 0 ] [ i - 1 ] , arr [ i ] ) NEW_LINE DEDENT for j in range ( 1 , n ) : NEW_LINE INDENT for i in range ( 1 , n ) : NEW_LINE INDENT lookup [ j ] [ i ] = gcd ( lookup [ j - 1 ] [ i ] , lookup [ j - 1 ] [ i - ( 1 << j ) ] ) NEW_LINE DEDENT DEDENT DEDENT def RMQ ( arr , L , R ) : NEW_LINE INDENT if ( L == R ) : NEW_LINE INDENT return arr [ L ] NEW_LINE DEDENT j = 0 NEW_LINE while ( ( 1 << ( j + 1 ) ) <= R - L + 1 ) : NEW_LINE INDENT j += 1 NEW_LINE DEDENT return gcd ( lookup [ j ] [ R - L + 1 ] , lookup [ j ] [ L ] ) NEW_LINE DEDENT arr = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] NEW_LINE n = len ( arr ) NEW_LINE lookup = [ [ 0 for i in range ( n ) ] for j in range ( 10 ) ] NEW_LINE build ( arr , lookup , n ) NEW_LINE L = 2 NEW_LINE R = 8 NEW_LINE print ( RMQ ( arr , L , R ) ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_"}
{"value":"] \\n def findMinArray ( arr , n , k ) : NEW_LINE INDENT pos = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( k < 0 ) : NEW_LINE INDENT break NEW_LINE DEDENT Minimum = min ( arr [ i + 1 ] , n ) NEW_LINE arr [ i ] , arr [ pos ] = arr [ pos ] , arr [ i ] NEW_LINE pos += Minimum NEW_LINE k -= Minimum NEW_LINE DEDENT return arr NEW_LINE DEDENT arr = [ 1 , 3 , 5 , 4 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE k = 3 NEW_LINE print ( * findMinArray ( arr , n , k ) ) NEW_LINE 1 , 2 , 3 , 4 , 5 [\/INST] 2 , 1 , 5 , 4 , 3 [\/INST] 1 , 2 , 3 , 4 , 5 [\/INST] 1 , 2 , 3 , 4 , 5 [\/INST] 1 , 2 , 3 , 4 , 5 [\/INST] 1 , 2 , 3 , 4 , 5 [\/INST] 1 , 2 , 3 , 4 , 5 [\/INST] 1 , 2 , 3 , 4 , 5 [\/INST] 1 , 2 , 3 , 4 , 5 [\/INST] 1 , 2 , 3 , 4 , 5 [\/INST] 1 , 2 , 3 , 4 , 5 [\/INST] 1 , 2 , 3 , 4 , 5 [\/INST] 1 , 2 , 3 , 4 , 5 [\/INST] 1 , 2 , 3 , 4 , 5 [\/INST] 1 , 2 , 3 , 4 , 5 [\/INST] 1 , 2 , 3 , 4 , 5 [\/INST] 1 , 2 , 3 , 4 , 5 [\/INST] 1 , 2 , 3 , 4 , 5 [\/INST]"}
{"value":"] def maxAverage ( arr , n , k ) : NEW_LINE INDENT if ( k > n ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT csum = [ 0 ] * ( n + 1 ) NEW_LINE for i in range ( 0 , n ) : NEW_LINE INDENT csum [ i ] = arr [ i ] NEW_LINE for j in range ( 1 , i + 1 ) : NEW_LINE INDENT csum [ i ] += csum [ i - j ] NEW_LINE DEDENT DEDENT max_sum = csum [ k - 1 ] NEW_LINE for i in range ( k , n ) : NEW_LINE INDENT if ( csum [ i ] - csum [ i - k ] > max_sum ) : NEW_LINE INDENT max_sum = csum [ i ] - csum [ i - k ] NEW_LINE DEDENT DEDENT return ( max_sum ) \/ k NEW_LINE DEDENT arr = [ 1 , 10 , 20 , 30 , 40 , 50 ] NEW_LINE n = len ( arr ) NEW_LINE k = 3 NEW_LINE print ( \" Maximum   average   is   % f \" % maxAverage ( arr , n , k ) ) NEW_LINE 2 NEW_LINE 4 NEW_LINE 8 NEW_LINE 16 NEW_LINE 32 NEW_LINE 50 NEW_LINE 1 NEW_LINE 10 NEW_LINE 20 NEW_LINE 30 NEW_LINE 40 NEW_LINE 50 NEW_LINE 2 NEW_LINE 4 NEW_LINE 8 NEW_LINE 16 NEW_LINE 32 NEW_LINE 50 NEW_LINE 1 NEW_LINE 10 NEW_LINE 20 NEW_LINE 30 NEW_LINE 40 NEW_LINE 50 NEW_LINE 2 NEW_LINE 4 NEW_LINE 8 NEW_LINE 16 NEW_LINE 32 NEW_LINE 50 NEW_LINE 1 NEW_LINE 10 NEW_LINE 20 NEW_LINE 30 NEW_LINE 40 NEW_LINE 50 NEW_LINE "}
{"value":" def findStart ( arr , n , k ) : NEW_LINE INDENT if ( k > n ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT sum = 0 NEW_LINE for i in range ( k ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE DEDENT max_sum = sum NEW_LINE for i in range ( k , n ) : NEW_LINE INDENT sum = sum + arr [ i ] - arr [ i - k ] NEW_LINE max_sum = max ( max_sum , sum ) NEW_LINE DEDENT return 0 NEW_LINE DEDENT arr = [ 1 , 10 , 20 , 30 , 40 , 50 ] NEW_LINE n = len ( arr ) NEW_LINE k = 3 NEW_LINE print ( findStart ( arr , n , k ) ) NEW_LINE 1 , 10 , 20 , 30 , 40 , 50 NEW_LINE k = 4 NEW_LINE print ( findStart ( arr , n , k ) ) NEW_LINE 1 , 10 , 20 , 30 , 40 , 50 NEW_LINE k = 6 NEW_LINE print ( findStart ( arr , n , k ) ) NEW_LINE 1 , 10 , 20 , 30 , 40 , 50 NEW_LINE 2 \/ 3 NEW_LINE 1 , 10 , 20 , 30 , 40 , 50 NEW_LINE k = 2 NEW_LINE print ( findStart ( arr , n , k ) ) NEW_LINE 1 , 10 , 20 , 30 , 40 , 50 NEW_LINE 2 \/ 3 NEW_LINE 1 , 10 , 20 , 30 , 40 , 50 NEW_LINE k = 1 NEW_LINE print ( findStart ( arr , n , k ) ) NEW_LINE 1 , 10 , 20 , 30 , 40 , 50 NEW_LINE 2 \/ 3 NEW_LINE 1 , 10 , 20 , "}
{"value":"] \\n s = { } NEW_LINE def find_min_score ( pos , myturn , arr , n ) : NEW_LINE INDENT if ( pos , myturn ) in s : NEW_LINE INDENT return s [ ( pos , myturn ) ] NEW_LINE DEDENT if ( pos == n ) : NEW_LINE INDENT if ( myturn == 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return arr [ pos - 1 ] NEW_LINE DEDENT DEDENT if ( myturn == 0 ) : NEW_LINE INDENT ans = min ( find_min_score ( pos + 1 , 1 , arr , n ) + arr [ pos - 1 ] , find_min_score ( pos + 2 , 1 , arr , n ) + arr [ pos - 2 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT ans = min ( find_min_score ( pos + 1 , 0 , arr , n ) + arr [ pos - 1 ] , find_min_score ( pos + 2 , 0 , arr , n ) + arr [ pos - 2 ] ) NEW_LINE DEDENT s [ ( pos , myturn ) ] = ans NEW_LINE return ans NEW_LINE DEDENT def find_min_penality ( arr , n ) : NEW_LINE INDENT pos = 1 NEW_LINE myturn = 0 NEW_LINE print ( find_min_score ( pos , myturn , arr , n ) ) NEW_LINE print ( n * arr [ 0 ] ) NEW_LINE print ( find_min_score ( pos , myturn , arr , n ) ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 0 , 1 , 0 , 0 , 1 , 1 ] NEW_LINE N = len ( arr ) NEW_LINE find_min_penality ( arr , N ) NEW_LINE DEDENT 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE DEDENT 1"}
{"value":"3 ; Update : set arr [ 2 ] = 10 and update corresponding segment tree ; Print sum of values in array from index 1 to 3 ; Update : set arr [ 1 ] = 10 and update corresponding segment tree ; Print sum of values in array from index 1 to 3 [\/INST] \\n MAX = 10000000 NEW_LINE prime = [ True ] * ( MAX + 1 ) NEW_LINE def SieveOfEratosthenes ( ) : NEW_LINE INDENT p = 2 NEW_LINE while p * p <= MAX : NEW_LINE INDENT if ( prime [ p ] == True ) : NEW_LINE INDENT for i in range ( p * p , MAX + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT p += 1 NEW_LINE DEDENT DEDENT def getMid ( corner1 , corner2 ) : NEW_LINE INDENT if ( corner1 == corner2 ) : NEW_LINE INDENT return corner1 NEW_LINE DEDENT return ( corner1 + corner2 ) \/\/ 2 NEW_LINE DEDENT def getSumUtil ( node , corner1 , corner2 , arr , st ) : NEW_LINE INDENT if ( corner1 == corner2 ) : NEW_LINE INDENT return arr [ corner1 ] NEW_LINE DEDENT mid = getMid ( corner1 , corner2 ) NEW_LINE lsum = getSumUtil ( 2 * node , corner1 , mid , arr , st ) NEW_LINE rsum = getSumUtil ( 2 * node + 1 , mid + 1 , corner2 , arr , st ) NEW_LINE return lsum + rsum NEW_LINE DEDENT def updateUtil ( node , corner1 , corner2 , index , value , st ) : NEW_LINE INDENT if ( corner1 == corner2 ) : NEW_LINE INDENT if ( prime [ arr [ corner1 ] ] ) : NEW_LINE INDENT arr [ corner1 ] = value NEW_LINE if ( prime [ value ] ) : NEW_LINE INDENT st [ node ] = value NEW"}
{"value":"] NEW_LINE def countWays ( s , i , j , dp , n , m , index , pos , idx , s , t ) : NEW_LINE INDENT if ( i == j ) : NEW_LINE INDENT if ( i == n ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT if ( dp [ i ] [ j ] [ pos ] != - 1 ) : NEW_LINE INDENT return dp [ i ] [ j ] [ pos ] NEW_LINE DEDENT else : NEW_LINE INDENT ans = 0 NEW_LINE for k in range ( idx , m ) : NEW_LINE INDENT if ( s [ k ] == t [ j ] ) : NEW_LINE INDENT ans += countWays ( s , i + 1 , dp , n , m , k + 1 , pos + 1 , s , t ) NEW_LINE DEDENT DEDENT dp [ i ] [ j ] [ pos ] = ans NEW_LINE return ans NEW_LINE DEDENT DEDENT def countWays ( s , t ) : NEW_LINE INDENT n = len ( s ) NEW_LINE m = len ( t ) NEW_LINE dp = [ [ [ [ 0 for i in range ( m + 1 ) ] for j in range ( n + 1 ) ] ] NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT for j in range ( m + 1 ) : NEW_LINE INDENT dp [ i ] [ j ] [ 0 ] = - 1 NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( m ) : NEW_LINE INDENT idx = dp [ i ] [ j ] [ 0 ] NEW_LINE dp [ i ] [ j ] [ 0 ] = 1 NEW_LINE DEDENT DEDENT return countWays ( s , t ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT s = \" abc \" NEW_"}
{"value":"] \\n import numpy as np NEW_LINE def count ( num , k ) : NEW_LINE INDENT dp = np . zeros ( ( len ( num ) + 1 , 10 ) ) NEW_LINE for i in range ( len ( num ) ) : NEW_LINE INDENT for j in range ( 10 ) : NEW_LINE INDENT if ( i == 0 ) : NEW_LINE INDENT if ( j < int ( num [ i ] ) ) : NEW_LINE INDENT continue NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if ( j < int ( num [ i ] ) ) : NEW_LINE INDENT continue NEW_LINE DEDENT DEDENT new_tight = ( j % k == 0 ) NEW_LINE res = 0 NEW_LINE for t in range ( 10 ) : NEW_LINE INDENT res += dp [ i + 1 ] [ t ] NEW_LINE DEDENT res += new_tight NEW_LINE dp [ i + 1 ] [ j ] = res NEW_LINE DEDENT DEDENT return dp [ len ( num ) ] [ 0 ] NEW_LINE DEDENT def process ( n ) : NEW_LINE INDENT num = list ( n ) NEW_LINE num . reverse ( ) NEW_LINE for i in range ( len ( num ) ) : NEW_LINE INDENT num [ i ] = int ( num [ i ] ) NEW_LINE DEDENT return num NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT n = \"1000\" NEW_LINE k = 2 NEW_LINE num = process ( n ) NEW_LINE print ( count ( num , k ) ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW"}
{"value":"[ j ] [ k ] = True if there exists a knapsack sequence of length i , whose total weight is j and whose total profit is k [\/INDENT def KnapsackDP ( w1_r , w2_r , arr , i , n , w1 , w2 ) : NEW_LINE INDENT if ( i == 0 ) : NEW_LINE INDENT if ( w1_r == 0 and w2_r == 0 ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT ans1 = False NEW_LINE ans2 = False NEW_LINE ans3 = False NEW_LINE if ( w1_r >= arr [ i - 1 ] [ 0 ] and w2_r >= arr [ i - 1 ] [ 1 ] ) : NEW_LINE INDENT if ( KnapsackDP ( w1_r - arr [ i - 1 ] [ 0 ] , w2_r - arr [ i - 1 ] [ 1 ] , arr , i - 1 , n , w1 , w2 ) ) : NEW_LINE INDENT ans1 = True NEW_LINE DEDENT DEDENT if ( w1_r >= arr [ i - 1 ] [ 0 ] ) : NEW_LINE INDENT if ( KnapsackDP ( w1_r - arr [ i - 1 ] [ 0 ] , w2_r , arr , i - 1 , n , w1 , w2 ) ) : NEW_LINE INDENT ans2 = True NEW_LINE DEDENT DEDENT if ( w2_r >= arr [ i - 1 ] [ 1 ] ) : NEW_LINE INDENT if ( KnapsackDP ( w1_r , w2_r - arr [ i - 1 ] [ 1 ] , arr , i - 1 , n , w1 , w2 ) ) : NEW_LINE INDENT ans3 = True NEW_LINE DEDENT DEDENT if ( ans1 or ans2 or ans3 ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT DEDENT arr = [ [ 10 , 20 ] , [ 30 , 30 ] ,"}
{"value":"] from math import sqrt NEW_LINE def dfs ( m , n , x , y , visited , lex , step , path , k ) : NEW_LINE INDENT if ( x < 0 or y < 0 or x >= m or y >= n or visited [ x ] [ y ] or m [ x ] [ y ] == k ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT visited [ x ] [ y ] = True NEW_LINE lex [ x ] [ y ] = k NEW_LINE if ( x == m - 1 and y == n - 1 ) : NEW_LINE INDENT step [ k ] += 1 NEW_LINE return 1 NEW_LINE DEDENT if ( x + 1 < m and m [ x + 1 ] [ y ] != k and lex [ x + 1 ] [ y ] != k ) : NEW_LINE INDENT if ( dfs ( m , n , x + 1 , y , visited , lex , step , path , k ) ) : NEW_LINE INDENT path [ k ] = path [ k ] + 1 NEW_LINE return 1 NEW_LINE DEDENT DEDENT if ( y + 1 < n and m [ x ] [ y + 1 ] != k and lex [ x ] [ y + 1 ] != k ) : NEW_LINE INDENT if ( dfs ( m , n , x , y + 1 , visited , lex , step , path , k ) ) : NEW_LINE INDENT path [ k ] = path [ k ] + 1 NEW_LINE return 1 NEW_LINE DEDENT DEDENT return 0 NEW_LINE DEDENT def lexicographicalLargestPrimePath ( m , n ) : NEW_LINE INDENT visited = [ [ False for i in range ( n ) ] for i in range ( m ) ] NEW_LINE lex = [ [ - 1 for i in range ( n ) ] for i in range ( m ) ] NEW_LINE step = [ 0 for i in range ( n ) ] NEW_LINE path = [ 0 for i in range ( n ) ] NEW_LINE for i in range ( m ) : NEW_LINE INDENT for j in range"}
{"value":"] \\n def maxSubsetSum ( arr , n , sum ) : NEW_LINE INDENT subset = [ [ 0 ] * ( sum + 1 ) for i in range ( n + 1 ) ] NEW_LINE subset [ 0 ] [ 0 ] = True NEW_LINE for i in range ( n ) : NEW_LINE INDENT subset [ i ] [ 0 ] = True NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( sum + 1 ) : NEW_LINE INDENT if j == 0 : NEW_LINE INDENT subset [ i ] [ j ] = True NEW_LINE DEDENT elif j == arr [ i ] : NEW_LINE INDENT subset [ i ] [ j ] = True NEW_LINE DEDENT elif subset [ i - 1 ] [ j ] : NEW_LINE INDENT subset [ i ] [ j ] = True NEW_LINE DEDENT DEDENT DEDENT for i in range ( n + 1 ) : NEW_LINE INDENT for j in range ( sum + 1 ) : NEW_LINE INDENT if subset [ i ] [ j ] : NEW_LINE INDENT return i NEW_LINE DEDENT DEDENT DEDENT return - 1 NEW_LINE DEDENT arr = [ 3 , 34 , 4 , 12 , 5 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE sum = 9 NEW_LINE print ( maxSubsetSum ( arr , n , sum ) ) NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 12 NEW_LINE 5 NEW_LINE 2 NEW_LINE 1 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE "}
{"value":"] NEW_LINE def lcs ( i , j , n , m , data , lcs , lcslen ) : NEW_LINE INDENT if ( i == n or j == m ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( dp [ i ] [ j ] != - 1 : NEW_LINE INDENT return dp [ i ] [ j ] NEW_LINE DEDENT if ( str1 [ i ] == str2 [ j ] ) : NEW_LINE INDENT return 1 + lcs ( i + 1 , j + 1 , n , m , data , lcslen ) NEW_LINE DEDENT return max ( lcs ( i + 1 , j , n , m , data , lcslen ) , lcs ( i , j + 1 , n , m , data , lcslen ) NEW_LINE DEDENT DEDENT def printLCS ( data , lcslen , lcs ) : NEW_LINE INDENT for i in range ( lcslen ) : NEW_LINE INDENT if ( data [ i ] == lcs ) : NEW_LINE INDENT print ( lcs , end = \"   \" ) NEW_LINE DEDENT DEDENT DEDENT DEDENT def printLCS ( str1 , str2 ) : NEW_LINE INDENT n = len ( str1 ) NEW_LINE m = len ( str2 ) NEW_LINE lcslen = 0 NEW_LINE dp = [ [ [ - 1 for i in range ( m + 1 ) ] for i in range ( n + 1 ) ] NEW_LINE data = [ ' ' for i in range ( 26 ) ] NEW_LINE lcslen = lcs ( 0 , 0 , n , m , data , lcslen ) NEW_LINE printLCS ( data , lcslen , \" \" ) NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT str1 = \" AGGTAB \" NEW_LINE str2 = \" GXTXYB \" NEW_LINE printLCS ( str1 , str2 ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW"}
{"value":"] \\n def isMajority ( arr , n ) : NEW_LINE INDENT if ( n % 2 == 0 ) : NEW_LINE INDENT last = n \/\/ 2 - 1 NEW_LINE DEDENT else : NEW_LINE INDENT last = ( n + 1 ) \/\/ 2 - 1 NEW_LINE DEDENT for i in range ( 0 , n ) : NEW_LINE INDENT if ( arr [ i ] == arr [ last ] ) : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT arr = [ 1 , 1 , 1 , 2 , 2 , 2 , 3 ] NEW_LINE n = len ( arr ) NEW_LINE if ( isMajority ( arr , n ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT 2 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW"}
{"value":"] def binarySearch ( arr , low , high , x ) : NEW_LINE INDENT if ( low > high ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT mid = ( low + high ) \/\/ 2 NEW_LINE if ( arr [ mid ] == x and ( ( mid == 0 or arr [ mid - 1 ] < x ) ) : NEW_LINE INDENT return mid NEW_LINE DEDENT if ( arr [ mid ] < x ) : NEW_LINE INDENT return binarySearch ( arr , mid + 1 , high , x ) NEW_LINE DEDENT return binarySearch ( arr , low , mid - 1 , x ) NEW_LINE DEDENT 1 NEW_LINE def isMajority ( arr , n , x ) : NEW_LINE INDENT index = binarySearch ( arr , 0 , n - 1 , x ) NEW_LINE if ( index == - 1 ) : NEW_LINE INDENT return False NEW_LINE DEDENT return ( index > n \/\/ 3 ) NEW_LINE DEDENT 1 NEW_LINE arr = [ 1 , 2 , 2 , 2 , 2 , 2 , 3 , 3 ] NEW_LINE n = len ( arr ) NEW_LINE x = 2 NEW_LINE if ( isMajority ( arr , n , x ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW_LINE 1 NEW"}
{"value":"] \\n def isMajority ( arr , n ) : NEW_LINE INDENT for i in range ( 1 , n ) : NEW_LINE INDENT if ( arr [ i ] == arr [ i - 1 ] ) : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT arr = [ 1 , 2 , 2 , 2 , 2 , 2 , 3 , 3 , 3 , 3 , 3 ] NEW_LINE n = len ( arr ) NEW_LINE if ( isMajority ( arr , n ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE "}
{"value":"] def cutRod ( price , n ) : NEW_LINE INDENT val = [ 0 ] * ( n + 1 ) NEW_LINE val [ 0 ] = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT val [ i ] = - 1 NEW_LINE for j in range ( 1 , i + 1 ) : NEW_LINE INDENT val [ i ] = max ( val [ i ] , price [ j - 1 ] + val [ i - j ] ) NEW_LINE DEDENT DEDENT return val [ n ] NEW_LINE DEDENT 1 NEW_LINE price = [ 1 , 5 , 8 , 9 , 10 , 17 , 17 , 17 , 20 ] NEW_LINE n = 7 NEW_LINE print ( \" Maximum   price   is   \" , cutRod ( price , n ) ) NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 5"}
{"value":"] def check ( arr , target , n , m ) : NEW_LINE INDENT max = - 1 NEW_LINE max_index = - 1 NEW_LINE for i in range ( m ) : NEW_LINE INDENT if ( target [ i ] > max ) : NEW_LINE INDENT max = target [ i ] NEW_LINE max_index = i NEW_LINE DEDENT DEDENT if ( max == 1 ) : NEW_LINE INDENT return True NEW_LINE DEDENT for i in range ( m ) : NEW_LINE INDENT if ( i != max_index and target [ i ] > max ) : NEW_LINE INDENT max = target [ i ] NEW_LINE DEDENT DEDENT if ( max <= 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] != max ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT arr = [ 1 , 2 , 3 , 4 ] NEW_LINE target = [ 1 , 2 , 3 , 5 ] NEW_LINE N = len ( arr ) NEW_LINE M = len ( target ) NEW_LINE if ( check ( arr , target , N , M ) ) : NEW_LINE INDENT print ( \" YES \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" NO \" ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE "}
{"value":"] def binomialCoeff ( n , k ) : NEW_LINE INDENT res = 1 NEW_LINE if ( k > n \/ 2 ) : NEW_LINE INDENT k = n - k NEW_LINE DEDENT for i in range ( k ) : NEW_LINE INDENT res *= ( n - i ) NEW_LINE res \/\/= ( i + 1 ) NEW_LINE DEDENT return res NEW_LINE DEDENT def sumOfProducts ( n , k ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( 1 , k + 1 ) : NEW_LINE INDENT sum += binomialCoeff ( i , j ) * binomialCoeff ( n - i , k - j ) NEW_LINE DEDENT DEDENT return sum NEW_LINE DEDENT n = 5 NEW_LINE k = 2 NEW_LINE print ( sumOfProducts ( n , k ) ) NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_"}
{"value":"] \\n import math NEW_LINE def canReached ( n ) : NEW_LINE INDENT if ( n == 1 ) : NEW_LINE INDENT print ( \" YES \" ) NEW_LINE return NEW_LINE DEDENT count = 0 NEW_LINE while ( n % 100 == 0 ) : NEW_LINE INDENT n = int ( n \/ 100 ) NEW_LINE count += 1 NEW_LINE DEDENT if ( n == 1 ) : NEW_LINE INDENT print ( \" YES \" ) NEW_LINE return NEW_LINE DEDENT if ( math . log2 ( n ) % 1 == 0 ) : NEW_LINE INDENT print ( \" NO \" ) NEW_LINE return NEW_LINE DEDENT print ( \" YES \" ) NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT N = 1000 NEW_LINE canReached ( N ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_"}
{"value":"] \\n def centralPolygonal ( n ) : NEW_LINE INDENT return ( ( n * ( n + 1 ) ) \/\/ 2 ) NEW_LINE DEDENT n = 5 NEW_LINE print ( centralPolygonal ( n ) ) NEW_LINE 1 NEW_LINE 6 NEW_LINE 15 NEW_LINE 28 NEW_LINE 45 NEW_LINE 66 NEW_LINE 91 NEW_LINE 120 NEW_LINE 153 NEW_LINE 190 NEW_LINE 231 NEW_LINE 276 NEW_LINE 325 NEW_LINE 378 NEW_LINE 435 NEW_LINE 496 NEW_LINE 561 NEW_LINE 630 NEW_LINE 703 NEW_LINE 780 NEW_LINE 861 NEW_LINE 946 NEW_LINE 1035 NEW_LINE 1128 NEW_LINE 1225 NEW_LINE 1326 NEW_LINE 1431 NEW_LINE 1540 NEW_LINE 1653 NEW_LINE 1770 NEW_LINE 1891 NEW_LINE 2016 NEW_LINE 2145 NEW_LINE 2278 NEW_LINE 2415 NEW_LINE 2556 NEW_LINE 2701 NEW_LINE 2850 NEW_LINE 3003 NEW_LINE 3160 NEW_LINE 3321 NEW_LINE 3486 NEW_LINE 3655 NEW_LINE 3828 NEW_LINE 4005 NEW_LINE 4186 NEW_LINE 4371 NEW_LINE 4559 NEW_LINE 4751 NEW_LINE 4947 NEW_LINE 5147 NEW_LINE 5351 NEW_LINE 5559 NEW_LINE 5771 NEW_LINE 5987 NEW_LINE 6207 NEW_LINE 6431 NEW_LINE 6659 NEW_LINE 6891 NEW_LINE 7127 NEW_"}
{"value":"] def printSeries ( n ) : NEW_LINE INDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT print ( i * ( i + 1 ) , end = \"   \" ) NEW_LINE DEDENT DEDENT n = 6 NEW_LINE printSeries ( n ) NEW_LINE 2 NEW_LINE 4 NEW_LINE 5 NEW_LINE 8 NEW_LINE 15 NEW_LINE 27 NEW_LINE 50 NEW_LINE 92 NEW_LINE 169 NEW_LINE 298 NEW_LINE 531 NEW_LINE 968 NEW_LINE 1776 NEW_LINE 3312 NEW_LINE 6355 NEW_LINE 12476 NEW_LINE 24577 NEW_LINE 49152 NEW_LINE 98304 NEW_LINE 196608 NEW_LINE 393216 NEW_LINE 786432 NEW_LINE 1572864 NEW_LINE 3145728 NEW_LINE 6291456 NEW_LINE 12582912 NEW_LINE 25165824 NEW_LINE 49327680 NEW_LINE 98655360 NEW_LINE 197310720 NEW_LINE 394621440 NEW_LINE 789242880 NEW_LINE 1578485760 NEW_LINE 3156971520 NEW_LINE 6313943040 NEW_LINE 12627886080 NEW_LINE 25255776160 NEW_LINE 49511546304 NEW_LINE 99023092640 NEW_LINE 198046185280 NEW_LINE 396092370560 NEW_LINE 792184741"}
{"value":"] def diameter ( L , H ) : NEW_LINE INDENT if ( L == 1 ) : NEW_LINE INDENT return H NEW_LINE DEDENT if ( H == 1 ) : NEW_LINE INDENT return L NEW_LINE DEDENT if ( H == 2 ) : NEW_LINE INDENT return L + 1 NEW_LINE DEDENT if ( H == 3 ) : NEW_LINE INDENT return 2 * L + 1 NEW_LINE DEDENT if ( H == 4 ) : NEW_LINE INDENT return 3 * L + 1 NEW_LINE DEDENT if ( H == 5 ) : NEW_LINE INDENT return 4 * L + 1 NEW_LINE DEDENT return diameter ( L >> 1 , H - 1 ) + diameter ( L >> 1 , H - 2 ) + 2 * ( L >> 1 ) NEW_LINE DEDENT N = 16 NEW_LINE print ( diameter ( N , 5 ) ) NEW_LINE 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 [\/INST] 1 NEW_LINE 2 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 [\/INST] 3 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 [\/INST] 4 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 [\/INST] 5 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 [\/INST] 6 , 1 , 1 , 1"}
{"value":"] \\n import math NEW_LINE def findLarger ( a , b , c , d ) : NEW_LINE INDENT a = math . pow ( a , b ) NEW_LINE c = math . pow ( c , d ) NEW_LINE ans = a * math . log ( a ) NEW_LINE ans2 = c * math . log ( c ) NEW_LINE if ( ans > ans2 ) : NEW_LINE INDENT print ( \" a ^ b   is   greater \" ) NEW_LINE DEDENT elif ( ans < ans2 ) : NEW_LINE INDENT print ( \" c ^ d   is   greater \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" Both   are   equal \" ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = 2 NEW_LINE b = 4 NEW_LINE c = 10 NEW_LINE d = 2 NEW_LINE findLarger ( a , b , c , d ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 10 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 0 NEW_LINE 1 NEW_LINE "}
{"value":"] NEW_LINE def SieveOfEratosthenes ( prime , n ) : NEW_LINE INDENT prime [ 0 ] = False NEW_LINE prime [ 1 ] = False NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT if ( prime [ i ] == True ) : NEW_LINE INDENT for j in range ( 2 * i , n + 1 , i ) : NEW_LINE INDENT prime [ j ] = False NEW_LINE DEDENT DEDENT DEDENT DEDENT def isOddPrime ( num ) : NEW_LINE INDENT while ( num > 0 ) : NEW_LINE INDENT rem = num % 10 NEW_LINE if ( rem == 1 or rem == 3 or rem == 7 or rem == 9 ) : NEW_LINE INDENT return True NEW_LINE DEDENT num \/\/= 10 NEW_LINE DEDENT return False NEW_LINE DEDENT def sumPrime ( n ) : NEW_LINE INDENT prime = [ True for i in range ( n + 1 ) ] NEW_LINE SieveOfEratosthenes ( prime , n ) NEW_LINE ans = 0 NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT if ( prime [ i ] == True and isOddPrime ( i ) == False ) : NEW_LINE INDENT ans += i NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT n = 1000 NEW_LINE print ( sumPrime ( n ) ) NEW_LINE DEDENT 1 , 2 , 3 , 5 , 7 , 9 , 11 , 13 , 17 , 19 , 23 , 29 , 31 , 37 , 41 , 43 , 47 , 53 , 59 , 61 , 67 , 71 , 73 , 79 , 83 , 89 , 97 , 101 , 103 , 107 ,"}
{"value":"] def countPrimes ( arr , n ) : NEW_LINE INDENT max_val = max ( arr ) NEW_LINE prime = [ True for i in range ( max_val + 1 ) ] NEW_LINE p = 2 NEW_LINE while p * p <= max_val : NEW_LINE INDENT if ( prime [ p ] == True ) : NEW_LINE INDENT for i in range ( p * 2 , max_val + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT p += 1 NEW_LINE DEDENT count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( prime [ arr [ i ] ] ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT def prefixSum ( arr , n ) : NEW_LINE INDENT prefix = [ 0 for i in range ( n + 1 ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT prefix [ i + 1 ] = prefix [ i ] + arr [ i ] NEW_LINE DEDENT return prefix NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 3 , 5 , 1 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE prefix = prefixSum ( arr , n ) NEW_LINE print ( countPrimes ( prefix , n ) ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW"}
{"value":"] \\n import math NEW_LINE def minValue ( n , x , y ) : NEW_LINE INDENT ans = ( ( 100 - y ) * n ) \/\/ 100 NEW_LINE ans += x NEW_LINE if ( ans >= y * n ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT return ans NEW_LINE DEDENT n = 10000 NEW_LINE x = 1000 NEW_LINE y = 25 NEW_LINE print ( minValue ( n , x , y ) ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE 57 NEW_LINE 58 NEW_LINE 59 NEW_LINE 60 NEW_LINE 61 NEW_LINE 62 NEW_LINE 63 NEW_LINE 64 NEW_LINE 65"}
{"value":"] \\n from math import sqrt NEW_LINE def isPrime ( n ) : NEW_LINE INDENT if ( n <= 1 ) : NEW_LINE INDENT return False NEW_LINE DEDENT if ( n <= 3 ) : NEW_LINE INDENT return True NEW_LINE DEDENT if ( n % 2 == 0 or n % 3 == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT for i in range ( 5 , int ( sqrt ( n ) ) + 1 , 6 ) : NEW_LINE INDENT if ( n % i == 0 or n % ( i + 2 ) == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def isFactorialPrime ( n ) : NEW_LINE INDENT if ( not isPrime ( n ) ) : NEW_LINE INDENT return False NEW_LINE DEDENT fact = 1 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT fact *= i NEW_LINE DEDENT if ( n == fact ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT n = 10 NEW_LINE if ( isFactorialPrime ( n ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_"}
{"value":"] def findWays ( n ) : NEW_LINE INDENT fac1 = 1 NEW_LINE fac2 = 1 NEW_LINE for i in range ( 2 , n ) : NEW_LINE INDENT fac1 *= i NEW_LINE DEDENT for i in range ( 2 , n + 1 ) : NEW_LINE INDENT fac2 *= i NEW_LINE DEDENT print ( fac1 * fac2 \/\/ 2 ) NEW_LINE DEDENT n = 5 NEW_LINE findWays ( n ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE 57 NEW_LINE 58 NEW_LINE 59 NEW_LINE 60 NEW_LINE 61 NEW_LINE 62 NEW_LINE 63 NEW_LINE 64 NEW_LINE 65 NEW_LINE 66"}
{"value":"] = 10000000000 NEW_LINE def SieveOfEratosthenes ( prime , n ) : NEW_LINE INDENT prime . append ( 2 ) NEW_LINE p = 3 NEW_LINE while ( p * p <= n ) : NEW_LINE INDENT if ( prime [ p ] == True ) : NEW_LINE INDENT for i in range ( p * 2 , n + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT p += 2 NEW_LINE DEDENT DEDENT def isEuclid ( prime , n ) : NEW_LINE INDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT if ( prime [ i ] and ( prime [ n - i ] ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE return NEW_LINE DEDENT DEDENT print ( \" No \" ) NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT prime = [ ] NEW_LINE n = 14 NEW_LINE SieveOfEratosthenes ( prime , n ) NEW_LINE isEuclid ( prime , n ) NEW_LINE n = 18 NEW_LINE isEuclid ( prime , n ) NEW_LINE DEDENT 1 : NEW_LINE INDENT INDENT print ( \" No \" ) NEW_LINE DEDENT DEDENT 1 : NEW_LINE INDENT INDENT print ( \" Yes \" ) NEW_LINE DEDENT 1 : NEW_LINE INDENT INDENT print ( \" No \" ) NEW_LINE DEDENT 1 : NEW_LINE INDENT INDENT print ( \" Yes \" ) NEW_LINE DEDENT 1 : NEW_LINE INDENT INDENT print ( \" No \" ) NEW_LINE DEDENT 1 : NEW_LINE INDENT INDENT print ( \" Yes \" ) NEW_LINE DEDENT 1 : NEW_LINE INDENT INDENT print ( \" Yes \" ) NEW_LINE DEDENT 1 : NEW_LINE"}
{"value":"] \\n def nextCube ( n ) : NEW_LINE INDENT return ( int ( pow ( n , 1.5 ) + 1 ) * int ( pow ( n , 1.5 ) ) ) NEW_LINE DEDENT n = 5 NEW_LINE print ( nextCube ( n ) ) NEW_LINE 2 NEW_LINE 3 NEW_LINE 5 NEW_LINE 8 NEW_LINE 13 NEW_LINE 21 NEW_LINE 32 NEW_LINE 49 NEW_LINE 72 NEW_LINE 100 NEW_LINE 137 NEW_LINE 184 NEW_LINE 250 NEW_LINE 327 NEW_LINE 416 NEW_LINE 521 NEW_LINE 646 NEW_LINE 791 NEW_LINE 964 NEW_LINE 1169 NEW_LINE 1404 NEW_LINE 1681 NEW_LINE 2000 NEW_LINE 2361 NEW_LINE 2772 NEW_LINE 3232 NEW_LINE 3748 NEW_LINE 4328 NEW_LINE 5072 NEW_LINE 5984 NEW_LINE 6096 NEW_LINE 6396 NEW_LINE 6896 NEW_LINE 7596 NEW_LINE 8496 NEW_LINE 9596 NEW_LINE 10896 NEW_LINE 12396 NEW_LINE 14096 NEW_LINE 15996 NEW_LINE 18096 NEW_LINE 20496 NEW_LINE 23196 NEW_LINE 26196 NEW_LINE 29596 NEW_LINE 33396 NEW_LINE 37696 NEW_LINE 42496 NEW_LINE 47796 NEW_LINE 53596 NEW_LINE 59996 NEW_LINE 67996 NEW_LINE 77596 NEW_LINE 88896 NEW_LINE 101896 NEW_LINE 11689"}
{"value":"] \\n import math NEW_LINE def isPrime ( n ) : NEW_LINE INDENT if ( n <= 1 ) : NEW_LINE INDENT return False NEW_LINE DEDENT if ( n <= 3 ) : NEW_LINE INDENT return True NEW_LINE DEDENT if ( n % 2 == 0 or n % 3 == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT for i in range ( 5 , int ( math . sqrt ( n ) ) + 1 , 6 ) : NEW_LINE INDENT if ( n % i == 0 or n % ( i + 2 ) == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def primeDivisorsSum ( n ) : NEW_LINE INDENT if ( isPrime ( n ) ) : NEW_LINE INDENT return n - 1 NEW_LINE DEDENT sum = 1 NEW_LINE for i in range ( 2 , int ( math . sqrt ( n ) ) + 1 ) : NEW_LINE INDENT if ( n % i == 0 ) : NEW_LINE INDENT if ( i * i == n ) : NEW_LINE INDENT sum += i NEW_LINE DEDENT else : NEW_LINE INDENT sum += i NEW_LINE sum += n \/ i NEW_LINE DEDENT DEDENT DEDENT return sum NEW_LINE DEDENT n = 12 NEW_LINE print ( primeDivisorsSum ( n ) ) NEW_LINE 2 NEW_LINE 12 NEW_LINE 14 NEW_LINE 20 NEW_LINE 16 NEW_LINE 30 NEW_LINE 42 NEW_LINE 60 NEW_LINE 46 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 5 NEW_LINE 7 NEW_LINE 11 NEW_LINE 13 NEW_LINE 17 NEW_LINE 19 NEW_LINE 23 NEW_LINE 29 NEW_LINE 31 NEW_LINE 37 NEW_LINE 41 NEW_LINE 43 NEW_LINE 47 NEW_"}
{"value":"] def getPosition ( n ) : NEW_LINE INDENT pos = 0 NEW_LINE while ( n ) : NEW_LINE INDENT if ( n % 10 == 2 ) : NEW_LINE INDENT pos += 1 NEW_LINE DEDENT if ( n % 10 == 3 ) : NEW_LINE INDENT pos += 2 NEW_LINE DEDENT if ( n % 10 == 5 ) : NEW_LINE INDENT pos += 3 NEW_LINE DEDENT if ( n % 10 == 7 ) : NEW_LINE INDENT pos += 4 NEW_LINE DEDENT n = n \/\/ 10 NEW_LINE DEDENT return pos NEW_LINE DEDENT n = 12357 NEW_LINE print ( getPosition ( n ) ) NEW_LINE 2 NEW_LINE 3 NEW_LINE 5 NEW_LINE 7 NEW_LINE 1 NEW_LINE 4 NEW_LINE 6 NEW_LINE 0 NEW_LINE 8 NEW_LINE 9 NEW_LINE 2 NEW_LINE 4 NEW_LINE 6 NEW_LINE 8 NEW_LINE 1 NEW_LINE 3 NEW_LINE 5 NEW_LINE 7 NEW_LINE 9 NEW_LINE 2 NEW_LINE 4 NEW_LINE 6 NEW_LINE 8 NEW_LINE 1 NEW_LINE 3 NEW_LINE 5 NEW_LINE 7 NEW_LINE 9 NEW_LINE 2 NEW_LINE 4 NEW_LINE 6 NEW_LINE 8 NEW_LINE 1 NEW_LINE 3 NEW_LINE 5 NEW_LINE 7 NEW_LINE 9 NEW_LINE 2 NEW_LINE 4 NEW_LINE 6 NEW_LINE 8 NEW_LINE 1 NEW_LINE 3 NEW_LINE 5 NEW_LINE 7 NEW_LINE 9 NEW_LINE 2 NEW_LINE 4 NEW_LINE 6 NEW_LINE 8 NEW_LINE 1 NEW_LINE 3 NEW_LINE 5 NEW_LINE 7 NEW_LINE 9 NEW_LINE 2 NEW_LINE 4 NEW_LINE 6 NEW_LINE 8 NEW_LINE 1 NEW_LINE 3 NEW_LINE 5 NEW_LINE 7 NEW_LINE 9 NEW_LINE"}
{"value":"] \\n def check ( L , R ) : NEW_LINE INDENT if ( R - L + 1 < 3 ) : NEW_LINE INDENT print ( \" - 1\" ) NEW_LINE DEDENT elif ( R - L + 1 == 3 ) : NEW_LINE INDENT print ( \" ( 2 , 3 , 4 )\" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" ( 2 k , 2 k + 1 , 2 k + 2 )\" ) NEW_LINE DEDENT DEDENT L = 2 NEW_LINE R = 10 NEW_LINE check ( L , R ) NEW_LINE L = 23 NEW_LINE R = 46 NEW_LINE check ( L , R ) NEW_LINE 1 , 2 , 3 NEW_LINE 23 , 24 , 25 NEW_LINE 45 , 46 , 47 NEW_LINE 1 , 2 , 3 NEW_LINE 23 , 24 , 25 NEW_LINE 45 , 46 , 47 NEW_LINE 1 , 2 , 3 NEW_LINE 23 , 24 , 25 NEW_LINE 45 , 46 , 47 NEW_LINE 1 , 2 , 3 NEW_LINE 23 , 24 , 25 NEW_LINE 45 , 46 , 47 NEW_LINE 1 , 2 , 3 NEW_LINE 23 , 24 , 25 NEW_LINE 45 , 46 , 47 NEW_LINE 1 , 2 , 3 NEW_LINE 23 , 24 , 25 NEW_LINE 45 , 46 , 47 NEW_LINE 1 , 2 , 3 NEW_LINE 23 , 24 , 25 NEW_LINE 45 , 46 , 47 NEW_LINE 1 , 2 , 3 NEW_LINE 23 , 24 , 25 NEW_LINE 45 , 46 , 47 NEW_LINE 1 , 2 , 3 NEW_LINE 23 ,"}
{"value":"] \\n def digitNumber ( digit , n , digit_excluding ) : NEW_LINE INDENT if ( n == 0 ) : NEW_LINE INDENT return 10 NEW_LINE DEDENT if ( n == 1 ) : NEW_LINE INDENT if ( digit_excluding == 0 ) : NEW_LINE INDENT return 9 NEW_LINE DEDENT else : NEW_LINE INDENT return 8 NEW_LINE DEDENT DEDENT if ( n % 2 == 1 ) : NEW_LINE INDENT if ( digit_excluding == 0 ) : NEW_LINE INDENT return 9 NEW_LINE DEDENT else : NEW_LINE INDENT return 8 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if ( digit_excluding == 0 ) : NEW_LINE INDENT return digitNumber ( digit , n - 1 , 9 ) * digitNumber ( digit , n \/ 2 , 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT return digitNumber ( digit , n - 1 , 8 ) * digitNumber ( digit , n \/ 2 , 0 ) NEW_LINE DEDENT DEDENT DEDENT DEDENT n = 3 NEW_LINE digit = 10 NEW_LINE digit_excluding = 4 NEW_LINE print ( digitNumber ( digit , n , digit_excluding ) ) NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 3"}
{"value":"] \\n def isPrime ( n ) : NEW_LINE INDENT if ( n <= 1 ) : NEW_LINE INDENT return False NEW_LINE DEDENT for i in range ( 2 , n ) : NEW_LINE INDENT if ( n % i == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def isEmirp ( n ) : NEW_LINE INDENT if ( isPrime ( n ) ) : NEW_LINE INDENT return False NEW_LINE DEDENT r = 0 NEW_LINE temp = n NEW_LINE while ( temp ) : NEW_LINE INDENT r = r * 10 + temp % 10 NEW_LINE temp = temp \/\/ 10 NEW_LINE DEDENT if ( isPrime ( r ) ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT n = 23 NEW_LINE if ( isEmirp ( n ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW"}
{"value":"] def convertDegree ( radian ) : NEW_LINE INDENT degree = ( radian * 180 ) \/ 3.14159265 NEW_LINE return degree NEW_LINE DEDENT radian = 30 NEW_LINE print ( convertDegree ( radian ) ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE 57 NEW_LINE 58 NEW_LINE 59 NEW_LINE 60 NEW_LINE 61 NEW_LINE 62 NEW_LINE 63 NEW_LINE 64 NEW_LINE 65 NEW_LINE 66 NEW_LINE 67 NEW_LINE 68 NEW_LINE 69 NEW_LINE 70 NEW_LINE 71 NEW_LINE 72 NEW_LINE 73 NEW_LINE 74"}
{"value":"] def sum_of_first_n_term ( n ) : NEW_LINE INDENT return ( ( n * ( n + 1 ) ) \/\/ 2 ) NEW_LINE DEDENT def trace ( n , a , b ) : NEW_LINE INDENT row_major_sum = sum_of_first_n_term ( n ) NEW_LINE row_major_sum += sum_of_first_n_term ( n - 1 ) NEW_LINE column_major_sum = sum_of_first_n_term ( n ) NEW_LINE column_major_sum += sum_of_first_n_term ( n - 1 ) NEW_LINE return ( row_major_sum + column_major_sum ) NEW_LINE DEDENT n = 3 NEW_LINE a = 2 NEW_LINE b = 3 NEW_LINE print ( trace ( n , a , b ) ) NEW_LINE 1 , 4 , 7 NEW_LINE 2 , 5 , 8 NEW_LINE 3 , 6 , 9 NEW_LINE 2 , 5 , 8 NEW_LINE 3 , 6 , 9 NEW_LINE 2 , 5 , 8 NEW_LINE 3 , 6 , 9 NEW_LINE 2 , 5 , 8 NEW_LINE 3 , 6 , 9 NEW_LINE 2 , 5 , 8 NEW_LINE 3 , 6 , 9 NEW_LINE 2 , 5 , 8 NEW_LINE 3 , 6 , 9 NEW_LINE 2 , 5 , 8 NEW_LINE 3 , 6 , 9 NEW_LINE 2 , 5 , 8 NEW_LINE 3 , 6 , 9 NEW_LINE 2 , 5 , 8 NEW_LINE 3 , 6 , 9 NEW_LINE 2 , 5 , 8 NEW_LINE 3 , 6 , 9 NEW_LINE 2 , 5 , 8 NEW_LINE 3 , 6 , 9 NEW_LINE 2 , 5 , 8 NEW_LINE 3 , 6 , 9 NEW_LINE 2 , 5 , 8 NEW_LINE 3 , 6 , 9 NEW_LINE 2 , 5"}
{"value":"] \\n def maxArea ( l , b , k ) : NEW_LINE INDENT if ( k <= l ) : NEW_LINE INDENT print ( ( k * ( k - 1 ) ) \/\/ 2 , end = \"   \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ( ( k - l ) * ( k - l - 1 ) ) \/\/ 2 , end = \"   \" ) NEW_LINE DEDENT print ( l * b , end = \"   \" ) NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT l , b , k = 2 , 3 , 2 NEW_LINE maxArea ( l , b , k ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE "}
{"value":"] def area ( side ) : NEW_LINE INDENT return side * side NEW_LINE DEDENT side = 5 NEW_LINE print ( \" Area   of   square   is   = \" , area ( side ) ) NEW_LINE 2 NEW_LINE 4 NEW_LINE 6 NEW_LINE 8 NEW_LINE 10 NEW_LINE 12 NEW_LINE 14 NEW_LINE 16 NEW_LINE 18 NEW_LINE 20 NEW_LINE 22 NEW_LINE 24 NEW_LINE 26 NEW_LINE 28 NEW_LINE 30 NEW_LINE 32 NEW_LINE 34 NEW_LINE 36 NEW_LINE 38 NEW_LINE 40 NEW_LINE 42 NEW_LINE 44 NEW_LINE 46 NEW_LINE 48 NEW_LINE 50 NEW_LINE 52 NEW_LINE 54 NEW_LINE 56 NEW_LINE 58 NEW_LINE 60 NEW_LINE 62 NEW_LINE 64 NEW_LINE 66 NEW_LINE 68 NEW_LINE 70 NEW_LINE 72 NEW_LINE 74 NEW_LINE 76 NEW_LINE 78 NEW_LINE 80 NEW_LINE 82 NEW_LINE 84 NEW_LINE 86 NEW_LINE 88 NEW_LINE 90 NEW_LINE 92 NEW_LINE 94 NEW_LINE 96 NEW_LINE 98 NEW_LINE 100 NEW_LINE 102 NEW_LINE 104 NEW_LINE 106 NEW_LINE 108 NEW_LINE 110 NEW_LINE 112 NEW_LINE 114 NEW_LINE 116 NEW_LINE 118 NEW_LINE 120 NEW_LINE 122 NEW_LINE 124 NEW_LINE 126 NEW_LINE 128 NEW_LINE 130 NEW_LINE 132 NEW_LINE 134 NEW_LINE 136 NEW_LINE 138 NEW_LINE 140 NEW_LINE 142 NEW_LINE 144 NEW_LINE 14"}
{"value":"] def countWays ( N ) : NEW_LINE INDENT ans = 0 NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT ans += N \/\/ ( 2 * i - 1 ) NEW_LINE DEDENT return ans NEW_LINE DEDENT N = 5 NEW_LINE print ( countWays ( N ) ) NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE 57 NEW_LINE 58 NEW_LINE 59 NEW_LINE 60 NEW_LINE 61 NEW_LINE 62 NEW_LINE 63 NEW_LINE 64 NEW_LINE 65 NEW_LINE 66 NEW_LINE 67 NEW_LINE 68 NEW_LINE 69 NEW_LINE 70 NEW_LINE 71 NEW_LINE 72 NEW_LINE 73 NEW_LINE"}
{"value":"] \\n def isAutomorphic ( N ) : NEW_LINE INDENT square = N * N NEW_LINE while ( N > 0 ) : NEW_LINE INDENT if ( N % 10 != square % 10 ) : NEW_LINE INDENT return False NEW_LINE DEDENT N = N \/\/ 10 NEW_LINE square = square \/\/ 10 NEW_LINE DEDENT return True NEW_LINE DEDENT N = 16 NEW_LINE if ( isAutomorphic ( N ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE 57 NEW_LINE 58 NEW_LINE 59 NEW_LINE 60 NEW_LINE 6"}
{"value":"] \\n def maxPrimeFactors ( n ) : NEW_LINE INDENT prime = [ True for i in range ( n + 1 ) ] NEW_LINE prime [ 0 ] = prime [ 1 ] = False NEW_LINE p = 2 NEW_LINE while p * p <= n : NEW_LINE INDENT if ( prime [ p ] == True ) : NEW_LINE INDENT for i in range ( p * 2 , n + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT p += 1 NEW_LINE DEDENT answer = 1 NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT if ( prime [ i ] == True ) : NEW_LINE INDENT answer += 1 NEW_LINE DEDENT DEDENT return answer NEW_LINE DEDENT n = 10 NEW_LINE print ( maxPrimeFactors ( n ) ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_"}
{"value":"] def power ( x , y , p ) : NEW_LINE INDENT if ( y == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT if ( x == 0 and y % 2 == 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT temp = power ( x , y \/\/ 2 , p ) NEW_LINE temp = ( temp * temp ) % p NEW_LINE if ( y & 1 ) : NEW_LINE INDENT temp = ( x * temp ) % p NEW_LINE DEDENT return temp NEW_LINE DEDENT def isSquareRootExists ( n , p ) : NEW_LINE INDENT if ( p % 4 == 3 ) : NEW_LINE INDENT if ( power ( n , ( p + 1 ) \/\/ 4 , p ) % p == 0 ) : NEW_LINE INDENT return True NEW_LINE DEDENT if ( power ( n , ( p + 1 ) \/\/ 4 ) % p == 0 ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT return False NEW_LINE DEDENT n = 13 NEW_LINE p = 25 NEW_LINE if ( isSquareRootExists ( n , p ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE"}
{"value":"DENT def power ( x , y , p ) : NEW_LINE INDENT res = 1 NEW_LINE x = x % p NEW_LINE while ( y > 0 ) : NEW_LINE INDENT if ( x == 1 ) : NEW_LINE INDENT x = p - 1 NEW_LINE DEDENT if ( x == p ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( y % 2 == 1 ) : NEW_LINE INDENT res = ( res * x ) % p NEW_LINE DEDENT y = y >> 1 NEW_LINE DEDENT return res NEW_LINE DEDENT def isProbablePrime ( n , k ) : NEW_LINE INDENT if ( n <= 3 ) : NEW_LINE INDENT return n > 1 NEW_LINE DEDENT d = 0 NEW_LINE while ( True ) : NEW_LINE INDENT d += 1 NEW_LINE if ( power ( 2 , d , n ) == n - 1 ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT for i in range ( 0 , k ) : NEW_LINE INDENT a = randint ( 2 , n - 2 ) NEW_LINE x = power ( a , d , n ) NEW_LINE if ( x == 1 ) : NEW_LINE INDENT return False NEW_LINE DEDENT if ( x == n - 1 ) : NEW_LINE INDENT continue NEW_LINE DEDENT while ( power ( x , d , n ) != 1 ) : NEW_LINE INDENT if ( power ( x , d , n ) != n - 1 ) : NEW_LINE INDENT return False NEW_LINE DEDENT d *= 2 NEW_LINE x = power ( x * x , d , n ) NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT n = 1000 NEW_LINE print ( isProbablePrime ( n , 10 ) ) NEW_LINE 1 : NEW_LINE INDENT n = 101 NEW_LINE print ( isProbablePrime ( n , 10 ) ) NEW_LINE DEDENT"}
{"value":"] def maxLen ( x ) : NEW_LINE INDENT res = 0 NEW_LINE while ( x > 0 ) : NEW_LINE INDENT res += 1 NEW_LINE x = ( x - 1 ) & x NEW_LINE DEDENT return res NEW_LINE DEDENT x = 12 NEW_LINE print ( maxLen ( x ) ) NEW_LINE 3 NEW_LINE 2 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE "}
{"value":"] \\n def subtract ( x , y ) : NEW_LINE INDENT n = len ( x ) NEW_LINE result = [ 0 ] * n NEW_LINE carry = 0 NEW_LINE for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT borrow = ( ( y [ i ] if i < len ( y ) else 0 ) & ( ( 1 << ( i + 1 ) ) - 1 ) ) NEW_LINE result [ i ] = ( x [ i ] ^ borrow ) NEW_LINE carry = ( carry + ( x [ i ] & borrow ) ) NEW_LINE DEDENT for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT result [ i ] += carry NEW_LINE carry = 0 NEW_LINE DEDENT return result NEW_LINE DEDENT x = \"10101010\" NEW_LINE y = \"1110001\" NEW_LINE result = subtract ( x , y ) NEW_LINE for i in range ( len ( x ) ) : NEW_LINE INDENT print ( result [ i ] , end = \" \" ) NEW_LINE DEDENT 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW_LINE 0 NEW"}
{"value":"] \\n def subtract ( a , b ) : NEW_LINE INDENT if ( b == 0 ) : NEW_LINE INDENT return a NEW_LINE DEDENT if ( b % 2 == 0 ) : NEW_LINE INDENT return subtract ( a + a , b \/\/ 2 ) NEW_LINE DEDENT else : NEW_LINE INDENT return subtract ( a + a , ( b - 1 ) \/\/ 2 ) NEW_LINE DEDENT DEDENT a = 10 NEW_LINE b = 5 NEW_LINE print ( \" Result   = \" , subtract ( a , b ) ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE 57 NEW_LINE 58 NEW_LINE 59 NEW_LINE 60 NEW_LINE 61 NEW_LINE 62 NEW_LINE"}
{"value":"] def addEdge ( n , m , g , x , y ) : NEW_LINE INDENT g [ x ] . append ( y ) NEW_LINE g [ y ] . append ( x ) NEW_LINE DEDENT def findKthAncestor ( n , m , g , K ) : NEW_LINE INDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT v = [ ] NEW_LINE v . append ( i ) NEW_LINE for j in g [ i ] : NEW_LINE INDENT if ( len ( v ) < K ) : NEW_LINE INDENT v . append ( j ) NEW_LINE DEDENT else : NEW_LINE INDENT v . append ( v [ - 1 ] ) NEW_LINE DEDENT DEDENT ans [ i ] = v [ - 1 ] NEW_LINE DEDENT DEDENT def printAncestors ( n , m , g , ans ) : NEW_LINE INDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT print ( ans [ i ] , end = \"   \" ) NEW_LINE DEDENT DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT n = 6 NEW_LINE K = 2 NEW_LINE m = 5 NEW_LINE g = [ [ ] for i in range ( n + 1 ) ] NEW_LINE addEdge ( n , m , g , 1 , 2 ) NEW_LINE addEdge ( n , m , g , 2 , 3 ) NEW_LINE addEdge ( n , m , g , 3 , 4 ) NEW_LINE addEdge ( n , m , g , 4 , 5 ) NEW_LINE addEdge ( n , m , g , 5 , 6 ) NEW_LINE addEdge ( n , m , g , 6 , 1 ) NEW_LINE ans = [ 0 for i in range ( n + 1 ) ] NEW_LINE findKthAncestor ( n , m , g , K ) NEW_LINE printAncestors ( n , m , g , ans ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4"}
{"value":"] def build ( arr , v , seg , node , l , r ) : NEW_LINE INDENT if ( l == r ) : NEW_LINE INDENT v [ node ] = arr [ l ] NEW_LINE return NEW_LINE DEDENT mid = ( l + r ) \/\/ 2 NEW_LINE build ( arr , v , seg , 2 * node , l , mid ) NEW_LINE build ( arr , v , seg , 2 * node + 1 , mid + 1 , r ) NEW_LINE v [ node ] = v [ 2 * node ] + v [ 2 * node + 1 ] NEW_LINE DEDENT def push ( v , seg , node , l , r ) : NEW_LINE INDENT if ( l == r ) : NEW_LINE INDENT return NEW_LINE DEDENT mid = ( l + r ) \/\/ 2 NEW_LINE push ( v , seg , 2 * node , l , mid ) NEW_LINE push ( v , seg , 2 * node + 1 , mid + 1 , r ) NEW_LINE v [ node ] = v [ 2 * node ] + v [ 2 * node + 1 ] NEW_LINE DEDENT def update ( v , seg , node , l , r , index , val ) : NEW_LINE INDENT if ( l == r ) : NEW_LINE INDENT v [ node ] += val NEW_LINE return NEW_LINE DEDENT mid = ( l + r ) \/\/ 2 NEW_LINE push ( v , seg , node , l , r ) NEW_LINE if ( index <= mid ) : NEW_LINE INDENT update ( v , seg , 2 * node , l , mid , index , val ) NEW_LINE DEDENT else : NEW_LINE INDENT update ( v , seg , 2 * node + 1 , mid + 1 , r , index , val ) NEW_LINE DEDENT v [ node ] = v [ 2 * node ] + v [ 2 * node + 1 ] NEW_LINE DEDENT def query ( v , seg , node , l , r , queryy ) : NEW_LINE INDENT if ( l == r ) : NEW_LINE INDENT return v [ node ] NEW_LINE DEDENT mid = ( l"}
{"value":"] from math import gcd NEW_LINE def minArrayLength ( arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT if ( gcd ( arr [ i ] , arr [ j ] ) == 1 ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT DEDENT return True NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 2 , 4 , 3 , 1 , 6 ] NEW_LINE n = len ( arr ) NEW_LINE if ( minArrayLength ( arr , n ) ) : NEW_LINE INDENT print ( n - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( n ) NEW_LINE DEDENT DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 6 NEW_LINE 5 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE"}
{"value":"] def countWays ( n ) : NEW_LINE INDENT count = 0 NEW_LINE for a in range ( 1 , n + 1 ) : NEW_LINE INDENT for b in range ( 1 , n + 1 ) : NEW_LINE INDENT for c in range ( 1 , n + 1 ) : NEW_LINE INDENT if ( a + b > c and b + c > a and c + a > b ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT return count NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT n = 5 NEW_LINE print ( countWays ( n ) ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_"}
{"value":"] def countPairs ( arr , n ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( i == arr [ i ] ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT print ( count ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 ] NEW_LINE n = len ( arr ) NEW_LINE countPairs ( arr , n ) NEW_LINE DEDENT 2 NEW_LINE 5 NEW_LINE 6 NEW_LINE 4 NEW_LINE 3 NEW_LINE 1 NEW_LINE 0 NEW_LINE 2 NEW_LINE 4 NEW_LINE 3 NEW_LINE 2 NEW_LINE 0 NEW_LINE 5 NEW_LINE 1 NEW_LINE 6 NEW_LINE 2 NEW_LINE 4 NEW_LINE 1 NEW_LINE 3 NEW_LINE 0 NEW_LINE 5 NEW_LINE 2 NEW_LINE 4 NEW_LINE 0 NEW_LINE 2 NEW_LINE 3 NEW_LINE 1 NEW_LINE 4 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 0 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE "}
{"value":"] \\n def maxLen ( arr , n ) : NEW_LINE INDENT hash = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT hash [ arr [ i ] ] = 1 NEW_LINE DEDENT maxLen = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] in hash : NEW_LINE INDENT if ( arr [ i ] + arr [ i - 1 ] in hash ) : NEW_LINE INDENT maxLen = max ( maxLen , hash [ arr [ i ] + arr [ i - 1 ] ] ) NEW_LINE DEDENT if ( arr [ i ] + arr [ i - 2 ] in hash ) : NEW_LINE INDENT maxLen = max ( maxLen , hash [ arr [ i ] + arr [ i - 2 ] ] ) NEW_LINE DEDENT DEDENT DEDENT return maxLen NEW_LINE DEDENT arr = [ 3 , 10 , 10 , 11 , 12 , 13 , 14 , 15 ] NEW_LINE n = len ( arr ) NEW_LINE print ( maxLen ( arr , n ) ) NEW_LINE 2 NEW_LINE 6 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE "}
{"value":"] def maxElements ( arr , n , k ) : NEW_LINE INDENT arr . sort ( ) NEW_LINE sum = 0 NEW_LINE count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE if ( sum > k ) : NEW_LINE INDENT break NEW_LINE DEDENT count += 1 NEW_LINE DEDENT return count NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE k = 9 NEW_LINE print ( maxElements ( arr , n , k ) ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE 57 NEW_LINE 58 NEW_LINE 59 NEW_LINE "}
{"value":"] \\n def findCandies ( arr , N ) : NEW_LINE INDENT s = set ( ) NEW_LINE for i in range ( N ) : NEW_LINE INDENT s . add ( arr [ i ] ) NEW_LINE DEDENT return len ( s ) NEW_LINE DEDENT def maxCandies ( arr , N ) : NEW_LINE INDENT candies = N \/\/ 2 NEW_LINE candy_types = findCandies ( arr , N ) NEW_LINE return min ( candies , candy_types ) NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 ] NEW_LINE N = len ( arr ) NEW_LINE print ( maxCandies ( arr , N ) ) NEW_LINE DEDENT 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2"}
{"value":"] \\n import math NEW_LINE def diagonalLength ( a , b , theta ) : NEW_LINE INDENT c = ( a * math . cos ( math . radians ( theta ) ) ) NEW_LINE d = ( a * math . sin ( math . radians ( theta ) ) ) NEW_LINE print ( \" Diagonal  1   =   \" , int ( math . sqrt ( c * c + d * d ) ) ) NEW_LINE print ( \" Diagonal  2   =   \" , int ( math . sqrt ( ( a * a ) - ( c * c ) ) ) ) NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT a = 5 NEW_LINE b = 6 NEW_LINE theta = 45 NEW_LINE diagonalLength ( a , b , theta ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW"}
{"value":"] def countEvenOdd ( arr , n , k ) : NEW_LINE INDENT even = 0 NEW_LINE odd = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT x = bin ( arr [ i ] ) [ 2 : ] NEW_LINE y = len ( x ) NEW_LINE if ( y % 2 == 0 ) : NEW_LINE INDENT even += 1 NEW_LINE DEDENT else : NEW_LINE INDENT odd += 1 NEW_LINE DEDENT DEDENT y = bin ( k ) [ 2 : ] NEW_LINE y = len ( y ) NEW_LINE if ( y % 2 == 0 ) : NEW_LINE INDENT even = odd NEW_LINE odd = even NEW_LINE DEDENT print ( \" Even   =   \" , even , \" Odd   =   \" , odd ) NEW_LINE DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE k = 12 NEW_LINE countEvenOdd ( arr , n , k ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 12 NEW_LINE Even = 2 Odd = 3 [\/INST] 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 12 NEW_LINE 12 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 12 NEW_LINE 12 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 12 NEW_LINE 12 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 12 NEW_LINE 12 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 12 NEW_LINE 12 NEW_LINE"}
{"value":"] \\n def countPairs ( n ) : NEW_LINE INDENT return n \/\/ 2 NEW_LINE DEDENT n = 5 NEW_LINE print ( countPairs ( n ) ) NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43 NEW_LINE 44 NEW_LINE 45 NEW_LINE 46 NEW_LINE 47 NEW_LINE 48 NEW_LINE 49 NEW_LINE 50 NEW_LINE 51 NEW_LINE 52 NEW_LINE 53 NEW_LINE 54 NEW_LINE 55 NEW_LINE 56 NEW_LINE 57 NEW_LINE 58 NEW_LINE 59 NEW_LINE 60 NEW_LINE 61 NEW_LINE 62 NEW_LINE 63 NEW_LINE 64 NEW_LINE 65 NEW_LINE 66 NEW_LINE 67 NEW_LINE 68 NEW_LINE 69 NEW_LINE 70 NEW_LINE 71 NEW_LINE 72 NEW_LINE 73 NEW_LINE 74 NEW_LINE 75 NEW_LINE 76 NEW_LINE 77 NEW_LINE 78 NEW_LINE"}
{"value":"] \\n import sys NEW_LINE def lcs ( a , i , j , n , dp ) : NEW_LINE INDENT if ( i == n or j == - 1 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( dp [ i ] [ j ] != - 1 ) : NEW_LINE INDENT return dp [ i ] [ j ] NEW_LINE DEDENT notIncl = lcs ( a , i + 1 , j , n , dp ) NEW_LINE incl = lcs ( a , i , j - 1 , n , dp ) + 1 NEW_LINE dp [ i ] [ j ] = max ( incl , notIncl ) NEW_LINE return dp [ i ] [ j ] NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ [ 1 , 2 ] , [ 2 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] ] NEW_LINE n = len ( arr ) NEW_LINE dp = [ [ - 1 for i in range ( n ) ] for i in range ( n ) ] NEW_LINE print ( lcs ( arr , 0 , n - 1 , n , dp ) ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 2"}
{"value":"] def countTriplets ( A , N ) : NEW_LINE INDENT cnt = 0 NEW_LINE mp = { } NEW_LINE for i in range ( N ) : NEW_LINE INDENT for j in range ( i + 1 , N ) : NEW_LINE INDENT a = A [ i ] & A [ j ] NEW_LINE if a in mp : NEW_LINE INDENT mp [ a ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT mp [ a ] = 1 NEW_LINE DEDENT DEDENT DEDENT for i in range ( N ) : NEW_LINE INDENT for j in range ( i + 1 , N ) : NEW_LINE INDENT a = A [ i ] & A [ j ] NEW_LINE if a == 0 : NEW_LINE INDENT cnt += mp [ a ] NEW_LINE DEDENT DEDENT DEDENT return cnt NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT A = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] NEW_LINE N = len ( A ) NEW_LINE print ( countTriplets ( A , N ) ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 0 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 0 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 1 NEW_LINE 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 0 NEW_LINE 2 NEW_LINE 3 NEW_LINE "}
{"value":"] \\n def countWays ( n ) : NEW_LINE INDENT noOfWays = [ 0 ] * ( n + 2 ) NEW_LINE noOfWays [ 0 ] = 1 NEW_LINE noOfWays [ 1 ] = 2 NEW_LINE noOfWays [ 2 ] = 3 NEW_LINE for i in range ( 3 , n + 1 ) : NEW_LINE INDENT noOfWays [ i ] = ( noOfWays [ i - 1 ] + noOfWays [ i - 2 ] ) NEW_LINE DEDENT return noOfWays [ n ] NEW_LINE DEDENT n = 5 NEW_LINE print ( countWays ( n ) ) NEW_LINE 3 NEW_LINE 5 NEW_LINE 10 NEW_LINE 20 NEW_LINE 30 NEW_LINE 40 NEW_LINE 50 NEW_LINE 60 NEW_LINE 70 NEW_LINE 80 NEW_LINE 90 NEW_LINE 100 NEW_LINE 110 NEW_LINE 120 NEW_LINE 130 NEW_LINE 140 NEW_LINE 150 NEW_LINE 160 NEW_LINE 170 NEW_LINE 180 NEW_LINE 190 NEW_LINE 200 NEW_LINE 210 NEW_LINE 220 NEW_LINE 230 NEW_LINE 240 NEW_LINE 250 NEW_LINE 260 NEW_LINE 270 NEW_LINE 280 NEW_LINE 290 NEW_LINE 300 NEW_LINE 310 NEW_LINE 320 NEW_LINE 330 NEW_LINE 340 NEW_LINE 350 NEW_LINE 360 NEW_LINE 370 NEW_LINE 380 NEW_LINE 390 NEW_LINE 400 NEW_LINE 410 NEW_LINE 420 NEW_LINE 430 NEW_LINE 440 NEW_LINE 450 NEW_LINE 460 NEW_LINE 470 NEW_LINE 480 NEW_LINE 4"}
{"value":"] \\n import sys NEW_LINE def playerA ( s , n ) : NEW_LINE INDENT v = [ ] NEW_LINE c = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( s [ i ] == '0' ) : NEW_LINE INDENT c += 1 NEW_LINE DEDENT else : NEW_LINE INDENT v . append ( c ) NEW_LINE c = 0 NEW_LINE DEDENT DEDENT if ( len ( v ) == 0 ) : NEW_LINE INDENT print ( \" Player   A \" ) NEW_LINE DEDENT elif ( len ( v ) == 1 ) : NEW_LINE INDENT print ( \" Player   B \" ) NEW_LINE DEDENT else : NEW_LINE INDENT first = - sys . maxsize - 1 NEW_LINE second = - sys . maxsize - 1 NEW_LINE for i in range ( len ( v ) ) : NEW_LINE INDENT if ( v [ i ] > first ) : NEW_LINE INDENT second = first NEW_LINE first = v [ i ] NEW_LINE DEDENT elif ( v [ i ] > second ) : NEW_LINE INDENT second = v [ i ] NEW_LINE DEDENT DEDENT if ( first - second == 1 ) : NEW_LINE INDENT print ( \" Player   A \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" Player   B \" ) NEW_LINE DEDENT DEDENT DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT s = \"00110000110000000011000011000000001100001100000000110000110000000011000011000000001100001100000000110000110000000011000011000000001100001100"}
{"value":"] def isKpalindrome ( S , k ) : NEW_LINE INDENT mp = { } NEW_LINE for i in range ( len ( S ) ) : NEW_LINE INDENT if S [ i ] in mp : NEW_LINE INDENT mp [ S [ i ] ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT mp [ S [ i ] ] = 1 NEW_LINE DEDENT DEDENT if ( k == len ( S ) ) : NEW_LINE INDENT return True NEW_LINE DEDENT if ( k > len ( S ) ) : NEW_LINE INDENT return False NEW_LINE DEDENT odd = 0 NEW_LINE for i in mp : NEW_LINE INDENT if ( mp [ i ] % 2 == 1 ) : NEW_LINE INDENT odd += 1 NEW_LINE DEDENT DEDENT if ( k < odd ) : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT S = \" abab \" NEW_LINE k = 2 NEW_LINE if ( isKpalindrome ( S , k ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38"}
{"value":"] def compare ( s1 , s2 ) : NEW_LINE INDENT s1 = s1 . lower ( ) NEW_LINE s2 = s2 . lower ( ) NEW_LINE if ( s1 == s2 ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT def printSameOrNot ( s1 , s2 ) : NEW_LINE INDENT if ( compare ( s1 , s2 ) ) : NEW_LINE INDENT print ( \" Same \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" Not   same \" ) NEW_LINE DEDENT DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT s1 = \" Geeks \" NEW_LINE s2 = \" geeks \" NEW_LINE printSameOrNot ( s1 , s2 ) NEW_LINE DEDENT 2 NEW_LINE DEDENT 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2 NEW_LINE 2"}
{"value":"] \\n def printSteps ( s , n ) : NEW_LINE INDENT x = 0 NEW_LINE flag = False NEW_LINE for i in range ( len ( s ) ) : NEW_LINE INDENT if ( s [ i ] == ' x ' ) : NEW_LINE INDENT if ( x == 0 ) : NEW_LINE INDENT x = n NEW_LINE DEDENT elif ( x == n - 1 ) : NEW_LINE INDENT x = 0 NEW_LINE DEDENT DEDENT print ( x * s [ i ] , end = \" \" ) NEW_LINE DEDENT DEDENT s = \"10101010\" NEW_LINE n = 5 NEW_LINE printSteps ( s , n ) NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0 NEW_LINE 1 NEW_LINE 0"}
{"value":"] \\n def countFrequencies ( arr , n ) : NEW_LINE INDENT visited = [ 0 ] * n NEW_LINE for i in range ( n ) : NEW_LINE INDENT visited [ i ] = 0 NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT if ( visited [ i ] == 0 ) : NEW_LINE INDENT count = 1 NEW_LINE j = i + 1 NEW_LINE while ( j < n and arr [ j ] == arr [ i ] ) : NEW_LINE INDENT j += 1 NEW_LINE count += 1 NEW_LINE DEDENT print ( arr [ i ] , \"   \" , count ) NEW_LINE visited [ i ] = 1 NEW_LINE DEDENT DEDENT DEDENT if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 2 , 2 , 2 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 5 , 5 , 5 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE countFrequencies ( arr , n ) NEW_LINE DEDENT 1 NEW_LINE 2 NEW_LINE 2 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 3 NEW_LINE 4 NEW_LINE 4 NEW_LINE 4 NEW_LINE 5 NEW_LINE 5 NEW_LINE 5 NEW_LINE 5 NEW_LINE 5 NEW_LINE 2 NEW_LINE 2 NEW_LINE 3 NEW_LINE 3 NEW_LINE 4 NEW_LINE 4 NEW_LINE 5 NEW_LINE 5 NEW_LINE 2 NEW_LINE 2 NEW_LINE 3 NEW_LINE 3 NEW_LINE 4 NEW_LINE 4 NEW_LINE 5 NEW_LINE 5 NEW_LINE 2 NEW_LINE 2 NEW_LINE 3 NEW_LINE 3 NEW_LINE 4 NEW_LINE 4 NEW_LINE 5 NEW_LINE 5 NEW_LINE 2 NEW_LINE 2 NEW_LINE 3 NEW_LINE 3 NEW_LINE 4 NEW_LINE 4 NEW_LINE 5 NEW_LINE 5 NEW_LINE 2"}
{"value":"] \\n def checkDivisible ( binary , k ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( len ( binary ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT if ( binary [ i ] == '0' ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT if ( count == k ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT binary = \"101000\" NEW_LINE k = 3 NEW_LINE if ( checkDivisible ( binary , k ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT binary = \"1101100\" NEW_LINE k = 4 NEW_LINE if ( checkDivisible ( binary , k ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT 2 NEW_LINE 3 NEW_LINE 4 NEW_LINE 5 NEW_LINE 6 NEW_LINE 7 NEW_LINE 8 NEW_LINE 9 NEW_LINE 10 NEW_LINE 11 NEW_LINE 12 NEW_LINE 13 NEW_LINE 14 NEW_LINE 15 NEW_LINE 16 NEW_LINE 17 NEW_LINE 18 NEW_LINE 19 NEW_LINE 20 NEW_LINE 21 NEW_LINE 22 NEW_LINE 23 NEW_LINE 24 NEW_LINE 25 NEW_LINE 26 NEW_LINE 27 NEW_LINE 28 NEW_LINE 29 NEW_LINE 30 NEW_LINE 31 NEW_LINE 32 NEW_LINE 33 NEW_LINE 34 NEW_LINE 35 NEW_LINE 36 NEW_LINE 37 NEW_LINE 38 NEW_LINE 39 NEW_LINE 40 NEW_LINE 41 NEW_LINE 42 NEW_LINE 43"}
