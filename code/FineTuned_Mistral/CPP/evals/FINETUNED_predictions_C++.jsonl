{"value":"] \\n 3 4 5 4 2 3 2 2 4 3 [\/INST] \\n 10 [\/INST] \\n 4 [\/INST] \\n 8 [\/INST] \\n 12 [\/INST] \\n 1 [\/INST] \\n 1 [\/INST] \\n 1 [\/INST] \\n 2 [\/INST] \\n 1 [\/INST] \\n 1 [\/INST] \\n 1 [\/INST] \\n 1 [\/INST] \\n 1 [\/INST] \\n 1 [\/INST] \\n 1 [\/INST] \\n 1 [\/INST] \\n 1 [\/INST] \\n 1 [\/INST] \\n 1 [\/INST] \\n 1 [\/INST] \\n 1 [\/INST] \\n 1 [\/INST] \\n 1 [\/INST] \\n 1 [\/INST] \\n 1 [\/INST] \\n 1 [\/INST] \\n 1 [\/INST] \\n "}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; void maxDiff ( int arr [ ] , int n ) { vector < int > v ; int prev = INT_MIN ; for ( int i = 0 ; i < n ; i ++ ) { int diff = INT_MIN ; for ( int j = 0 ; j < n ; j ++ ) { if ( i != j ) { diff = max ( diff , arr [ j ] - arr [ i ] ) ; } } v . push_back ( diff ) ; prev = max ( prev , arr [ i ] ) ; } for ( int i = 0 ; i < v . size ( ) ; i ++ ) { cout << v [ i ] << \"   \" ; } } int main ( ) { int arr [ ] = { 1 , 7 , 3 , 6 , 4 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; maxDiff ( arr , n ) ; return 0 ; } -------------------------------- 11 8 5 4 3 -------------------------------- [\/sourcecode] \\n \\n \\"}
{"value":" [INST] [\/ [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] ["}
{"value":" [\/0\\n #include <bits\/stdc++ > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0."}
{"value":"] A C ++ program for the above approach ; Function to find gcd of two numbers ; Function to find lcm of two numbers ; Function to find max lcm value among all representations of n ; Function to find the lcm of all representations of n ; Function to find different ways in which n can be written as a sum of atleast one positive integers ; Base Case ; If sum becomes n , consider this representation ; Iterate from previous element of representation till n ; Include current element from representation ; Calling function again with reduced sum ; Backtrack ; Function to find the Landau 's function ; Using recurrence relation , find different ways in which n can be written as a sum of atleast one positive integers ; Driver Code [\/INST] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return ( a * b ) \/ g"}
{"value":"] #include <bits\/stdc ++ . h> NEW_LINE using namespace std ; bool isPrime ( int n ) { if ( n == 2 n == 3 ) return true ; if ( n % 2 == 0 n % 3 == 0 ) return false ; if ( n % 5 == 0 ) return false ; if ( n % 7 == 0 ) return false ; for ( int i = 5 ; i * i <= sqrt ( n ) ; if ( n % i == 0 ) return false ; return true ; } bool check ( int N ) { return isPrime ( N ) && isPrime ( N - 1 ) ; } 0000 int main ( ) { int N = 15 ; if ( check ( N ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; } ---------------- ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - "}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; void checkPossible ( int arr [ ] , int n , int k ) { int odd_count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 != 0 ) odd_count ++ ; } if ( odd_count % k != 0 ) cout << \" No \" << endl ; else cout << \" Yes \" << endl ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ; int k = 3 ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; checkPossible ( arr , n , k ) ; return 0 ; } -------------------------------- ---------------- - ---------------- - - 2 \/ 1034024339 \/ https:\/\/www . geeksforgeeks . org \/ check-if-array-can-be-split-into-k-subsets-with-odd-sum \/"}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; int sum ( int n ) { int ans = 0 ; int max_freq = 0 ; int freq [ n + 1 ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) freq [ i ] ++ ; for ( int i = 0 ; i <= n ; i ++ ) max_freq = max ( max_freq , freq [ i ] ) ; int cum_freq [ n + 1 ] = { 0 } ; for ( int i = 0 ; i <= n ; i ++ ) { cum_freq [ i ] = cum_freq [ i - 1 ] + freq [ i ] ; } for ( int i = 1 ; i <= max_freq ; i ++ ) ans += ( cum_freq [ n ] - cum_freq [ n - i ] ) ; return ans ; } int main ( ) { int n = 2 ; cout << sum ( n ) << endl ; return 0 ; } ------------------------------------------------ -- -------------------------------- -- -------------------------------- -- ----------------"}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; void findElements ( int arr [ ] , int n ) { int Xor = 0 ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { Xor ^= arr [ i ] ; sum += arr [ i ] ; } if ( sum == 2 * Xor ) cout << \" No   insertions   required \" << endl ; else { cout << \" Insert   \" << ( sum - 2 * Xor ) << \"   elements   in   the   array \" << endl ; for ( int i = 0 ; i < ( sum - 2 * Xor ) ; i ++ ) cout << ( Xor + i ) << \"   \" ; } } int main ( ) { int arr [ ] = { 2 , 4 , 6 , 8 , 10 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; findElements ( arr , n ) ; return 0 ; } -------------------------------------------------------------------------------- 1 \/ 2 ----------------------------------------------------------------"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; bool checkReciprocal ( int a , int b , int c ) { float d = ( b * b ) - 4 * a * c ; if ( d < 0 ) return false ; else return true ; } int main ( ) { int a = 1 , b = 1 , c = 1 ; if ( checkReciprocal ( a , b , c ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }}
{"value":"] \\n 20182918201820182018201820182018201820182018201820182018201820182018201820182018201820182018201820182018201820182018201820182018201820182018201820182018201820182018201820182018201820182018201820182018201820182018201820182018201820"}
{"value":" \\n 12345 \\n 12345 \\n 12345 \\n 12345 \\n 12345 \\n 12345 \\n 12345 \\n 12345 \\n 12345 \\n 12345 \\n 12345 \\n 12345 \\n 12345 \\n 12345 \\n 12345 \\n 12345 \\n 12345 \\n 12345 \\n 12345 \\n 12345 \\n 12345 \\n 12345 \\n 12345 \\n 12345 \\n 12345 \\n 12345 \\n 12345 \\n 12345 \\n 12"}
{"value":" #include < iostream >   < iostream > ; Function to find K numbers such that their sum is N and sum of their squares is maximum ; Print K numbers such that their sum is N and sum of their squares is maximum ; Driver code [\/ 3 ] int main ( ) { int N = 10 ; Function call [\/ 3 ] return 0 ; Driver Code [\/ 3 ] [\/ 3 ] [\/ 3 ] [\/ 3 ] [\/ 3 ] [\/ 3 ] [\/ 3 ] [\/ 3 ] [\/ 3 ] [\/ 3 ] [\/ 3 ] [\/ 3 ] [\/ 3 ] [\/ 3 ] [\/ 3 ] [\/ 3 ] [\/ 3 ] [\/ 3 ] [\/ 3 ] [\/ 3 ] [\/ 3 ] [\/ 3 ] [\/ 3 ] [\/ 3 ] [\/ 3 ] [\/ 3 ] [\/ 3 ] [\/ 3 ] [\/ "}
{"value":"] [\/INST] #include <bits\/stdc++.h> NEW_LINE ; Function to find the Nth Stepping number ; Driver code [\/INST] int main ( ) { int N = 1 ; Function call to find the Nth Stepping number ; Driver Code [\/INST] 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; int findNearestPerfectSquare ( int n ) { int perfectSquare = sqrt ( n ) ; int perfectSquare1 = perfectSquare * perfectSquare ; int perfectSquare2 = ( perfectSquare + 1 ) * ( perfectSquare + 1 ) ; if ( abs ( n - perfectSquare1 ) < abs ( n - perfectSquare2 ) ) return perfectSquare1 - n ; return perfectSquare2 - n ; } int main ( ) { int n = 25 ; cout << findNearestPerfectSquare ( n ) ; return 0 ; } -------------------------------------------------------------------------------- 2 \/ 07 \/ 01 10 01 : 33 : 44 -------------------------------------------------------------------------------- [\/INST] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; int findNearestPerfectSquare ( int n ) { int perfectSquare = sqrt ( n ) ; int perfectSquare1"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; void pi ( int n ) { double pi = acos ( -1 ) ; for ( int i = 0 ; i < n ; i ++ ) { cout << pi << endl ; } } int main ( ) { int n = 50 ; pi ( n ) ; return 0 ; }}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; void binaryRepresentation ( int n , int arr [ ] ) { int i = 0 ; while ( n > 0 ) { arr [ i ++ ] = n % 2 ; n = n \/ 2 ; } } int decimalEquivalent ( int arr [ ] , int len ) { int ans = 0 ; for ( int i = 0 ; i < len ; i ++ ) { ans = ans * 10 + arr [ i ] ; } return ans ; } int updateInteger ( int n , int k ) { int len = ( int ) log2 ( n ) + 1 ; int arr [ len ] ; binaryRepresentation ( n , arr ) ; if ( k > len ) return n ; arr [ k - 1 ] = ( arr [ k - 1 ] == 0 ) ? 1 : 0 ; return decimalEquivalent ( arr , len ) ; } int main ( ) { int n = 10 ; int k = 2 ; cout << updateInteger ( n , k ) ; return 0 ; } ------------------------------------------------"}
{"value":" #include < iostream> NEW_LINE ; Function to print the result ; Function to precompute the product of the first n factorials ; Base case ; Iterate from 1 to MAX ; Function to print the result of the product of the first n factorials ; Driver code [\/n11 [\/n11 [\/n11 [\/n11 [\/n11 [\/n11 [\/n11 [\/n11 [\/n11 [\/n11 [\/n11 [\/n11 [\/n11 [\/n11 [\/n11 [\/n11 [\/n11 [\/n11 [\/n11 [\/n11 [\/n11 [\/n11 [\/n11 [\/n11 [\/n11 [\/n11 [\/n11 [\/n11 [\/n11 [\/n11 [\/n"}
{"value":"Function to find the gcd of two   a ,   b   and   c . ; Function to return   the   gcd   of   a   and   b . ; Function to   return   the   number   of   terms   divisible   by   a ,   b   and   c . ; Function to   find   the   nth   term   divisible   by   a ,   b   and   c ; Function to   find   the   nth   term   divisible   by   a ,   b   and   c . ; Function to   find   the   nth   term   divisible   by   a ,   b   or   c . ; Function to   find   the   nth   term   divisible   by   a ,   b   or   c . ; Function to   find   the   nth   term   divisible   by   a ,   b   or   c ."}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; bool isPossible ( int n , int i , int j , int k ) { int x = 0 ; int y = 0 ; int z = 0 ; if ( i > j ) swap ( i , j ) ; if ( i > k ) swap ( i , k ) ; if ( j > k ) swap ( j , k ) ; if ( i == j ) { if ( j == k ) return false ; else return true ; } else { x = ( n - i - 1 ) ; y = ( j - i - 1 ) ; z = ( k - j - 1 ) ; if ( x + y + z == n - 1 ) return true ; else return false ; } } int main ( ) { int n = 10 ; int i = 3 , j = 7 , k = 10 ; if ( isPossible ( n , i , j , k ) ) cout << \" Yes \" ; else cout << \" No \" ;"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; void findLoss ( int n , int p1 , int p2 ) { cout << \" Loss   is   \" << n * p1 - n * p2 ; } int main ( ) { int n = 10 , p1 = 10 , p2 = 5 ; findLoss ( n , p1 , p2 ) ; return 0 ; } ------------------------------------------------- ; 10 * 10 - 10 * 5 = 50 --------------------- ; 10 * 10 - 10 * 5 = 50 --------------------- ; 10 * 10 - 10 * 5 = 50 --------------------- ; 10 * 10 - 10 * 5 = 50 --------------------- ; 10 * 10 - 10 * 5 = 50 --------------------- ; 10 * 10 - 10 * 5 = 50 ----------------"}
{"value":"NF _ 0_0.cpp 1vwLRgfGkJlk  _ _ _ 00 _ _ _ 00 _ _ _ 00 _ _ 00 _ _ 00 _ _ 00 _ _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ "}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; int noOfWays ( int n ) { return ( n - 1 ) * ( n - 2 ) * ( n - 3 ) * ( n - 4 ) ; } int main ( ) { int n = 5 ; cout << noOfWays ( n ) ; return 0 ; } ------------------------------------------------- 2 \/ 1089013 -------------------- ; Function to return the number of ways to remove edges from the graph so that odd number of edges are left in the graph ; Driver code [\/INST] \\n \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 \u4e36 "}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; #define N  10 NEW_LINE void printPascalTriangle ( int n ) { int tri [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) { if ( j == 0 j == i ) tri [ i ] [ j ] = 1 ; else tri [ i ] [ j ] = tri [ i - 1 ] [ j - 1 ] + tri [ i - 1 ] [ j ] ; } } int nCr ( int n , int r ) { int res = 1 ; for ( int i = 1 ; i <= r ; i ++ ) res = res * ( n - r + i ) ; return res \/ ( ( i * 1LL ) ; } int main ( ) { int n = 5 ; printPascalTriangle ( n ) ; int n = 3 , r = 2 ; cout << nCr ( n , r"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; int minDiff ( int n ) { return ( n \/ 2 ) ; } int main ( ) { int n = 4 ; cout << minDiff ( n ) ; return 0 ; } ---------------------------------------------------- 2 \/ 03 \/ 01 \/ 10 \/ 00 \/ 10 \/ 01 \/ 00 \/ 11 \/ 10 \/ 00 \/ 11 \/ 10 \/ 01 \/ 10 \/ 01 \/ 10 \/ 01 \/ 10 \/ 01 \/ 10 \/ 01 \/ 10 \/ 01 \/ 10 \/ 01 \/ 10 \/ 01 \/ 10 \/ 01 \/ 10 \/ 01 \/ 10 \/ 01 \/ 10 \/ 01 \/ 10 \/ 01 \/ 10 \/ 01 \/ 10 \/ 01 \/ 10"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; int main ( ) { int n = 123456 ; int freq [ 10 ] = { 0 } ; while ( n > 0 ) { freq [ n % 10 ] ++ ; n = n \/ 10 ; } for ( int i = 0 ; i < 10 ; i ++ ) { if ( freq [ i ] % 2 ) return 0 ; } return 1 ; } 0 NEW_LINE } 0 NEW_LINE } 0 NEW_LINE } 0 NEW_LINE } 0 NEW_LINE int main ( ) { int n = 123456 ; if ( check ( n ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; } 0 NEW_LINE } 0 NEW_LINE } 0 NEW_LINE } 0 NEW_LINE } 0 NEW_LINE } 0 NEW_LINE } 0 NEW_LINE } 0 NEW_LINE"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; void printLines ( int N , int K ) { for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < K ; j ++ ) cout << ( i * K + j ) << \"   \" ; cout << endl ; } } int main ( ) { int N = 3 , K = 4 ; printLines ( N , K ) ; return 0 ; } --------------------------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; int findSum ( int n ) { return ( n * ( 4 * n * n + 6 * n - 1 ) \/ 3 ) ; } int main ( ) { int n = 4 ; cout << findSum ( n ) ; return 0 ; }}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; int countSpecialStrings ( int n ) { int fib [ n + 1 ] ; fib [ 0 ] = 1 ; fib [ 1 ] = 2 ; for ( int i = 2 ; i <= n ; i ++ ) fib [ i ] = fib [ i - 1 ] + fib [ i - 2 ] ; return fib [ n ] ; } int main ( ) { int n = 3 ; cout << countSpecialStrings ( n ) ; return 0 ; }}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; int countWays ( int * arr , int i , int j ) { if ( i == j ) return 1 ; if ( arr [ i ] == arr [ j ] ) return countWays ( arr , i + 1 , j - 1 ) + countWays ( arr , i + 1 , j ) + countWays ( arr , i , j - 1 ) ; else return countWays ( arr , i + 1 , j ) + countWays ( arr , i , j - 1 ) ; } int main ( ) { int arr [ ] = { 1 , 2 , 2 , 3 , 3 , 2 , 2 , 1 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << countWays ( arr , 0 , n - 1 ) ; return 0 ; } -------------------------------- 1 \/ 2 This code is contributed by _AnantUjjain_ [\/sourcecode] \\n #include <bits\/stdc++.h>"}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; int countPaths ( int a [ ] , int n , int k ) { int dp [ n + 1 ] ; dp [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { dp [ i ] = 0 ; for ( int j = 1 ; j <= k && i + j <= n ; j ++ ) dp [ i ] += dp [ i + j ] ; } return dp [ n ] ; } int main ( ) { int a [ ] = { 1 , 2 , 1 , 1 , 1 , 2 } ; int n = sizeof ( a ) \/ sizeof ( a [ 0 ] ) ; int k = 2 ; cout << countPaths ( a , n , k ) ; return 0 ; } -------------------------------- ---------------- - 2 \/ 3 ; Driver code [\/INST] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; int countPaths ( int a [ ] , int n , int k ) { int dp"}
{"value":"] \\n 8 2 3 2 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 "}
{"value":"; function to print  C ++ ; Function to count the number of integers of length N having   all   digits   from   the   given   set   A [\/n   is   the   given   set   of   digits   from   the   given   set   of   the   set   of   the   given   set   of   the   set   of   the   set   of   the   given   set   of   the   set   of   the   set   of   the   set   of   the   set   of   the   set   of   the   set   of   the   set   of   the   set   of   the   set   of   the   set   of   the   set   of   the   set   of   the   set   of   the   set   of   the   set   of"}
{"value":" ; Function to find the number of paths ; Base Case ; If weight is less than zero , return 0 ; If current weight is equal to wt ; If current weight is greater than wt , return the number of paths ; Driver code [\/n ; Initialize all values of dp array as 0 ; Initialize base case ; Fill the dp array ; Return the answer ; Driver code [\/n #include <bits\/stdc++.h> NEW_LINE using namespaces std ; Function to find the number of paths [\/n 0 ; Function Call to find the number of paths [\/n 0 ; Driver code [\/n 0 [\/n 0 [\/n 0 [\/n 0 [\/n 0 [\/n 0 [\/n 0 [\/n 0 [\/n 0 [\/n 0 [\/n 0 [\/n 0 [\/n 0 [\/n 0 [\/n 0 [\/n0 [\/n0 [\/n0 [\/n"}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; int findNumberOfPartitions ( int n ) { if ( n == 1 ) return 1 ; else if ( n == 2 ) return 2 ; else return ( findNumberOfPartitions ( n - 1 ) + findNumberOfPartitions ( n - 2 ) ; } int main ( ) { int n = 4 ; cout << findNumberOfPartitions ( n ) ; return 0 ; }}
{"value":"nclude <bits\/stdc++.h> NEW_LINE using namespace std ; int LIP ( int i , int j , int n , int m , int dp [ ] ; if ( dp [ i ] [ j ] not calculated yet ; If reach bottom left cell , return 1. ; If reach corner of the matrix ; If value greater than below cell , increment value by 1. ; If value greater than left cell . ; Driver code [\/n #include <bits\/stdc++.h> NEW_LINE using namespace std ; int LIP ( int i , int j , int n , int m , int dp [ ] ; if ( dp [ i ] [ j ] not calculated yet . ; If reach bottom left cell , return 1. ; If reach the corner of the matrix . ; If value greater than below cell . ; If value greater than left cell . ; Wrapper function [\/n int main ( ) [\/n 2D array of integers ; Initialize DP array with - 1. ; Function call [\/n 1 - based indexing [\/"}
{"value":"] \\n 3 2 3 2 3 2 2 2 3 2 2 3 2 3 2 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 "}
{"value":" [INST] [\/0\/1] ; The following program for ( * 0 * \/ [\/ _ * \/ _ \/ [\/ _ ] #include < stdc ++ implementation of CPP program to _ _ _ [\/ _ \/ _ [\/ _ _ [\/ _ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/ _ [\/"}
{"value":"Driver code [\/n] #include <bits\/stdc++> NEW_LINE ; Function to print the minimum cost of adjustment ; create a 2 - D table to store minimum adjustment cost ; for the first element ; for the remaining elements ; Initialize all elements of dp table as INT_MAX ; for the remaining elements ; Driver code [\/n ] int main ( ) [\/n ] 1 : Function Call to print the minimum adjustment cost ; initialize dp table using kadane 's algorithm ; Driver code [\/n ] 2 : Print the minimum adjustment cost [\/n ] 3 : Print the minimum adjustment cost [\/n ] 4 : Driver code [\/n ] 5 : Driver code [\/n ] 6 : Driver code [\/n ] 7 : Driver code [\/n ] 8 : Driver code [\/n ] 9 : Driver code [\/n ] 10 : Driver code [\/n ] 11 : Driver"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; int countTriplets ( int L , R ) { int total_triplets = 0 ; int diff = R - L ; if ( diff < 3 ) return 0 ; total_triplets = ( diff - 2 ) * ( diff - 1 ) \/ 2 ; return total_triplets ; } int main ( ) { int L = 1 , R = 5 ; cout << countTriplets ( L , R ) ; return 0 ; } ---------------------------------------------------------------- -------------------- ; Driver Code [\/INST] \\n 1 5 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 ; 2 5 10 15 20 25 30 35 40 45 50 55"}
{"value":" ; Function to print the array A [\/n ; Function to print the array B ; Driver code [\/n ; Function Call to generate the two arrays ; Print the array A [\/n Print the array B [\/n ; Print the array B [\/n ; Print the array A [\/n ; Print the array B [\/n ; Print the array A [\/n ; Print the array B [\/n ; Print the array A [\/n ; Print the array B [\/n ; Print the array A [\/n ; Print the array B [\/n ; Print the array A [\/n ; Print the array B [\/n ; Print the array A [\/n ; Print the array B [\/n ; Print the array A [\/n ; Print the array B [\/n ; Print the array A [\/n ; Print the array B [\/n ; Print the array A [\/n ; Print the array B [\/n ; Print the array A [\/n ; Print the array B [\/n ; Print the array"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; void flipCommonBits ( int A , int B ) { int C = A ; int D = B ; int i ; for ( i = 0 ; i < 32 ; i ++ ) { if ( ( A & ( 1 << i ) && B & ( 1 << i ) ) { A &= ~ ( 1 << i ) ; B &= ~ ( 1 << i ) ; } } cout << A << \"   \" << B ; } int main ( ) { int A = 15 , B = 14 ; flipCommonBits ( A , B ) ; return 0 ; }}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; int distinctSum ( int n ) { return n * ( n + 1 ) \/ 2 ; } int main ( ) { int n = 4 ; cout << distinctSum ( n ) ; return 0 ; }}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; int countSubstring ( string str ) { int freq [ 3 ] = { 0 } ; int ans = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { freq [ str [ i ] - '0' ] ++ ; if ( freq [ 0 ] && freq [ 1 ] && freq [ 2 ] ) break ; ans += ( ( freq [ 0 ] * freq [ 1 ] * freq [ 2 ] ) \/ ( ( freq [ 0 ] * freq [ 1 ] ) + ( freq [ 0 ] * freq [ 2 ] ) + ( freq [ 1 ] * freq [ 2 ] ) ) ; } return ans ; } int main ( ) { string str = \"012210\" ; cout << countSubstring ( str ) ; return 0 ; } -------------------------------------------------------------------------------- 2 \/ 2 ( 1 ) \" \\n \" ; Driver Code [\/INST] \\n"}
{"value":"] \\n 211101100111100010111001101101010000110000101010000100100011001000100001100100110010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010"}
{"value":" ; Function to convert decimal to hexadecimal ; Function to encrypt the   string ; Driver Code [\/n3 ; Function call [\/n3 ; Print the encrypted   string [\/n3 ; Driver Code [\/n3 [\/n3 ; Given string [\/n3 ; Function call [\/n3 ; Function call [\/n3 ; Function call [\/n3 ; Function call [\/n3 ; Function call [\/n3 ; Function call [\/n3 ; Function call [\/n3 ; Function call [\/n3 ; Function call [\/n3 ; Function call [\/n3 ; Function call [\/n3 ; Function call [\/n3 ; Function call [\/n3 ; Function call [\/n3 ; Function call [\/n3 ; Function call [\/n3 ; Function call [\/n3 ; Function call [\/n3 ; Function call [\/n3 ; Function call [\/n3 ; Function call [\/n3 ; Function call [\/n3"}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; int binomialCoeff ( int n , int k ) { int res = 1 ; if ( k > n - k ) k = n - k ; for ( int i = 0 ; i < k ; ++ i ) { res *= ( n - i ) ; res \/= ( i + 1 ) ; } return res ; } int countStrings ( int N ) { int total = pow ( 2 , N ) ; int equal = pow ( 2 , N \/ 2 ) ; if ( N % 2 == 0 ) return total - equal ; return total ; } int main ( ) { int N = 4 ; cout << countStrings ( N ) ; return 0 ; }}
{"value":" \\n 0 newline  #include < iostream > < string > ; Function to remove all occurrences of a character from a string ; Base Case ; If the first character is not equal to x ; Add the first character of str to ans ; Remove all occurrences of x from rest of the string ; Driver Code [\/ ] 0 new line ; Function Call [\/n ] 0 new line [\/n ] 0 new line [\/n ] 0 new line [\/n ] 0 new line [\/n ] 0 new line [\/n ] 0 new line [\/n ] 0 new line [\/n ] 0 new line [\/n ] 0 new line [\/n ] 0 new line [\/n ] 0 new line [\/n ] 0 new line [\/n ] 0 new line [\/n ] 0 new line [\/n ] 0 new line [\/n ] 0 new line [\/n ] 0 new line [\/n ] 0 new line ["}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; bool checkTime ( string time ) { int h = 0 , m = 0 ; int n = time . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( time [ i ] == ' ? ' ) { h = h * 10 + ( time [ i + 1 ] - '0' ) ; m = m * 10 + ( time [ i + 1 ] - '0' ) ; } } if ( h < 0 h > 23 m < 0 m > 59 ) return false ; return true ; } bool checkDifference ( int hour , int minute , int L , int R ) { if ( abs ( hour - minute ) > R ) return false ; return true ; } void printTime ( int hour , int minute ) { if ( hour < 10 ) cout << '0' << hour ; else cout << hour ; cout << ' : ' ; if ( minute < 10"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; void checkPalindromicSubstrings ( string str ) { stack < char > st ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str [ i ] == st . top ( ) ) { st . pop ( ) ; } else { st . push ( str [ i ] ) ; } } if ( st . empty ( ) ) cout << \" Yes \" << endl ; else cout << \" No \" << endl ; } int main ( ) { string str = \" abcd \" ; checkPalindromicSubstrings ( str ) ; return 0 ; } -------------------------------------------------------------------------------- -------------------- ; Driver code [\/INST] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; void checkPalindromicSubstrings ( string str ) { stack < char > st ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str [ i ] == st . top ( ) ) { st . pop ( ) ; } else {"}
{"value":"] \\n 21000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"value":" [\/0110011001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; string camelCaseToSentenceCase ( string s ) { string ans = \" \" ; ans += toupper ( s [ 0 ] ) ; for ( int i = 1 ; i < s . length ( ) ; i ++ ) { if ( isupper ( s [ i ] ) ) { ans += \"   \" ; ans += tolower ( s [ i ] ) ; } else { ans += s [ i ] ; } } return ans ; } int main ( ) { string s = \" GeeksForGeeks \" ; cout << camelCaseToSentenceCase ( s ) ; return 0 ; }}
{"value":" int countOccurrences ( string upto_n , char x ) { int k = 0 ; if ( n < k ) return 0 ; if ( n is the multiple of the string size ) return the number of occurrences of x in the string ; Driver code [\/n100000 return the number of occurrences of x in the string upto n ; Driver code [\/n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; int countFreq ( int arr [ ] , int n , int limit ) { int count [ limit + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) count [ arr [ i ] ++ ; int ans = 0 ; for ( int i = 1 ; i <= limit ; i ++ ) ans += count [ i ] ; return ans ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 1 , 2 , 1 , 3 , 2 , 1 , 2 , 1 , 3 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ; int limit = 3 ; cout << countFreq ( arr , n , limit ) ; return 0 ; } -------------------------------------------------------------------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- ----------------"}
{"value":" \\n 1 \\n #include <bits\/stdc ++ . h> NEW_LINE ; Function to check if the  binary  string  has  m   consecutive  1's   or   0's ; Driver code [\/n  #include < iostream > NEW_LINE  #include < string > NEW_LINE using   namespace   std ; function to check if the  binary  string has m   consecutive  1's   or   0's ; count   number   of  1's   and   0's ; count   consecutive   1's   and   0's ; check   if   consecutive   1's   are   greater   than   consecutive   0's ; Driver code [\/n 11101100110110110110110110110110110110110110110110110110"}
{"value":" #include <bits\/stdcxx> NEW_LINE NEW_LINE ; Function to print the product of digits of elements at k - th level ; base case 1 : Driver code [\/n ] void printProduct ( int k , n ) { int product = 1 ; traverse the tree in preorder traversal ; Driver code [\/n _LINE_ NEW_LINE_ ; create tree from given preorder traversal ; Function to print the product of digits of elements at k - th level ; required product ; Driver code [\/n _LINE_ NEW_LINE_ [\/n _LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE"}
{"value":" [\/INST] \\n #include <bits\/stdc++.h}
{"value":" \\n 1234567890X1 ; Function Call [\/INST] \\n 12345678901 ; Function Call [\/INST] \\n 1234567890X [\/INST] \\n 12345678900 [\/INST] \\n 1234567890X [\/INST] \\n 12345678900 [\/INST] \\n 1234567890X [\/INST] \\n 12345678900 [\/INST] \\n 1234567890X [\/INST] \\n 12345678900 [\/INST] \\n 1234567890X [\/INST] \\n 12345678900 [\/INST] \\n 1234567890X [\/"}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; bool isVowel ( char c ) { return ( c == ' a ' c == ' e ' c == ' i ' c == ' o ' c == ' u ' ) ; } string reverseVowels ( string str ) { string vowels = \" \" ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( isVowel ( str [ i ] ) ) vowels += str [ i ] ; } reverse ( vowels . begin ( ) , vowels . end ( ) ) ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( isVowel ( str [ i ] ) ) str [ i ] = vowels [ 0 ] ; vowels = vowels . substr ( 1 ) ; } return str ; } int main ( ) { string str = \" geeksforgeeks \" ; cout << reverseVowels ( str ) ; return 0 ; } ------------------------------------------------ -- ---------------- -- ---------------- --"}
{"value":" \\n #include < iostream > NewLine #include < string > NEW_LINE #include < string > NEW_LINE using namespace std ; string findString ( string str ) { string output = \" \" \" ; bool v = false ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str [ i ] == '   ' ) v = true ; else if ( v == true ) { output . push_back ( str [ i ] ; v = false ; } } return output ; } int main ( ) { string str = \" GeeksforGeeks   for   Geeks   Quiz \" ; cout << findString ( str ) ; return 0 ; }}
{"value":" ; Function to find the number of unique paths [\/nCr> = nCi = n ! \/ i ! ; Function to find the number of unique paths [\/nCj ] ; Function to find the number of unique paths [\/nCi * nCj ] ; Function to find the number of unique paths [\/nCi * nCj ] ; Function to find the number of unique paths [\/nCi * nCj ] ; Function to find the number of unique paths [\/nCi * nCj ] ; Function to find the number of unique paths [\/nCi * nCj ] ; Function to find the number of unique paths [\/nCi * nCj ] ; Function to find the number of unique paths [\/nCi * nCj ] ; Function to find the number of unique paths [\/nCi * nCj ] ; Function to find the number of unique paths [\/nCi *"}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; int countPairs ( int arr [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = abs ( arr [ i ] ) ; sort ( arr , arr + n ) ; for ( int i = 0 ; i < n ; i ++ ) { int j = upper_bound ( arr , arr + n , 2 * arr [ i ] ) - arr ; ans += ( j - i - 1 ) ; } return ans ; } int main ( ) { int arr [ ] = { 1 , -1 , -1 , 1 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << countPairs ( arr , n ) ; return 0 ; } ------------------------------------------------ ---------------- -- ---------------- -- ---------------- -- ---------------- -- ---------------- -- ---------------- -- ---------------- -- ---------------- -- ---------------- -- ---------------- -- ---------------- -- ---------------- -- ---------------- -- ---------------- -- ---------------- -- ---------------- -- ---------------- -- ---------------- -- "}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; double areaOfSquare ( double a ) { return a * a ; } int main ( ) { double a = 5 ; cout << areaOfSquare ( a ) ; return 0 ; }}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; void maxIntersections ( int X , Y ) { cout << \" Maximum   possible   intersections   =   \" << X << \" ,   \" << Y ; } int main ( ) { int X = 4 , Y = 5 ; maxIntersections ( X , Y ) ; return 0 ; }}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; int icosihenagonal ( int n ) { return ( 11 * n * n - 8 * n + 2 ) \/ 2 ; } int main ( ) { int n = 3 ; cout << icosihenagonal ( n ) ; return 0 ; }}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; void findCentroid ( int x [ ] , int y [ ] , int n ) { int A = 0 ; for ( int i = 0 ; i < n ; i ++ ) { A = A + ( x [ i ] * y [ ( i + 1 ) % n ] - x [ ( i + 1 ) % n ] * y [ i ] ) ; } int xc = A \/ ( 6 * n ) ; int yc = A \/ ( 6 * n ) ; cout << xc << \"   \" << yc ; } int main ( ) { int x [ ] = { 1 , 3 , 2 , 4 } ; int y [ ] = { 4 , 2 , 1 , 3 } ; int n = sizeof ( x ) \/ sizeof ( x [ 0 ] ) ; findCentroid ( x , y , n ) ; return 0 ; } -------------------------------------------------------------------------------- 1 \/ 2 * x1 * y1 + 1 \/ 2 * x2 *"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; void findAngles ( int a , int b , int c , int d ) { int angle1 = ( 180 - a ) ; int angle2 = ( 180 - b ) ; int angle3 = ( 180 - c ) ; int angle4 = ( 180 - d ) ; cout << \" Angles   are :   \" << angle1 << \"   \" << angle2 << \"   \" << angle3 << \"   \" << angle4 << endl ; } int main ( ) { int a = 30 ; int b = 40 ; int c = 70 ; int d = 60 ; findAngles ( a , b , c , d ) ; return 0 ; } -------------------------------- 1 \/ 2 -------------------------------- [\/INST] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; void findAngles ( int a , int b , int c , int d ) { int angle1 = ( 180 - a ) ; int angle2 ="}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; float distance ( int a1 , int b1 , int c1 , int a2 , int b2 , int c2 ) { float distance = ( float ) ( a1 * b2 - a2 * b1 ) \/ ( float ) ( a1 * b2 - b1 * a2 ) ; return distance ; } int main ( ) { int a1 = 1 , b1 = 2 , c1 = 3 , a2 = 4 , b2 = 5 , c2 = 6 ; cout << distance ( a1 , b1 , c1 , a2 , b2 , c2 ) << endl ; return 0 ; }}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; int factorial ( int n ) { int fact = 1 ; for ( int i = 1 ; i <= n ; i ++ ) fact = fact * i ; return fact ; } int countWays ( int N ) { int ans = factorial ( N ) \/ factorial ( N \/ 2 ) ; ans = ans \/ factorial ( 2 ) ; ans = ans \/ 2 ; return ans ; } int main ( ) { int N = 4 ; cout << countWays ( N ) ; return 0 ; } -------------------------------- 2 \/ 2 -------------------------------- - 1 \/ 1 -------------------- 2 \/ 2 -------------------- 1 \/ 1 -------------------- 2 \/ 2 -------------------- 1 \/ 1 -------------------- 2 \/ 2 -------------------- 1 \/ 1 -------------------- 2 \/ 2 -------------------- 1 \/ 1 -------------------- 2 \/ 2 -------------------- 1 \/ 1 -------------------- 2 \/ 2 -------------------- 1 \/ 1 ----------------"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; bool check ( int S , int D ) { unordered_map < int , int > mp ; mp [ 0 ] = S % D ; for ( int i = 1 ; i < 1000000000 ; i ++ ) { int v = mp [ i - 1 ] ; if ( mp . find ( i ) != mp . end ( ) ) { if ( v == mp [ i ] ) return false ; } mp [ i ] = ( v + v % D ) % D ; } return true ; } int main ( ) { int S = 1000 , D = 10 ; if ( check ( S , D ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; } ------------------------------------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- --------------------"}
{"value":"] \\n 2 2 [\/INST] \\n 3 3 [\/INST] ---------------- ( * * * ) ---------------- [\/INST] 3 [\/INST] \\n 1 1 [\/INST] \\n 2 2 [\/INST] ---------------- ( * * * ) ---------------- [\/INST] 2 [\/INST] \\n 3 3 [\/INST] \\n 1 1 [\/INST] ---------------- ( * * * ) ---------------- [\/INST] 1 [\/INST] \\n 2 2 [\/INST] ---------------- ( * * * ) ---------------- [\/INST] 1 [\/INST] \\n 3 3 [\/INST] \\n 1 1 [\/INST] ---------------- ( * * * ) ---------------- [\/INST] 1 [\/INST] \\n 2 2 [\/INST] ---------------- ( * * * ) ---------------- [\/INST] 1 [\/INST] \\n 3 3 [\/INST] \\n 1 1 [\/INST] ---------------- ( * * * ) ---------------- [\/INST]"}
{"value":"] \\n #include <bits\/stdc ++ . h> NEW_LINE using namespace std ; void isStackSortable ( int A [ ] , int B [ ] , int n ) { stack < int > S ; int B_end = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! S . empty ( ) { int top = S . top ( ) ; if ( top == B_end + 1 ) { B_end ++ ; S . pop ( ) ; } else if ( top == A [ i ] ) { S . pop ( ) ; } else { S . push ( A [ i ] ) ; } else { cout << \" Not   Stack   Sortable \" << endl ; return ; } } if ( S . empty ( ) { S . push ( A [ i ] ) ; } } cout << \" Stack   Sortable \" << endl ; } 0000 int main ( ) { int A [ ] = { 2 , 1 , 3 , 4 , 5"}
{"value":"nclude < stdcxx > < iostream > 2 ; A program to find  the  minimum   number   of   minimum   reversals   required ; Driver program to test  the  function ; Driver code ; function to check   if   the   given   expression   is   balanced   or   not   ; if   the   given   expression   is   balanced ; if   the   given   expression   is   not   balanced   then   return   0 ; to   find   the   minimum   number   of   reversals   required   to   make   the   given   expression   balanced ; Driver code [\/ ] 3 ] 3 ]  ) ( [\/ ] 1 ] 2 ] 2 ] 1 ] 2 ] 2 ] 2 ] 2 ] 2 ] 2 ] 2 ] 2 ] 2 ] 2 ] 2 ] 2 ] 2 ] 2 ] "}
{"value":"] \\n 2 ) 2 ) [\/INST] \\n 2 ) 2 ) [\/INST] \\n 2 ) 2 ) [\/INST] \\n 2 ) 2 ) [\/INST] \\n 2 ) 2 ) [\/INST] \\n 2 ) 2 ) [\/INST] \\n 2 ) 2 ) [\/INST] \\n 2 ) 2 ) [\/INST] \\n 2 ) 2 ) [\/INST] \\n 2 ) 2 ) [\/INST] \\n 2 ) 2 ) [\/INST] \\n 2 ) 2 ) [\/INST] \\n 2 ) 2 ) [\/INST] \\n 2 ) 2 ) [\/INST] \\n 2 ) 2 ) [\/INST] \\n 2 ) 2 ) [\/INST] \\n 2 ) 2 ) [\/INST] \\n 2 ) 2 ) [\/INST] \\n 2 ) 2 ) [\/INST] \\n 2 ) 2 )"}
{"value":" [\/] [\/INST] ; Driver code [\/INST] [\/INST] \\n #include < iostream> #include <bits\/stdc ++ . h> NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_"}
{"value":"NST] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; void printMinimumNumber ( string s ) { int min_avail = 10 ; int pos_of_I = - 1 ; vector < int > output ; if ( s [ 0 ] == ' I ' ) { output . push_back ( min_avail ) ; min_avail -- ; pos_of_I = 0 ; } else { if ( s [ 0 ] == ' D ' ) { output . push_back ( min_avail ) ; min_avail -- ; pos_of_I = 0 ; } else { output . push_back ( min_avail ) ; min_avail -- ; pos_of_I = -1 ; } for ( int i = 1 ; i < s . length ( ) ; if ( s [ i ] == ' I ' ) { output . push_back ( min_avail ) ; min_avail -- ; pos_of_"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; void decode ( string s ) { string result = \" \" ; stack < int > stack ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { stack . push ( i + 1 ) ; if ( s [ i ] == ' D ' ) { while ( ! stack . empty ( ) ) { result += stack . top ( ) ; stack . pop ( ) ; } } } cout << result ; } int main ( ) { string s = \" IDIDDIDD \" ; decode ( s ) ; return 0 ; }}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; int minimumNumber ( string s ) { int n = s . size ( ) ; int rank [ 10 ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) { int num = s [ i ] - '0' ; rank [ num ] ++ ; } int min = 99999999 ; for ( int i = 0 ; i < 10 ; i ++ ) { if ( rank [ i ] > 0 ) min = min ( min , i * rank [ i ] ) ; } return min ; } int main ( ) { string s = \"12345\" ; cout << minimumNumber ( s ) ; return 0 ; }}
{"value":"] \\n 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"value":" ; Driver code [\/bin\/C program 007 [\/include <bits\/stdc ++ < iostream> NEW_LINE ; A C ++ implementation of the   above   approach   approach   above   approach   is   a   brute   force   approach   is   to   check   if   a   pair   exists   or   not   ; Function   to   find   the   gcd   of   two   numbers ; Returns   gcd   of   two   numbers   a   and   b ; Returns   the   gcd   of   a   and   b   if   a   and   b   are   equal ; Driver Code [\/include < iostream > ; Function   to   check   if   any   pair   exists   or   not   ; Driver Code [\/ include < iostream > ; Function   to   check   for  "}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; bool isPossible ( int a , int b ) { int c = ( int ) ( cbrt ( ( double ) a ) ) ; if ( a % c == 0 && b % c == 0 ) return true ; return false ; } int main ( ) { int a = 2 , b = 8 ; if ( isPossible ( a , b ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }}
{"value":" \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; bool isUndulating ( int n ) { int a = n \/ 100 ; int b = n % 100 ; int c = a \/ 10 ; int d = b % 10 ; return ( c == d ) ; } int main ( ) { int n = 123456 ; if ( isUndulating ( n ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; int sum ( int n ) { return ( n * ( n + 1 ) * ( 2 * n + 1 ) ) \/ 6 ; } int main ( ) { int n = 5 ; cout << sum ( n ) ; return 0 ; } ------------------------------------------------ -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- -------------------------------- "}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; int countNumbers ( int l , int r , int k ) { return ( r % 10 == k ) ? ( r - l + 1 ) : ( r \/ 10 - l \/ 10 + 1 ) ; } int main ( ) { int l = 100 , r = 500 , k = 0 ; cout << countNumbers ( l , r , k ) ; return 0 ; }}
{"value":" \\n 1. 2. 3. 4. 5. 6. 9. 12. 15. 18. 21. 24. 27. 30. 33. 36. 39. 42. 45. 48. 51. 54. 57. 60. 63. 66. 69. 72. 75. 78. 81. 84. 87. 90. 93. 96. 99. 102. 105. 108. 111. 114. 117. 120. 123. 126. 129. 132. 135. 138. 141. 144. 147. 150. 153. 156. 159. 1"}
{"value":" ; Driver code [\/n ] ; Function to print the string ; Function to find the largest  number  ; To store  the  index of the  first  digit   greater   than   next   digit   in   the   number   and   swap   it   with   the   next   smallest   greater   digit   on   its   right . ; If   no   digit   is   greater   than   next   digit ,   then   swap   them ; If   no   digits   are   in   increasing   order ,   return   - 1 ; Driver code [\/n  ; Driver code [\/n 1 : 34125 [\/n 2 : 34215 [\/n 3 : 34251 [\/n 4 : 34251 [\/n 5 : 34251 [\/n 6 : 342"}
{"value":" \\n 12.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"value":"nclude <bits\/stdc++.h> NEW_LINE using namespace std ; const int MAX = 10000 ; bool prime [ MAX + 1 ] ; void sieveOfEratostheneses ( ) { memset ( prime , true , sizeof ( prime ) ) ; prime [ 1 ] = false ; for ( int i = 2 ; i * i <= MAX ; i ++ ) { if ( prime [ i ] == true ) { for ( int j = i * i ; j <= MAX ; j += i ) prime [ j ] = false ; } } } int nextPrime ( int n ) { int num = n ; while ( ! prime [ num ] ) num ++ ; return num ; } int findMinNum ( int arr [ ] , int n ) { sieveOfEratostheneses ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; int num = nextPrime ( sum ) ; return num - sum ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5"}
{"value":"] \\n #include <iostream> NEW_LINE using namespace std ; int sumSubarray ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { sum += arr [ j ] ; } } return sum ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << \" Sum   of   all   subarrays   is   \" << sumSubarray ( arr , n ) ; return 0 ; }}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; int findSmallestPower ( int n ) { return ( ( n & ( ~ ( n + 1 ) ) ) ; } int main ( ) { int n = 13 ; cout << findSmallestPower ( n ) ; return 0 ; }}
{"value":"nclude <bits\/stdc ++ . iostream> NEW_LINE ; function to check if   string   is   valid   or   not   by   using   priority_queue   ; function to   check   if   a   string   is   valid   or   not   by   using   priority_queue   ; function to   rearrange   characters   in   a   string   such   that   no   two   consecutive   characters   are   same   in   the   string   by   using   priority_queue   ; store   frequencies   of   all   characters   in   a   string ; push   all   characters   and   their   frequencies   into   priority_queue ; initialize   previous   character   as   ' # ' and   its   frequency   as   - 1   as   it   is   not   required   in   resultant   string ; pop   the   topmost   character   from   priority_queue   and  "}
{"value":" \\n 10 ^ 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"value":" ; Driver code ; Driver code [\/n ; Function to print the interpolated   value   at   x = 3 ; function to   interpolate   the   value   at   x = 3 ; Driver code [\/n ; Create the   array   of   known   data   points ; Function to   interpolate   the   value   at   x = 3 ; Initialize   result   with   0 ; Traverse   through   all   data   points ; Driver code [\/n ; Creating   the   array   of   data   points ; Driver code [\/n ; Creating   the   array   of   data   points ; Driver code [\/n ; Creating   the   array   of   data   points ; Driver code [\/n ; Creating   the   array   of   data   points ; Driver code [\/n ; Creating   the   array   of   data   points ; Driver code [\/n ;"}
{"value":"] \\n 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; void constructArray ( int arr [ ] , int n , int k ) { int B [ n ] ; int XOR = 0 ; for ( int i = 0 ; i < n ; i ++ ) { XOR = XOR ^ arr [ i ] ; B [ i ] = XOR ^ arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { cout << B [ i ] << \"   \" ; } } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = size ( arr ) ; int k = 0 ; constructArray ( arr , n , k ) ; } 000000 ; Driver Code ; Function Call [\/000000000000000000000000000000000000000"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; int findExtra ( int A [ ] , int B [ ] , int n ) { int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) res ^= res ^ A [ i ] ^ B [ i ] ; return res ; } 00000 int main ( ) { int A [ ] = { 1 , 2 , 3 , 4 } ; int B [ ] = { 5 , 4 , 3 , 2 } ; int n = sizeof ( A ) \/ sizeof ( A [ 0 ] ; cout << findExtra ( A , B , n ) ; return 0 ; }}
{"value":" \\n 8 15 10 12 13 12 11 14 14 13 10 15 12 13 14 11 12 13 12 11 14 14 13 10 15 12 13 12 11 14 14 13 10 15 12 13 12 11 14 14 13 10 15 12 13 12 11 14 14 13 10 15 12 13 12 11 14 14 13 10 15 12 13 12 11 14 14 13 10 15 12 13 12 11 14 14 13 10 15 12 1"}
{"value":" \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; void findSubsets ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) cout << i << \"   \" ; } int main ( ) { int n = 5 ; findSubsets ( n ) ; return 0 ; }}
{"value":"] \\n #include <iostream> NEW_LINE using namespace std ; int findMSB ( int n ) { int k = 0 ; while ( ( n & 1 ) == 0 ) { n = n >> 1 ; k ++ ; } return k ; } int main ( ) { int n = 13 ; cout << findMSB ( n ) ; return 0 ; } ---------------------------------------------------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- --------------------"}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; int countSubsets ( int arr [ ] , int n ) { int i , j , res = 0 ; for ( i = 0 ; i < n ; i ++ ) { sort ( arr , arr + n ) ; int cnt = 1 ; for ( j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] == arr [ j ] ) cnt ++ ; else break ; } res += ( cnt \/ 2 ) ; } return res ; } int main ( ) { int arr [ ] = { 1 , 1 , 1 , 2 , 3 , 4 , 4 , 5 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << countSubsets ( arr , n ) ; return 0 ; }}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; int findMinSubsets ( int arr [ ] , int n ) { unordered_map < int , int > m ; for ( int i = 0 ; i < n ; i ++ ) m [ arr [ i ] ] ++ ; int max_val = 0 ; for ( auto x : m ) max_val = max ( max_val , x . second ) ; return n \/ max_val ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << findMinSubsets ( arr , n ) ; return 0 ; }}
{"value":"] \\n 2 3 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88"}
{"value":"Function to print the sum   of   the   distances   of   all   the   nodes   from   the   given   node ; Create a new   tree ; A utility function that allocates a   new   node   with   the   given   key ; A recursive function to find the   sum   of   the   distances   of   all   the   nodes   from   the   given   node ; Base   case ; If   the   node   is   the   target ; If   the   left   subtree   is   not   NULL ; If   the   right   subtree   is   not   NULL ; Driver code [\/ 15] Function to print the   sum   of   the   distances   of   all   the   nodes   from   the   given   root ; To   store   the   sum   of   the   distances   of   all   the   nodes ; If   the   node   is  "}
{"value":"] \\n 5 3 4 2 1 2 1 3 4 2 1 [\/INST] \\n 1 2 3 4 5 [\/INST] \\n 2 3 4 5 6 [\/INST] \\n 3 4 5 6 7 [\/INST] \\n 4 5 6 7 8 [\/INST] \\n 5 6 7 8 9 [\/INST] \\n 6 7 8 9 10 [\/INST] \\n 7 8 9 10 11 [\/INST] \\n 8 9 10 11 12 [\/INST] \\n 9 10 11 12 13 [\/INST] \\n 10 11 12 13 14 [\/INST] \\n 11 12 13 14 15 [\/INST] \\n 12 13 14 15 16"}
{"value":" [INST] [\/bin\/01.cpp [\/include <bits\/stdc ++ ; Function to check if   a   a   number   is   a   number   is   a   prime   number ; Function to   check   if   a   number   is   a   prime   number ; Function to   check   if   a   number   is   a   prime   number ; Base   case ; Function to   check   if   a   number   is   a   prime   number ; Base   case ; Driver code [\/1 [\/1 ] [\/1 ] [\/1 ] [\/1 ] [\/1 ] [\/1 ] [\/1 ] [\/1 ] [\/1 ] [\/1 ] [\/1 ] [\/1 ] [\/1 ] [\/1 ] [\/1 ] [\/1 ] [\/1 ] [\/1 ]"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; bool isContiguous ( int arr [ ] , int n ) { int m = * max_element ( arr , arr + n ) - arr ; int min = * min_element ( arr , arr + n ) ; if ( m - min < n ) return false ; bool visited [ m ] = { 0 } ; for ( int i = min ; i < m ; i ++ ) visited [ arr [ i ] ] = true ; for ( int i = min + 1 ; i < m ; i ++ ) if ( ! visited [ i ] ) return false ; return true ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 6 , 7 , 8 , 9 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; if ( isContiguous ( arr , n ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; } --------------------------------"}
{"value":"] \\n #include < iostream> NEW_LINE using namespace std ; bool checkContiguous ( int arr [ ] , int n ) { unordered_map < int , int > us ; us [ arr [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( us . find ( arr [ i - 1 ] != us . end ( ) ) { int curr_ele = arr [ i ] ; int count = 1 ; while ( us . find ( curr_ele ) != us . end ( ) ) { curr_ele ++ ; count ++ ; } if ( count == n ) return true ; curr_ele -- ; } return false ; } int main ( ) { int arr [ ] = { 1 , 3 , 2 , 3 , 1 , 3 , 2 , 2 , 2 , 2 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ; if ( checkContiguous ( arr , n ) ) cout << \" Yes \" ; else cout"}
{"value":" [INST] [INST] [INST] * [INST] * [\/ [\/INST] * [\/ INCLUDE < stdio.h >  * [\/ INCLUDE < iostream > < \/ * [\/ iostream > #include < iostream > < \/ * [\/ iostream > < \/ * [\/ iostream > < \/ * [\/ iostream > < \/ * [\/ iostream > < \/ * [\/ iostream > < \/ * [\/ iostream > < \/ * [\/ iostream > < \/ * [\/ iostream > < \/ * [\/ iostream > < \/ * [\/ iostream > < \/ * [\/ iostream > < \/ * [\/ iostream > < \/ * [\/ iostream > < \/ * [\/ iostream > < \/ * [\/ iostream > < \/ * [\/ iostream >"}
{"value":" [INST] ; 0.0 [\/bin\/0] [\/include < iostream> NEW_LINE [\/n ] #include < iostream> NEW_LINE_ [\/n ] #include < string > NEW_LINE_ [\/n ] #include < stdc ++ > NEW_LINE_ [\/n ] #include < string > NEW_LINE_ [\/n ] #include < string > NEW_LINE_ [\/n ] #include < iostream > NEW_LINE_ [\/n ] #include < vector > NEW_LINE_ [\/n ] using namespace std ; using namespace std ; struct Node { int start ; int end ; } ; Function to check if the ith  segment  is  a  prefix  of the  given  array ; Function to check  if  there  is  any  overlap  between  the  2  segments ; Driver code [\/n ] NEW"}
{"value":" [INST] [INST] [INST] [INST] [INST] [INST] [\/ [\/ \/ [\/] [\/ [\/ [\/ \/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/ [\/"}
{"value":" #include < iostream > < string > ; function to find the largest d such that a + b + c = d ; sort the array in ascending order ; iterate from the end ; if the current combination of j , k and l is equal to S [ i ] ; Driver code [\/n ; function call to find the largest d [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n"}
{"value":" ; A [\/n ] #include <bits\/stl_alg_2.h> NEW_LINE ; A [\/n ] #include < iostream > NEW_LINE_STL > using namespace std ; A function to print elements of an array that sum to d ; Initialize all entries of hash table as 0 ; Traverse through all elements of array and find pairs with sum equal to d ; If current element is present in hash table , then print it and remove it from hash table ; Driver code [\/n ] int main ( ) [\/n ] Driver code [\/n ] int arr [\/n ] int n = number of elements in arr [\/n ] int d = sum of all elements of arr [\/n ] ; Initialize all entries as 0 ; Traverse through all elements and find pairs with sum d ; Driver code [\/n ] int arr [\/n ] int n = number of elements in arr [\/n ] int d = sum of all elements of"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; int countElements ( int arr [ ] , int n , int k ) { sort ( arr , arr + n ) ; int sum = 0 , count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; if ( sum - k > 0 ) count ++ ; else break ; } return count ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int k = 7 ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << countElements ( arr , n , k ) ; return 0 ; } ------------------------------------------------------------------- 1 \/ 07 \/ 08 10 : 01 : 23 : 24 : 37 : 45 : 51 : 64 : 68 : 74 : 81 : 87 : 91 : 99"}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; void leftRotateBy1 ( int arr [ ] , int n ) { int i , temp = arr [ n - 1 ] ; for ( i = n - 1 ; i > 0 ; i -- ) arr [ i ] = arr [ i - 1 ] ; arr [ 0 ] = temp ; } void leftRotate ( int arr [ ] , int n , int d ) { for ( int i = 0 ; i < d ; i ++ ) leftRotateBy1 ( arr , n ) ; } void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) cout << arr [ i ] << \"   \" ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int d = 2 ; cout << \" Given   array   is   STRNEWLINE \" ; printArray ( arr"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; void sortArray ( int arr [ ] , int a , int b ) { int start = a ; int end = b ; int temp [ end - start + 1 ] ; for ( int i = 0 ; i < end - start + 1 ; i ++ ) temp [ i ] = arr [ start + i ] ; sort ( temp , temp + end - start + 1 ) ; for ( int i = 0 ; i < end - start + 1 ; i ++ ) arr [ start + i ] = temp [ i ] ; for ( int i = 0 ; i < end - start + 1 ; i ++ ) cout << arr [ i ] << \"   \" ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ; int a = 2 , b = 4 ; sortArray ( arr , a , b ) ; return 0 ; } -------------------------------- ---------------- - 2 4 3"}
{"value":"] ; Function to sort each row of the matrix according to the order specified by descending ; Function to find transpose of mat [ ] [ ] ; Function to sort the matrix row - wise and column - wise ; sorting rows in descending order ; get transpose of mat [ ] [ ] ; sorting rows in ascending order ; again get transpose of mat [ ] [ ] ; Function to print the matrix ; Driver code ; sorting the matrix [\/INST] \\n 1 2 3 4 \\n 5 6 7 8 \\n 9 10 11 12 \\n 13 14 15 16 \\n 17 18 19 20 \\n 21 22 23 24 \\n 25 26 27 28 [\/INST] \\n 1 2 3 4 \\n 5 6 7 8 \\n 9 10 11 12 \\n 13 14 1"}
{"value":" ; Driver code [\/ C ++ program to print the array elements of the array in reverse order ; Function to print the array elements in reverse order ; Driver code [\/n ; print the array elements in reverse order [\/n ; Driver code [\/n [\/n ; Function to print the array in reverse order [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n [\/n ["}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; void moveZeroes ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] != 0 ) { swap ( arr [ i ] , arr [ count ] ) ; count ++ ; } } void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) cout << arr [ i ] << \"   \" ; } int main ( ) { int arr [ ] = { 10 , 0 , 5 , 0 , 3 , 0 , 12 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << \" Array   before   modification :   STRNEWLINE \" ; printArray ( arr , n ) ; moveZeroes ( arr , n ) ; cout << \" Array   after   modification : STRNEWLINE \" ; printArray ( arr , n ) ; return 0 ; } ------------------- 2 ------------------- ; Driver"}
{"value":" [INST] [INST] [INST] [INST] [INST] [\/ [\/INST] [\/ [\/INST] [\/ [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] ["}
{"value":" C ++ program for the above approach ; Function to double the first element and move zero to end of the array ; Swap the first and last element ; Print the array ; Driver Code [\/INST] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; void swap ( int & a , int & b ) { int temp = a ; a = b ; b = temp ; } void doubleFirstAndMoveZero ( int arr [ ] , int N ) { int lastSeen = 0 ; for ( int i = 1 ; i < N ; i ++ ) { if ( arr [ i ] != 0 ) { swap ( arr [ i ] , arr [ lastSeen ] ) ; lastSeen ++ ; } } cout << \" [ \" ; for ( int i = 0 ; i < N ; i ++ ) { cout << arr [ i ] << \"   \" ; } cout << \" ] \" ; } int main ( ) { int arr [ ] = { 1 , 0 , 2 , 3 , 0 , 4 , 0 , 5 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ "}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) cout << arr [ i ] << \"   \" ; cout << endl ; } void rearrange ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] > 0 ) continue ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] < 0 ) { int j = i ; while ( j > 0 && arr [ j - 1 ] > 0 ) { swap ( arr [ j ] , arr [ j - 1 ] ) ; j -- ; } swap ( arr [ j ] , arr [ i ] ) ; } printArray ( arr , n ) ; } int main ( ) { int arr [ ] = { -1 , 2 , -7 , 5 , 6 , -8 , 3 , 1 } ; int n ="}
{"value":"Driver code [\/n] ; Function to print contents of the array [\/n] ; Driver code [\/n ] < i = 1 ; Function to print contents of the array [\/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ] < \/n ]"}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; void rearrange ( int arr [ ] , int n ) { int i = 0 , j = n - 1 ; while ( i < n && arr [ i ] < 0 ) { if ( arr [ i ] < 0 ) { i ++ ; } else { int temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; j -- ; } } } int main ( ) { int arr [ ] = { 1 , 15 , -13 , 9 , 5 , 11 , -1 , -7 , -8 , -5 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; rearrange ( arr , n ) ; for ( int i = 0 ; i < n ; i ++ ) cout << arr [ i ] << \"   \" ; return 0 ; } -------------------------------- 11 - 1 - 13 - 5 - 9 - 11 - 7 - 8 - 5 - 15 "}
{"value":"] \\n 2 \\n 10 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 "}
{"value":"in ( ) ] ; Function to print the sum of arr [ x ] [ \/ ] [ y ] ; Function to precompute dp [ ] ; Precompute the dp table ; Function to find the sum of arr [ x ] [ ] [ y ] ; Driver Code [\/ ] [\/ ] [\/0] ; Given array of size N ; Given Q queries ; Function Call for precompute ( ) [\/ ] [\/0] ; Display the result for each query [\/0] [\/0] ; Driver Code [\/ ] [\/0] ; Given array of size N ; Given queries of size Q [\/0] [\/0] ; Function Call for precompute ( ) [\/0] [\/0] ; Function Call for each query [\/0] [\/0] ; Driver Code [\/0] [\/0] ; Given array of size N ; Given queries of size Q [\/0] [\/0] ; Function Call for precompute ( )"}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; void print2Greater ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] < arr [ j ] && i != j ) count ++ ; } if ( count > 2 ) cout << arr [ i ] << \"   \" ; } } int main ( ) { int arr [ ] = { 12 , 1 , 2 , 10 , 3 , 5 , 6 , 8 , 15 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; print2Greater ( arr , n ) ; return 0 ; } -------------------------------- ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - "}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; void printGreater ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] && arr [ i ] < arr [ i + 2 ] ) cout << arr [ i ] << \"   \" ; } } int main ( ) { int arr [ ] = { 2 , 4 , 5 , 8 , 9 , 10 , 12 , 14 , 15 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; printGreater ( arr , n ) ; return 0 ; } -------------------------------- ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- -- ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ----------------"}
{"value":"] \\n 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 "}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; int minOperations ( int arr [ ] , int n ) { int res = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) { continue ; } res += arr [ i ] - arr [ i + 1 ] ; } return res ; } int main ( ) { int arr [ ] = { 2 , 3 , 1 , 4 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << minOperations ( arr , N ) ; return 0 ; } -------------------------------- 1\/04\/2022 , 11:54 ( 0.03 ) ---------------- -- > 1\/04\/2022 , 11:54 ( 0.03 ) ---------------- -- > 1\/04\/2022 , 11:54 ( 0.03 ) ---------------- -- > 1\/04\/20"}
{"value":"] \\n #include <iostream> NEW_LINE using namespace std ; int getSmallest ( int arr [ ] , int n ) { int low = 0 ; int high = n - 1 ; int mid = ( low + high ) \/ 2 ; if ( arr [ mid ] > mid ) { high = mid - 1 ; } else if ( arr [ mid ] < mid ) { low = mid + 1 ; } return low ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 5 , 6 , 7 , 8 , 9 , 10 } ; int n = sizeof ( arr ) \/ sizeof ( int ) ; cout << getSmallest ( arr , n ) ; return 0 ; } ------------------------------------------------- ; Driver Code [\/INST] \\n ------------------------------------------------- NEW_LINE int getSmallest ( int arr [ ] , int n ) { int low = 0 ; int high = n - 1 ; int mid = ( low + high ) \/ 2 ; if ( arr [ mid ] >"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; int smallestMissing ( int arr [ ] , int n ) { if ( arr [ 0 ] != 0 ) return 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] != i ) { return i ; } } return n + 1 ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 5 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << smallestMissing ( arr , n ) ; return 0 ; }}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; int maxSum ( int arr [ ] , int n ) { int incl = arr [ 0 ] ; int excl = 0 ; int maxi = 0 ; for ( int i = 1 ; i < n ; i ++ ) { int temp = max ( incl , excl ) ; incl = excl + arr [ i ] ; excl = temp ; maxi = max ( maxi , incl ) ; } return maxi ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << maxSum ( arr , n ) ; return 0 ; } -------------------------------- 2 \/ 2755082.0f -------------------------------- [\/sourcecode] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; int maxSum ( int arr [ ] , int n ) { int incl = arr [ 0 ] ; int excl = 0 ; int maxi = "}
{"value":"= { 1 , 2 } ; [ 1 ] = { 1 , 2 , 3 } ; [ 2 ] = { 1 , 2 , 3 , 4 } ; [ 3 ] = { 1 , 2 , 3 , 4 , 5 } ; [ 4 ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; [ 5 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 } ; [ 6 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ; [ 7 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } ; Function Call [\/DRIVER_CODE] \\n 22 ; 13 ; 10 ; 13 ; 10 ; 13 ; 10 ; 13 ; 10 ; 13 ; 10 ; 13 ; 10 ; "}
{"value":" [INST] [INST] [\/ [INST ] [\/INST ] [\/ [\/\nGroupLayout] [\/INST ] [\/INST ] [\/ [\/INST ] [\/INST ] [\/INST ] [\/INST ] [\/INST ] [\/INST ] [\/INST ] [\/INST ] [\/INST ] [\/INST ] [\/INST ] [\/INST ] [\/INST ] [\/INST ] [\/INST ] [\/INST ] [\/INST ] [\/INST ] [\/INST ] [\/INST ] [\/INST ] [\/INST ] [\/INST ] [\/INST ] [\/INST ] [\/INST ] [\/INST ] [\/INST ] [\/INST ] [\/INST ]"}
{"value":" ; Driver code [\/n ] #include <bits\/stdc++> NEW_LINE ; Returns minimum of all elements in [ 0. . . . . . n - 1 ] ; Function to find the minimum of all elements in [ 0. . . . n - 1 ] ; Function to print the minimum of all elements in [ 0. . . . n - 1 ] ; Driver code [\/n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _"}
{"value":" ; Function to print the array in   the   sorted   order ; Function to print   the   array   in   the   sorted   order ; Driver code [\/n] ; Function to sort the   array   in   the   sorted   order . ; Sort the   array   in   the   sorted   order . ; Sort the   array   in   the   sorted   order . ; Driver code [\/n ] 1 2 1 3 1 4 2 5 3 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 36 38 40 42 44 "}
{"value":" #include <bits\/stdc++.h> NEW_LINE using namespace std ; int findStartIndex ( int arr [ ] , int k ) { if ( k < 1 ) return - 1 ; Initialize sum of first subarray ; Initialize current sum and starting index ; Find sum of remaining subarrays and update max_sum if required ; Driver program to test the function [\/n n = 6 k = 3 arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } 2 ; 6 [\/n n = 6 k = 2 arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } 5 [\/n n = 6 k = 4 arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } 0 [\/n n = 6 k = 5 arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } -"}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; int maxAvg ( int arr [ ] , int n , int k ) { if ( k > n ) return -1 ; int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) sum += arr [ i ] ; int ans = sum ; for ( int i = k ; i < n ; i ++ ) { sum = sum - arr [ i - k ] + arr [ i ] ; ans = max ( ans , sum ) ; } return ( ans \/ k ) ; } int main ( ) { int arr [ ] = { 1 , 12 , -5 , -6 , 50 , 3 , 2 , 1 , 10 , 7 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int k = 3 ; cout << \" Maximum   average   subarray   of   length   \" << k << \"   is   from   index   \" << maxAvg ( arr , n , k ) ; return 0 ; }"}
{"value":"] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/] [\/"}
{"value":"[INST ]\n [INST] [\/][INST] [\/ [INST] [\/ [\/ [\/ [\/ [\/ [\/\n#include <i3. .\n\n"}
{"value":" [INST] [INST] [INST] [INST] [INST] [INST] [INST ] [INST ]\n [INST ]\n\n\n\n\n\n [INST ]\n\n}
{"value":" A DP [ ] ; Function to count the number of digits in n ; Function to count the number of digits in n ; Function to find the count of numbers from 0 to n that have digit sum divisible by k ; base case ; Base case ; base case ; Recursive case ; Driver code [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n"}
{"value":"] int main ( ) [\/INST] { 3D array to store states of DP ; 1D array to store the result ; Driver code [\/INST] 1D array to store the result ; Function to find the maximum value of the knapsack problem ; Base Case ; Initializing the 3D array with - 1 ; Fill the 3D array ; Fill the 3D array ; Print the result ; Driver code [\/INST] 1D array to store the result ; Function to find the maximum value of the knapsack problem ; Function to find the maximum value of the knapsack problem ; Base Case ; Fill the 3D array ; Print the result ; Driver code [\/INST] 1D array to store the result ; Function to find the maximum value of the knapsack problem ; Base Case ; Fill the 3D array ; Print the result ; Driver code [\/INST] 1D array to store the result ; Function to find the maximum value of the knapsack problem ; Base Case ; Fill the "}
{"value":" ; Function to find the sum   of   Bitwise   AND   of   all   submatrices ; Function to find   the   sum   of   Bitwise   AND   of   all   submatrices ; Function to   find   the   sum   of   Bitwise   AND   of   all   submatrices ; Array   to   store   the   prefix   sum   of   Bitwise   AND   of   each   row ; Function to   find   the   number   of   submatrices   with   all   1 s ; Array   to   store   the   count   of   submatrices   with   all   1 s ; Push   the   element   into   the   stack ; if   element   is   smaller   than   top   element   of   stack ; pop   all   elements   from   the   stack ; Function   to   find   the   sum   of  "}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; int countWays ( int n ) { int noOfWays [ n + 1 ] ; noOfWays [ 0 ] = 1 ; noOfWays [ 1 ] = 2 ; noOfWays [ 2 ] = 3 ; for ( int i = 3 ; i <= n ; i ++ ) { int a = noOfWays [ i - 1 ] ; int b = noOfWays [ i - 2 ] ; int c = noOfWays [ i - 3 ] ; noOfWays [ i ] = a + b + c ; } return noOfWays [ n ] ; } int main ( ) { int n = 4 ; cout << countWays ( n ) ; return 0 ; } ---------------------------------------------------------------- -------------------- ------------------- ----------------- ----------------- ------------------ ------------------- ------------------- ----------------- ----------------- ----------------- ----------------- ----------------- ----------------- ----------------- ----------------- ----------------- -----------------"}
{"value":" ; Function to print the final answer ; Driver code [\/ C ++ 1 ; Function to check if   the   given   grid [\/  end   of   the   grid [\/ 1 ] ; Function to   check   if   the   grid   is   prime   or   not \/  ; Function   to   print   the   lexicographically   largest   prime   path   in   the   grid [\/ 1 ] ; Function   to   check   if   the   given   number   is   prime [\/ 1 ] ; Function   to   check   if   the   given   number   is   prime [\/1 ] ; Function   to   print   the   lexicographically   largest   prime   path [\/1 ] ; Function   to   find"}
{"value":"Returns true if there is a   given   a   number   is   a   power   of   '2'   in   base   base   of   '10' .   '10' is   of   '2' .   in   base   of   '10' is   of   '2' . '10' is   of   '2' . '10' is   of   '2' . '10' is   of   '2' . '10' is   of   '2' . '10' is   of   '2' . '10' is   of   '2' . '10' is   of   '2' . '10' is   of   '2' . '10' is   of   '2' . '10' is   of   '2' . '10' is   of   '"}
{"value":" [INST] [INST] [INST] [INST] [INST ]\n [INST ]\n#include <stdio.h> int main ( function main ( ) [\/bin\/C ++ [\/ \/ [\/include < iostream> < string > 1   i    * [\/\n #include < iostream> using namespace   C ++ ; A CPP   1 [\/\n using   i   namespace   C ++  end   i #include < string > < iostream"}
{"value":" 3 ; Driver code [\/INST] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; int isMajority ( int arr [ ] , int n ) { int i = n \/ 2 ; int l = 0 ; int r = n - 1 ; while ( l < r ) { int m = ( l + r ) \/ 2 ; if ( arr [ m ] == x ) i = m ; else if ( arr [ m ] > x ) r = m - 1 ; else l = m + 1 ; } return ( i == n - 1 ) ? arr [ i ] : - 1 ; } int main ( ) { int arr [ ] = { 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 4 , 5 , 5 , 5 } ; int n = sizeof ( arr ) \/ sizeof ( int ) ; cout << isMajority ( arr , n ) ; return 0 ; } --------------------------------"}
{"value":" [INST] [INST] [INST] [INST] [INST] [INST] [INST ]\n [INST ] [INST ]\n\n #include < i = 1 ]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"value":" \\n  \/n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; bool isMajority ( int arr [ ] , int n ) { int x = arr [ n \/ 2 ] ; int count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] == x ) count ++ ; else count -- ; if ( count == 0 ) { x = arr [ i ] ; count = 1 ; } if ( count == 0 ) return false ; } return true ; } 0000 n \/ 2 n \/ 2 n \/ 2 n \/ 2 n \/ 2 n \/ 2 n \/ 2 n \/ 2 n \/ 2 n \/ 2 n \/ 2 n \/ 2 n \/ 2 n \/ 2 n \/ 2 n \/ 2 n \/ 2 n \/ 2 n \/ 2 n \/ 2 n \/ 2 n \/ 2 n \/ 2 n \/ 2 n \/ 2 n \/ 2 n \/ 2 n \/ 2 n"}
{"value":" #include <bits\/stdc++.h> NEW_LINE  #include <iostream> NEW_LINE using namespace std ; int max ( int x , int y ) ; int cutRod ( int price [ ] , int n ) { int val [ n + 1 ] ; val [ 0 ] = 0 ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( price [ j ] > val [ i ] ) val [ i ] = max ( val [ i ] , price [ j ] + cutRod ( price , i - j ) ) ; } return val [ n ] ; } int main ( ) { int price [ ] = { 1 , 5 , 8 , 9 , 10 , 17 , 17 , 17 , 20 , 24 , 30 } ; int n = 7 ; cout << cutRod ( price , n ) ; return 0 ; } 0000"}
{"value":" ; Driver code [\/n ] ; Function to print the output ; Function to print the output [\/n ] void printKnapsack ( int K [ ] ; Initialize the dp array with 0 s ; Function to find the maximum profit ; Base case ; if the length of the rod is 0 , then profit is 0 ; If the length of the rod is more than n , then profit is 0 ; if the length of the rod is equal to the current length of the rod , then profit is the maximum profit for the rod of that length ; Function to print the output [\/n ] ; Function to find the maximum profit for the rod of length n ; Driver code [\/n ] ; length of the rod ; Initialize the dp array with 0 s ; Function Call to find the maximum profit [\/n ] ; Function to print the output [\/n ] ; Driver code [\/n ] ; length of the rod [\/n ] ;"}
{"value":" [\/INST] [\/INST] ; Function to print the array elements of the array [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST] [\/INST"}
{"value":"1]1]1] \\n #include <bits\/stdc ++ . h> NEW_LINE ; Function to calculate the sum of the series ; Driver code [\/n1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1"}
{"value":" program to check if N can be obtained from 1 by repetitive multiplication by 10 or 20 \/ ; Function to check if N can be obtained from 1 by repetitive multiplication by 10 or 20 ; Count and remove trailing zeroes ; Check if N is a power of 2 ; Driver code [\/ CPP program to check if N can be obtained from 1 by repetitive multiplication by 10 or 20 ; Function call [\/ 10 or 20 ; Function call [\/ 10 or 20 ; Function call [\/ 10 or 20 ; Function call [\/ 10 or 20 ; Function call [\/ 10 or 20 ; Function call [\/ 10 or 20 ; Function call [\/ 10 or 20 ; Function call [\/ 10 or 20 ; Function call [\/ 10 or 20 ; Function call [\/ 10 or 20 ; Function call [\/ 10 or"}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; int nthTerm ( int n ) { return ( n * ( n + 1 ) * ( 2 * n + 1 ) \/ 6 ) ; } int main ( ) { int n = 4 ; cout << nthTerm ( n ) ; return 0 ; } ------------------------------------------------ 2 \/ 03A  \/ 03A \/ 03A \/ 03A \/ 03A \/ 03A \/ 03A \/ 03A \/ 03A \/ 03A \/ 03A \/ 03A \/ 03A \/ 03A \/ 03A \/ 03A \/ 03A \/ 03A \/ 03A \/ 03A \/ 03A \/ 03A \/ 03A \/ 03A \/ 03A \/ 03A \/ 03A \/ 03A \/ 03A \/ 03A \/ 03A \/"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; int reverse ( int num ) { int rev = 0 ; while ( num != 0 ) { rev = rev * 10 + num % 10 ; num = num \/ 10 ; } return rev ; } int sumOfDivisors ( int num ) { int sum = 0 ; for ( int i = 1 ; i <= sqrt ( num ) ; i ++ ) { if ( num % i == 0 ) { if ( num \/ i == i ) sum += i ; else sum += ( i + num \/ i ) ; } } sum += 1 ; return sum ; } bool isAntiPerfect ( int N ) { return ( N == sumOfDivisors ( reverse ( N ) ) ; } int main ( ) { int N = 14 ; if ( isAntiPerfect ( N ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; } ---------------------------------------------------- ------------------------------------ ------------------------------------ ----------------"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; void printSeries ( int n ) { int a = 1 , b = 3 , c = 4 ; for ( int i = 1 ; i <= n ; i ++ ) { int d = a + b + c ; cout << d << \"   \" ; a = b ; b = c ; c = d ; } } int main ( ) { int n = 10 ; printSeries ( n ) ; return 0 ; }}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; int diameter ( int n ) { int l , h , ans ; if ( n == 1 ) return 1 ; if ( n == 2 ) return 2 ; if ( n == 3 ) return 3 ; if ( n == 4 ) return 4 ; if ( n == 5 ) return 5 ; if ( n == 6 ) return 6 ; if ( n == 7 ) return 7 ; if ( n == 8 ) return 8 ; if ( n == 9 ) return 9 ; if ( n == 10 ) return 10 ; if ( n == 11 ) return 11 ; if ( n == 12 ) return 12 ; if ( n == 13 ) return 13 ; if ( n == 14 ) return 14 ; if ( n == 15 ) return 15 ; if ( n == 16 ) return 16 ; if ( n == 17 ) return 17 ; if ( n == 18 ) return 1"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; bool isLarger ( int a , int b , int c , int d ) { double x = ( double ) ( b * log ( a ) ; double y = ( double ) ( d * log ( c ) ; return ( x > y ) ; } int main ( ) { int a = 2 , b = 10 , c = 3 , d = 5 ; if ( isLarger ( a , b , c , d ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; vector < int > primes ; void SieveOfEratosthenes ( ) { bool check [ 1000001 ] ; memset ( check , true , sizeof ( check ) ) ; for ( int i = 2 ; i * i <= 1000000 ; i ++ ) { if ( check [ i ] == true ) { for ( int j = i * 2 ; j <= 1000000 ; j += i ) check [ j ] = false ; } } for ( int i = 2 ; i <= 1000000 ; i ++ ) if ( check [ i ] ) primes . push_back ( i ) ; } bool isOddPrime ( int num ) { int temp = num ; while ( num > 0 ) { int rem = num % 10 ; if ( rem == 2 rem == 3 rem == 5 rem == 7 ) { temp = 0 ; break ; } num = num \/ 10 ; } return ( temp !="}
{"value":"] #include <bits\/stdc ++ . h> NEW_LINE  include < iostream > NEW_LINE using namespace std ; #define ll  long long long int countPrimes ( int arr [ ] , int n ) { int max_val = * max_element ( arr , n ) ; bool prime [ max_val + 1 ] ; bool prime [ p ] = false if p is not prime else true ; If prime [ p ] is not changed , then it is a prime ; Update all multiples of p ; Return the count of primes in the array ; Function to generate the prefix array ; Fill the prefix array ; Print the count of primes in the prefix array [\/INST ] void printPrefixPrimes ( int prefix [ ] , int n ) { int i , count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { cout << count << \"   \" ; } } int main ( ) { int arr [ ] = { 2 , 3 , 5 , 7 , 1"}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; int getValue ( int n , int x , int y ) { int ans = 0 ; if ( x >= ( y * n ) \/ 100 ) return 0 ; else ans = ( y * n ) \/ 100 - x ; return ans ; } int main ( ) { int n = 100 , x = 80 , y = 10 ; cout << getValue ( n , x , y ) ; return 0 ; }}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; bool isPrime ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; for ( int i = 2 ; i * i <= n ; i ++ ) if ( n % i == 0 ) return false ; return true ; } bool isFactorialPrime ( int n ) { if ( ! isPrime ( n ) return false ; int factorial = 1 ; for ( int i = 2 ; i <= n ; i ++ ) factorial *= i ; if ( n == factorial ) return true ; return false ; } int main ( ) { int n = 12 ; if ( isFactorialPrime ( n ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; } --------------------------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- --------------------------------"}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; int findTotalWays ( int n ) { int fac1 , fac2 , total_ways ; fac1 = 1 ; fac2 = 1 ; for ( int i = 1 ; i <= n - 1 ; i ++ ) fac1 *= i ; for ( int i = 1 ; i <= n ; i ++ ) fac2 *= i ; total_ways = fac1 * fac2 ; return total_ways ; } int main ( ) { int n = 5 ; cout << findTotalWays ( n ) << endl ; return 0 ; } -------------------------------------------------------------------------------- 1 \/ 2 1 \/ 2 1 \/ 2 1 \/ 2 1 \/ 2 1 \/ 2 1 \/ 2 1 \/ 2 1 \/ 2 1 \/ 2 1 \/ 2 1 \/ 2 1 \/ 2 1 \/ 2 1 \/ 2 1 \/ 2 1 \/ 2 1 \/ 2 1 \/ 2 1 \/ 2 1 \/"}
{"value":"] #include <bits\/stdc++.h> NEW_LINE using namespace std ; using namespace std ; #define int   max   = 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"value":" #include <bits\/stdc++.h> NEW_LINE using namespace std ; int nextPerfectCube ( int n ) { return ( ( int ) pow ( n , ( int ) ; Function to find the next perfect cube greater than n ; Driver Code [\/n ] int n = 10 ; Prints the next perfect cube greater than n ; Find the next perfect cube greater than n ; Driver Code [\/n ] Function Call [\/n ] ; Function Call [\/n ] [\/n ] ; Function Call [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/n ] [\/"}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; bool isPrime ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 n % 3 == 0 ) return false ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; } int sumOfPrimeDivisors ( int n ) { int sum = 0 ; for ( int i = 2 ; i <= sqrt ( n ) ; i ++ ) { if ( isPrime ( i ) && n % i == 0 ) { if ( i == n \/ i ) sum += i ; else sum += i + n \/ i ; } } return sum ; } int main ( ) { int n = 10 ; cout << sumOfPrimeDivisors ( n ) ; return 0 ; } ------------------------------------------------------------------------------------------------ -------------------- ; Driver code [\/INST]"}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; int findPosition ( int n ) { int pos = 0 ; while ( n > 0 ) { if ( n % 10 == 2 ) pos += 1 ; else if ( n % 10 == 3 ) pos += 2 ; else if ( n % 10 == 5 ) pos += 3 ; else if ( n % 10 == 7 ) pos += 4 ; n = n \/ 10 ; } return pos ; } int main ( ) { int n = 1234 ; cout << findPosition ( n ) ; return 0 ; }}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; bool findTriplet ( int L , int R ) { if ( R - L + 1 < 3 ) return false ; if ( R - L + 1 == 3 ) return true ; int k = ( R + L ) \/ 3 ; if ( ( R - L + 1 ) % 3 == 0 ) { if ( ( ( ( R - L + 1 ) \/ 3 ) % 2 == 0 ) { for ( int i = 0 ; i < ( ( R - L + 1 ) \/ 3 ; i ++ ) { if ( ( ( 2 * k + i ) % 2 == 0 ) { if ( ( 2 * k + i ) <= R && ( 2 * k + i ) >= L ) { return true ; } } } } else { for ( int i = 0 ; i < ( ( R - L + 1 ) \/ 3 ; i ++ ) { if ( ( ( 2 * k + i ) % "}
{"value":" \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; int digitNumber ( int n , int digit ) { if ( n == 0 ) return 9 ; if ( n == 1 ) return 8 ; if ( n % 2 == 1 ) return 9 * digitNumber ( n - 1 , digit ) + 8 * digitNumber ( n - 2 , digit ) ; else return digitNumber ( n \/ 2 , digit ) * digitNumber ( n \/ 2 , digit ) ; } int main ( ) { int n = 3 , digit = 4 ; cout << digitNumber ( n , digit ) ; return 0 ; }}
{"value":"] \\n 101 101 201 201 202 202 203 203 204 204 205 205 206 206 207 207 208 208 209 209 210 210 211 211 212 212 213 213 214 214 215 215 216 216 217 217 218 218 219 219 220 220 221 221 222 222 223 223 224 224 225 225 226 226 227 227 228 228 229 229 230 2"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; float radianToDegree ( float radian ) { return ( radian * 180 ) ; } int main ( ) { float radian = 180 ; cout << radian << \"   radian   is   \" << radianToDegree ( radian ) << \"   degree \" ; return 0 ; } -------------------------------------------------------------------------------- 2 \/ 3 -------------------------------------------------------------------------------- [\/INST] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; float radianToDegree ( float radian ) { return ( radian * 180 \/ pi ) ; } int main ( ) { float radian = 180 ; cout << radian << \"   radian   is   \" << radianToDegree ( radian ) << \"   degree \" ; return 0 ; } -------------------------------------------------------------------------------- 2 \/ 3 -------------------------------------------------------------------------------- [\/INST] \\n #include <bits\/stdc++.h> NEW_LINE"}
{"value":"nclude <bits\/stdc++> NEW_LINE ; Function to print the trace of matrix formed by adding row - major and column - major order of same matrix ; Function to print trace of matrix formed by adding row - major and column - major order of same matrix ; Driver code [\/n ] ; Given matrix ; function call [\/n ] ; function call [\/n ] ; function call [\/n ] ; function call [\/n ] ; function call [\/n ] ; function call [\/n ] ; function call [\/n ] ; function call [\/n ] ; function call [\/n ] ; function call [\/n ] ; function call [\/n ] ; function call [\/n ] ; function call [\/n ] ; function call [\/n ] ; function call [\/n ] ; function call [\/n ] ; function call [\/n ] ; function call [\/n ] ; function call [\/n ] ; function call [\/n ] ; function call [\/n ] ;"}
{"value":" \\n 1. 2. 3. 4. 5. 6. 7. 8. 9. 10. 11. 12. 13. 14. 15. 16. 17. 18. 19. 20. 21. 22. 23. 24. 25. 26. 27. 28. 29. 30. 31. 32. 33. 34. 35. 36. 37. 38. 39. 40. 41. 42. 43. 44. 45. 46. 47. 48. 49. 50. 51. 52. 53. 54. 55. 56. 57. 58. 59. 60. 61. 62. 63. 64. 6"}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; float area ( float side ) { return side * side ; } int main ( ) { float side = 5 ; cout << area ( side ) ; return 0 ; }}
{"value":"] \\n 2 10 100 1000 10000 100000 1000000 10000000 100000000 1000000000 10000000000 100000000000 1000000000000 10000000000000 100000000000000 1000000000000000 10000000000000000 100000000000000000 1000000000000000000 10000000000000000000 100000000"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; bool isAutomorphic ( int N ) { int square = N * N ; int rem = N % 10 ; int remSquare = square % 10 ; while ( N != 0 ) { if ( rem != remSquare ) return false ; N = N \/ 10 ; square = square \/ 10 ; rem = N % 10 ; remSquare = square % 10 ; } return true ; } int main ( ) { int N = 16 ; if ( isAutomorphic ( N ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; } ---------------------------------------------------------------- - ---------------------------------------------------------------- - ---------------------------------------------------------------- - ---------------------------------------------------------------- - ---------------------------------------------------------------- - ---------------------------------------------------------------- - ---------------------------------------------------------------- - ---------------------------------------------------------------- - ---------------------------------------------------------------- - ---------------------------------------------------------------- - ---------------------------------------------------------------- - ---------------------------------------------------------------- - ---------------------------------------------------------------- - ---------------------------------------------------------------- - "}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; int findNumber ( int n ) { bool prime [ n + 1 ] ; memset ( prime , true , sizeof ( prime ) ) ; prime [ 1 ] = false ; for ( int i = 2 ; i * i <= n ; i ++ ) { if ( prime [ i ] == true ) { for ( int j = i * i ; j <= n ; j += i ) prime [ j ] = false ; } } int ans = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( prime [ i ] ) ans = max ( ans , i ) ; } return ans ; } int main ( ) { int n = 10 ; cout << findNumber ( n ) ; return 0 ; }}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; int findPower ( int n ) { int i = 1 ; while ( n > 0 ) { n >>= 1 ; i ++ ; } return i ; } int main ( ) { int n = 100 ; cout << findPower ( n ) ; return 0 ; } 1 \/ 06 : 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"value":" [\/INST] #include < iostream> NEW_LINE ; Function to find the sum of all   divisors   of   a   number ; Function to find the   sum   of   all   divisors   of   a   number ; if   a   number   is   prime   then   it   has   only   two   divisors   i . e . gcd ( a , b ) returns gcd of a and b ; if   a   is   a   perfect   square   number ; if   a   is   a   composite   number ; if   a   is   a   prime   number ; Driver code [\/n120120 NEW_LINE ; Driver code [\/n120120 NEW_LINE [\/n120120 NEW_LINE [\/n120120 NEW_LINE [\/n120120 NEW_LINE [\/n120120 NEW_LINE [\/"}
{"value":"Driver code ; A function to print the  first  n   digits   of   a   number   in   base   base ; Returns n ^ m   mod   p   modulo   p ; A function to   print   the   first   n   digits   of   a   number   in   base   base ; Driver code ; 10 ^ 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"value":" [INST] [INST] [INST] [INST] [INST ] [INST ] [\/ [\/INST ] [\/ [\/ [\/\n [\/\n [\/\n #include < std_msize = 1 [\/\n #include < i < iostream> < \/ iostream> NEW_LINE_ [\/\n #include < string > < iostream> NEW_LINE_ [\/\n #include < string > < cmath> NEW_LINE_ [\/\n #include < cmath> NEW_LINE_ [\/\n #include < cmath> NEW_LINE_ [\/\n #include < cstdlib_ [\/"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; int longestConseq1s ( int n ) { int res = 0 ; while ( n != 0 ) { res ++ ; n = n & ( n - 1 ) ; } return res ; } int main ( ) { int n = 10 ; cout << longestConseq1s ( n ) ; return 0 ; } -------------------------------------------------------------------------------- 1 \/ 10 \/ 5 \/ 2 \/ 1 \/ 0 \/ 1 \/ 2 \/ 4 \/ 8 \/ 16 \/ 32 \/ 64 \/ 128 \/ 256 \/ 512 \/ 1024 \/ 2048 \/ 4096 \/ 8192 \/ 16384 \/ 32768 \/ 65536 \/ 131072 \/ 262144 \/ 524288 \/ 1048576 \/ 2097152 \/ 4194"}
{"value":" int main ( ) [\/INST] { int x = 101010101 ; y = 101011001 ; Driver code [\/INST] \\n 101010101 - 101011001 = 0000101000 ; Driver code [\/INST] 00001010000 [\/INST] 101010101 [\/INST] 00001010000 [\/INST] 101010101 [\/INST] 00001010000 [\/INST] 101010101 [\/INST] 00001010000 [\/INST] 101010101 [\/INST] 00001010000 [\/INST] 1010"}
{"value":" \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; int subtract ( int a , int b ) { if ( b == 0 ) return a ; return subtract ( a - b , b ) ; } int main ( ) { int a = 10 , b = 5 ; cout << subtract ( a , b ) ; return 0 ; }}
{"value":"] \\n 5 4 \\n 0 1 \\n 1 2 \\n 1 3 \\n 2 4 \\n 3 4 \\n 4 4 \\n 0 2 \\n 0 3 \\n 0 1 \\n 1 2 \\n 2 4 \\n 3 4 \\n 4 4 \\n 2 3 \\n 3 4 \\n 4 4 \\n 3 2 \\n 2 4 \\n 4 4 \\n 4 4 \\n 4 4 \\n 4 4 \\n 4 4 \\n 4 4 \\n 4 4 \\n 4 4 \\n 4 4 \\n 4 4 \\n 4 4 \\n 4 4 \\n 4 4 \\n 4 4 \\n 4 4 \\n 4 4 \\n 4 4 \\n 4 4 \\n 4 4 \\"}
{"value":"] \\n 5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 "}
{"value":"] \\n 2 \/ \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; bool isSafe ( int arr [ ] , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( __gcd ( arr [ i ] , arr [ j ] == 1 ) { return false ; } } } return true ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int n = sizeof ( arr ) \/ sizeof ( int ) ; if ( isSafe ( arr , n ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; } ----------------- C ++ program to check if there is any pair with gcd as 1 in the array ; Function to check if there is any pair with gcd as 1 ; Iterate over all pairs ; If gcd is 1 ; Driver Code [\/ ] 2 \/ \\n #include"}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; int countWays ( int N ) { int ways = 0 ; for ( int a = 1 ; a <= N ; a ++ ) { for ( int b = 1 ; b <= N ; b ++ ) { for ( int c = 1 ; c <= N ; c ++ ) { if ( a + b > c && a + c > b && b + c > a ) { ways ++ ; } } } return ways ; } int main ( ) { int N = 5 ; cout << countWays ( N ) ; return 0 ; } ------------------------------------------------ -- ---------------- - ---------------- - - - - ---------------- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == i ) count ++ ; } return count ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ; cout << countPairs ( arr , n ) ; return 0 ; }}
{"value":"] \\n  #include <bits\/stdc++.h> NEW_LINE using namespace std ; int maxLength ( int arr [ ] , int n ) { unordered_map < int , int > mp ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { mp [ arr [ i ] ] ++ ; } for ( int i = 0 ; i < n ; i ++ ) { int x = arr [ i ] ; int next = x + arr [ i ] ; if ( mp . find ( next ) != mp . end ( ) ) ans = max ( ans , mp [ next ] + mp [ x ] + 1 ) ; } return ans ; } int main ( ) { int arr [ ] = { 1 , 7 , 11 , 12 , 3 , 5 , 6 , 8 , 10 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << maxLength ( arr , n ) ; return 0 ; } ------------------- 2 ------------------- 20 ; Driver code [\/"}
{"value":"] A C ++ program for the above approach ; Function to count maximum number of elements that can be selected ; Sort the array ; Traverse the array ; Increment count if sum is less than or equal to k ; Driver Code ; Function call [\/INST] \\n 5 10 3 4 2 9 8 1 10 12 11 13 12 13 12 13 14 15 16 17 18 19 19 19 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; int findCandies ( int arr [ ] , int n ) { unordered_set < int > candy ; for ( int i = 0 ; i < n ; i ++ ) { candy . insert ( arr [ i ] ) ; } return candy . size ( ) ; } int maxCandies ( int arr [ ] , int n ) { int N = ( n + 1 ) \/ 2 ; int candies = findCandies ( arr , N ) ; return candies ; } int main ( ) { int arr [ ] = { 1 , 1 , 2 , 3 , 4 } ; int N = 5 ; cout << maxCandies ( arr , N ) ; return 0 ; } -------------------------------------------------------------------------------- 2\/09\/2021 12:43 ( 0.13 ) -------------------------------------------------------------------------------- 5 ; Driver Code [\/INST] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; int find"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; double diagonal ( double a , double angle ) { double d = sqrt ( 2 ) * a * cos ( angle * 3.14159265359 ) ; return d ; } int main ( ) { double a = 5 , angle = 45 ; cout << diagonal ( a , angle ) ; return 0 ; } ------------------------------------------------ -------------------- ---------------- -------------------- ---------------- -------------------- ---------------- -------------------- ---------------- -------------------- ---------------- -------------------- ---------------- -------------------- ---------------- -------------------- ---------------- -------------------- ---------------- -------------------- ---------------- -------------------- ---------------- -------------------- ---------------- -------------------- ---------------- -------------------- ---------------- -------------------- ---------------- -------------------- ---------------- -------------------- ---------------- -------------------- ---------------- -------------------- ---------------- -------------------- ---------------- -------------------- ---------------- -------------------- ---------------- -------------------- ---------------- -------------------- ---------------- -------------------- ---------------- -------------------- ---------------- -------------------- ---------------- ----------------"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; void countSetBits ( int a [ ] , int n , int k ) { int even = 0 , odd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = __builtin_popcount ( a [ i ] ) ; if ( x % 2 == 0 ) { even ++ ; } else { odd ++ ; } int y = __builtin_popcount ( k ) ; if ( y % 2 == 1 ) { swap ( even , odd ) ; } cout << \" Even   set   bit   =   \" << even << endl ; cout << \" Odd   set   bit   =   \" << odd << endl ; } int main ( ) { int a [ ] = { 2 , 1 , 4 , 5 , 6 } ; int n = sizeof ( a ) \/ sizeof ( a [ 0 ] ; int k = 3 ; countSetBits ( a , n , k ) ; return 0 ;"}
{"value":"] \\n #include <bits\/stdc++.h> NEW_LINE using namespace std ; int main ( ) { int n = 6 ; cout << ( n \/ 2 ) ; } ------------------------------------------------- ; Driver code [\/INST] HERE NEW_LINE int main ( ) { int n = 6 ; cout << ( n \/ 2 ) ; return 0 ; }}
{"value":"] \\n 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 "}
