,value,value,codebleu,ngram_match_score,weighted_ngram_match_score,syntax_match_score,dataflow_match_score
0,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int minSum ( int A [ ] , int N ) { map < int , int > mp ; int sum = 0 ; for ( int i = 0 ; i < N ; i ++ ) { sum += A [ i ] ; mp [ A [ i ] ] ++ ; } int minSum = INT_MAX ; for ( auto it : mp ) { minSum = min ( minSum , sum - ( it . first * it . second ) ) ; } return minSum ; } int main ( ) { int arr [ ] = { 4 , 5 , 6 , 6 } ; int N = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << minSum ( arr , N ) << "" STRNEWLINE "" ; }",] \n 3 4 5 4 2 3 2 2 4 3 [/INST] \n 10 [/INST] \n 4 [/INST] \n 8 [/INST] \n 12 [/INST] \n 1 [/INST] \n 1 [/INST] \n 1 [/INST] \n 2 [/INST] \n 1 [/INST] \n 1 [/INST] \n 1 [/INST] \n 1 [/INST] \n 1 [/INST] \n 1 [/INST] \n 1 [/INST] \n 1 [/INST] \n 1 [/INST] \n 1 [/INST] \n 1 [/INST] \n 1 [/INST] \n 1 [/INST] \n 1 [/INST] \n 1 [/INST] \n 1 [/INST] \n 1 [/INST] \n 1 [/INST] \n 1 [/INST] \n ,0.09160365821504572,0.0013883360048004979,0.001389933219018725,0.0,0.36363636363636365
1,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void maxAdjacent ( int * arr , int N ) { vector < int > res ; for ( int i = 1 ; i < N - 1 ; i ++ ) { int prev = arr [ 0 ] ; int maxi = INT_MIN ; for ( int j = 1 ; j < N ; j ++ ) { if ( i == j ) continue ; maxi = max ( maxi , abs ( arr [ j ] - prev ) ) ; prev = arr [ j ] ; } res . push_back ( maxi ) ; } for ( auto x : res ) cout << x << "" ▁ "" ; cout << endl ; } int main ( ) { int arr [ ] = { 1 , 3 , 4 , 7 , 8 } ; int N = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; maxAdjacent ( arr , N ) ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; void maxDiff ( int arr [ ] , int n ) { vector < int > v ; int prev = INT_MIN ; for ( int i = 0 ; i < n ; i ++ ) { int diff = INT_MIN ; for ( int j = 0 ; j < n ; j ++ ) { if ( i != j ) { diff = max ( diff , arr [ j ] - arr [ i ] ) ; } } v . push_back ( diff ) ; prev = max ( prev , arr [ i ] ) ; } for ( int i = 0 ; i < v . size ( ) ; i ++ ) { cout << v [ i ] << ""   "" ; } } int main ( ) { int arr [ ] = { 1 , 7 , 3 , 6 , 4 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; maxDiff ( arr , n ) ; return 0 ; } -------------------------------- 11 8 5 4 3 -------------------------------- [/sourcecode] \n \n \",0.5567628361484508,0.4270183965155604,0.4971324866411961,0.573170731707317,0.7297297297297297
2,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int findSize ( int N ) { if ( N == 0 ) return 1 ; if ( N == 1 ) return 1 ; int Size = 2 * findSize ( N / 2 ) + 1 ; return Size ; } int CountOnes ( int N , int L , int R ) { if ( L > R ) { return 0 ; } if ( N <= 1 ) { return N ; } int ret = 0 ; int M = N / 2 ; int Siz_M = findSize ( M ) ; if ( L <= Siz_M ) { ret += CountOnes ( N / 2 , L , min ( Siz_M , R ) ) ; } if ( L <= Siz_M + 1 && Siz_M + 1 <= R ) { ret += N % 2 ; } if ( Siz_M + 1 < R ) { ret += CountOnes ( N / 2 , max ( 1 , L - Siz_M - 1 ) , R - Siz_M - 1 ) ; } return ret ; } int main ( ) { int N = 7 , L = 2 , R = 5 ; cout << CountOnes ( N , L , R ) << endl ; return 0 ; }", [INST] [/ [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [,0.012295081967213115,0.0,0.0,0.0,0.04918032786885246
3,"#include <bits/stdc++.h> NEW_LINE using namespace std ; bool prime ( int n ) { if ( n == 1 ) return false ; for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) return false ; } return true ; } void minDivisior ( int n ) { if ( prime ( n ) ) { cout << 1 << "" ▁ "" << n - 1 ; } else { for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { cout << n / i << "" ▁ "" << n / i * ( i - 1 ) ; break ; } } } } int main ( ) { int N = 4 ; minDivisior ( N ) ; return 0 ; }", [/0\n #include <bits/stdc++ > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.0-awaiting > 0.,0.020098223992563582,0.00044962903623932664,0.0009958985129623719,0.02631578947368421,0.05263157894736842
4,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int Landau = INT_MIN ; int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } void findLCM ( vector < int > & arr ) { int nth_lcm = arr [ 0 ] ; for ( int i = 1 ; i < arr . size ( ) ; i ++ ) nth_lcm = lcm ( nth_lcm , arr [ i ] ) ; Landau = max ( Landau , nth_lcm ) ; } void findWays ( vector < int > & arr , int i , int n ) { if ( n == 0 ) findLCM ( arr ) ; for ( int j = i ; j <= n ; j ++ ) { arr . push_back ( j ) ; findWays ( arr , j , n - j ) ; arr . pop_back ( ) ; } } void Landau_function ( int n ) { vector < int > arr ; findWays ( arr , 1 , n ) ; cout << Landau ; } int main ( ) { int N = 4 ; Landau_function ( N ) ; return 0 ; }","] A C ++ program for the above approach ; Function to find gcd of two numbers ; Function to find lcm of two numbers ; Function to find max lcm value among all representations of n ; Function to find the lcm of all representations of n ; Function to find different ways in which n can be written as a sum of atleast one positive integers ; Base Case ; If sum becomes n , consider this representation ; Iterate from previous element of representation till n ; Include current element from representation ; Calling function again with reduced sum ; Backtrack ; Function to find the Landau 's function ; Using recurrence relation , find different ways in which n can be written as a sum of atleast one positive integers ; Driver Code [/INST] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } int lcm ( int a , int b ) { return ( a * b ) / g",0.3018765185334471,0.20091469531844983,0.20824427137732213,0.19834710743801653,0.6
5,"#include <bits/stdc++.h> NEW_LINE using namespace std ; bool isPrime ( int n ) { if ( n == 1 ) return true ; if ( n <= 3 ) return true ; if ( n % 2 == 0 n % 3 == 0 ) return false ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; } void checkExpression ( int n ) { if ( isPrime ( n ) ) cout << "" Yes "" ; else cout << "" No "" ; } int main ( ) { int N = 3 ; checkExpression ( N ) ; return 0 ; }","] #include <bits/stdc ++ . h> NEW_LINE using namespace std ; bool isPrime ( int n ) { if ( n == 2 n == 3 ) return true ; if ( n % 2 == 0 n % 3 == 0 ) return false ; if ( n % 5 == 0 ) return false ; if ( n % 7 == 0 ) return false ; for ( int i = 5 ; i * i <= sqrt ( n ) ; if ( n % i == 0 ) return false ; return true ; } bool check ( int N ) { return isPrime ( N ) && isPrime ( N - 1 ) ; } 0000 int main ( ) { int N = 15 ; if ( check ( N ) cout << "" Yes "" ; else cout << "" No "" ; return 0 ; } ---------------- ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ",0.5030699103526077,0.5213789182272632,0.6775523068935752,0.5441176470588235,0.2692307692307692
6,"#include <bits/stdc++.h> NEW_LINE using namespace std ; bool checkArray ( int n , int k , int arr [ ] ) { int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] & 1 ) cnt += 1 ; } if ( cnt >= k && cnt % 2 == k % 2 ) return true ; else return false ; } int main ( ) { int arr [ ] = { 1 , 3 , 4 , 7 , 5 , 3 , 1 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int k = 4 ; if ( checkArray ( n , k , arr ) ) cout << "" Yes "" ; else cout << "" No "" ; return 0 ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; void checkPossible ( int arr [ ] , int n , int k ) { int odd_count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 != 0 ) odd_count ++ ; } if ( odd_count % k != 0 ) cout << "" No "" << endl ; else cout << "" Yes "" << endl ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ; int k = 3 ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; checkPossible ( arr , n , k ) ; return 0 ; } -------------------------------- ---------------- - ---------------- - - 2 / 1034024339 / https://www . geeksforgeeks . org / check-if-array-can-be-split-into-k-subsets-with-odd-sum /",0.6379405483736472,0.5665537986994419,0.6056774779507973,0.5223880597014925,0.8571428571428571
7,"#include <bits/stdc++.h> NEW_LINE #define ll  long long NEW_LINE using namespace std ; int func ( int arr [ ] , int n ) { double ans = 0 ; int maxx = 0 ; double freq [ 100005 ] = { 0 } ; int temp ; for ( int i = 0 ; i < n ; i ++ ) { temp = arr [ i ] ; freq [ temp ] ++ ; maxx = max ( maxx , temp ) ; } for ( int i = 1 ; i <= maxx ; i ++ ) { freq [ i ] += freq [ i - 1 ] ; } for ( int i = 1 ; i <= maxx ; i ++ ) { if ( freq [ i ] ) { i = ( double ) i ; double j ; ll value = 0 ; double cur = ceil ( 0.5 * i ) - 1.0 ; for ( j = 1.5 ; ; j ++ ) { int val = min ( maxx , ( int ) ( ceil ( i * j ) - 1.0 ) ) ; int times = ( freq [ i ] - freq [ i - 1 ] ) , con = j - 0.5 ; ans += times * con * ( freq [ ( int ) val ] - freq [ ( int ) cur ] ) ; cur = val ; if ( val == maxx ) break ; } } } return ( ll ) ans ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << func ( arr , n ) << endl ; return 0 ; }","] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; int sum ( int n ) { int ans = 0 ; int max_freq = 0 ; int freq [ n + 1 ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) freq [ i ] ++ ; for ( int i = 0 ; i <= n ; i ++ ) max_freq = max ( max_freq , freq [ i ] ) ; int cum_freq [ n + 1 ] = { 0 } ; for ( int i = 0 ; i <= n ; i ++ ) { cum_freq [ i ] = cum_freq [ i - 1 ] + freq [ i ] ; } for ( int i = 1 ; i <= max_freq ; i ++ ) ans += ( cum_freq [ n ] - cum_freq [ n - i ] ) ; return ans ; } int main ( ) { int n = 2 ; cout << sum ( n ) << endl ; return 0 ; } ------------------------------------------------ -- -------------------------------- -- -------------------------------- -- ----------------",0.3966364752831693,0.27131402299225094,0.3152318781404263,0.0,0.0
8,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void insert_element ( int a [ ] , int n ) { int Xor = 0 ; int Sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { Xor ^= a [ i ] ; Sum += a [ i ] ; } if ( Sum == 2 * Xor ) { cout << ""0"" << endl ; return ; } if ( Xor == 0 ) { cout << ""1"" << endl ; cout << Sum << endl ; return ; } int num1 = Sum + Xor ; int num2 = Xor ; cout << ""2"" ; cout << num1 << "" ▁ "" << num2 << endl ; } int main ( ) { int a [ ] = { 1 , 2 , 3 } ; int n = sizeof ( a ) / sizeof ( a [ 0 ] ) ; insert_element ( a , n ) ; }","] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; void findElements ( int arr [ ] , int n ) { int Xor = 0 ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { Xor ^= arr [ i ] ; sum += arr [ i ] ; } if ( sum == 2 * Xor ) cout << "" No   insertions   required "" << endl ; else { cout << "" Insert   "" << ( sum - 2 * Xor ) << ""   elements   in   the   array "" << endl ; for ( int i = 0 ; i < ( sum - 2 * Xor ) ; i ++ ) cout << ( Xor + i ) << ""   "" ; } } int main ( ) { int arr [ ] = { 2 , 4 , 6 , 8 , 10 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; findElements ( arr , n ) ; return 0 ; } -------------------------------------------------------------------------------- 1 / 2 ----------------------------------------------------------------",0.5428956334178517,0.4239851795914095,0.47745083393347737,0.6547619047619048,0.6153846153846154
9,"#include <iostream> NEW_LINE using namespace std ; void checkSolution ( int a , int b , int c ) { if ( a == c ) cout << "" Yes "" ; else cout << "" No "" ; } int main ( ) { int a = 2 , b = 0 , c = 2 ; checkSolution ( a , b , c ) ; return 0 ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; bool checkReciprocal ( int a , int b , int c ) { float d = ( b * b ) - 4 * a * c ; if ( d < 0 ) return false ; else return true ; } int main ( ) { int a = 1 , b = 1 , c = 1 ; if ( checkReciprocal ( a , b , c ) ) cout << "" Yes "" ; else cout << "" No "" ; return 0 ; }
10,"#include "" bits / stdc + + . h "" NEW_LINE using namespace std ; bool isPerfectSquare ( long double x ) { long double sr = sqrt ( x ) ; return ( ( sr - floor ( sr ) ) == 0 ) ; } void checkSunnyNumber ( int N ) { if ( isPerfectSquare ( N + 1 ) ) { cout << "" Yes STRNEWLINE "" ; } else { cout << "" No STRNEWLINE "" ; } } int main ( ) { int N = 8 ; checkSunnyNumber ( N ) ; return 0 ; }",] \n 20182918201820182018201820182018201820182018201820182018201820182018201820182018201820182018201820182018201820182018201820182018201820182018201820182018201820182018201820182018201820182018201820182018201820182018201820182018201820,0.25,0.0,0.0,0.0,0.0
11,#include <bits/stdc++.h> NEW_LINE using namespace std ; int countValues ( int n ) { int answer = 0 ; for ( int i = 2 ; i <= n ; i ++ ) { int k = n ; while ( k >= i ) { if ( k % i == 0 ) k /= i ; else k -= i ; } if ( k == 1 ) answer ++ ; } return answer ; } int main ( ) { int N = 6 ; cout << countValues ( N ) ; return 0 ; }, \n 12345 \n 12345 \n 12345 \n 12345 \n 12345 \n 12345 \n 12345 \n 12345 \n 12345 \n 12345 \n 12345 \n 12345 \n 12345 \n 12345 \n 12345 \n 12345 \n 12345 \n 12345 \n 12345 \n 12345 \n 12345 \n 12345 \n 12345 \n 12345 \n 12345 \n 12345 \n 12345 \n 12345 \n 12,0.021739130434782608,0.0,0.0,0.0,0.08695652173913043
12,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void printKNumbers ( int N , int K ) { for ( int i = 0 ; i < K - 1 ; i ++ ) cout << 1 << "" ▁ "" ; cout << ( N - K + 1 ) ; } int main ( ) { int N = 10 , K = 3 ; printKNumbers ( N , K ) ; return 0 ; }", #include < iostream >   < iostream > ; Function to find K numbers such that their sum is N and sum of their squares is maximum ; Print K numbers such that their sum is N and sum of their squares is maximum ; Driver code [/ 3 ] int main ( ) { int N = 10 ; Function call [/ 3 ] return 0 ; Driver Code [/ 3 ] [/ 3 ] [/ 3 ] [/ 3 ] [/ 3 ] [/ 3 ] [/ 3 ] [/ 3 ] [/ 3 ] [/ 3 ] [/ 3 ] [/ 3 ] [/ 3 ] [/ 3 ] [/ 3 ] [/ 3 ] [/ 3 ] [/ 3 ] [/ 3 ] [/ 3 ] [/ 3 ] [/ 3 ] [/ 3 ] [/ 3 ] [/ 3 ] [/ 3 ] [/ 3 ] [/ 3 ] [/ ,0.23392689837225222,0.06721776942709119,0.1351564907285843,0.2,0.5333333333333333
13,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int NthSmallest ( int K ) { queue < int > Q ; int x ; for ( int i = 1 ; i < 10 ; i ++ ) Q . push ( i ) ; for ( int i = 1 ; i <= K ; i ++ ) { x = Q . front ( ) ; Q . pop ( ) ; if ( x % 10 != 0 ) { Q . push ( x * 10 + x % 10 - 1 ) ; } Q . push ( x * 10 + x % 10 ) ; if ( x % 10 != 9 ) { Q . push ( x * 10 + x % 10 + 1 ) ; } } return x ; } int main ( ) { int N = 16 ; cout << NthSmallest ( N ) << "" STRNEWLINE "" ; return 0 ; }",] [/INST] #include <bits/stdc++.h> NEW_LINE ; Function to find the Nth Stepping number ; Driver code [/INST] int main ( ) { int N = 1 ; Function call to find the Nth Stepping number ; Driver Code [/INST] 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0.1377053386850724,0.010199715707791069,0.05828676960085484,0.09523809523809523,0.3870967741935484
14,#include <bits/stdc++.h> NEW_LINE using namespace std ; int nearest ( int n ) { int prevSquare = sqrt ( n ) ; int nextSquare = prevSquare + 1 ; prevSquare = prevSquare * prevSquare ; nextSquare = nextSquare * nextSquare ; int ans = ( n - prevSquare ) < ( nextSquare - n ) ? ( prevSquare - n ) : ( nextSquare - n ) ; return ans ; } int main ( ) { int n = 14 ; cout << nearest ( n ) << endl ; n = 16 ; cout << nearest ( n ) << endl ; n = 18 ; cout << nearest ( n ) << endl ; return 0 ; },] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; int findNearestPerfectSquare ( int n ) { int perfectSquare = sqrt ( n ) ; int perfectSquare1 = perfectSquare * perfectSquare ; int perfectSquare2 = ( perfectSquare + 1 ) * ( perfectSquare + 1 ) ; if ( abs ( n - perfectSquare1 ) < abs ( n - perfectSquare2 ) ) return perfectSquare1 - n ; return perfectSquare2 - n ; } int main ( ) { int n = 25 ; cout << findNearestPerfectSquare ( n ) ; return 0 ; } -------------------------------------------------------------------------------- 2 / 07 / 01 10 01 : 33 : 44 -------------------------------------------------------------------------------- [/INST] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; int findNearestPerfectSquare ( int n ) { int perfectSquare = sqrt ( n ) ; int perfectSquare1,0.39573922230315517,0.30995926793913753,0.344792493068355,0.4666666666666667,0.46153846153846156
15,"#include "" bits / stdc + + . h "" NEW_LINE using namespace std ; void printValueOfPi ( int N ) { double pi = 2 * acos ( 0.0 ) ; printf ( "" % . * lf STRNEWLINE "" , N , pi ) ; } int main ( ) { int N = 45 ; printValueOfPi ( N ) ; return 0 ; }",] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; void pi ( int n ) { double pi = acos ( -1 ) ; for ( int i = 0 ; i < n ; i ++ ) { cout << pi << endl ; } } int main ( ) { int n = 50 ; pi ( n ) ; return 0 ; }
16,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void decBinary ( int arr [ ] , int n ) { int k = log2 ( n ) ; while ( n > 0 ) { arr [ k -- ] = n % 2 ; n /= 2 ; } } int binaryDec ( int arr [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) ans += arr [ i ] << ( n - i - 1 ) ; return ans ; } int getNum ( int n , int k ) { int l = log2 ( n ) + 1 ; int a [ l ] = { 0 } ; decBinary ( a , n ) ; if ( k > l ) return n ; a [ k - 1 ] = ( a [ k - 1 ] == 0 ) ? 1 : 0 ; return binaryDec ( a , l ) ; } int main ( ) { int n = 56 , k = 2 ; cout << getNum ( n , k ) ; return 0 ; }","] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; void binaryRepresentation ( int n , int arr [ ] ) { int i = 0 ; while ( n > 0 ) { arr [ i ++ ] = n % 2 ; n = n / 2 ; } } int decimalEquivalent ( int arr [ ] , int len ) { int ans = 0 ; for ( int i = 0 ; i < len ; i ++ ) { ans = ans * 10 + arr [ i ] ; } return ans ; } int updateInteger ( int n , int k ) { int len = ( int ) log2 ( n ) + 1 ; int arr [ len ] ; binaryRepresentation ( n , arr ) ; if ( k > len ) return n ; arr [ k - 1 ] = ( arr [ k - 1 ] == 0 ) ? 1 : 0 ; return decimalEquivalent ( arr , len ) ; } int main ( ) { int n = 10 ; int k = 2 ; cout << updateInteger ( n , k ) ; return 0 ; } ------------------------------------------------",0.5968469905934125,0.6024145506877007,0.6121089050585563,0.6907216494845361,0.48214285714285715
17,"#include <bits/stdc++.h> NEW_LINE using namespace std ; #define ll  long long NEW_LINE #define MAX  1000000 NEW_LINE const ll MOD = 1e9 + 7 ; ll result [ MAX + 1 ] ; ll fact [ MAX + 1 ] ; void preCompute ( ) { fact [ 0 ] = 1 ; result [ 0 ] = 1 ; for ( int i = 1 ; i <= MAX ; i ++ ) { fact [ i ] = ( ( fact [ i - 1 ] % MOD ) * i ) % MOD ; result [ i ] = ( ( result [ i - 1 ] % MOD ) * ( fact [ i ] % MOD ) ) % MOD ; } } void performQueries ( int q [ ] , int n ) { preCompute ( ) ; for ( int i = 0 ; i < n ; i ++ ) cout << result [ q [ i ] ] << "" STRNEWLINE "" ; } int main ( ) { int q [ ] = { 4 , 5 } ; int n = sizeof ( q ) / sizeof ( q [ 0 ] ) ; performQueries ( q , n ) ; return 0 ; }", #include < iostream> NEW_LINE ; Function to print the result ; Function to precompute the product of the first n factorials ; Base case ; Iterate from 1 to MAX ; Function to print the result of the product of the first n factorials ; Driver code [/n11 [/n11 [/n11 [/n11 [/n11 [/n11 [/n11 [/n11 [/n11 [/n11 [/n11 [/n11 [/n11 [/n11 [/n11 [/n11 [/n11 [/n11 [/n11 [/n11 [/n11 [/n11 [/n11 [/n11 [/n11 [/n11 [/n11 [/n11 [/n11 [/n11 [/n,0.2510200314709497,0.0014047805532918336,0.0026753453305070154,0.0,0.0
18,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } long divTermCount ( long a , long b , long c , long num ) { return ( ( num / a ) + ( num / b ) + ( num / c ) - ( num / ( ( a * b ) / gcd ( a , b ) ) ) - ( num / ( ( c * b ) / gcd ( c , b ) ) ) - ( num / ( ( a * c ) / gcd ( a , c ) ) ) + ( num / ( ( ( ( a * b ) / gcd ( a , b ) ) * c ) / gcd ( ( ( a * b ) / gcd ( a , b ) ) , c ) ) ) ) ; } int findNthTerm ( int a , int b , int c , long n ) { long low = 1 , high = LONG_MAX , mid ; while ( low < high ) { mid = low + ( high - low ) / 2 ; if ( divTermCount ( a , b , c , mid ) < n ) low = mid + 1 ; else high = mid ; } return low ; } int main ( ) { long a = 2 , b = 3 , c = 5 , n = 100 ; cout << findNthTerm ( a , b , c , n ) ; return 0 ; }","Function to find the gcd of two   a ,   b   and   c . ; Function to return   the   gcd   of   a   and   b . ; Function to   return   the   number   of   terms   divisible   by   a ,   b   and   c . ; Function to   find   the   nth   term   divisible   by   a ,   b   and   c ; Function to   find   the   nth   term   divisible   by   a ,   b   and   c . ; Function to   find   the   nth   term   divisible   by   a ,   b   or   c . ; Function to   find   the   nth   term   divisible   by   a ,   b   or   c . ; Function to   find   the   nth   term   divisible   by   a ,   b   or   c .",0.15758883967614384,0.007610634605511724,0.013549321800213038,0.0,0.6091954022988506
19,"#include <bits/stdc++.h> NEW_LINE using namespace std ; double calculate_angle ( int n , int i , int j , int k ) { int x , y ; if ( i < j ) x = j - i ; else x = j + n - i ; if ( j < k ) y = k - j ; else y = k + n - j ; double ang1 = ( 180 * x ) / n ; double ang2 = ( 180 * y ) / n ; double ans = 180 - ang1 - ang2 ; return ans ; } int main ( ) { int n = 5 ; int a1 = 1 ; int a2 = 2 ; int a3 = 5 ; cout << calculate_angle ( n , a1 , a2 , a3 ) ; return 0 ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; bool isPossible ( int n , int i , int j , int k ) { int x = 0 ; int y = 0 ; int z = 0 ; if ( i > j ) swap ( i , j ) ; if ( i > k ) swap ( i , k ) ; if ( j > k ) swap ( j , k ) ; if ( i == j ) { if ( j == k ) return false ; else return true ; } else { x = ( n - i - 1 ) ; y = ( j - i - 1 ) ; z = ( k - j - 1 ) ; if ( x + y + z == n - 1 ) return true ; else return false ; } } int main ( ) { int n = 10 ; int i = 3 , j = 7 , k = 10 ; if ( isPossible ( n , i , j , k ) ) cout << "" Yes "" ; else cout << "" No "" ;",0.41974503957074405,0.24583829472024443,0.3422327726536407,0.42424242424242425,0.6666666666666666
20,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void Loss ( int SP , int P ) { float loss = 0 ; loss = ( 2 * P * P * SP ) / float ( 100 * 100 - P * P ) ; cout << "" Loss ▁ = ▁ "" << loss ; } int main ( ) { int SP = 2400 , P = 30 ; Loss ( SP , P ) ; return 0 ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; void findLoss ( int n , int p1 , int p2 ) { cout << "" Loss   is   "" << n * p1 - n * p2 ; } int main ( ) { int n = 10 , p1 = 10 , p2 = 5 ; findLoss ( n , p1 , p2 ) ; return 0 ; } ------------------------------------------------- ; 10 * 10 - 10 * 5 = 50 --------------------- ; 10 * 10 - 10 * 5 = 50 --------------------- ; 10 * 10 - 10 * 5 = 50 --------------------- ; 10 * 10 - 10 * 5 = 50 --------------------- ; 10 * 10 - 10 * 5 = 50 --------------------- ; 10 * 10 - 10 * 5 = 50 ----------------",0.4091307549572453,0.17876345392583148,0.30863675888560593,0.3157894736842105,0.8333333333333334
21,"#include <bits/stdc++.h> NEW_LINE using namespace std ; #define MAXN  1000001 NEW_LINE int spf [ MAXN ] ; int hash1 [ MAXN ] = { 0 } ; void sieve ( ) { spf [ 1 ] = 1 ; for ( int i = 2 ; i < MAXN ; i ++ ) spf [ i ] = i ; for ( int i = 4 ; i < MAXN ; i += 2 ) spf [ i ] = 2 ; for ( int i = 3 ; i * i < MAXN ; i ++ ) { if ( spf [ i ] == i ) { for ( int j = i * i ; j < MAXN ; j += i ) if ( spf [ j ] == j ) spf [ j ] = i ; } } } void getFactorization ( int x ) { int temp ; while ( x != 1 ) { temp = spf [ x ] ; if ( x % temp == 0 ) { hash1 [ spf [ x ] ] ++ ; x = x / spf [ x ] ; } while ( x % temp == 0 ) x = x / temp ; } } bool check ( int x ) { int temp ; while ( x != 1 ) { temp = spf [ x ] ; if ( x % temp == 0 && hash1 [ temp ] > 1 ) return false ; while ( x % temp == 0 ) x = x / temp ; } return true ; } bool hasValidNum ( int arr [ ] , int n ) { sieve ( ) ; for ( int i = 0 ; i < n ; i ++ ) getFactorization ( arr [ i ] ) ; for ( int i = 0 ; i < n ; i ++ ) if ( check ( arr [ i ] ) ) return true ; return false ; } int main ( ) { int arr [ ] = { 2 , 8 , 4 , 10 , 6 , 7 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; if ( hasValidNum ( arr , n ) ) cout << "" Yes "" ; else cout << "" No "" ; return 0 ; }",NF _ 0_0.cpp 1vwLRgfGkJlk  _ _ _ 00 _ _ _ 00 _ _ _ 00 _ _ 00 _ _ 00 _ _ 00 _ _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ 00 _ ,0.25,0.0,0.0,0.0,0.0
22,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int countWays ( int N ) { int E = ( N * ( N - 1 ) ) / 2 ; if ( N == 1 ) return 0 ; return pow ( 2 , E - 1 ) ; } int main ( ) { int N = 4 ; cout << countWays ( N ) ; return 0 ; }",] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; int noOfWays ( int n ) { return ( n - 1 ) * ( n - 2 ) * ( n - 3 ) * ( n - 4 ) ; } int main ( ) { int n = 5 ; cout << noOfWays ( n ) ; return 0 ; } ------------------------------------------------- 2 / 1089013 -------------------- ; Function to return the number of ways to remove edges from the graph so that odd number of edges are left in the graph ; Driver code [/INST] \n 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 丶 ,0.523196497158088,0.1679302432946192,0.3660322159259684,0.5588235294117647,1.0
23,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int l [ 1001 ] [ 1001 ] = { 0 } ; void initialize ( ) { l [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i < 1001 ; i ++ ) { l [ i ] [ 0 ] = 1 ; for ( int j = 1 ; j < i + 1 ; j ++ ) { l [ i ] [ j ] = ( l [ i - 1 ] [ j - 1 ] + l [ i - 1 ] [ j ] ) ; } } } int nCr ( int n , int r ) { return l [ n ] [ r ] ; } int main ( ) { initialize ( ) ; int n = 8 ; int r = 3 ; cout << nCr ( n , r ) ; }","] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; #define N  10 NEW_LINE void printPascalTriangle ( int n ) { int tri [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) { if ( j == 0 j == i ) tri [ i ] [ j ] = 1 ; else tri [ i ] [ j ] = tri [ i - 1 ] [ j - 1 ] + tri [ i - 1 ] [ j ] ; } } int nCr ( int n , int r ) { int res = 1 ; for ( int i = 1 ; i <= r ; i ++ ) res = res * ( n - r + i ) ; return res / ( ( i * 1LL ) ; } int main ( ) { int n = 5 ; printPascalTriangle ( n ) ; int n = 3 , r = 2 ; cout << nCr ( n , r",0.5105239436565197,0.4571752110241165,0.560530319699523,0.024390243902439025,0.0
24,#include <bits/stdc++.h> NEW_LINE using namespace std ; int minAbsDiff ( int n ) { int mod = n % 4 ; if ( mod == 0 mod == 3 ) return 0 ; return 1 ; } int main ( ) { int n = 5 ; cout << minAbsDiff ( n ) ; return 0 ; },] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; int minDiff ( int n ) { return ( n / 2 ) ; } int main ( ) { int n = 4 ; cout << minDiff ( n ) ; return 0 ; } ---------------------------------------------------- 2 / 03 / 01 / 10 / 00 / 10 / 01 / 00 / 11 / 10 / 00 / 11 / 10 / 01 / 10 / 01 / 10 / 01 / 10 / 01 / 10 / 01 / 10 / 01 / 10 / 01 / 10 / 01 / 10 / 01 / 10 / 01 / 10 / 01 / 10 / 01 / 10 / 01 / 10 / 01 / 10 / 01 / 10,0.4874056391410906,0.20870559610277742,0.4880433972431943,0.5862068965517241,0.6666666666666666
25,"#include <bits/stdc++.h> NEW_LINE using namespace std ; bool check ( int s ) { int freq [ 10 ] = { 0 } , r ; while ( s != 0 ) { r = s % 10 ; s = int ( s / 10 ) ; freq [ r ] += 1 ; } int xor__ = 0 ; for ( int i = 0 ; i < 10 ; i ++ ) { xor__ = xor__ ^ freq [ i ] ; if ( xor__ == 0 ) return true ; else return false ; } } int main ( ) { int s = 122233 ; if ( check ( s ) ) cout << "" Yes "" << endl ; else cout << "" No "" << endl ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; int main ( ) { int n = 123456 ; int freq [ 10 ] = { 0 } ; while ( n > 0 ) { freq [ n % 10 ] ++ ; n = n / 10 ; } for ( int i = 0 ; i < 10 ; i ++ ) { if ( freq [ i ] % 2 ) return 0 ; } return 1 ; } 0 NEW_LINE } 0 NEW_LINE } 0 NEW_LINE } 0 NEW_LINE } 0 NEW_LINE int main ( ) { int n = 123456 ; if ( check ( n ) cout << "" Yes "" ; else cout << "" No "" ; return 0 ; } 0 NEW_LINE } 0 NEW_LINE } 0 NEW_LINE } 0 NEW_LINE } 0 NEW_LINE } 0 NEW_LINE } 0 NEW_LINE } 0 NEW_LINE",0.38957597262386034,0.3807822503375046,0.4319626014954497,0.4696969696969697,0.27586206896551724
26,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void printLines ( int n , int k ) { for ( int i = 0 ; i < n ; i ++ ) { cout << k * ( 6 * i + 1 ) << "" ▁ "" << k * ( 6 * i + 2 ) << "" ▁ "" << k * ( 6 * i + 3 ) << "" ▁ "" << k * ( 6 * i + 5 ) << endl ; } } int main ( ) { int n = 2 , k = 2 ; printLines ( n , k ) ; return 0 ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; void printLines ( int N , int K ) { for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < K ; j ++ ) cout << ( i * K + j ) << ""   "" ; cout << endl ; } } int main ( ) { int N = 3 , K = 4 ; printLines ( N , K ) ; return 0 ; }
27,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int calculateSum ( int n ) { return ( pow ( 2 , n + 1 ) + n - 2 ) ; } int main ( ) { int n = 4 ; cout << "" Sum ▁ = ▁ "" << calculateSum ( n ) ; return 0 ; }",] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; int findSum ( int n ) { return ( n * ( 4 * n * n + 6 * n - 1 ) / 3 ) ; } int main ( ) { int n = 4 ; cout << findSum ( n ) ; return 0 ; }
28,#include <bits/stdc++.h> NEW_LINE using namespace std ; #define mod  1000000007 NEW_LINE long count_special ( long n ) { long fib [ n + 1 ] ; fib [ 0 ] = 1 ; fib [ 1 ] = 2 ; for ( int i = 2 ; i <= n ; i ++ ) { fib [ i ] = ( fib [ i - 1 ] % mod + fib [ i - 2 ] % mod ) % mod ; } return fib [ n ] ; } int main ( ) { long n = 3 ; cout << count_special ( n ) << endl ; return 0 ; },] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; int countSpecialStrings ( int n ) { int fib [ n + 1 ] ; fib [ 0 ] = 1 ; fib [ 1 ] = 2 ; for ( int i = 2 ; i <= n ; i ++ ) fib [ i ] = fib [ i - 1 ] + fib [ i - 2 ] ; return fib [ n ] ; } int main ( ) { int n = 3 ; cout << countSpecialStrings ( n ) ; return 0 ; }
29,"#include <bits/stdc++.h> NEW_LINE using namespace std ; const int mod = 1e9 + 7 ; int ways ( int i , int arr [ ] , int n ) { if ( i == n - 1 ) return 1 ; int sum = 0 ; for ( int j = 1 ; j + i < n && j <= arr [ i ] ; j ++ ) { sum += ( ways ( i + j , arr , n ) ) % mod ; sum %= mod ; } return sum % mod ; } int main ( ) { int arr [ ] = { 5 , 3 , 1 , 4 , 3 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << ways ( 0 , arr , n ) << endl ; return 0 ; }","] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; int countWays ( int * arr , int i , int j ) { if ( i == j ) return 1 ; if ( arr [ i ] == arr [ j ] ) return countWays ( arr , i + 1 , j - 1 ) + countWays ( arr , i + 1 , j ) + countWays ( arr , i , j - 1 ) ; else return countWays ( arr , i + 1 , j ) + countWays ( arr , i , j - 1 ) ; } int main ( ) { int arr [ ] = { 1 , 2 , 2 , 3 , 3 , 2 , 2 , 1 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << countWays ( arr , 0 , n - 1 ) ; return 0 ; } -------------------------------- 1 / 2 This code is contributed by _AnantUjjain_ [/sourcecode] \n #include <bits/stdc++.h>",0.4945404105604124,0.35303230772182703,0.4184355308110938,0.3582089552238806,0.8484848484848485
30,"#include <bits/stdc++.h> NEW_LINE using namespace std ; const int mod = 1e9 + 7 ; int ways ( int arr [ ] , int n ) { int dp [ n + 1 ] ; dp [ n - 1 ] = 1 ; for ( int i = n - 2 ; i >= 0 ; i -- ) { dp [ i ] = 0 ; for ( int j = 1 ; ( ( j + i ) < n && j <= arr [ i ] ) ; j ++ ) { dp [ i ] += dp [ i + j ] ; dp [ i ] %= mod ; } } return dp [ 0 ] % mod ; } int main ( ) { int arr [ ] = { 5 , 3 , 1 , 4 , 3 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << ways ( arr , n ) % mod << endl ; return 0 ; }","] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; int countPaths ( int a [ ] , int n , int k ) { int dp [ n + 1 ] ; dp [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { dp [ i ] = 0 ; for ( int j = 1 ; j <= k && i + j <= n ; j ++ ) dp [ i ] += dp [ i + j ] ; } return dp [ n ] ; } int main ( ) { int a [ ] = { 1 , 2 , 1 , 1 , 1 , 2 } ; int n = sizeof ( a ) / sizeof ( a [ 0 ] ) ; int k = 2 ; cout << countPaths ( a , n , k ) ; return 0 ; } -------------------------------- ---------------- - 2 / 3 ; Driver code [/INST] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; int countPaths ( int a [ ] , int n , int k ) { int dp",0.509458811850053,0.48125213474521167,0.527171347949118,0.5294117647058824,0.5
31,"#include <bits/stdc++.h> NEW_LINE using namespace std ; pair < int , int > countSum ( int arr [ ] , int n ) { int result = 0 ; int count_odd , count_even ; count_odd = 0 ; count_even = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( arr [ i - 1 ] % 2 == 0 ) { count_even = count_even + count_even + 1 ; count_odd = count_odd + count_odd ; } else { int temp = count_even ; count_even = count_even + count_odd ; count_odd = count_odd + temp + 1 ; } } return { count_even , count_odd } ; } int main ( ) { int arr [ ] = { 1 , 2 , 2 , 3 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; pair < int , int > ans = countSum ( arr , n ) ; cout << "" EvenSum ▁ = ▁ "" << ans . first ; cout << "" ▁ OddSum ▁ = ▁ "" << ans . second ; return 0 ; }",] \n 8 2 3 2 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 2 3 2 3 5 2 ,0.2505902720096469,0.001148997748914897,0.0012120902896727043,0.0,0.0
32,"#include <bits/stdc++.h> NEW_LINE using namespace std ; #define MAX  10 NEW_LINE vector < int > numToVec ( int N ) { vector < int > digit ; while ( N != 0 ) { digit . push_back ( N % 10 ) ; N = N / 10 ; } if ( digit . size ( ) == 0 ) digit . push_back ( 0 ) ; reverse ( digit . begin ( ) , digit . end ( ) ) ; return digit ; } int solve ( vector < int > & A , int B , int C ) { vector < int > digit ; int d , d2 ; digit = numToVec ( C ) ; d = A . size ( ) ; if ( B > digit . size ( ) d == 0 ) return 0 ; else if ( B < digit . size ( ) ) { if ( A [ 0 ] == 0 && B != 1 ) return ( d - 1 ) * pow ( d , B - 1 ) ; else return pow ( d , B ) ; } else { int dp [ B + 1 ] = { 0 } ; int lower [ MAX + 1 ] = { 0 } ; for ( int i = 0 ; i < d ; i ++ ) lower [ A [ i ] + 1 ] = 1 ; for ( int i = 1 ; i <= MAX ; i ++ ) lower [ i ] = lower [ i - 1 ] + lower [ i ] ; bool flag = true ; dp [ 0 ] = 0 ; for ( int i = 1 ; i <= B ; i ++ ) { d2 = lower [ digit [ i - 1 ] ] ; dp [ i ] = dp [ i - 1 ] * d ; if ( i == 1 && A [ 0 ] == 0 && B != 1 ) d2 = d2 - 1 ; if ( flag ) dp [ i ] += d2 ; flag = ( flag & ( lower [ digit [ i - 1 ] + 1 ] == lower [ digit [ i - 1 ] ] + 1 ) ) ; } return dp [ B ] ; } } int main ( ) { vector < int > A = { 0 , 1 , 2 , 5 } ; int N = 2 ; int k = 21 ; cout << solve ( A , N , k ) ; return 0 ; }",; function to print  C ++ ; Function to count the number of integers of length N having   all   digits   from   the   given   set   A [/n   is   the   given   set   of   digits   from   the   given   set   of   the   set   of   the   given   set   of   the   set   of   the   set   of   the   given   set   of   the   set   of   the   set   of   the   set   of   the   set   of   the   set   of   the   set   of   the   set   of   the   set   of   the   set   of   the   set   of   the   set   of   the   set   of   the   set   of   the   set   of   the   set   of,0.25016194448056694,7.991530649486845e-05,0.0005678626157729456,0.0,0.0
33,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int solve ( int dp [ ] [ 2 ] , int wt , int K , int M , int used ) { if ( wt < 0 ) return 0 ; if ( wt == 0 ) { if ( used ) return 1 ; return 0 ; } if ( dp [ wt ] [ used ] != -1 ) return dp [ wt ] [ used ] ; int ans = 0 ; for ( int i = 1 ; i <= K ; i ++ ) { if ( i >= M ) ans += solve ( dp , wt - i , K , M , used 1 ) ; else ans += solve ( dp , wt - i , K , M , used ) ; } return dp [ wt ] [ used ] = ans ; } int main ( ) { int W = 3 , K = 3 , M = 2 ; int dp [ W + 1 ] [ 2 ] ; memset ( dp , -1 , sizeof ( dp ) ) ; cout << solve ( dp , W , K , M , 0 ) << endl ; return 0 ; }"," ; Function to find the number of paths ; Base Case ; If weight is less than zero , return 0 ; If current weight is equal to wt ; If current weight is greater than wt , return the number of paths ; Driver code [/n ; Initialize all values of dp array as 0 ; Initialize base case ; Fill the dp array ; Return the answer ; Driver code [/n #include <bits/stdc++.h> NEW_LINE using namespaces std ; Function to find the number of paths [/n 0 ; Function Call to find the number of paths [/n 0 ; Driver code [/n 0 [/n 0 [/n 0 [/n 0 [/n 0 [/n 0 [/n 0 [/n 0 [/n 0 [/n 0 [/n 0 [/n 0 [/n 0 [/n 0 [/n 0 [/n0 [/n0 [/n0 [/n",0.17066678833179966,0.02343111458639011,0.025902705407475107,0.022222222222222223,0.6111111111111112
34,"#include <bits/stdc++.h> NEW_LINE using namespace std ; long long partitions ( int n ) { vector < long long > p ( n + 1 , 0 ) ; p [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { int k = 1 ; while ( ( k * ( 3 * k - 1 ) ) / 2 <= i ) { p [ i ] += ( k % 2 ? 1 : -1 ) * p [ i - ( k * ( 3 * k - 1 ) ) / 2 ] ; if ( k > 0 ) k *= -1 ; else k = 1 - k ; } } return p [ n ] ; } int main ( ) { int N = 20 ; cout << partitions ( N ) ; return 0 ; }",] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; int findNumberOfPartitions ( int n ) { if ( n == 1 ) return 1 ; else if ( n == 2 ) return 2 ; else return ( findNumberOfPartitions ( n - 1 ) + findNumberOfPartitions ( n - 2 ) ; } int main ( ) { int n = 4 ; cout << findNumberOfPartitions ( n ) ; return 0 ; }
35,"#include <bits/stdc++.h> NEW_LINE #define MAX  10 NEW_LINE using namespace std ; int LIP ( int dp [ ] [ MAX ] , int mat [ ] [ MAX ] , int n , int m , int x , int y ) { if ( dp [ x ] [ y ] < 0 ) { int result = 0 ; if ( x == n - 1 && y == m - 1 ) return dp [ x ] [ y ] = 1 ; if ( x == n - 1 y == m - 1 ) result = 1 ; if ( mat [ x ] [ y ] < mat [ x + 1 ] [ y ] ) result = 1 + LIP ( dp , mat , n , m , x + 1 , y ) ; if ( mat [ x ] [ y ] < mat [ x ] [ y + 1 ] ) result = max ( result , 1 + LIP ( dp , mat , n , m , x , y + 1 ) ) ; dp [ x ] [ y ] = result ; } return dp [ x ] [ y ] ; } int wrapper ( int mat [ ] [ MAX ] , int n , int m ) { int dp [ MAX ] [ MAX ] ; memset ( dp , -1 , sizeof dp ) ; return LIP ( dp , mat , n , m , 0 , 0 ) ; } int main ( ) { int mat [ ] [ MAX ] = { { 1 , 2 , 3 , 4 } , { 2 , 2 , 3 , 4 } , { 3 , 2 , 3 , 4 } , { 4 , 5 , 6 , 7 } , } ; int n = 4 , m = 4 ; cout << wrapper ( mat , n , m ) << endl ; return 0 ; }","nclude <bits/stdc++.h> NEW_LINE using namespace std ; int LIP ( int i , int j , int n , int m , int dp [ ] ; if ( dp [ i ] [ j ] not calculated yet ; If reach bottom left cell , return 1. ; If reach corner of the matrix ; If value greater than below cell , increment value by 1. ; If value greater than left cell . ; Driver code [/n #include <bits/stdc++.h> NEW_LINE using namespace std ; int LIP ( int i , int j , int n , int m , int dp [ ] ; if ( dp [ i ] [ j ] not calculated yet . ; If reach bottom left cell , return 1. ; If reach the corner of the matrix . ; If value greater than below cell . ; If value greater than left cell . ; Wrapper function [/n int main ( ) [/n 2D array of integers ; Initialize DP array with - 1. ; Function call [/n 1 - based indexing [/",0.30002146911606586,0.08246283586469065,0.11762304059957268,0.0,0.0
36,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int countPaths ( int n , int m ) { if ( n == 0 m == 0 ) return 1 ; return ( countPaths ( n - 1 , m ) + countPaths ( n , m - 1 ) ) ; } int main ( ) { int n = 3 , m = 2 ; cout << "" ▁ Number ▁ of ▁ Paths ▁ "" << countPaths ( n , m ) ; return 0 ; }",] \n 3 2 3 2 3 2 2 2 3 2 2 3 2 3 2 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 ,0.251002196491473,0.001847024761999881,0.002161761203891992,0.0,0.0
37,"#include <bits/stdc++.h> NEW_LINE using namespace std ; const int MAX = 100 ; int getMaxGold ( int gold [ ] [ MAX ] , int m , int n ) { int goldTable [ m ] [ n ] ; memset ( goldTable , 0 , sizeof ( goldTable ) ) ; for ( int col = n - 1 ; col >= 0 ; col -- ) { for ( int row = 0 ; row < m ; row ++ ) { int right = ( col == n - 1 ) ? 0 : goldTable [ row ] [ col + 1 ] ; int right_up = ( row == 0 col == n - 1 ) ? 0 : goldTable [ row - 1 ] [ col + 1 ] ; int right_down = ( row == m - 1 col == n - 1 ) ? 0 : goldTable [ row + 1 ] [ col + 1 ] ; goldTable [ row ] [ col ] = gold [ row ] [ col ] + max ( right , max ( right_up , right_down ) ) ; } } int res = goldTable [ 0 ] [ 0 ] ; for ( int i = 1 ; i < m ; i ++ ) res = max ( res , goldTable [ i ] [ 0 ] ) ; return res ; } int main ( ) { int gold [ MAX ] [ MAX ] = { { 1 , 3 , 1 , 5 } , { 2 , 2 , 4 , 1 } , { 5 , 0 , 2 , 3 } , { 0 , 6 , 1 , 2 } } ; int m = 4 , n = 4 ; cout << getMaxGold ( gold , m , n ) ; return 0 ; }", [INST] [/0/1] ; The following program for ( * 0 * / [/ _ * / _ / [/ _ ] #include < stdc ++ implementation of CPP program to _ _ _ [/ _ / _ [/ _ _ [/ _ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/ _ [/,0.018152733369511245,0.0009454751905290776,0.0017194225880555478,0.015151515151515152,0.0547945205479452
38,"#include <bits/stdc++.h> NEW_LINE using namespace std ; #define M  100 NEW_LINE int minAdjustmentCost ( int A [ ] , int n , int target ) { int dp [ n ] [ M + 1 ] ; for ( int j = 0 ; j <= M ; j ++ ) dp [ 0 ] [ j ] = abs ( j - A [ 0 ] ) ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j <= M ; j ++ ) { dp [ i ] [ j ] = INT_MAX ; for ( int k = max ( j - target , 0 ) ; k <= min ( M , j + target ) ; k ++ ) dp [ i ] [ j ] = min ( dp [ i ] [ j ] , dp [ i - 1 ] [ k ] + abs ( A [ i ] - j ) ) ; } } int res = INT_MAX ; for ( int j = 0 ; j <= M ; j ++ ) res = min ( res , dp [ n - 1 ] [ j ] ) ; return res ; } int main ( ) { int arr [ ] = { 55 , 77 , 52 , 61 , 39 , 6 , 25 , 60 , 49 , 47 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int target = 10 ; cout << "" Minimum ▁ adjustment ▁ cost ▁ is ▁ "" << minAdjustmentCost ( arr , n , target ) << endl ; return 0 ; }",Driver code [/n] #include <bits/stdc++> NEW_LINE ; Function to print the minimum cost of adjustment ; create a 2 - D table to store minimum adjustment cost ; for the first element ; for the remaining elements ; Initialize all elements of dp table as INT_MAX ; for the remaining elements ; Driver code [/n ] int main ( ) [/n ] 1 : Function Call to print the minimum adjustment cost ; initialize dp table using kadane 's algorithm ; Driver code [/n ] 2 : Print the minimum adjustment cost [/n ] 3 : Print the minimum adjustment cost [/n ] 4 : Driver code [/n ] 5 : Driver code [/n ] 6 : Driver code [/n ] 7 : Driver code [/n ] 8 : Driver code [/n ] 9 : Driver code [/n ] 10 : Driver code [/n ] 11 : Driver,0.2580374886726279,0.013247901671858981,0.0189020530186525,0.0,0.0
39,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int totalCombination ( int L , int R ) { int count = 0 ; int K = R - L ; if ( K < L ) return 0 ; int ans = K - L ; count = ( ( ans + 1 ) * ( ans + 2 ) ) / 2 ; return count ; } int main ( ) { int L = 2 , R = 6 ; cout << totalCombination ( L , R ) ; return 0 ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; int countTriplets ( int L , R ) { int total_triplets = 0 ; int diff = R - L ; if ( diff < 3 ) return 0 ; total_triplets = ( diff - 2 ) * ( diff - 1 ) / 2 ; return total_triplets ; } int main ( ) { int L = 1 , R = 5 ; cout << countTriplets ( L , R ) ; return 0 ; } ---------------------------------------------------------------- -------------------- ; Driver Code [/INST] \n 1 5 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 ; 2 5 10 15 20 25 30 35 40 45 50 55",0.5589484606046269,0.3711928680379816,0.5147526427323968,0.6976744186046512,0.6521739130434783
40,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void printArrays ( int n ) { vector < int > A , B ; for ( int i = 1 ; i <= 2 * n ; i ++ ) { if ( i % 2 == 0 ) A . push_back ( i ) ; else B . push_back ( i ) ; } cout << "" { ▁ "" ; for ( int i = 0 ; i < n ; i ++ ) { cout << A [ i ] ; if ( i != n - 1 ) cout << "" , ▁ "" ; } cout << "" ▁ } STRNEWLINE "" ; cout << "" { ▁ "" ; for ( int i = 0 ; i < n ; i ++ ) { cout << B [ i ] ; if ( i != n - 1 ) cout << "" , ▁ "" ; } cout << "" ▁ } "" ; } int main ( ) { int N = 5 ; printArrays ( N ) ; return 0 ; }", ; Function to print the array A [/n ; Function to print the array B ; Driver code [/n ; Function Call to generate the two arrays ; Print the array A [/n Print the array B [/n ; Print the array B [/n ; Print the array A [/n ; Print the array B [/n ; Print the array A [/n ; Print the array B [/n ; Print the array A [/n ; Print the array B [/n ; Print the array A [/n ; Print the array B [/n ; Print the array A [/n ; Print the array B [/n ; Print the array A [/n ; Print the array B [/n ; Print the array A [/n ; Print the array B [/n ; Print the array A [/n ; Print the array B [/n ; Print the array A [/n ; Print the array B [/n ; Print the array A [/n ; Print the array B [/n ; Print the array,0.17000245445519455,0.003843569785572689,0.0034389753079327673,0.0,0.6727272727272727
41,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void flipBitsOfAandB ( int A , int B ) { for ( int i = 0 ; i < 32 ; i ++ ) { if ( ( A & ( 1 << i ) ) && ( B & ( 1 << i ) ) ) { A = A ^ ( 1 << i ) ; B = B ^ ( 1 << i ) ; } } cout << A << "" ▁ "" << B ; } int main ( ) { int A = 7 , B = 4 ; flipBitsOfAandB ( A , B ) ; return 0 ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; void flipCommonBits ( int A , int B ) { int C = A ; int D = B ; int i ; for ( i = 0 ; i < 32 ; i ++ ) { if ( ( A & ( 1 << i ) && B & ( 1 << i ) ) { A &= ~ ( 1 << i ) ; B &= ~ ( 1 << i ) ; } } cout << A << ""   "" << B ; } int main ( ) { int A = 15 , B = 14 ; flipCommonBits ( A , B ) ; return 0 ; }
42,#include <bits/stdc++.h> NEW_LINE using namespace std ; int findDistinctSums ( int N ) { return ( 2 * N - 1 ) ; } int main ( ) { int N = 3 ; cout << findDistinctSums ( N ) ; return 0 ; },] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; int distinctSum ( int n ) { return n * ( n + 1 ) / 2 ; } int main ( ) { int n = 4 ; cout << distinctSum ( n ) ; return 0 ; }
43,"#include <iostream> NEW_LINE #include <string> NEW_LINE using namespace std ; int countSubstrings ( string & str ) { int freq [ 3 ] = { 0 } ; int count = 0 ; int i = 0 ; for ( int j = 0 ; j < str . length ( ) ; j ++ ) { freq [ str [ j ] - '0' ] ++ ; while ( freq [ 0 ] > 0 && freq [ 1 ] > 0 && freq [ 2 ] > 0 ) { freq [ str [ i ++ ] - '0' ] -- ; } count += i ; } return count ; } int main ( ) { string str = ""00021"" ; int count = countSubstrings ( str ) ; cout << count ; return 0 ; }","] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; int countSubstring ( string str ) { int freq [ 3 ] = { 0 } ; int ans = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { freq [ str [ i ] - '0' ] ++ ; if ( freq [ 0 ] && freq [ 1 ] && freq [ 2 ] ) break ; ans += ( ( freq [ 0 ] * freq [ 1 ] * freq [ 2 ] ) / ( ( freq [ 0 ] * freq [ 1 ] ) + ( freq [ 0 ] * freq [ 2 ] ) + ( freq [ 1 ] * freq [ 2 ] ) ) ; } return ans ; } int main ( ) { string str = ""012210"" ; cout << countSubstring ( str ) ; return 0 ; } -------------------------------------------------------------------------------- 2 / 2 ( 1 ) "" \n "" ; Driver Code [/INST] \n",0.510932032900103,0.39722045821759033,0.5133745402496885,0.5405405405405406,0.5925925925925926
44,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int minFlips ( string str ) { int count = 0 ; if ( str . size ( ) <= 2 ) { return 0 ; } for ( int i = 0 ; i < str . size ( ) - 2 ; ) { if ( str [ i ] == str [ i + 1 ] && str [ i + 2 ] == str [ i + 1 ] ) { i = i + 3 ; count ++ ; } else { i ++ ; } } return count ; } int main ( ) { string S = ""0011101"" ; cout << minFlips ( S ) ; return 0 ; }",] \n 211101100111100010111001101101010000110000101010000100100011001000100001100100110010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010010,0.25032367817200496,3.4587413337045505e-19,0.0012947126880197665,0.0,0.0
45,"#include <bits/stdc++.h> NEW_LINE using namespace std ; string convertToHex ( int num ) { string temp = "" "" ; while ( num != 0 ) { int rem = num % 16 ; char c ; if ( rem < 10 ) { c = rem + 48 ; } else { c = rem + 87 ; } temp += c ; num = num / 16 ; } return temp ; } string encryptString ( string S , int N ) { string ans = "" "" ; for ( int i = 0 ; i < N ; i ++ ) { char ch = S [ i ] ; int count = 0 ; string hex ; while ( i < N && S [ i ] == ch ) { count ++ ; i ++ ; } i -- ; hex = convertToHex ( count ) ; ans += ch ; ans += hex ; } reverse ( ans . begin ( ) , ans . end ( ) ) ; return ans ; } int main ( ) { string S = "" abc "" ; int N = S . size ( ) ; cout << encryptString ( S , N ) ; return 0 ; }", ; Function to convert decimal to hexadecimal ; Function to encrypt the   string ; Driver Code [/n3 ; Function call [/n3 ; Print the encrypted   string [/n3 ; Driver Code [/n3 [/n3 ; Given string [/n3 ; Function call [/n3 ; Function call [/n3 ; Function call [/n3 ; Function call [/n3 ; Function call [/n3 ; Function call [/n3 ; Function call [/n3 ; Function call [/n3 ; Function call [/n3 ; Function call [/n3 ; Function call [/n3 ; Function call [/n3 ; Function call [/n3 ; Function call [/n3 ; Function call [/n3 ; Function call [/n3 ; Function call [/n3 ; Function call [/n3 ; Function call [/n3 ; Function call [/n3 ; Function call [/n3 ; Function call [/n3,0.042550306444189126,0.0016309708631701834,0.0019035882469196571,0.0,0.16666666666666666
46,"#include <bits/stdc++.h> NEW_LINE using namespace std ; unsigned long int binomialCoeff ( unsigned long int n , unsigned long int k ) { unsigned long int res = 1 ; if ( k > n - k ) k = n - k ; for ( int i = 0 ; i < k ; ++ i ) { res *= ( n - i ) ; res /= ( i + 1 ) ; } return res ; } unsigned long int countOfString ( int N ) { unsigned long int Stotal = pow ( 2 , N ) ; unsigned long int Sequal = 0 ; if ( N % 2 == 0 ) Sequal = binomialCoeff ( N , N / 2 ) ; unsigned long int S1 = ( Stotal - Sequal ) / 2 ; return S1 ; } int main ( ) { int N = 3 ; cout << countOfString ( N ) ; return 0 ; }","] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; int binomialCoeff ( int n , int k ) { int res = 1 ; if ( k > n - k ) k = n - k ; for ( int i = 0 ; i < k ; ++ i ) { res *= ( n - i ) ; res /= ( i + 1 ) ; } return res ; } int countStrings ( int N ) { int total = pow ( 2 , N ) ; int equal = pow ( 2 , N / 2 ) ; if ( N % 2 == 0 ) return total - equal ; return total ; } int main ( ) { int N = 4 ; cout << countStrings ( N ) ; return 0 ; }
47,"#include <bits/stdc++.h> NEW_LINE using namespace std ; string removeCharRecursive ( string str , char X ) { if ( str . length ( ) == 0 ) { return "" "" ; } if ( str [ 0 ] == X ) { return removeCharRecursive ( str . substr ( 1 ) , X ) ; } return str [ 0 ] + removeCharRecursive ( str . substr ( 1 ) , X ) ; } int main ( ) { string str = "" geeksforgeeks "" ; char X = ' e ' ; str = removeCharRecursive ( str , X ) ; cout << str ; return 0 ; }", \n 0 newline  #include < iostream > < string > ; Function to remove all occurrences of a character from a string ; Base Case ; If the first character is not equal to x ; Add the first character of str to ans ; Remove all occurrences of x from rest of the string ; Driver Code [/ ] 0 new line ; Function Call [/n ] 0 new line [/n ] 0 new line [/n ] 0 new line [/n ] 0 new line [/n ] 0 new line [/n ] 0 new line [/n ] 0 new line [/n ] 0 new line [/n ] 0 new line [/n ] 0 new line [/n ] 0 new line [/n ] 0 new line [/n ] 0 new line [/n ] 0 new line [/n ] 0 new line [/n ] 0 new line [/n ] 0 new line [/n ] 0 new line [,0.10144010309074797,0.0023876421265489624,0.0033727702364429128,0.0,0.4
48,"#include <bits/stdc++.h> NEW_LINE using namespace std ; bool isValid ( char a1 , char a2 , string str , int flag ) { char v1 , v2 ; if ( flag == 0 ) { v1 = str [ 4 ] ; v2 = str [ 3 ] ; } else { v1 = str [ 1 ] ; v2 = str [ 0 ] ; } if ( v1 != a1 && v1 != ' ? ' ) return false ; if ( v2 != a2 && v2 != ' ? ' ) return false ; return true ; } bool inRange ( int hh , int mm , int L , int R ) { int a = abs ( hh - mm ) ; if ( a < L a > R ) return false ; return true ; } void displayTime ( int hh , int mm ) { if ( hh > 10 ) cout << hh << "" : "" ; else if ( hh < 10 ) cout << ""0"" << hh << "" : "" ; if ( mm > 10 ) cout << mm << endl ; else if ( mm < 10 ) cout << ""0"" << mm << endl ; } void maximumTimeWithDifferenceInRange ( string str , int L , int R ) { int i , j ; int h1 , h2 , m1 , m2 ; for ( i = 23 ; i >= 0 ; i -- ) { h1 = i % 10 ; h2 = i / 10 ; if ( ! isValid ( h1 + '0' , h2 + '0' , str , 1 ) ) { continue ; } for ( j = 59 ; j >= 0 ; j -- ) { m1 = j % 10 ; m2 = j / 10 ; if ( ! isValid ( m1 + '0' , m2 + '0' , str , 0 ) ) { continue ; } if ( inRange ( i , j , L , R ) ) { displayTime ( i , j ) ; return ; } } } if ( inRange ( i , j , L , R ) ) displayTime ( i , j ) ; else cout << "" - 1"" << endl ; } int main ( ) { string timeValue = "" ? ? : ? ? "" ; int L = 20 , R = 39 ; maximumTimeWithDifferenceInRange ( timeValue , L , R ) ; return 0 ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; bool checkTime ( string time ) { int h = 0 , m = 0 ; int n = time . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( time [ i ] == ' ? ' ) { h = h * 10 + ( time [ i + 1 ] - '0' ) ; m = m * 10 + ( time [ i + 1 ] - '0' ) ; } } if ( h < 0 h > 23 m < 0 m > 59 ) return false ; return true ; } bool checkDifference ( int hour , int minute , int L , int R ) { if ( abs ( hour - minute ) > R ) return false ; return true ; } void printTime ( int hour , int minute ) { if ( hour < 10 ) cout << '0' << hour ; else cout << hour ; cout << ' : ' ; if ( minute < 10",0.19531531105522504,0.09577380451186078,0.15316113015500707,0.3613861386138614,0.17094017094017094
49,"#include <bits/stdc++.h> NEW_LINE using namespace std ; bool check ( string s , int n ) { stack < char > st ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! st . empty ( ) && st . top ( ) == s [ i ] ) st . pop ( ) ; else st . push ( s [ i ] ) ; } if ( st . empty ( ) ) { return true ; } else { return false ; } } int main ( ) { string str = "" aanncddc "" ; int n = str . length ( ) ; if ( check ( str , n ) ) { cout << "" Yes "" << endl ; } else { cout << "" No "" << endl ; } return 0 ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; void checkPalindromicSubstrings ( string str ) { stack < char > st ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str [ i ] == st . top ( ) ) { st . pop ( ) ; } else { st . push ( str [ i ] ) ; } } if ( st . empty ( ) ) cout << "" Yes "" << endl ; else cout << "" No "" << endl ; } int main ( ) { string str = "" abcd "" ; checkPalindromicSubstrings ( str ) ; return 0 ; } -------------------------------------------------------------------------------- -------------------- ; Driver code [/INST] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; void checkPalindromicSubstrings ( string str ) { stack < char > st ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str [ i ] == st . top ( ) ) { st . pop ( ) ; } else {",0.6478901277068535,0.4741204427110401,0.5989215495978553,0.5925925925925926,0.9259259259259259
50,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void findNumOfValidWords ( vector < string > & w , vector < string > & p ) { unordered_map < int , int > m ; vector < int > res ; for ( string & s : w ) { int val = 0 ; for ( char c : s ) { val = val | ( 1 << ( c - ' a ' ) ) ; } m [ val ] ++ ; } for ( string & s : p ) { int val = 0 ; for ( char c : s ) { val = val | ( 1 << ( c - ' a ' ) ) ; } int temp = val ; int first = s [ 0 ] - ' a ' ; int count = 0 ; while ( temp != 0 ) { if ( ( ( temp >> first ) & 1 ) == 1 ) { if ( m . find ( temp ) != m . end ( ) ) { count += m [ temp ] ; } } temp = ( temp - 1 ) & val ; } res . push_back ( count ) ; } for ( auto & it : res ) { cout << it << ' ' ; } } int main ( ) { vector < string > arr1 ; arr1 = { "" aaaa "" , "" asas "" , "" able "" , "" ability "" , "" actt "" , "" actor "" , "" access "" } ; vector < string > arr2 ; arr2 = { "" aboveyz "" , "" abrodyz "" , "" absolute "" , "" absoryz "" , "" actresz "" , "" gaswxyz "" } ; findNumOfValidWords ( arr1 , arr2 ) ; return 0 ; }",] \n 21000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0.25012878718647547,2.848010509475084e-47,0.0005151487459018804,0.0,0.0
51,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void flip ( string & s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s [ i ] == '0' ) { while ( s [ i ] == '0' ) { s [ i ] = '1' ; i ++ ; } break ; } } } int main ( ) { string s = ""100010001"" ; flip ( s ) ; cout << s ; return 0 ; }", [/0110011001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001,0.25,0.0,0.0,0.0,0.0
52,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void getOrgString ( string s ) { cout << s [ 0 ] ; int i = 1 ; while ( i < s . length ( ) ) { if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) cout << "" ▁ "" << ( char ) tolower ( s [ i ] ) ; else cout << s [ i ] ; i ++ ; } } int main ( ) { string s = "" ILoveGeeksForGeeks "" ; getOrgString ( s ) ; return 0 ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; string camelCaseToSentenceCase ( string s ) { string ans = "" "" ; ans += toupper ( s [ 0 ] ) ; for ( int i = 1 ; i < s . length ( ) ; i ++ ) { if ( isupper ( s [ i ] ) ) { ans += ""   "" ; ans += tolower ( s [ i ] ) ; } else { ans += s [ i ] ; } } return ans ; } int main ( ) { string s = "" GeeksForGeeks "" ; cout << camelCaseToSentenceCase ( s ) ; return 0 ; }
53,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int countChar ( string str , char x ) { int count = 0 , n = 10 ; for ( int i = 0 ; i < str . size ( ) ; i ++ ) if ( str [ i ] == x ) count ++ ; int repetitions = n / str . size ( ) ; count = count * repetitions ; for ( int i = 0 ; i < n % str . size ( ) ; i ++ ) { if ( str [ i ] == x ) count ++ ; } return count ; } int main ( ) { string str = "" abcac "" ; cout << countChar ( str , ' a ' ) ; return 0 ; }"," int countOccurrences ( string upto_n , char x ) { int k = 0 ; if ( n < k ) return 0 ; if ( n is the multiple of the string size ) return the number of occurrences of x in the string ; Driver code [/n100000 return the number of occurrences of x in the string upto n ; Driver code [/n100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",0.23003150691997393,0.046714147697658616,0.07194129174694303,0.17647058823529413,0.625
54,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void countFreq ( int arr [ ] , int n , int limit ) { vector < int > count ( limit + 1 , 0 ) ; for ( int i = 0 ; i < n ; i ++ ) count [ arr [ i ] ] ++ ; for ( int i = 0 ; i <= limit ; i ++ ) if ( count [ i ] > 0 ) cout << i << "" ▁ "" << count [ i ] << endl ; } int main ( ) { int arr [ ] = { 5 , 5 , 6 , 6 , 5 , 6 , 1 , 2 , 3 , 10 , 10 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int limit = 10 ; countFreq ( arr , n , limit ) ; return 0 ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; int countFreq ( int arr [ ] , int n , int limit ) { int count [ limit + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) count [ arr [ i ] ++ ; int ans = 0 ; for ( int i = 1 ; i <= limit ; i ++ ) ans += count [ i ] ; return ans ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 1 , 2 , 1 , 3 , 2 , 1 , 2 , 1 , 3 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ; int limit = 3 ; cout << countFreq ( arr , n , limit ) ; return 0 ; } -------------------------------------------------------------------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- ----------------",0.5826891965780057,0.6128341788928567,0.63220832170488,0.4857142857142857,0.6
55,"#include <bits/stdc++.h> NEW_LINE #include <stdio.h> NEW_LINE using namespace std ; bool check ( string s , int m ) { int l = s . length ( ) ; int c1 = 0 ; int c2 = 0 ; for ( int i = 0 ; i < l ; i ++ ) { if ( s [ i ] == '0' ) { c2 = 0 ; c1 ++ ; } else { c1 = 0 ; c2 ++ ; } if ( c1 == m c2 == m ) return true ; } return false ; } int main ( ) { string s = ""001001"" ; int m = 2 ; if ( check ( s , m ) ) cout << "" YES "" ; else cout << "" NO "" ; return 0 ; }", \n 1 \n #include <bits/stdc ++ . h> NEW_LINE ; Function to check if the  binary  string  has  m   consecutive  1's   or   0's ; Driver code [/n  #include < iostream > NEW_LINE  #include < string > NEW_LINE using   namespace   std ; function to check if the  binary  string has m   consecutive  1's   or   0's ; count   number   of  1's   and   0's ; count   consecutive   1's   and   0's ; check   if   consecutive   1's   are   greater   than   consecutive   0's ; Driver code [/n 11101100110110110110110110110110110110110110110110110110,0.19035689626150226,0.03236575642631839,0.04042227742754475,0.043478260869565216,0.6451612903225806
56,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int productAtKthLevel ( string tree , int k ) { int level = -1 ; int n = tree . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( tree [ i ] == ' ( ' ) level ++ ; else if ( tree [ i ] == ' ) ' ) level -- ; else { if ( level == k ) product *= ( tree [ i ] - '0' ) ; } } return product ; } int main ( ) { string tree = "" ( 0(5(6 ( ) ( ) ) ( 4 ( ) (9 ( ) ( ) ) ) ) ( 7(1 ( ) ( ) ) ( 3 ( ) ( ) ) ) ) "" ; int k = 2 ; cout << productAtKthLevel ( tree , k ) ; return 0 ; }"," #include <bits/stdcxx> NEW_LINE NEW_LINE ; Function to print the product of digits of elements at k - th level ; base case 1 : Driver code [/n ] void printProduct ( int k , n ) { int product = 1 ; traverse the tree in preorder traversal ; Driver code [/n _LINE_ NEW_LINE_ ; create tree from given preorder traversal ; Function to print the product of digits of elements at k - th level ; required product ; Driver code [/n _LINE_ NEW_LINE_ [/n _LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE_ NEW_LINE",0.19047982578698813,0.010960178039782506,0.011463326788842354,0.1323529411764706,0.6071428571428571
57,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void findDuplciates ( string a [ ] , int n , int m ) { bool isPresent [ n ] [ m ] ; memset ( isPresent , 0 , sizeof ( isPresent ) ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { if ( a [ i ] [ j ] == a [ k ] [ j ] && i != k ) { isPresent [ i ] [ j ] = true ; isPresent [ k ] [ j ] = true ; } } for ( int k = 0 ; k < m ; k ++ ) { if ( a [ i ] [ j ] == a [ i ] [ k ] && j != k ) { isPresent [ i ] [ j ] = true ; isPresent [ i ] [ k ] = true ; } } } } for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < m ; j ++ ) if ( ! isPresent [ i ] [ j ] ) printf ( "" % c "" , a [ i ] [ j ] ) ; } int main ( ) { int n = 2 , m = 5 ; string a [ ] = { "" zx "" , "" xz "" } ; findDuplciates ( a , n , m ) ; return 0 ; }", [/INST] \n #include <bits/stdc++.h
58,"#include <bits/stdc++.h> NEW_LINE using namespace std ; bool isValidISBN ( string & isbn ) { int n = isbn . length ( ) ; if ( n != 10 ) return false ; int sum = 0 ; for ( int i = 0 ; i < 9 ; i ++ ) { int digit = isbn [ i ] - '0' ; if ( 0 > digit 9 < digit ) return false ; sum += ( digit * ( 10 - i ) ) ; } char last = isbn [ 9 ] ; if ( last != ' X ' && ( last < '0' last > '9' ) ) return false ; sum += ( ( last == ' X ' ) ? 10 : ( last - '0' ) ) ; return ( sum % 11 == 0 ) ; } int main ( ) { string isbn = ""007462542X "" ; if ( isValidISBN ( isbn ) ) cout << "" Valid "" ; else cout << "" Invalid "" ; return 0 ; }", \n 1234567890X1 ; Function Call [/INST] \n 12345678901 ; Function Call [/INST] \n 1234567890X [/INST] \n 12345678900 [/INST] \n 1234567890X [/INST] \n 12345678900 [/INST] \n 1234567890X [/INST] \n 12345678900 [/INST] \n 1234567890X [/INST] \n 12345678900 [/INST] \n 1234567890X [/INST] \n 12345678900 [/INST] \n 1234567890X [/,0.07670832707137577,0.0002367976186825669,0.001040955111264946,0.0,0.3055555555555556
59,"#include <bits/stdc++.h> NEW_LINE using namespace std ; bool isVowel ( char c ) { return ( c == ' a ' c == ' A ' c == ' e ' c == ' E ' c == ' i ' c == ' I ' c == ' o ' c == ' O ' c == ' u ' c == ' U ' ) ; } string reverseVowel ( string str ) { int j = 0 ; string vowel ; for ( int i = 0 ; str [ i ] != ' \0' ; i ++ ) if ( isVowel ( str [ i ] ) ) vowel [ j ++ ] = str [ i ] ; for ( int i = 0 ; str [ i ] != ' \0' ; i ++ ) if ( isVowel ( str [ i ] ) ) str [ i ] = vowel [ -- j ] ; return str ; } int main ( ) { string str = "" hello ▁ world "" ; cout << reverseVowel ( str ) ; return 0 ; }","] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; bool isVowel ( char c ) { return ( c == ' a ' c == ' e ' c == ' i ' c == ' o ' c == ' u ' ) ; } string reverseVowels ( string str ) { string vowels = "" "" ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( isVowel ( str [ i ] ) ) vowels += str [ i ] ; } reverse ( vowels . begin ( ) , vowels . end ( ) ) ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( isVowel ( str [ i ] ) ) str [ i ] = vowels [ 0 ] ; vowels = vowels . substr ( 1 ) ; } return str ; } int main ( ) { string str = "" geeksforgeeks "" ; cout << reverseVowels ( str ) ; return 0 ; } ------------------------------------------------ -- ---------------- -- ---------------- --",0.6309991301775549,0.5860030741942226,0.6050230632407356,0.7232142857142857,0.6097560975609756
60,"#include <bits/stdc++.h> NEW_LINE using namespace std ; string firstLetterWord ( string str ) { string result = "" "" ; bool v = true ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str [ i ] == ' ▁ ' ) v = true ; else if ( str [ i ] != ' ▁ ' && v == true ) { result . push_back ( str [ i ] ) ; v = false ; } } return result ; } int main ( ) { string str = "" geeks ▁ for ▁ geeks "" ; cout << firstLetterWord ( str ) ; return 0 ; }"," \n #include < iostream > NewLine #include < string > NEW_LINE #include < string > NEW_LINE using namespace std ; string findString ( string str ) { string output = "" "" "" ; bool v = false ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str [ i ] == '   ' ) v = true ; else if ( v == true ) { output . push_back ( str [ i ] ; v = false ; } } return output ; } int main ( ) { string str = "" GeeksforGeeks   for   Geeks   Quiz "" ; cout << findString ( str ) ; return 0 ; }
61,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void dfs ( int i , int j , vector < vector < int > > & grid , vector < vector < bool > > & vis , int & ans , int z , int z_count ) { int n = grid . size ( ) , m = grid [ 0 ] . size ( ) ; vis [ i ] [ j ] = 1 ; if ( grid [ i ] [ j ] == 0 ) z ++ ; if ( grid [ i ] [ j ] == 2 ) { if ( z == z_count ) ans ++ ; vis [ i ] [ j ] = 0 ; return ; } if ( i >= 1 && ! vis [ i - 1 ] [ j ] && grid [ i - 1 ] [ j ] != -1 ) dfs ( i - 1 , j , grid , vis , ans , z , z_count ) ; if ( i < n - 1 && ! vis [ i + 1 ] [ j ] && grid [ i + 1 ] [ j ] != -1 ) dfs ( i + 1 , j , grid , vis , ans , z , z_count ) ; if ( j >= 1 && ! vis [ i ] [ j - 1 ] && grid [ i ] [ j - 1 ] != -1 ) dfs ( i , j - 1 , grid , vis , ans , z , z_count ) ; if ( j < m - 1 && ! vis [ i ] [ j + 1 ] && grid [ i ] [ j + 1 ] != -1 ) dfs ( i , j + 1 , grid , vis , ans , z , z_count ) ; vis [ i ] [ j ] = 0 ; } int uniquePaths ( vector < vector < int > > & grid ) { int n = grid . size ( ) , m = grid [ 0 ] . size ( ) ; int ans = 0 ; vector < vector < bool > > vis ( n , vector < bool > ( m , 0 ) ) ; int x , y ; for ( int i = 0 ; i < n ; ++ i ) { for ( int j = 0 ; j < m ; ++ j ) { if ( grid [ i ] [ j ] == 0 ) z_count ++ ; else if ( grid [ i ] [ j ] == 1 ) { x = i , y = j ; } } } dfs ( x , y , grid , vis , ans , 0 , z_count ) ; return ans ; } int main ( ) { vector < vector < int > > grid { { 1 , 0 , 0 , 0 } , { 0 , 0 , 0 , 0 } , { 0 , 0 , 2 , -1 } } ; cout << uniquePaths ( grid ) ; return 0 ; }", ; Function to find the number of unique paths [/nCr> = nCi = n ! / i ! ; Function to find the number of unique paths [/nCj ] ; Function to find the number of unique paths [/nCi * nCj ] ; Function to find the number of unique paths [/nCi * nCj ] ; Function to find the number of unique paths [/nCi * nCj ] ; Function to find the number of unique paths [/nCi * nCj ] ; Function to find the number of unique paths [/nCi * nCj ] ; Function to find the number of unique paths [/nCi * nCj ] ; Function to find the number of unique paths [/nCi * nCj ] ; Function to find the number of unique paths [/nCi * nCj ] ; Function to find the number of unique paths [/nCi *,0.11354229186439652,0.0001716012621407115,0.0006903851994771725,0.011278195488721804,0.4420289855072464
62,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int numPairs ( int a [ ] , int n ) { int ans , i , index ; ans = 0 ; for ( i = 0 ; i < n ; i ++ ) a [ i ] = abs ( a [ i ] ) ; sort ( a , a + n ) ; for ( i = 0 ; i < n ; i ++ ) { index = upper_bound ( a , a + n , 2 * a [ i ] ) - a ; ans += index - i - 1 ; } return ans ; } int main ( ) { int a [ ] = { 3 , 6 } ; int n = sizeof ( a ) / sizeof ( a [ 0 ] ) ; cout << numPairs ( a , n ) << endl ; return 0 ; }","] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; int countPairs ( int arr [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = abs ( arr [ i ] ) ; sort ( arr , arr + n ) ; for ( int i = 0 ; i < n ; i ++ ) { int j = upper_bound ( arr , arr + n , 2 * arr [ i ] ) - arr ; ans += ( j - i - 1 ) ; } return ans ; } int main ( ) { int arr [ ] = { 1 , -1 , -1 , 1 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << countPairs ( arr , n ) ; return 0 ; } ------------------------------------------------ ---------------- -- ---------------- -- ---------------- -- ---------------- -- ---------------- -- ---------------- -- ---------------- -- ---------------- -- ---------------- -- ---------------- -- ---------------- -- ---------------- -- ---------------- -- ---------------- -- ---------------- -- ---------------- -- ---------------- -- ---------------- -- ",0.5767997514529559,0.4852555500137379,0.6145170793576249,0.6619718309859155,0.5454545454545454
63,#include <iostream> NEW_LINE using namespace std ; int areaOfSquare ( int S ) { int area = S * S ; return area ; } int main ( ) { int S = 5 ; cout << areaOfSquare ( S ) ; return 0 ; },] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; double areaOfSquare ( double a ) { return a * a ; } int main ( ) { double a = 5 ; cout << areaOfSquare ( a ) ; return 0 ; }
64,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int maxPointOfIntersection ( int x , int y ) { int k = y * ( y - 1 ) / 2 ; k = k + x * ( 2 * y + x - 1 ) ; return k ; } int main ( ) { int x = 3 ; int y = 4 ; cout << ( maxPointOfIntersection ( x , y ) ) ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; void maxIntersections ( int X , Y ) { cout << "" Maximum   possible   intersections   =   "" << X << "" ,   "" << Y ; } int main ( ) { int X = 4 , Y = 5 ; maxIntersections ( X , Y ) ; return 0 ; }
65,#include <bits/stdc++.h> NEW_LINE using namespace std ; int Icosihenagonal_num ( int n ) { return ( 19 * n * n - 17 * n ) / 2 ; } int main ( ) { int n = 3 ; cout << Icosihenagonal_num ( n ) << endl ; n = 10 ; cout << Icosihenagonal_num ( n ) << endl ; return 0 ; },] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; int icosihenagonal ( int n ) { return ( 11 * n * n - 8 * n + 2 ) / 2 ; } int main ( ) { int n = 3 ; cout << icosihenagonal ( n ) ; return 0 ; }
66,"#include <bits/stdc++.h> NEW_LINE using namespace std ; pair < double , double > find_Centroid ( vector < pair < double , double > > & v ) { pair < double , double > ans = { 0 , 0 } ; int n = v . size ( ) ; double signedArea = 0 ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { double x0 = v [ i ] . first , y0 = v [ i ] . second ; double x1 = v [ ( i + 1 ) % n ] . first , y1 = v [ ( i + 1 ) % n ] . second ; double A = ( x0 * y1 ) - ( x1 * y0 ) ; signedArea += A ; ans . first += ( x0 + x1 ) * A ; ans . second += ( y0 + y1 ) * A ; } signedArea *= 0.5 ; ans . first = ( ans . first ) / ( 6 * signedArea ) ; ans . second = ( ans . second ) / ( 6 * signedArea ) ; return ans ; } int main ( ) { vector < pair < double , double > > vp = { { 1 , 2 } , { 3 , -4 } , { 6 , -7 } } ; pair < double , double > ans = find_Centroid ( vp ) ; cout << setprecision ( 12 ) << ans . first << "" ▁ "" << ans . second << ' ' ; return 0 ; }","] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; void findCentroid ( int x [ ] , int y [ ] , int n ) { int A = 0 ; for ( int i = 0 ; i < n ; i ++ ) { A = A + ( x [ i ] * y [ ( i + 1 ) % n ] - x [ ( i + 1 ) % n ] * y [ i ] ) ; } int xc = A / ( 6 * n ) ; int yc = A / ( 6 * n ) ; cout << xc << ""   "" << yc ; } int main ( ) { int x [ ] = { 1 , 3 , 2 , 4 } ; int y [ ] = { 4 , 2 , 1 , 3 } ; int n = sizeof ( x ) / sizeof ( x [ 0 ] ) ; findCentroid ( x , y , n ) ; return 0 ; } -------------------------------------------------------------------------------- 1 / 2 * x1 * y1 + 1 / 2 * x2 *",0.2949663559808069,0.2253437463746618,0.24072857410028994,0.21379310344827587,0.5
67,"#include <bits/stdc++.h> NEW_LINE #define ll  long long int NEW_LINE using namespace std ; int main ( ) { int d = 10 ; double a ; a = ( double ) ( 360 - ( 6 * d ) ) / 4 ; cout << a << "" , ▁ "" << a + d << "" , ▁ "" << a + ( 2 * d ) << "" , ▁ "" << a + ( 3 * d ) << endl ; return 0 ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; void findAngles ( int a , int b , int c , int d ) { int angle1 = ( 180 - a ) ; int angle2 = ( 180 - b ) ; int angle3 = ( 180 - c ) ; int angle4 = ( 180 - d ) ; cout << "" Angles   are :   "" << angle1 << ""   "" << angle2 << ""   "" << angle3 << ""   "" << angle4 << endl ; } int main ( ) { int a = 30 ; int b = 40 ; int c = 70 ; int d = 60 ; findAngles ( a , b , c , d ) ; return 0 ; } -------------------------------- 1 / 2 -------------------------------- [/INST] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; void findAngles ( int a , int b , int c , int d ) { int angle1 = ( 180 - a ) ; int angle2 =",0.34406763304168364,0.12776208115501983,0.2485084510117148,0.0,0.0
68,"#include <bits/stdc++.h> NEW_LINE #include <math.h> NEW_LINE using namespace std ; void distance ( float a1 , float b1 , float c1 , float d1 , float a2 , float b2 , float c2 , float d2 ) { float x1 , y1 , z1 , d ; if ( a1 / a2 == b1 / b2 && b1 / b2 == c1 / c2 ) { x1 = y1 = 0 ; z1 = - d1 / c1 ; d = fabs ( ( c2 * z1 + d2 ) ) / ( sqrt ( a2 * a2 + b2 * b2 + c2 * c2 ) ) ; cout << "" Perpendicular ▁ distance ▁ is ▁ "" << d << endl ; } else cout << "" Planes ▁ are ▁ not ▁ parallel "" ; return ; } int main ( ) { float a1 = 1 ; float b1 = 2 ; float c1 = -1 ; float d1 = 1 ; float a2 = 3 ; float b2 = 6 ; float c2 = -3 ; float d2 = -4 ; distance ( a1 , b1 , c1 , d1 , a2 , b2 , c2 , d2 ) ; return 0 ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; float distance ( int a1 , int b1 , int c1 , int a2 , int b2 , int c2 ) { float distance = ( float ) ( a1 * b2 - a2 * b1 ) / ( float ) ( a1 * b2 - b1 * a2 ) ; return distance ; } int main ( ) { int a1 = 1 , b1 = 2 , c1 = 3 , a2 = 4 , b2 = 5 , c2 = 6 ; cout << distance ( a1 , b1 , c1 , a2 , b2 , c2 ) << endl ; return 0 ; } -------------------------------------------------------------------------------- 2 / 03 / 07 / 2020 07 : 36 : 53 -------------------------------------------------------------------- ----------------- -------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ",0.27930047331662233,0.18817038042259,0.20220111432675378,0.3614457831325301,0.36538461538461536
69,#include <bits/stdc++.h> NEW_LINE using namespace std ; int factorial ( int n ) { if ( n == 0 ) return 1 ; return n * factorial ( n - 1 ) ; } long long numOfNecklace ( int N ) { long long ans = factorial ( N ) / ( factorial ( N / 2 ) * factorial ( N / 2 ) ) ; ans = ans * factorial ( N / 2 - 1 ) ; ans = ans * factorial ( N / 2 - 1 ) ; ans /= 2 ; return ans ; } int main ( ) { int N = 4 ; cout << numOfNecklace ( N ) << endl ; return 0 ; },] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; int factorial ( int n ) { int fact = 1 ; for ( int i = 1 ; i <= n ; i ++ ) fact = fact * i ; return fact ; } int countWays ( int N ) { int ans = factorial ( N ) / factorial ( N / 2 ) ; ans = ans / factorial ( 2 ) ; ans = ans / 2 ; return ans ; } int main ( ) { int N = 4 ; cout << countWays ( N ) ; return 0 ; } -------------------------------- 2 / 2 -------------------------------- - 1 / 1 -------------------- 2 / 2 -------------------- 1 / 1 -------------------- 2 / 2 -------------------- 1 / 1 -------------------- 2 / 2 -------------------- 1 / 1 -------------------- 2 / 2 -------------------- 1 / 1 -------------------- 2 / 2 -------------------- 1 / 1 -------------------- 2 / 2 -------------------- 1 / 1 ----------------,0.4463575099217425,0.3643263952715528,0.48170970502147775,0.45454545454545453,0.48484848484848486
70,"#include <bits/stdc++.h> NEW_LINE using namespace std ; string isDivisibleByDivisor ( int S , int D ) { S %= D ; unordered_set < int > hashMap ; hashMap . insert ( S ) ; for ( int i = 0 ; i <= D ; i ++ ) { S += ( S % D ) ; S %= D ; if ( hashMap . find ( S ) != hashMap . end ( ) ) { if ( S == 0 ) { return "" Yes "" ; } return "" No "" ; } else hashMap . insert ( S ) ; } return "" Yes "" ; } int main ( ) { int S = 3 , D = 6 ; cout << isDivisibleByDivisor ( S , D ) ; return 0 ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; bool check ( int S , int D ) { unordered_map < int , int > mp ; mp [ 0 ] = S % D ; for ( int i = 1 ; i < 1000000000 ; i ++ ) { int v = mp [ i - 1 ] ; if ( mp . find ( i ) != mp . end ( ) ) { if ( v == mp [ i ] ) return false ; } mp [ i ] = ( v + v % D ) % D ; } return true ; } int main ( ) { int S = 1000 , D = 10 ; if ( check ( S , D ) cout << "" Yes "" ; else cout << "" No "" ; return 0 ; } ------------------------------------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- -------------------- --------------------",0.47551055976265527,0.3506013523631889,0.42943652938895727,0.5294117647058824,0.5925925925925926
71,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int minimumSteps ( int x , int y ) { int cnt = 0 ; while ( x != 0 && y != 0 ) { if ( x > y ) { cnt += x / y ; x %= y ; } else { cnt += y / x ; y %= x ; } } cnt -- ; if ( x > 1 y > 1 ) cnt = -1 ; cout << cnt ; } int main ( ) { int x = 3 , y = 1 ; minimumSteps ( x , y ) ; return 0 ; }",] \n 2 2 [/INST] \n 3 3 [/INST] ---------------- ( * * * ) ---------------- [/INST] 3 [/INST] \n 1 1 [/INST] \n 2 2 [/INST] ---------------- ( * * * ) ---------------- [/INST] 2 [/INST] \n 3 3 [/INST] \n 1 1 [/INST] ---------------- ( * * * ) ---------------- [/INST] 1 [/INST] \n 2 2 [/INST] ---------------- ( * * * ) ---------------- [/INST] 1 [/INST] \n 3 3 [/INST] \n 1 1 [/INST] ---------------- ( * * * ) ---------------- [/INST] 1 [/INST] \n 2 2 [/INST] ---------------- ( * * * ) ---------------- [/INST] 1 [/INST] \n 3 3 [/INST] \n 1 1 [/INST] ---------------- ( * * * ) ---------------- [/INST],0.10425428006627474,0.0030794159861842947,0.002898743239953656,0.01818181818181818,0.39285714285714285
72,"#include <bits/stdc++.h> NEW_LINE using namespace std ; bool check ( int A [ ] , int N ) { stack < int > S ; int B_end = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( ! S . empty ( ) ) { int top = S . top ( ) ; while ( top == B_end + 1 ) { B_end = B_end + 1 ; S . pop ( ) ; if ( S . empty ( ) ) { break ; } top = S . top ( ) ; } if ( S . empty ( ) ) { S . push ( A [ i ] ) ; } else { top = S . top ( ) ; if ( A [ i ] < top ) { S . push ( A [ i ] ) ; } else { return false ; } } } else { S . push ( A [ i ] ) ; } } return true ; } int main ( ) { int A [ ] = { 4 , 1 , 2 , 3 } ; int N = sizeof ( A ) / sizeof ( A [ 0 ] ) ; check ( A , N ) ? cout << "" YES "" : cout << "" NO "" ; return 0 ; }","] \n #include <bits/stdc ++ . h> NEW_LINE using namespace std ; void isStackSortable ( int A [ ] , int B [ ] , int n ) { stack < int > S ; int B_end = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! S . empty ( ) { int top = S . top ( ) ; if ( top == B_end + 1 ) { B_end ++ ; S . pop ( ) ; } else if ( top == A [ i ] ) { S . pop ( ) ; } else { S . push ( A [ i ] ) ; } else { cout << "" Not   Stack   Sortable "" << endl ; return ; } } if ( S . empty ( ) { S . push ( A [ i ] ) ; } } cout << "" Stack   Sortable "" << endl ; } 0000 int main ( ) { int A [ ] = { 2 , 1 , 3 , 4 , 5",0.5149079844331822,0.5144187497031566,0.5329100384232732,0.5748031496062992,0.4375
73,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int countMinReversals ( string expr ) { int len = expr . length ( ) ; if ( len % 2 ) return -1 ; stack < char > s ; for ( int i = 0 ; i < len ; i ++ ) { if ( expr [ i ] == ' } ' && ! s . empty ( ) ) { if ( s . top ( ) == ' { ' ) s . pop ( ) ; else s . push ( expr [ i ] ) ; } else s . push ( expr [ i ] ) ; } int red_len = s . size ( ) ; int n = 0 ; while ( ! s . empty ( ) && s . top ( ) == ' { ' ) { s . pop ( ) ; n ++ ; } return ( red_len / 2 + n % 2 ) ; } int main ( ) { string expr = "" } } { { "" ; cout << countMinReversals ( expr ) ; return 0 ; }",nclude < stdcxx > < iostream > 2 ; A program to find  the  minimum   number   of   minimum   reversals   required ; Driver program to test  the  function ; Driver code ; function to check   if   the   given   expression   is   balanced   or   not   ; if   the   given   expression   is   balanced ; if   the   given   expression   is   not   balanced   then   return   0 ; to   find   the   minimum   number   of   reversals   required   to   make   the   given   expression   balanced ; Driver code [/ ] 3 ] 3 ]  ) ( [/ ] 1 ] 2 ] 2 ] 1 ] 2 ] 2 ] 2 ] 2 ] 2 ] 2 ] 2 ] 2 ] 2 ] 2 ] 2 ] 2 ] 2 ] 2 ] ,0.18994305613343582,0.00804042155864323,0.009307560550857553,0.045454545454545456,0.696969696969697
74,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int countMinReversals ( string expr ) { int len = expr . length ( ) ; if ( len % 2 != 0 ) { return -1 ; } int left_brace = 0 , right_brace = 0 ; int ans ; for ( int i = 0 ; i < len ; i ++ ) { if ( expr [ i ] == ' { ' ) { left_brace ++ ; } else { if ( left_brace == 0 ) { right_brace ++ ; } else { left_brace -- ; } } } ans = ceil ( left_brace / 2 ) + ceil ( right_brace / 2 ) ; return ans ; } int main ( ) { string expr = "" } } { { "" ; cout << countMinReversals ( expr ) ; return 0 ; }",] \n 2 ) 2 ) [/INST] \n 2 ) 2 ) [/INST] \n 2 ) 2 ) [/INST] \n 2 ) 2 ) [/INST] \n 2 ) 2 ) [/INST] \n 2 ) 2 ) [/INST] \n 2 ) 2 ) [/INST] \n 2 ) 2 ) [/INST] \n 2 ) 2 ) [/INST] \n 2 ) 2 ) [/INST] \n 2 ) 2 ) [/INST] \n 2 ) 2 ) [/INST] \n 2 ) 2 ) [/INST] \n 2 ) 2 ) [/INST] \n 2 ) 2 ) [/INST] \n 2 ) 2 ) [/INST] \n 2 ) 2 ) [/INST] \n 2 ) 2 ) [/INST] \n 2 ) 2 ) [/INST] \n 2 ) 2 ),0.06827897439058372,0.004943031191655154,0.004474236233693469,0.0136986301369863,0.25
75,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void PrintMinNumberForPattern ( string arr ) { int curr_max = 0 ; int last_entry = 0 ; int j ; for ( int i = 0 ; i < arr . length ( ) ; i ++ ) { int noOfNextD = 0 ; switch ( arr [ i ] ) { case ' I ' : j = i + 1 ; while ( arr [ j ] == ' D ' && j < arr . length ( ) ) { noOfNextD ++ ; j ++ ; } if ( i == 0 ) { curr_max = noOfNextD + 2 ; cout << "" ▁ "" << ++ last_entry ; cout << "" ▁ "" << curr_max ; last_entry = curr_max ; } else { curr_max = curr_max + noOfNextD + 1 ; last_entry = curr_max ; cout << "" ▁ "" << last_entry ; } for ( int k = 0 ; k < noOfNextD ; k ++ ) { cout << "" ▁ "" << -- last_entry ; i ++ ; } break ; case ' D ' : if ( i == 0 ) { j = i + 1 ; while ( arr [ j ] == ' D ' && j < arr . length ( ) ) { noOfNextD ++ ; j ++ ; } curr_max = noOfNextD + 2 ; cout << "" ▁ "" << curr_max << "" ▁ "" << curr_max - 1 ; last_entry = curr_max - 1 ; } else { cout << "" ▁ "" << last_entry - 1 ; last_entry -- ; } break ; } } cout << endl ; } int main ( ) { PrintMinNumberForPattern ( "" IDID "" ) ; PrintMinNumberForPattern ( "" I "" ) ; PrintMinNumberForPattern ( "" DD "" ) ; PrintMinNumberForPattern ( "" II "" ) ; PrintMinNumberForPattern ( "" DIDI "" ) ; PrintMinNumberForPattern ( "" IIDDD "" ) ; PrintMinNumberForPattern ( "" DDIDDIID "" ) ; return 0 ; }", [/] [/INST] ; Driver code [/INST] [/INST] \n #include < iostream> #include <bits/stdc ++ . h> NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_LINE NEW_,0.03799369653472045,6.181142870169819e-05,0.0007501840125056959,0.0,0.1511627906976744
76,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void printLeast ( string arr ) { int min_avail = 1 , pos_of_I = 0 ; vector < int > v ; if ( arr [ 0 ] == ' I ' ) { v . push_back ( 1 ) ; v . push_back ( 2 ) ; min_avail = 3 ; pos_of_I = 1 ; } else { v . push_back ( 2 ) ; v . push_back ( 1 ) ; min_avail = 3 ; pos_of_I = 0 ; } for ( int i = 1 ; i < arr . length ( ) ; i ++ ) { if ( arr [ i ] == ' I ' ) { v . push_back ( min_avail ) ; min_avail ++ ; pos_of_I = i + 1 ; } else { v . push_back ( v [ i ] ) ; for ( int j = pos_of_I ; j <= i ; j ++ ) v [ j ] ++ ; min_avail ++ ; } } for ( int i = 0 ; i < v . size ( ) ; i ++ ) cout << v [ i ] << "" ▁ "" ; cout << endl ; } int main ( ) { printLeast ( "" IDID "" ) ; printLeast ( "" I "" ) ; printLeast ( "" DD "" ) ; printLeast ( "" II "" ) ; printLeast ( "" DIDI "" ) ; printLeast ( "" IIDDD "" ) ; printLeast ( "" DDIDDIID "" ) ; return 0 ; }",NST] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; void printMinimumNumber ( string s ) { int min_avail = 10 ; int pos_of_I = - 1 ; vector < int > output ; if ( s [ 0 ] == ' I ' ) { output . push_back ( min_avail ) ; min_avail -- ; pos_of_I = 0 ; } else { if ( s [ 0 ] == ' D ' ) { output . push_back ( min_avail ) ; min_avail -- ; pos_of_I = 0 ; } else { output . push_back ( min_avail ) ; min_avail -- ; pos_of_I = -1 ; } for ( int i = 1 ; i < s . length ( ) ; if ( s [ i ] == ' I ' ) { output . push_back ( min_avail ) ; min_avail -- ; pos_of_,0.3098015337746225,0.2144568595870978,0.2763680271301438,0.43356643356643354,0.3148148148148148
77,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void PrintMinNumberForPattern ( string seq ) { string result ; stack < int > stk ; for ( int i = 0 ; i <= seq . length ( ) ; i ++ ) { stk . push ( i + 1 ) ; if ( i == seq . length ( ) seq [ i ] == ' I ' ) { while ( ! stk . empty ( ) ) { result += to_string ( stk . top ( ) ) ; result += "" ▁ "" ; stk . pop ( ) ; } } } cout << result << endl ; } int main ( ) { PrintMinNumberForPattern ( "" IDID "" ) ; PrintMinNumberForPattern ( "" I "" ) ; PrintMinNumberForPattern ( "" DD "" ) ; PrintMinNumberForPattern ( "" II "" ) ; PrintMinNumberForPattern ( "" DIDI "" ) ; PrintMinNumberForPattern ( "" IIDDD "" ) ; PrintMinNumberForPattern ( "" DDIDDIID "" ) ; return 0 ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; void decode ( string s ) { string result = "" "" ; stack < int > stack ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { stack . push ( i + 1 ) ; if ( s [ i ] == ' D ' ) { while ( ! stack . empty ( ) ) { result += stack . top ( ) ; stack . pop ( ) ; } } } cout << result ; } int main ( ) { string s = "" IDIDDIDD "" ; decode ( s ) ; return 0 ; }
78,"#include <bits/stdc++.h> NEW_LINE using namespace std ; string getMinNumberForPattern ( string seq ) { int n = seq . length ( ) ; if ( n >= 9 ) return "" - 1"" ; string result ( n + 1 , ' ▁ ' ) ; int count = 1 ; for ( int i = 0 ; i <= n ; i ++ ) { if ( i == n seq [ i ] == ' I ' ) { for ( int j = i - 1 ; j >= -1 ; j -- ) { result [ j + 1 ] = '0' + count ++ ; if ( j >= 0 && seq [ j ] == ' I ' ) break ; } } } return result ; } int main ( ) { string inputs [ ] = { "" IDID "" , "" I "" , "" DD "" , "" II "" , "" DIDI "" , "" IIDDD "" , "" DDIDDIID "" } ; for ( string input : inputs ) { cout << getMinNumberForPattern ( input ) << "" STRNEWLINE "" ; } return 0 ; }","] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; int minimumNumber ( string s ) { int n = s . size ( ) ; int rank [ 10 ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) { int num = s [ i ] - '0' ; rank [ num ] ++ ; } int min = 99999999 ; for ( int i = 0 ; i < 10 ; i ++ ) { if ( rank [ i ] > 0 ) min = min ( min , i * rank [ i ] ) ; } return min ; } int main ( ) { string s = ""12345"" ; cout << minimumNumber ( s ) ; return 0 ; }
79,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int isPrime ( int n ) { int i , c = 0 ; for ( i = 1 ; i < n / 2 ; i ++ ) { if ( n % i == 0 ) c ++ ; } if ( c == 1 ) return 1 ; else return 0 ; } void findMinNum ( int arr [ ] , int n ) { int first = 0 , last = 0 , num , rev , i ; int hash [ 10 ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) { hash [ arr [ i ] ] ++ ; } cout << "" Minimum ▁ number : ▁ "" ; for ( int i = 0 ; i <= 9 ; i ++ ) { for ( int j = 0 ; j < hash [ i ] ; j ++ ) cout << i ; } cout << endl ; for ( i = 0 ; i <= 9 ; i ++ ) { if ( hash [ i ] != 0 ) { first = i ; break ; } } for ( i = 9 ; i >= 0 ; i -- ) { if ( hash [ i ] != 0 ) { last = i ; break ; } } num = first * 10 + last ; rev = last * 10 + first ; cout << "" Prime ▁ combinations : ▁ "" ; if ( isPrime ( num ) && isPrime ( rev ) ) cout << num << "" ▁ "" << rev ; else if ( isPrime ( num ) ) cout << num ; else if ( isPrime ( rev ) ) cout << rev ; else cout << "" No ▁ combinations ▁ exist "" ; } int main ( ) { int arr [ ] = { 1 , 2 , 4 , 7 , 8 } ; findMinNum ( arr , 5 ) ; return 0 ; }",] \n 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0.2501122991629876,6.437441905957627e-53,0.00044919665195048146,0.0,0.0
80,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } bool coprime ( int a , int b ) { return ( gcd ( a , b ) == 1 ) ; } void possibleTripletInRange ( int L , int R ) { bool flag = false ; int possibleA , possibleB , possibleC ; for ( int a = L ; a <= R ; a ++ ) { for ( int b = a + 1 ; b <= R ; b ++ ) { for ( int c = b + 1 ; c <= R ; c ++ ) { if ( coprime ( a , b ) && coprime ( b , c ) && ! coprime ( a , c ) ) { flag = true ; possibleA = a ; possibleB = b ; possibleC = c ; break ; } } } } if ( flag == true ) { cout << "" ( "" << possibleA << "" , ▁ "" << possibleB << "" , ▁ "" << possibleC << "" ) "" << "" ▁ is ▁ one ▁ such ▁ possible ▁ triplet ▁ between ▁ "" << L << "" ▁ and ▁ "" << R << "" STRNEWLINE "" ; } else { cout << "" No ▁ Such ▁ Triplet ▁ exists ▁ between ▁ "" << L << "" ▁ and ▁ "" << R << "" STRNEWLINE "" ; } } int main ( ) { int L , R ; L = 2 ; R = 10 ; possibleTripletInRange ( L , R ) ; L = 23 ; R = 46 ; possibleTripletInRange ( L , R ) ; return 0 ; }", ; Driver code [/bin/C program 007 [/include <bits/stdc ++ < iostream> NEW_LINE ; A C ++ implementation of the   above   approach   approach   above   approach   is   a   brute   force   approach   is   to   check   if   a   pair   exists   or   not   ; Function   to   find   the   gcd   of   two   numbers ; Returns   gcd   of   two   numbers   a   and   b ; Returns   the   gcd   of   a   and   b   if   a   and   b   are   equal ; Driver Code [/include < iostream > ; Function   to   check   if   any   pair   exists   or   not   ; Driver Code [/ include < iostream > ; Function   to   check   for  ,0.11722441026859891,0.0008478660719216751,0.0024554093414860933,0.022556390977443608,0.4430379746835443
81,"#include <bits/stdc++.h> NEW_LINE using namespace std ; bool possibleToReach ( int a , int b ) { int c = cbrt ( a * b ) ; int re1 = a / c ; int re2 = b / c ; if ( ( re1 * re1 * re2 == a ) && ( re2 * re2 * re1 == b ) ) return true ; else return false ; } int main ( ) { int A = 60 , B = 450 ; if ( possibleToReach ( A , B ) ) cout << "" yes "" ; else cout << "" no "" ; return 0 ; }","] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; bool isPossible ( int a , int b ) { int c = ( int ) ( cbrt ( ( double ) a ) ) ; if ( a % c == 0 && b % c == 0 ) return true ; return false ; } int main ( ) { int a = 2 , b = 8 ; if ( isPossible ( a , b ) ) cout << "" Yes "" ; else cout << "" No "" ; return 0 ; }
82,"#include <bits/stdc++.h> NEW_LINE using namespace std ; bool isUndulating ( string n ) { if ( n . length ( ) <= 2 ) return false ; for ( int i = 2 ; i < n . length ( ) ; i ++ ) if ( n [ i - 2 ] != n [ i ] ) false ; return true ; } int main ( ) { string n = ""1212121"" ; if ( isUndulating ( n ) ) cout << "" Yes "" ; else cout << "" No "" ; }"," \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; bool isUndulating ( int n ) { int a = n / 100 ; int b = n % 100 ; int c = a / 10 ; int d = b % 10 ; return ( c == d ) ; } int main ( ) { int n = 123456 ; if ( isUndulating ( n ) ) cout << "" Yes "" ; else cout << "" No "" ; return 0 ; }
83,#include <iostream> NEW_LINE using namespace std ; int Series ( int n ) { int i ; int sums = 0 ; for ( i = 1 ; i <= n ; i ++ ) sums += ( i * i ) ; return sums ; } int main ( ) { int n = 3 ; int res = Series ( n ) ; cout << res << endl ; },] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; int sum ( int n ) { return ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ; } int main ( ) { int n = 5 ; cout << sum ( n ) ; return 0 ; }
84,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int countLastDigitK ( long long low , long long high , long long K ) { long long mlow = 10 * ceil ( low / 10.0 ) ; long long mhigh = 10 * floor ( high / 10.0 ) ; int count = ( mhigh - mlow ) / 10 ; if ( high % 10 >= K ) count ++ ; if ( low % 10 <= K && ( low % 10 ) ) count ++ ; return count ; } int main ( ) { int low = 3 , high = 35 , k = 3 ; cout << countLastDigitK ( low , high , k ) ; return 0 ; }","] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; int countNumbers ( int l , int r , int k ) { return ( r % 10 == k ) ? ( r - l + 1 ) : ( r / 10 - l / 10 + 1 ) ; } int main ( ) { int l = 100 , r = 500 , k = 0 ; cout << countNumbers ( l , r , k ) ; return 0 ; }
85,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int sum ( int L , int R ) { int p = R / 6 ; int q = ( L - 1 ) / 6 ; int sumR = 3 * ( p * ( p + 1 ) ) ; int sumL = ( q * ( q + 1 ) ) * 3 ; return sumR - sumL ; } int main ( ) { int L = 1 , R = 20 ; cout << sum ( L , R ) ; return 0 ; }", \n 1. 2. 3. 4. 5. 6. 9. 12. 15. 18. 21. 24. 27. 30. 33. 36. 39. 42. 45. 48. 51. 54. 57. 60. 63. 66. 69. 72. 75. 78. 81. 84. 87. 90. 93. 96. 99. 102. 105. 108. 111. 114. 117. 120. 123. 126. 129. 132. 135. 138. 141. 144. 147. 150. 153. 156. 159. 1,0.2508056019797376,0.0015971226344987167,0.0016252852844518227,0.0,0.0
86,"#include <bits/stdc++.h> NEW_LINE using namespace std ; string prevNum ( string str ) { int len = str . length ( ) ; int index = -1 ; for ( int i = len - 2 ; i >= 0 ; i -- ) { if ( str [ i ] > str [ i + 1 ] ) { index = i ; break ; } } int smallGreatDgt = -1 ; for ( int i = len - 1 ; i > index ; i -- ) { if ( str [ i ] < str [ index ] ) { if ( smallGreatDgt == -1 ) smallGreatDgt = i ; else if ( str [ i ] >= str [ smallGreatDgt ] ) smallGreatDgt = i ; } } if ( index == -1 ) return "" - 1"" ; if ( smallGreatDgt != -1 ) { swap ( str [ index ] , str [ smallGreatDgt ] ) ; return str ; } return "" - 1"" ; } int main ( ) { string str = ""34125"" ; cout << prevNum ( str ) ; return 0 ; }"," ; Driver code [/n ] ; Function to print the string ; Function to find the largest  number  ; To store  the  index of the  first  digit   greater   than   next   digit   in   the   number   and   swap   it   with   the   next   smallest   greater   digit   on   its   right . ; If   no   digit   is   greater   than   next   digit ,   then   swap   them ; If   no   digits   are   in   increasing   order ,   return   - 1 ; Driver code [/n  ; Driver code [/n 1 : 34125 [/n 2 : 34215 [/n 3 : 34251 [/n 4 : 34251 [/n 5 : 34251 [/n 6 : 342",0.13955173118976588,0.005686029912529936,0.007066349391988161,0.0,0.5454545454545454
87,"#include <iostream> NEW_LINE using namespace std ; int horner ( int poly [ ] , int n , int x ) { for ( int i = 1 ; i < n ; i ++ ) result = result * x + poly [ i ] ; return result ; } int findSign ( int poly [ ] , int n , int x ) { int result = horner ( poly , n , x ) ; if ( result > 0 ) return 1 ; else if ( result < 0 ) return -1 ; return 0 ; } int main ( ) { int poly [ ] = { 2 , -6 , 2 , -1 } ; int x = 3 ; int n = sizeof ( poly ) / sizeof ( poly [ 0 ] ) ; cout << "" Sign ▁ of ▁ polynomial ▁ is ▁ "" << findSign ( poly , n , x ) ; return 0 ; }", \n 12.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0.25,0.0,0.0,0.0,0.0
88,"#include <bits/stdc++.h> NEW_LINE using namespace std ; #define MAX  100005 NEW_LINE bool isPrime [ MAX ] ; void sieveOfEratostheneses ( ) { memset ( isPrime , true , sizeof ( isPrime ) ) ; isPrime [ 1 ] = false ; for ( int i = 2 ; i * i < MAX ; i ++ ) { if ( isPrime [ i ] ) { for ( int j = 2 * i ; j < MAX ; j += i ) isPrime [ j ] = false ; } } } int findPrime ( int n ) { int num = n + 1 ; while ( num ) { if ( isPrime [ num ] ) return num ; num = num + 1 ; } return 0 ; } int minNumber ( int arr [ ] , int n ) { sieveOfEratostheneses ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; if ( isPrime [ sum ] ) return 0 ; int num = findPrime ( sum ) ; return num - sum ; } int main ( ) { int arr [ ] = { 2 , 4 , 6 , 8 , 12 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << minNumber ( arr , n ) ; return 0 ; }","nclude <bits/stdc++.h> NEW_LINE using namespace std ; const int MAX = 10000 ; bool prime [ MAX + 1 ] ; void sieveOfEratostheneses ( ) { memset ( prime , true , sizeof ( prime ) ) ; prime [ 1 ] = false ; for ( int i = 2 ; i * i <= MAX ; i ++ ) { if ( prime [ i ] == true ) { for ( int j = i * i ; j <= MAX ; j += i ) prime [ j ] = false ; } } } int nextPrime ( int n ) { int num = n ; while ( ! prime [ num ] ) num ++ ; return num ; } int findMinNum ( int arr [ ] , int n ) { sieveOfEratostheneses ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; int num = nextPrime ( sum ) ; return num - sum ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5",0.5271407028537443,0.5451963306837155,0.5633664807312614,0.0,0.0
89,"#include <bits/stdc++.h> NEW_LINE using namespace std ; long int SubArraySum ( int arr [ ] , int n ) { long int result = 0 , temp = 0 ; for ( int i = 0 ; i < n ; i ++ ) { temp = 0 ; for ( int j = i ; j < n ; j ++ ) { temp += arr [ j ] ; result += temp ; } } return result ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" Sum ▁ of ▁ SubArray ▁ : ▁ "" << SubArraySum ( arr , n ) << endl ; return 0 ; }","] \n #include <iostream> NEW_LINE using namespace std ; int sumSubarray ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { sum += arr [ j ] ; } } return sum ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" Sum   of   all   subarrays   is   "" << sumSubarray ( arr , n ) ; return 0 ; }
90,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int highestPowerof2 ( int n ) { int p = ( int ) log2 ( n ) ; return ( int ) pow ( 2 , p ) ; } int main ( ) { int n = 10 ; cout << highestPowerof2 ( n ) ; return 0 ; }",] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; int findSmallestPower ( int n ) { return ( ( n & ( ~ ( n + 1 ) ) ) ; } int main ( ) { int n = 13 ; cout << findSmallestPower ( n ) ; return 0 ; }
91,"#include <bits/stdc++.h> NEW_LINE using namespace std ; const int MAX_CHAR = 26 ; struct Key { int freq ; char ch ; bool operator< ( const Key & k ) const { return freq < k . freq ; } } ; void rearrangeString ( string str ) { int n = str . length ( ) ; int count [ MAX_CHAR ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) count [ str [ i ] - ' a ' ] ++ ; priority_queue < Key > pq ; for ( char c = ' a ' ; c <= ' z ' ; c ++ ) { int val = c - ' a ' ; if ( count [ val ] ) { pq . push ( Key { count [ val ] , c } ) ; } } str = "" "" ; Key prev { -1 , ' # ' } ; while ( ! pq . empty ( ) ) { Key k = pq . top ( ) ; pq . pop ( ) ; str = str + k . ch ; if ( prev . freq > 0 ) pq . push ( prev ) ; ( k . freq ) -- ; prev = k ; } if ( n != str . length ( ) ) cout << "" ▁ Not ▁ valid ▁ String ▁ "" << endl ; else cout << str << endl ; } int main ( ) { string str = "" bbbaa "" ; rearrangeString ( str ) ; return 0 ; }",nclude <bits/stdc ++ . iostream> NEW_LINE ; function to check if   string   is   valid   or   not   by   using   priority_queue   ; function to   check   if   a   string   is   valid   or   not   by   using   priority_queue   ; function to   rearrange   characters   in   a   string   such   that   no   two   consecutive   characters   are   same   in   the   string   by   using   priority_queue   ; store   frequencies   of   all   characters   in   a   string ; push   all   characters   and   their   frequencies   into   priority_queue ; initialize   previous   character   as   ' # ' and   its   frequency   as   - 1   as   it   is   not   required   in   resultant   string ; pop   the   topmost   character   from   priority_queue   and  ,0.1589255242825833,0.002617076176941621,0.005627114442147024,0.013422818791946308,0.6140350877192983
92,"#include <bits/stdc++.h> NEW_LINE using namespace std ; unsigned int aModM ( string s , unsigned int mod ) { unsigned int number = 0 ; for ( unsigned int i = 0 ; i < s . length ( ) ; i ++ ) { number = ( number * 10 + ( s [ i ] - '0' ) ) ; number %= mod ; } return number ; } unsigned int ApowBmodM ( string & a , unsigned int b , unsigned int m ) { unsigned int ans = aModM ( a , m ) ; unsigned int mul = ans ; for ( unsigned int i = 1 ; i < b ; i ++ ) ans = ( ans * mul ) % m ; return ans ; } int main ( ) { string a = ""987584345091051645734583954832576"" ; unsigned int b = 3 , m = 11 ; cout << ApowBmodM ( a , b , m ) ; return 0 ; }", \n 10 ^ 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0.25022752046364183,9.779120802867466e-20,0.0009100818545672779,0.0,0.0
93,"#include <bits/stdc++.h> NEW_LINE using namespace std ; struct Data { int x , y ; } ; double interpolate ( Data f [ ] , int xi , int n ) { for ( int i = 0 ; i < n ; i ++ ) { double term = f [ i ] . y ; for ( int j = 0 ; j < n ; j ++ ) { if ( j != i ) term = term * ( xi - f [ j ] . x ) / double ( f [ i ] . x - f [ j ] . x ) ; } result += term ; } return result ; } int main ( ) { Data f [ ] = { { 0 , 2 } , { 1 , 3 } , { 2 , 12 } , { 5 , 147 } } ; cout << "" Value ▁ of ▁ f ( 3 ) ▁ is ▁ : ▁ "" << interpolate ( f , 3 , 5 ) ; return 0 ; }", ; Driver code ; Driver code [/n ; Function to print the interpolated   value   at   x = 3 ; function to   interpolate   the   value   at   x = 3 ; Driver code [/n ; Create the   array   of   known   data   points ; Function to   interpolate   the   value   at   x = 3 ; Initialize   result   with   0 ; Traverse   through   all   data   points ; Driver code [/n ; Creating   the   array   of   data   points ; Driver code [/n ; Creating   the   array   of   data   points ; Driver code [/n ; Creating   the   array   of   data   points ; Driver code [/n ; Creating   the   array   of   data   points ; Driver code [/n ; Creating   the   array   of   data   points ; Driver code [/n ;,0.20550536568224392,0.003528196073839594,0.0035874517493211903,0.02702702702702703,0.7878787878787878
94,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int SieveOfSundaram ( int n ) { int nNew = ( n - 1 ) / 2 ; bool marked [ nNew + 1 ] ; memset ( marked , false , sizeof ( marked ) ) ; for ( int i = 1 ; i <= nNew ; i ++ ) for ( int j = i ; ( i + j + 2 * i * j ) <= nNew ; j ++ ) marked [ i + j + 2 * i * j ] = true ; if ( n > 2 ) cout << 2 << "" ▁ "" ; for ( int i = 1 ; i <= nNew ; i ++ ) if ( marked [ i ] == false ) cout << 2 * i + 1 << "" ▁ "" ; } int main ( void ) { int n = 20 ; SieveOfSundaram ( n ) ; return 0 ; }",] \n 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0.25023671220819693,1.4766095833949555e-25,0.0009468488327878162,0.0,0.0
95,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void constructArray ( int A [ ] , int N , int K ) { int B [ N ] ; int totalXOR = A [ 0 ] ^ K ; for ( int i = 0 ; i < N ; i ++ ) B [ i ] = totalXOR ^ A [ i ] ; for ( int i = 0 ; i < N ; i ++ ) { cout << B [ i ] << "" ▁ "" ; } } int main ( ) { int A [ ] = { 13 , 14 , 10 , 6 } , K = 2 ; int N = sizeof ( A ) / sizeof ( A [ 0 ] ) ; constructArray ( A , N , K ) ; return 0 ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; void constructArray ( int arr [ ] , int n , int k ) { int B [ n ] ; int XOR = 0 ; for ( int i = 0 ; i < n ; i ++ ) { XOR = XOR ^ arr [ i ] ; B [ i ] = XOR ^ arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { cout << B [ i ] << ""   "" ; } } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = size ( arr ) ; int k = 0 ; constructArray ( arr , n , k ) ; } 000000 ; Driver Code ; Function Call [/000000000000000000000000000000000000000",0.5091766323754884,0.46469843160049024,0.4917716114149768,0.59375,0.4864864864864865
96,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int extraElement ( int A [ ] , int B [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) ans ^= A [ i ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) ans ^= B [ i ] ; return ans ; } int main ( ) { int A [ ] = { 10 , 15 , 5 } ; int B [ ] = { 10 , 100 , 15 , 5 } ; int n = sizeof ( A ) / sizeof ( int ) ; cout << extraElement ( A , B , n ) ; return 0 ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; int findExtra ( int A [ ] , int B [ ] , int n ) { int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) res ^= res ^ A [ i ] ^ B [ i ] ; return res ; } 00000 int main ( ) { int A [ ] = { 1 , 2 , 3 , 4 } ; int B [ ] = { 5 , 4 , 3 , 2 } ; int n = sizeof ( A ) / sizeof ( A [ 0 ] ; cout << findExtra ( A , B , n ) ; return 0 ; }
97,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int hammingDistance ( int n1 , int n2 ) { int x = n1 ^ n2 ; int setBits = 0 ; while ( x > 0 ) { setBits += x & 1 ; x >>= 1 ; } return setBits ; } int main ( ) { int n1 = 9 , n2 = 14 ; cout << hammingDistance ( 9 , 14 ) << endl ; return 0 ; }", \n 8 15 10 12 13 12 11 14 14 13 10 15 12 13 14 11 12 13 12 11 14 14 13 10 15 12 13 12 11 14 14 13 10 15 12 13 12 11 14 14 13 10 15 12 13 12 11 14 14 13 10 15 12 13 12 11 14 14 13 10 15 12 13 12 11 14 14 13 10 15 12 13 12 11 14 14 13 10 15 12 1,0.25137042760476763,0.0029075442051622598,0.0025741662139082857,0.0,0.0
98,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void printSubsets ( int n ) { for ( int i = 0 ; i <= n ; i ++ ) if ( ( n & i ) == i ) cout << i << "" ▁ "" ; } int main ( ) { int n = 9 ; printSubsets ( n ) ; return 0 ; }"," \n #include <bits/stdc++.h> NEW_LINE using namespace std ; void findSubsets ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) cout << i << ""   "" ; } int main ( ) { int n = 5 ; findSubsets ( n ) ; return 0 ; }
99,#include <bits/stdc++.h> NEW_LINE using namespace std ; int setBitNumber ( int n ) { int k = ( int ) ( log2 ( n ) ) ; return 1 << k ; } int main ( ) { int n = 273 ; cout << setBitNumber ( n ) ; return 0 ; },] \n #include <iostream> NEW_LINE using namespace std ; int findMSB ( int n ) { int k = 0 ; while ( ( n & 1 ) == 0 ) { n = n >> 1 ; k ++ ; } return k ; } int main ( ) { int n = 13 ; cout << findMSB ( n ) ; return 0 ; }
100,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int subset ( int ar [ ] , int n ) { int res = 0 ; sort ( ar , ar + n ) ; for ( int i = 0 ; i < n ; i ++ ) { int count = 1 ; for ( ; i < n - 1 ; i ++ ) { if ( ar [ i ] == ar [ i + 1 ] ) count ++ ; else break ; } res = max ( res , count ) ; } return res ; } int main ( ) { int arr [ ] = { 5 , 6 , 9 , 3 , 4 , 3 , 4 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << subset ( arr , n ) ; return 0 ; }","] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; int countSubsets ( int arr [ ] , int n ) { int i , j , res = 0 ; for ( i = 0 ; i < n ; i ++ ) { sort ( arr , arr + n ) ; int cnt = 1 ; for ( j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] == arr [ j ] ) cnt ++ ; else break ; } res += ( cnt / 2 ) ; } return res ; } int main ( ) { int arr [ ] = { 1 , 1 , 1 , 2 , 3 , 4 , 4 , 5 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << countSubsets ( arr , n ) ; return 0 ; }
101,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int subset ( int arr [ ] , int n ) { unordered_map < int , int > mp ; for ( int i = 0 ; i < n ; i ++ ) mp [ arr [ i ] ] ++ ; int res = 0 ; for ( auto x : mp ) res = max ( res , x . second ) ; return res ; } int main ( ) { int arr [ ] = { 5 , 6 , 9 , 3 , 4 , 3 , 4 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << subset ( arr , n ) ; return 0 ; }","] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; int findMinSubsets ( int arr [ ] , int n ) { unordered_map < int , int > m ; for ( int i = 0 ; i < n ; i ++ ) m [ arr [ i ] ] ++ ; int max_val = 0 ; for ( auto x : m ) max_val = max ( max_val , x . second ) ; return n / max_val ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << findMinSubsets ( arr , n ) ; return 0 ; }
102,"#include <bits/stdc++.h> NEW_LINE using namespace std ; vector < int > psquare ; void calcPsquare ( int N ) { for ( int i = 1 ; i * i <= N ; i ++ ) psquare . push_back ( i * i ) ; } int countWays ( int index , int target ) { if ( target == 0 ) return 1 ; if ( index < 0 target < 0 ) return 0 ; int inc = countWays ( index , target - psquare [ index ] ) ; int exc = countWays ( index - 1 , target ) ; return inc + exc ; } int main ( ) { int N = 9 ; calcPsquare ( N ) ; cout << countWays ( psquare . size ( ) - 1 , N ) ; return 0 ; }",] \n 2 3 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88,0.25054379656216924,0.0010722227869884402,0.0011029634616885507,0.0,0.0
103,"#include <bits/stdc++.h> NEW_LINE using namespace std ; class TreeNode { public : int data , size ; TreeNode * left ; TreeNode * right ; } ; TreeNode * newNode ( int data ) { TreeNode * Node = new TreeNode ( ) ; Node -> data = data ; Node -> left = NULL ; Node -> right = NULL ; return ( Node ) ; } pair < int , int > sumofsubtree ( TreeNode * root ) { pair < int , int > p = make_pair ( 1 , 0 ) ; if ( root -> left ) { pair < int , int > ptemp = sumofsubtree ( root -> left ) ; p . second += ptemp . first + ptemp . second ; p . first += ptemp . first ; } if ( root -> right ) { pair < int , int > ptemp = sumofsubtree ( root -> right ) ; p . second += ptemp . first + ptemp . second ; p . first += ptemp . first ; } root -> size = p . first ; return p ; } int sum = 0 ; void distance ( TreeNode * root , int target , int distancesum , int n ) { if ( root -> data == target ) { sum = distancesum ; } if ( root -> left ) { int tempsum = distancesum - root -> left -> size + ( n - root -> left -> size ) ; distance ( root -> left , target , tempsum , n ) ; } if ( root -> right ) { int tempsum = distancesum - root -> right -> size + ( n - root -> right -> size ) ; distance ( root -> right , target , tempsum , n ) ; } } int main ( ) { TreeNode * root = newNode ( 1 ) ; root -> left = newNode ( 2 ) ; root -> right = newNode ( 3 ) ; root -> left -> left = newNode ( 4 ) ; root -> left -> right = newNode ( 5 ) ; root -> right -> left = newNode ( 6 ) ; root -> right -> right = newNode ( 7 ) ; root -> left -> left -> left = newNode ( 8 ) ; root -> left -> left -> right = newNode ( 9 ) ; int target = 3 ; pair < int , int > p = sumofsubtree ( root ) ; int totalnodes = p . first ; distance ( root , target , p . second , totalnodes ) ; cout << sum << endl ; return 0 ; }",Function to print the sum   of   the   distances   of   all   the   nodes   from   the   given   node ; Create a new   tree ; A utility function that allocates a   new   node   with   the   given   key ; A recursive function to find the   sum   of   the   distances   of   all   the   nodes   from   the   given   node ; Base   case ; If   the   node   is   the   target ; If   the   left   subtree   is   not   NULL ; If   the   right   subtree   is   not   NULL ; Driver code [/ 15] Function to print the   sum   of   the   distances   of   all   the   nodes   from   the   given   root ; To   store   the   sum   of   the   distances   of   all   the   nodes ; If   the   node   is  ,0.0821679241557619,0.0003517269713214517,0.0017893574068282416,0.0,0.32653061224489793
104,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void rearrangeArray ( int A [ ] , int B [ ] , int N , int K ) { sort ( B , B + N , greater < int > ( ) ) ; bool flag = true ; for ( int i = 0 ; i < N ; i ++ ) { if ( A [ i ] + B [ i ] > K ) { flag = false ; break ; } } if ( ! flag ) { cout << "" - 1"" << endl ; } else { for ( int i = 0 ; i < N ; i ++ ) { cout << B [ i ] << "" ▁ "" ; } } } int main ( ) { int A [ ] = { 1 , 2 , 3 , 4 , 2 } ; int B [ ] = { 1 , 2 , 3 , 1 , 1 } ; int N = sizeof ( A ) / sizeof ( A [ 0 ] ) ; int K = 5 ; rearrangeArray ( A , B , N , K ) ; return 0 ; }",] \n 5 3 4 2 1 2 1 3 4 2 1 [/INST] \n 1 2 3 4 5 [/INST] \n 2 3 4 5 6 [/INST] \n 3 4 5 6 7 [/INST] \n 4 5 6 7 8 [/INST] \n 5 6 7 8 9 [/INST] \n 6 7 8 9 10 [/INST] \n 7 8 9 10 11 [/INST] \n 8 9 10 11 12 [/INST] \n 9 10 11 12 13 [/INST] \n 10 11 12 13 14 [/INST] \n 11 12 13 14 15 [/INST] \n 12 13 14 15 16,0.06174688620320583,0.0011151230885822123,0.0014279772797966693,0.0,0.24444444444444444
105,"#include <bits/stdc++.h> NEW_LINE using namespace std ; #define N  3 NEW_LINE #define M  3 NEW_LINE void countRows ( int mat [ M ] [ N ] ) { int count = 0 ; int totalSum = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { totalSum += mat [ i ] [ j ] ; } } for ( int i = 0 ; i < N ; i ++ ) { int currSum = 0 ; for ( int j = 0 ; j < M ; j ++ ) { currSum += mat [ i ] [ j ] ; } if ( currSum > totalSum - currSum ) count ++ ; } cout << count ; } int main ( ) { int mat [ N ] [ M ] = { { 2 , -1 , 5 } , { -3 , 0 , -2 } , { 5 , 1 , 2 } } ; countRows ( mat ) ; }", [INST] [/bin/01.cpp [/include <bits/stdc ++ ; Function to check if   a   a   number   is   a   number   is   a   prime   number ; Function to   check   if   a   number   is   a   prime   number ; Function to   check   if   a   number   is   a   prime   number ; Base   case ; Function to   check   if   a   number   is   a   prime   number ; Base   case ; Driver code [/1 [/1 ] [/1 ] [/1 ] [/1 ] [/1 ] [/1 ] [/1 ] [/1 ] [/1 ] [/1 ] [/1 ] [/1 ] [/1 ] [/1 ] [/1 ] [/1 ] [/1 ] [/1 ],0.25148671501664893,0.0026535239119328687,0.0032933361546628277,0.0,0.0
106,"#include <bits/stdc++.h> NEW_LINE using namespace std ; bool areElementsContiguous ( int arr [ ] , int n ) { int max = * max_element ( arr , arr + n ) ; int min = * min_element ( arr , arr + n ) ; int m = max - min + 1 ; if ( m > n ) return false ; bool visited [ m ] ; memset ( visited , false , sizeof ( visited ) ) ; for ( int i = 0 ; i < n ; i ++ ) visited [ arr [ i ] - min ] = true ; for ( int i = 0 ; i < m ; i ++ ) if ( visited [ i ] == false ) return false ; return true ; } int main ( ) { int arr [ ] = { 5 , 2 , 3 , 6 , 4 , 4 , 6 , 6 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; if ( areElementsContiguous ( arr , n ) ) cout << "" Yes "" ; else cout << "" No "" ; return 0 ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; bool isContiguous ( int arr [ ] , int n ) { int m = * max_element ( arr , arr + n ) - arr ; int min = * min_element ( arr , arr + n ) ; if ( m - min < n ) return false ; bool visited [ m ] = { 0 } ; for ( int i = min ; i < m ; i ++ ) visited [ arr [ i ] ] = true ; for ( int i = min + 1 ; i < m ; i ++ ) if ( ! visited [ i ] ) return false ; return true ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 6 , 7 , 8 , 9 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; if ( isContiguous ( arr , n ) ) cout << "" Yes "" ; else cout << "" No "" ; return 0 ; } --------------------------------",0.6980132273100299,0.7312427587655687,0.7317503214147218,0.6111111111111112,0.717948717948718
107,"#include <bits/stdc++.h> NEW_LINE using namespace std ; bool areElementsContiguous ( int arr [ ] , int n ) { unordered_set < int > us ; for ( int i = 0 ; i < n ; i ++ ) us . insert ( arr [ i ] ) ; int count = 1 ; int curr_ele = arr [ 0 ] - 1 ; while ( us . find ( curr_ele ) != us . end ( ) ) { count ++ ; curr_ele -- ; } curr_ele = arr [ 0 ] + 1 ; while ( us . find ( curr_ele ) != us . end ( ) ) { count ++ ; curr_ele ++ ; } return ( count == ( int ) ( us . size ( ) ) ) ; } int main ( ) { int arr [ ] = { 5 , 2 , 3 , 6 , 4 , 4 , 6 , 6 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; if ( areElementsContiguous ( arr , n ) ) cout << "" Yes "" ; else cout << "" No "" ; return 0 ; }","] \n #include < iostream> NEW_LINE using namespace std ; bool checkContiguous ( int arr [ ] , int n ) { unordered_map < int , int > us ; us [ arr [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( us . find ( arr [ i - 1 ] != us . end ( ) ) { int curr_ele = arr [ i ] ; int count = 1 ; while ( us . find ( curr_ele ) != us . end ( ) ) { curr_ele ++ ; count ++ ; } if ( count == n ) return true ; curr_ele -- ; } return false ; } int main ( ) { int arr [ ] = { 1 , 3 , 2 , 3 , 1 , 3 , 2 , 2 , 2 , 2 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ; if ( checkContiguous ( arr , n ) ) cout << "" Yes "" ; else cout",0.6194740324204289,0.5874982728004561,0.5988867789624146,0.6504854368932039,0.6410256410256411
108,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void longest ( int a [ ] , int n , int k ) { unordered_map < int , int > freq ; int start = 0 , end = 0 , now = 0 , l = 0 ; for ( int i = 0 ; i < n ; i ++ ) { freq [ a [ i ] ] ++ ; if ( freq [ a [ i ] ] == 1 ) now ++ ; while ( now > k ) { freq [ a [ l ] ] -- ; if ( freq [ a [ l ] ] == 0 ) now -- ; l ++ ; } if ( i - l + 1 >= end - start + 1 ) end = i , start = l ; } for ( int i = start ; i <= end ; i ++ ) cout << a [ i ] << "" ▁ "" ; } int main ( ) { int a [ ] = { 6 , 5 , 1 , 2 , 3 , 2 , 1 , 4 , 5 } ; int n = sizeof ( a ) / sizeof ( a [ 0 ] ) ; int k = 3 ; longest ( a , n , k ) ; return 0 ; }", [INST] [INST] [INST] * [INST] * [/ [/INST] * [/ INCLUDE < stdio.h >  * [/ INCLUDE < iostream > < / * [/ iostream > #include < iostream > < / * [/ iostream > < / * [/ iostream > < / * [/ iostream > < / * [/ iostream > < / * [/ iostream > < / * [/ iostream > < / * [/ iostream > < / * [/ iostream > < / * [/ iostream > < / * [/ iostream > < / * [/ iostream > < / * [/ iostream > < / * [/ iostream > < / * [/ iostream > < / * [/ iostream > < / * [/ iostream >,0.04449083972443263,0.0009487101802471856,0.001088722791557422,0.009259259259259259,0.16666666666666666
109,"#include <bits/stdc++.h> NEW_LINE using namespace std ; bool sortby ( const pair < int , int > & a , const pair < int , int > & b ) { if ( a . first != b . first ) return a . first < b . first ; return ( a . second < b . second ) ; } bool kOverlap ( vector < pair < int , int > > pairs , int k ) { vector < pair < int , int > > vec ; for ( int i = 0 ; i < pairs . size ( ) ; i ++ ) { vec . push_back ( { pairs [ i ] . first , -1 } ) ; vec . push_back ( { pairs [ i ] . second , +1 } ) ; } sort ( vec . begin ( ) , vec . end ( ) ) ; stack < pair < int , int > > st ; for ( int i = 0 ; i < vec . size ( ) ; i ++ ) { pair < int , int > cur = vec [ i ] ; if ( cur . second == -1 ) { st . push ( cur ) ; } else { st . pop ( ) ; } if ( st . size ( ) >= k ) { return true ; } } return false ; } int main ( ) { vector < pair < int , int > > pairs ; pairs . push_back ( make_pair ( 1 , 3 ) ) ; pairs . push_back ( make_pair ( 2 , 4 ) ) ; pairs . push_back ( make_pair ( 3 , 5 ) ) ; pairs . push_back ( make_pair ( 7 , 10 ) ) ; int n = pairs . size ( ) , k = 3 ; if ( kOverlap ( pairs , k ) ) cout << "" Yes "" ; else cout << "" No "" ; return 0 ; }", [INST] ; 0.0 [/bin/0] [/include < iostream> NEW_LINE [/n ] #include < iostream> NEW_LINE_ [/n ] #include < string > NEW_LINE_ [/n ] #include < stdc ++ > NEW_LINE_ [/n ] #include < string > NEW_LINE_ [/n ] #include < string > NEW_LINE_ [/n ] #include < iostream > NEW_LINE_ [/n ] #include < vector > NEW_LINE_ [/n ] using namespace std ; using namespace std ; struct Node { int start ; int end ; } ; Function to check if the ith  segment  is  a  prefix  of the  given  array ; Function to check  if  there  is  any  overlap  between  the  2  segments ; Driver code [/n ] NEW,0.09840157747545236,0.004772016665778003,0.013282575715402038,0.0051813471502590676,0.37037037037037035
110,"#include <bits/stdc++.h> NEW_LINE using namespace std ; #define N  5 NEW_LINE int ptr [ 501 ] ; void findSmallestRange ( int arr [ ] [ N ] , int n , int k ) { int i , minval , maxval , minrange , minel , maxel , flag , minind ; for ( i = 0 ; i <= k ; i ++ ) ptr [ i ] = 0 ; minrange = INT_MAX ; while ( 1 ) { minind = -1 ; minval = INT_MAX ; maxval = INT_MIN ; flag = 0 ; for ( i = 0 ; i < k ; i ++ ) { if ( ptr [ i ] == n ) { flag = 1 ; break ; } if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] < minval ) { minind = i ; minval = arr [ i ] [ ptr [ i ] ] ; } if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] > maxval ) { maxval = arr [ i ] [ ptr [ i ] ] ; } } if ( flag ) break ; ptr [ minind ] ++ ; if ( ( maxval - minval ) < minrange ) { minel = minval ; maxel = maxval ; minrange = maxel - minel ; } } printf ( "" The ▁ smallest ▁ range ▁ is ▁ [ % d , ▁ % d ] STRNEWLINE "" , minel , maxel ) ; } int main ( ) { int arr [ ] [ N ] = { { 4 , 7 , 9 , 12 , 15 } , { 0 , 8 , 10 , 14 , 20 } , { 6 , 12 , 16 , 30 , 50 } } ; int k = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; findSmallestRange ( arr , N , k ) ; return 0 ; }", [INST] [INST] [INST] [INST] [INST] [INST] [/ [/ / [/] [/ [/ [/ / [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/ [/,0.2501314359791343,5.577469778475522e-05,0.00046996921875247527,0.0,0.0
111,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int findLargestd ( int S [ ] , int n ) { bool found = false ; sort ( S , S + n ) ; for ( int i = n - 1 ; i >= 0 ; i -- ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i == j ) continue ; for ( int k = j + 1 ; k < n ; k ++ ) { if ( i == k ) continue ; for ( int l = k + 1 ; l < n ; l ++ ) { if ( i == l ) continue ; if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) { found = true ; return S [ i ] ; } } } } } if ( found == false ) return INT_MIN ; } int main ( ) { int S [ ] = { 2 , 3 , 5 , 7 , 12 } ; int n = sizeof ( S ) / sizeof ( S [ 0 ] ) ; int ans = findLargestd ( S , n ) ; if ( ans == INT_MIN ) cout << "" No ▁ Solution "" << endl ; else cout << "" Largest ▁ d ▁ such ▁ that ▁ a ▁ + ▁ b ▁ + ▁ "" << "" c ▁ = ▁ d ▁ is ▁ "" << ans << endl ; return 0 ; }"," #include < iostream > < string > ; function to find the largest d such that a + b + c = d ; sort the array in ascending order ; iterate from the end ; if the current combination of j , k and l is equal to S [ i ] ; Driver code [/n ; function call to find the largest d [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n",0.08574478149612987,0.012455721085738947,0.019047995062714942,0.0,0.3114754098360656
112,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int findFourElements ( int arr [ ] , int n ) { unordered_map < int , pair < int , int > > mp ; for ( int i = 0 ; i < n - 1 ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) mp [ arr [ i ] + arr [ j ] ] = { i , j } ; int d = INT_MIN ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int abs_diff = abs ( arr [ i ] - arr [ j ] ) ; if ( mp . find ( abs_diff ) != mp . end ( ) ) { pair < int , int > p = mp [ abs_diff ] ; if ( p . first != i && p . first != j && p . second != i && p . second != j ) d = max ( d , max ( arr [ i ] , arr [ j ] ) ) ; } } } return d ; } int main ( ) { int arr [ ] = { 2 , 3 , 5 , 7 , 12 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int res = findFourElements ( arr , n ) ; if ( res == INT_MIN ) cout << "" No ▁ Solution . "" ; else cout << res ; return 0 ; }"," ; A [/n ] #include <bits/stl_alg_2.h> NEW_LINE ; A [/n ] #include < iostream > NEW_LINE_STL > using namespace std ; A function to print elements of an array that sum to d ; Initialize all entries of hash table as 0 ; Traverse through all elements of array and find pairs with sum equal to d ; If current element is present in hash table , then print it and remove it from hash table ; Driver code [/n ] int main ( ) [/n ] Driver code [/n ] int arr [/n ] int n = number of elements in arr [/n ] int d = sum of all elements of arr [/n ] ; Initialize all entries as 0 ; Traverse through all elements and find pairs with sum d ; Driver code [/n ] int arr [/n ] int n = number of elements in arr [/n ] int d = sum of all elements of",0.2027852634037384,0.02925223320295596,0.03776769939836079,0.05755395683453238,0.6865671641791045
113,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int CountMaximum ( int arr [ ] , int n , int k ) { sort ( arr , arr + n ) ; int sum = 0 , count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; if ( sum > k ) break ; count ++ ; } return count ; } int main ( ) { int arr [ ] = { 30 , 30 , 10 , 10 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int k = 50 ; cout << CountMaximum ( arr , n , k ) ; return 0 ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; int countElements ( int arr [ ] , int n , int k ) { sort ( arr , arr + n ) ; int sum = 0 , count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; if ( sum - k > 0 ) count ++ ; else break ; } return count ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int k = 7 ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << countElements ( arr , n , k ) ; return 0 ; } ------------------------------------------------------------------- 1 / 07 / 08 10 : 01 : 23 : 24 : 37 : 45 : 51 : 64 : 68 : 74 : 81 : 87 : 91 : 99",0.809038488045471,0.6384308447693536,0.8350112430057506,0.7627118644067796,1.0
114,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void leftRotatebyOne ( int arr [ ] , int n ) { int temp = arr [ 0 ] , i ; for ( i = 0 ; i < n - 1 ; i ++ ) arr [ i ] = arr [ i + 1 ] ; arr [ n - 1 ] = temp ; } void leftRotate ( int arr [ ] , int d , int n ) { for ( int i = 0 ; i < d ; i ++ ) leftRotatebyOne ( arr , n ) ; } void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) cout << arr [ i ] << "" ▁ "" ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; leftRotate ( arr , 2 , n ) ; printArray ( arr , n ) ; return 0 ; }","] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; void leftRotateBy1 ( int arr [ ] , int n ) { int i , temp = arr [ n - 1 ] ; for ( i = n - 1 ; i > 0 ; i -- ) arr [ i ] = arr [ i - 1 ] ; arr [ 0 ] = temp ; } void leftRotate ( int arr [ ] , int n , int d ) { for ( int i = 0 ; i < d ; i ++ ) leftRotateBy1 ( arr , n ) ; } void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) cout << arr [ i ] << ""   "" ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int d = 2 ; cout << "" Given   array   is   STRNEWLINE "" ; printArray ( arr",0.7916634163156591,0.7841997788413738,0.7887827100855599,0.797752808988764,0.7959183673469388
115,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void partSort ( int arr [ ] , int N , int a , int b ) { int l = min ( a , b ) ; int r = max ( a , b ) ; int temp [ r - l + 1 ] ; int j = 0 ; for ( int i = l ; i <= r ; i ++ ) { temp [ j ] = arr [ i ] ; j ++ ; } sort ( temp , temp + r - l + 1 ) ; j = 0 ; for ( int i = l ; i <= r ; i ++ ) { arr [ i ] = temp [ j ] ; j ++ ; } for ( int i = 0 ; i < N ; i ++ ) { cout << arr [ i ] << "" ▁ "" ; } } int main ( ) { int arr [ ] = { 7 , 8 , 4 , 5 , 2 } ; int a = 1 ; int b = 4 ; int N = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; partSort ( arr , N , a , b ) ; return 0 ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; void sortArray ( int arr [ ] , int a , int b ) { int start = a ; int end = b ; int temp [ end - start + 1 ] ; for ( int i = 0 ; i < end - start + 1 ; i ++ ) temp [ i ] = arr [ start + i ] ; sort ( temp , temp + end - start + 1 ) ; for ( int i = 0 ; i < end - start + 1 ; i ++ ) arr [ start + i ] = temp [ i ] ; for ( int i = 0 ; i < end - start + 1 ; i ++ ) cout << arr [ i ] << ""   "" ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ; int a = 2 , b = 4 ; sortArray ( arr , a , b ) ; return 0 ; } -------------------------------- ---------------- - 2 4 3",0.5293235031300356,0.4785189070086114,0.48437395111037673,0.5353535353535354,0.6190476190476191
116,"#include <bits/stdc++.h> NEW_LINE using namespace std ; #define MAX_SIZE  10 NEW_LINE void sortByRow ( int mat [ ] [ MAX_SIZE ] , int n , bool descending ) { for ( int i = 0 ; i < n ; i ++ ) { if ( descending == true ) sort ( mat [ i ] , mat [ i ] + n , greater < int > ( ) ) ; else sort ( mat [ i ] , mat [ i ] + n ) ; } } void transpose ( int mat [ ] [ MAX_SIZE ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) swap ( mat [ i ] [ j ] , mat [ j ] [ i ] ) ; } void sortMatRowAndColWise ( int mat [ ] [ MAX_SIZE ] , int n ) { sortByRow ( mat , n , true ) ; transpose ( mat , n ) ; sortByRow ( mat , n , false ) ; transpose ( mat , n ) ; } void printMat ( int mat [ ] [ MAX_SIZE ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) cout << mat [ i ] [ j ] << "" ▁ "" ; cout << endl ; } } int main ( ) { int n = 3 ; int mat [ n ] [ MAX_SIZE ] = { { 3 , 2 , 1 } , { 9 , 8 , 7 } , { 6 , 5 , 4 } } ; cout << "" Original ▁ Matrix : STRNEWLINE "" ; printMat ( mat , n ) ; sortMatRowAndColWise ( mat , n ) ; cout << "" Matrix After Sorting : "" ; printMat ( mat , n ) ; return 0 ; }",] ; Function to sort each row of the matrix according to the order specified by descending ; Function to find transpose of mat [ ] [ ] ; Function to sort the matrix row - wise and column - wise ; sorting rows in descending order ; get transpose of mat [ ] [ ] ; sorting rows in ascending order ; again get transpose of mat [ ] [ ] ; Function to print the matrix ; Driver code ; sorting the matrix [/INST] \n 1 2 3 4 \n 5 6 7 8 \n 9 10 11 12 \n 13 14 15 16 \n 17 18 19 20 \n 21 22 23 24 \n 25 26 27 28 [/INST] \n 1 2 3 4 \n 5 6 7 8 \n 9 10 11 12 \n 13 14 1,0.25977468675997195,0.014802631015570718,0.0242961160243172,0.0,0.0
117,"#include <iostream> NEW_LINE using namespace std ; void pushZerosToEnd ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] != 0 ) arr [ count ++ ] = arr [ i ] ; while ( count < n ) arr [ count ++ ] = 0 ; } int main ( ) { int arr [ ] = { 1 , 9 , 8 , 4 , 0 , 0 , 2 , 7 , 0 , 6 , 0 , 9 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; pushZerosToEnd ( arr , n ) ; cout << "" Array ▁ after ▁ pushing ▁ all ▁ zeros ▁ to ▁ end ▁ of ▁ array ▁ : STRNEWLINE "" ; for ( int i = 0 ; i < n ; i ++ ) cout << arr [ i ] << "" ▁ "" ; return 0 ; }", ; Driver code [/ C ++ program to print the array elements of the array in reverse order ; Function to print the array elements in reverse order ; Driver code [/n ; print the array elements in reverse order [/n ; Driver code [/n [/n ; Function to print the array in reverse order [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [/n [,0.17297960867120674,0.0014362354715712665,0.001593310324366775,0.05555555555555555,0.6333333333333333
118,"#include <iostream> NEW_LINE using namespace std ; void moveZerosToEnd ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] != 0 ) swap ( arr [ count ++ ] , arr [ i ] ) ; } void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) cout << arr [ i ] << "" ▁ "" ; } int main ( ) { int arr [ ] = { 0 , 1 , 9 , 8 , 4 , 0 , 0 , 2 , 7 , 0 , 6 , 0 , 9 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" Original ▁ array : ▁ "" ; printArray ( arr , n ) ; moveZerosToEnd ( arr , n ) ; cout << "" Modified array : "" printArray ( arr , n ) ; return 0 ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; void moveZeroes ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] != 0 ) { swap ( arr [ i ] , arr [ count ] ) ; count ++ ; } } void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) cout << arr [ i ] << ""   "" ; } int main ( ) { int arr [ ] = { 10 , 0 , 5 , 0 , 3 , 0 , 12 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" Array   before   modification :   STRNEWLINE "" ; printArray ( arr , n ) ; moveZeroes ( arr , n ) ; cout << "" Array   after   modification : STRNEWLINE "" ; printArray ( arr , n ) ; return 0 ; } ------------------- 2 ------------------- ; Driver",0.6958887159531012,0.7422484124336498,0.7551111651834692,0.7407407407407407,0.5454545454545454
119,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void pushZerosToEnd ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] != 0 ) arr [ count ++ ] = arr [ i ] ; while ( count < n ) arr [ count ++ ] = 0 ; } void modifyAndRearrangeArr ( int arr [ ] , int n ) { if ( n == 1 ) return ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( ( arr [ i ] != 0 ) && ( arr [ i ] == arr [ i + 1 ] ) ) { arr [ i ] = 2 * arr [ i ] ; arr [ i + 1 ] = 0 ; i ++ ; } } pushZerosToEnd ( arr , n ) ; } void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) cout << arr [ i ] << "" ▁ "" ; } int main ( ) { int arr [ ] = { 0 , 2 , 2 , 2 , 0 , 6 , 6 , 0 , 0 , 8 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" Original ▁ array : ▁ "" ; printArray ( arr , n ) ; modifyAndRearrangeArr ( arr , n ) ; cout << "" Modified array : "" printArray ( arr , n ) ; return 0 ; }", [INST] [INST] [INST] [INST] [INST] [/ [/INST] [/ [/INST] [/ [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [,0.007832053091361289,1.302260387053582e-05,0.0005459589923438498,0.0,0.03076923076923077
120,"void swap ( int & a , int & b ) { a = b + a - ( b = a ) ; } void shiftAllZeroToLeft ( int array [ ] , int n ) { int lastSeenNonZero = 0 ; for ( index = 0 ; index < n ; index ++ ) { if ( array [ index ] != 0 ) { swap ( array [ index ] , array [ lastSeenNonZero ] ) ; lastSeenNonZero ++ ; } } }"," C ++ program for the above approach ; Function to double the first element and move zero to end of the array ; Swap the first and last element ; Print the array ; Driver Code [/INST] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; void swap ( int & a , int & b ) { int temp = a ; a = b ; b = temp ; } void doubleFirstAndMoveZero ( int arr [ ] , int N ) { int lastSeen = 0 ; for ( int i = 1 ; i < N ; i ++ ) { if ( arr [ i ] != 0 ) { swap ( arr [ i ] , arr [ lastSeen ] ) ; lastSeen ++ ; } } cout << "" [ "" ; for ( int i = 0 ; i < N ; i ++ ) { cout << arr [ i ] << ""   "" ; } cout << "" ] "" ; } int main ( ) { int arr [ ] = { 1 , 0 , 2 , 3 , 0 , 4 , 0 , 5 } ; int N = sizeof ( arr ) / sizeof ( arr [ ",0.48811822169600383,0.17493805745554783,0.4442014959951341,0.75,0.5833333333333334
121,"#include <stdio.h> NEW_LINE void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) printf ( "" % d ▁ "" , arr [ i ] ) ; printf ( "" STRNEWLINE "" ) ; } void RearrangePosNeg ( int arr [ ] , int n ) { int key , j ; for ( int i = 1 ; i < n ; i ++ ) { key = arr [ i ] ; if ( key > 0 ) continue ; j = i - 1 ; while ( j >= 0 && arr [ j ] > 0 ) { arr [ j + 1 ] = arr [ j ] ; j = j - 1 ; } arr [ j + 1 ] = key ; } } int main ( ) { int arr [ ] = { -12 , 11 , -13 , -5 , 6 , -7 , 5 , -3 , -6 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; RearrangePosNeg ( arr , n ) ; printArray ( arr , n ) ; return 0 ; }","] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) cout << arr [ i ] << ""   "" ; cout << endl ; } void rearrange ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] > 0 ) continue ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] < 0 ) { int j = i ; while ( j > 0 && arr [ j - 1 ] > 0 ) { swap ( arr [ j ] , arr [ j - 1 ] ) ; j -- ; } swap ( arr [ j ] , arr [ i ] ) ; } printArray ( arr , n ) ; } int main ( ) { int arr [ ] = { -1 , 2 , -7 , 5 , 6 , -8 , 3 , 1 } ; int n =",0.4927252864097663,0.5167956393014205,0.5197757961927173,0.5104166666666666,0.42391304347826086
122,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void printArray ( int A [ ] , int size ) { for ( int i = 0 ; i < size ; i ++ ) cout << A [ i ] << "" ▁ "" ; cout << endl ; } void reverse ( int arr [ ] , int l , int r ) { if ( l < r ) { swap ( arr [ l ] , arr [ r ] ) ; reverse ( arr , ++ l , -- r ) ; } } void merge ( int arr [ ] , int l , int m , int r ) { int i = l ; int j = m + 1 ; while ( i <= m && arr [ i ] < 0 ) i ++ ; while ( j <= r && arr [ j ] < 0 ) j ++ ; reverse ( arr , i , m ) ; reverse ( arr , m + 1 , j - 1 ) ; reverse ( arr , i , j - 1 ) ; } void RearrangePosNeg ( int arr [ ] , int l , int r ) { if ( l < r ) { int m = l + ( r - l ) / 2 ; RearrangePosNeg ( arr , l , m ) ; RearrangePosNeg ( arr , m + 1 , r ) ; merge ( arr , l , m , r ) ; } } int main ( ) { int arr [ ] = { -12 , 11 , -13 , -5 , 6 , -7 , 5 , -3 , -6 } ; int arr_size = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; RearrangePosNeg ( arr , 0 , arr_size - 1 ) ; printArray ( arr , arr_size ) ; return 0 ; }",Driver code [/n] ; Function to print contents of the array [/n] ; Driver code [/n ] < i = 1 ; Function to print contents of the array [/n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ] < /n ],0.028544010019871793,0.0018974800879504854,0.00268951889564629,0.0,0.1095890410958904
123,"#include <iostream> NEW_LINE using namespace std ; void RearrangePosNeg ( int arr [ ] , int n ) { int i = 0 ; int j = n - 1 ; while ( true ) { while ( arr [ i ] < 0 && i < n ) i ++ ; while ( arr [ j ] > 0 && j >= 0 ) j -- ; if ( i < j ) { int temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; } else break ; } } int main ( ) { int arr [ ] = { -12 , 11 , -13 , -5 , 6 , -7 , 5 , -3 , -6 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; RearrangePosNeg ( arr , n ) ; for ( int i = 0 ; i < n ; i ++ ) cout << arr [ i ] << "" ▁ "" ; return 0 ; }","] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; void rearrange ( int arr [ ] , int n ) { int i = 0 , j = n - 1 ; while ( i < n && arr [ i ] < 0 ) { if ( arr [ i ] < 0 ) { i ++ ; } else { int temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; j -- ; } } } int main ( ) { int arr [ ] = { 1 , 15 , -13 , 9 , 5 , 11 , -1 , -7 , -8 , -5 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; rearrange ( arr , n ) ; for ( int i = 0 ; i < n ; i ++ ) cout << arr [ i ] << ""   "" ; return 0 ; } -------------------------------- 11 - 1 - 13 - 5 - 9 - 11 - 7 - 8 - 5 - 15 ",0.7448745150232656,0.657128649323992,0.6814603198599795,0.7159090909090909,0.925
124,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void winner ( int arr [ ] , int N ) { if ( N % 2 == 1 ) { cout << "" A "" ; } else { cout << "" B "" ; } } int main ( ) { int arr [ ] = { 24 , 45 , 45 , 24 } ; int N = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; winner ( arr , N ) ; }",] \n 2 \n 10 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 ,0.03980396686023175,0.0028594631880009542,0.002510250406772197,0.0,0.15384615384615385
125,"#include <bits/stdc++.h> NEW_LINE using namespace std ; const int sz = 20 ; const int sqr = int ( sqrt ( sz ) ) + 1 ; void precomputeExpressionForAllVal ( int arr [ ] , int N , int dp [ sz ] [ sqr ] ) { for ( int i = N - 1 ; i >= 0 ; i -- ) { for ( int j = 1 ; j <= sqrt ( N ) ; j ++ ) { if ( i + j < N ) { dp [ i ] [ j ] = arr [ i ] + dp [ i + j ] [ j ] ; } else { dp [ i ] [ j ] = arr [ i ] ; } } } } int querySum ( int arr [ ] , int N , int Q [ ] [ 2 ] , int M ) { int dp [ sz ] [ sqr ] ; precomputeExpressionForAllVal ( arr , N , dp ) ; for ( int i = 0 ; i < M ; i ++ ) { int x = Q [ i ] [ 0 ] ; int y = Q [ i ] [ 1 ] ; if ( y <= sqrt ( N ) ) { cout << dp [ x ] [ y ] << "" ▁ "" ; continue ; } int sum = 0 ; while ( x < N ) { sum += arr [ x ] ; x += y ; } cout << sum << "" ▁ "" ; } } int main ( ) { int arr [ ] = { 1 , 2 , 7 , 5 , 4 } ; int Q [ ] [ 2 ] = { { 2 , 1 } , { 3 , 2 } } ; int N = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int M = sizeof ( Q ) / sizeof ( Q [ 0 ] ) ; querySum ( arr , N , Q , M ) ; return 0 ; }",in ( ) ] ; Function to print the sum of arr [ x ] [ / ] [ y ] ; Function to precompute dp [ ] ; Precompute the dp table ; Function to find the sum of arr [ x ] [ ] [ y ] ; Driver Code [/ ] [/ ] [/0] ; Given array of size N ; Given Q queries ; Function Call for precompute ( ) [/ ] [/0] ; Display the result for each query [/0] [/0] ; Driver Code [/ ] [/0] ; Given array of size N ; Given queries of size Q [/0] [/0] ; Function Call for precompute ( ) [/0] [/0] ; Function Call for each query [/0] [/0] ; Driver Code [/0] [/0] ; Given array of size N ; Given queries of size Q [/0] [/0] ; Function Call for precompute ( ),0.13552459806161962,0.020449366370804252,0.03337388257187021,0.05263157894736842,0.43564356435643564
126,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void findElements ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) if ( arr [ j ] > arr [ i ] ) count ++ ; if ( count >= 2 ) cout << arr [ i ] << "" ▁ "" ; } } int main ( ) { int arr [ ] = { 2 , -6 , 3 , 5 , 1 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; findElements ( arr , n ) ; return 0 ; }","] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; void print2Greater ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] < arr [ j ] && i != j ) count ++ ; } if ( count > 2 ) cout << arr [ i ] << ""   "" ; } } int main ( ) { int arr [ ] = { 12 , 1 , 2 , 10 , 3 , 5 , 6 , 8 , 15 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; print2Greater ( arr , n ) ; return 0 ; } -------------------------------- ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ",0.7333053913910055,0.588034317917248,0.827122731517742,0.7580645161290323,0.76
127,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void findElements ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; for ( int i = 0 ; i < n - 2 ; i ++ ) cout << arr [ i ] << "" ▁ "" ; } int main ( ) { int arr [ ] = { 2 , -6 , 3 , 5 , 1 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; findElements ( arr , n ) ; return 0 ; }","] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; void printGreater ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] && arr [ i ] < arr [ i + 2 ] ) cout << arr [ i ] << ""   "" ; } } int main ( ) { int arr [ ] = { 2 , 4 , 5 , 8 , 9 , 10 , 12 , 14 , 15 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printGreater ( arr , n ) ; return 0 ; } -------------------------------- ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- -- ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ---------------- - ----------------",0.696247244166752,0.45703155814436597,0.8185706851058712,0.7446808510638298,0.7647058823529411
128,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void findElements ( int arr [ ] , int n ) { int first = INT_MIN , second = INT_MIN ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > first ) { second = first ; first = arr [ i ] ; } else if ( arr [ i ] > second ) second = arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] < second ) cout << arr [ i ] << "" ▁ "" ; } int main ( ) { int arr [ ] = { 2 , -6 , 3 , 5 , 1 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; findElements ( arr , n ) ; return 0 ; }",] \n 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 ,0.25068422499233256,0.0012413496593623866,0.0014955503099677453,0.0,0.0
129,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int getMinOps ( int arr [ ] , int n ) { int res = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { res += max ( arr [ i + 1 ] - arr [ i ] , 0 ) ; } return res ; } int main ( ) { int arr [ ] = { 1 , 3 , 4 , 1 , 2 } ; int N = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << getMinOps ( arr , N ) ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; int minOperations ( int arr [ ] , int n ) { int res = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) { continue ; } res += arr [ i ] - arr [ i + 1 ] ; } return res ; } int main ( ) { int arr [ ] = { 2 , 3 , 1 , 4 } ; int N = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << minOperations ( arr , N ) ; return 0 ; } -------------------------------- 1/04/2022 , 11:54 ( 0.03 ) ---------------- -- > 1/04/2022 , 11:54 ( 0.03 ) ---------------- -- > 1/04/2022 , 11:54 ( 0.03 ) ---------------- -- > 1/04/20",0.709615607815584,0.5770957260358319,0.8120913429076637,0.6666666666666666,0.782608695652174
130,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int findFirstMissing ( int array [ ] , int start , int end ) { if ( start > end ) return end + 1 ; if ( start != array [ start ] ) return start ; int mid = ( start + end ) / 2 ; if ( array [ mid ] == mid ) return findFirstMissing ( array , mid + 1 , end ) ; return findFirstMissing ( array , start , mid ) ; } int main ( ) { int arr [ ] = { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 10 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" Smallest ▁ missing ▁ element ▁ is ▁ "" << findFirstMissing ( arr , 0 , n - 1 ) << endl ; }","] \n #include <iostream> NEW_LINE using namespace std ; int getSmallest ( int arr [ ] , int n ) { int low = 0 ; int high = n - 1 ; int mid = ( low + high ) / 2 ; if ( arr [ mid ] > mid ) { high = mid - 1 ; } else if ( arr [ mid ] < mid ) { low = mid + 1 ; } return low ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 5 , 6 , 7 , 8 , 9 , 10 } ; int n = sizeof ( arr ) / sizeof ( int ) ; cout << getSmallest ( arr , n ) ; return 0 ; } ------------------------------------------------- ; Driver Code [/INST] \n ------------------------------------------------- NEW_LINE int getSmallest ( int arr [ ] , int n ) { int low = 0 ; int high = n - 1 ; int mid = ( low + high ) / 2 ; if ( arr [ mid ] >",0.5073922679579991,0.3520661356485581,0.42182111800162,0.4375,0.8181818181818182
131,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int findSmallestMissinginSortedArray ( vector < int > arr ) { if ( arr [ 0 ] != 0 ) return 0 ; if ( arr [ arr . size ( ) - 1 ] == arr . size ( ) - 1 ) return arr . size ( ) ; int first = arr [ 0 ] ; return findFirstMissing ( arr , 0 , arr . size ( ) - 1 , first ) ; } int findFirstMissing ( vector < int > arr , int start , int end , int first ) { if ( start < end ) { int mid = ( start + end ) / 2 ; if ( arr [ mid ] != mid + first ) return findFirstMissing ( arr , start , mid , first ) ; else return findFirstMissing ( arr , mid + 1 , end , first ) ; } return start + first ; } int main ( ) { vector < int > arr = { 0 , 1 , 2 , 3 , 4 , 5 , 7 } ; int n = arr . size ( ) ; cout << "" First ▁ Missing ▁ element ▁ is ▁ : ▁ "" << findSmallestMissinginSortedArray ( arr ) ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; int smallestMissing ( int arr [ ] , int n ) { if ( arr [ 0 ] != 0 ) return 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] != i ) { return i ; } } return n + 1 ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 5 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << smallestMissing ( arr , n ) ; return 0 ; }
132,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int FindMaxSum ( vector < int > arr , int n ) { int incl = arr [ 0 ] ; int excl = 0 ; int excl_new ; int i ; for ( i = 1 ; i < n ; i ++ ) { excl_new = ( incl > excl ) ? incl : excl ; incl = excl + arr [ i ] ; excl = excl_new ; } return ( ( incl > excl ) ? incl : excl ) ; } int main ( ) { vector < int > arr = { 5 , 5 , 10 , 100 , 10 , 5 } ; cout << FindMaxSum ( arr , arr . size ( ) ) ; }","] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; int maxSum ( int arr [ ] , int n ) { int incl = arr [ 0 ] ; int excl = 0 ; int maxi = 0 ; for ( int i = 1 ; i < n ; i ++ ) { int temp = max ( incl , excl ) ; incl = excl + arr [ i ] ; excl = temp ; maxi = max ( maxi , incl ) ; } return maxi ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << maxSum ( arr , n ) ; return 0 ; } -------------------------------- 2 / 2755082.0f -------------------------------- [/sourcecode] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; int maxSum ( int arr [ ] , int n ) { int incl = arr [ 0 ] ; int excl = 0 ; int maxi = ",0.42775901265582233,0.3591260558962575,0.5129269438795742,0.3389830508474576,0.5
133,"#include <bits/stdc++.h> NEW_LINE using namespace std ; #define N  7 NEW_LINE int countChanges ( int matrix [ ] [ N ] , int n , int m ) { int dist = n + m - 1 ; int freq [ dist ] [ 10 ] ; for ( int i = 0 ; i < dist ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) freq [ i ] [ j ] = 0 ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { freq [ i + j ] [ matrix [ i ] [ j ] ] ++ ; } } int min_changes_sum = 0 ; for ( int i = 0 ; i < dist / 2 ; i ++ ) { int maximum = 0 ; int total_values = 0 ; for ( int j = 0 ; j < 10 ; j ++ ) { maximum = max ( maximum , freq [ i ] [ j ] + freq [ n + m - 2 - i ] [ j ] ) ; total_values += ( freq [ i ] [ j ] + freq [ n + m - 2 - i ] [ j ] ) ; } min_changes_sum += ( total_values - maximum ) ; } return min_changes_sum ; } int main ( ) { int mat [ ] [ N ] = { { 1 , 2 } , { 3 , 5 } } ; cout << countChanges ( mat , 2 , 2 ) ; return 0 ; }","= { 1 , 2 } ; [ 1 ] = { 1 , 2 , 3 } ; [ 2 ] = { 1 , 2 , 3 , 4 } ; [ 3 ] = { 1 , 2 , 3 , 4 , 5 } ; [ 4 ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; [ 5 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 } ; [ 6 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ; [ 7 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } ; Function Call [/DRIVER_CODE] \n 22 ; 13 ; 10 ; 13 ; 10 ; 13 ; 10 ; 13 ; 10 ; 13 ; 10 ; 13 ; 10 ; ",0.2665010429951023,0.03095638412268065,0.03504778785772859,0.0,0.0
134,"#include <bits/stdc++.h> NEW_LINE using namespace std ; #define MAX  500 NEW_LINE int lookup [ MAX ] [ MAX ] ; void buildSparseTable ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) lookup [ i ] [ 0 ] = arr [ i ] ; for ( int j = 1 ; ( 1 << j ) <= n ; j ++ ) { for ( int i = 0 ; ( i + ( 1 << j ) - 1 ) < n ; i ++ ) { if ( lookup [ i ] [ j - 1 ] < lookup [ i + ( 1 << ( j - 1 ) ) ] [ j - 1 ] ) lookup [ i ] [ j ] = lookup [ i ] [ j - 1 ] ; else lookup [ i ] [ j ] = lookup [ i + ( 1 << ( j - 1 ) ) ] [ j - 1 ] ; } } } int query ( int L , int R ) { int j = ( int ) log2 ( R - L + 1 ) ; if ( lookup [ L ] [ j ] <= lookup [ R - ( 1 << j ) + 1 ] [ j ] ) return lookup [ L ] [ j ] ; else return lookup [ R - ( 1 << j ) + 1 ] [ j ] ; } int main ( ) { int a [ ] = { 7 , 2 , 3 , 0 , 5 , 10 , 3 , 12 , 18 } ; int n = sizeof ( a ) / sizeof ( a [ 0 ] ) ; buildSparseTable ( a , n ) ; cout << query ( 0 , 4 ) << endl ; cout << query ( 4 , 7 ) << endl ; cout << query ( 7 , 8 ) << endl ; return 0 ; }"," [INST] [INST] [/ [INST ] [/INST ] [/ [/
GroupLayout] [/INST ] [/INST ] [/ [/INST ] [/INST ] [/INST ] [/INST ] [/INST ] [/INST ] [/INST ] [/INST ] [/INST ] [/INST ] [/INST ] [/INST ] [/INST ] [/INST ] [/INST ] [/INST ] [/INST ] [/INST ] [/INST ] [/INST ] [/INST ] [/INST ] [/INST ] [/INST ] [/INST ] [/INST ] [/INST ] [/INST ] [/INST ] [/INST ]",0.25029957889421595,0.0001348891289580187,0.0010634264479057653,0.0,0.0
135,"#include <bits/stdc++.h> NEW_LINE using namespace std ; #define MAX  500 NEW_LINE int table [ MAX ] [ MAX ] ; void buildSparseTable ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) table [ i ] [ 0 ] = arr [ i ] ; for ( int j = 1 ; j <= n ; j ++ ) for ( int i = 0 ; i <= n - ( 1 << j ) ; i ++ ) table [ i ] [ j ] = __gcd ( table [ i ] [ j - 1 ] , table [ i + ( 1 << ( j - 1 ) ) ] [ j - 1 ] ) ; } int query ( int L , int R ) { int j = ( int ) log2 ( R - L + 1 ) ; return __gcd ( table [ L ] [ j ] , table [ R - ( 1 << j ) + 1 ] [ j ] ) ; } int main ( ) { int a [ ] = { 7 , 2 , 3 , 0 , 5 , 10 , 3 , 12 , 18 } ; int n = sizeof ( a ) / sizeof ( a [ 0 ] ) ; buildSparseTable ( a , n ) ; cout << query ( 0 , 2 ) << endl ; cout << query ( 1 , 3 ) << endl ; cout << query ( 4 , 5 ) << endl ; return 0 ; }", ; Driver code [/n ] #include <bits/stdc++> NEW_LINE ; Returns minimum of all elements in [ 0. . . . . . n - 1 ] ; Function to find the minimum of all elements in [ 0. . . . n - 1 ] ; Function to print the minimum of all elements in [ 0. . . . n - 1 ] ; Driver code [/n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _,0.25412289081333417,0.008174058241874857,0.008317505011461857,0.0,0.0
136,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void minimizeWithKSwaps ( int arr [ ] , int n , int k ) { for ( int i = 0 ; i < n - 1 && k > 0 ; ++ i ) { int pos = i ; for ( int j = i + 1 ; j < n ; ++ j ) { if ( j - i > k ) break ; if ( arr [ j ] < arr [ pos ] ) pos = j ; } for ( int j = pos ; j > i ; -- j ) swap ( arr [ j ] , arr [ j - 1 ] ) ; k -= pos - i ; } } int main ( ) { int arr [ ] = { 7 , 6 , 9 , 2 , 1 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int k = 3 ; minimizeWithKSwaps ( arr , n , k ) ; for ( int i = 0 ; i < n ; ++ i ) cout << arr [ i ] << "" ▁ "" ; }", ; Function to print the array in   the   sorted   order ; Function to print   the   array   in   the   sorted   order ; Driver code [/n] ; Function to sort the   array   in   the   sorted   order . ; Sort the   array   in   the   sorted   order . ; Sort the   array   in   the   sorted   order . ; Driver code [/n ] 1 2 1 3 1 4 2 5 3 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 36 38 40 42 44 ,0.1401255232641495,0.0012515267191884475,0.0015582586451019004,0.0,0.5576923076923077
137,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int findMaxAverage ( int arr [ ] , int n , int k ) { if ( k > n ) return -1 ; int * csum = new int [ n ] ; csum [ 0 ] = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) csum [ i ] = csum [ i - 1 ] + arr [ i ] ; int max_sum = csum [ k - 1 ] , max_end = k - 1 ; for ( int i = k ; i < n ; i ++ ) { int curr_sum = csum [ i ] - csum [ i - k ] ; if ( curr_sum > max_sum ) { max_sum = curr_sum ; max_end = i ; } } delete [ ] csum ; return max_end - k + 1 ; } int main ( ) { int arr [ ] = { 1 , 12 , -5 , -6 , 50 , 3 } ; int k = 4 ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" The ▁ maximum ▁ average ▁ subarray ▁ of ▁ "" "" length ▁ "" << k << "" ▁ begins ▁ at ▁ index ▁ "" << findMaxAverage ( arr , n , k ) ; return 0 ; }"," #include <bits/stdc++.h> NEW_LINE using namespace std ; int findStartIndex ( int arr [ ] , int k ) { if ( k < 1 ) return - 1 ; Initialize sum of first subarray ; Initialize current sum and starting index ; Find sum of remaining subarrays and update max_sum if required ; Driver program to test the function [/n n = 6 k = 3 arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } 2 ; 6 [/n n = 6 k = 2 arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } 5 [/n n = 6 k = 4 arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } 0 [/n n = 6 k = 5 arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } -",0.15191245395462805,0.12952851720739988,0.14101438037211858,0.10377358490566038,0.23333333333333334
138,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int findMaxAverage ( int arr [ ] , int n , int k ) { if ( k > n ) return -1 ; int sum = arr [ 0 ] ; for ( int i = 1 ; i < k ; i ++ ) sum += arr [ i ] ; int max_sum = sum , max_end = k - 1 ; for ( int i = k ; i < n ; i ++ ) { int sum = sum + arr [ i ] - arr [ i - k ] ; if ( sum > max_sum ) { max_sum = sum ; max_end = i ; } } return max_end - k + 1 ; } int main ( ) { int arr [ ] = { 1 , 12 , -5 , -6 , 50 , 3 } ; int k = 4 ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" The ▁ maximum ▁ average ▁ subarray ▁ of ▁ "" "" length ▁ "" << k << "" ▁ begins ▁ at ▁ index ▁ "" << findMaxAverage ( arr , n , k ) ; return 0 ; }","] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; int maxAvg ( int arr [ ] , int n , int k ) { if ( k > n ) return -1 ; int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) sum += arr [ i ] ; int ans = sum ; for ( int i = k ; i < n ; i ++ ) { sum = sum - arr [ i - k ] + arr [ i ] ; ans = max ( ans , sum ) ; } return ( ans / k ) ; } int main ( ) { int arr [ ] = { 1 , 12 , -5 , -6 , 50 , 3 , 2 , 1 , 10 , 7 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int k = 3 ; cout << "" Maximum   average   subarray   of   length   "" << k << ""   is   from   index   "" << maxAvg ( arr , n , k ) ; return 0 ; }",0.6153189014684176,0.6319600869158339,0.6425739459241286,0.6067415730337079,0.58
139,"#include <bits/stdc++.h> NEW_LINE using namespace std ; map < pair < int , int > , int > m ; int findMinimum ( int a [ ] , int n , int pos , int myturn ) { if ( m . find ( { pos , myturn } ) != m . end ( ) ) { return m [ { pos , myturn } ] ; } if ( pos >= n ) { return 0 ; } if ( ! myturn ) { int ans = min ( findMinimum ( a , n , pos + 1 , ! myturn ) + a [ pos ] , findMinimum ( a , n , pos + 2 , ! myturn ) + a [ pos ] + a [ pos + 1 ] ) ; m [ { pos , myturn } ] = ans ; return ans ; } if ( myturn ) { int ans = min ( findMinimum ( a , n , pos + 1 , ! myturn ) , findMinimum ( a , n , pos + 2 , ! myturn ) ) ; m [ { pos , myturn } ] = ans ; return ans ; } return 0 ; } int countPenality ( int arr [ ] , int N ) { int pos = 0 ; int turn = 0 ; return findMinimum ( arr , N , pos , turn ) ; } void printAnswer ( int * arr , int N ) { int a = countPenality ( arr , N ) ; int sum = 0 ; for ( int i = 0 ; i < N ; i ++ ) { sum += arr [ i ] ; } cout << a ; } int main ( ) { int arr [ ] = { 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 } ; int N = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printAnswer ( arr , N ) ; return 0 ; }",] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/] [/,0.25012678697342783,5.022024015997833e-05,0.00045692765355143306,0.0,0.0
140,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int const MAX = 1000001 ; bool prime [ MAX ] ; void SieveOfEratosthenes ( ) { memset ( prime , true , sizeof ( prime ) ) ; for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * p ; i <= MAX ; i += p ) prime [ i ] = false ; } } } int getMid ( int s , int e ) { return s + ( e - s ) / 2 ; } int getSumUtil ( int * st , int ss , int se , int qs , int qe , int si ) { if ( qs <= ss && qe >= se ) return st [ si ] ; if ( se < qs ss > qe ) return 0 ; int mid = getMid ( ss , se ) ; return getSumUtil ( st , ss , mid , qs , qe , 2 * si + 1 ) + getSumUtil ( st , mid + 1 , se , qs , qe , 2 * si + 2 ) ; } void updateValueUtil ( int * st , int ss , int se , int i , int diff , int si ) { if ( i < ss i > se ) return ; st [ si ] = st [ si ] + diff ; if ( se != ss ) { int mid = getMid ( ss , se ) ; updateValueUtil ( st , ss , mid , i , diff , 2 * si + 1 ) ; updateValueUtil ( st , mid + 1 , se , i , diff , 2 * si + 2 ) ; } } void updateValue ( int arr [ ] , int * st , int n , int i , int new_val ) { if ( i < 0 i > n - 1 ) { cout << "" - 1"" ; return ; } int diff = new_val - arr [ i ] ; int prev_val = arr [ i ] ; arr [ i ] = new_val ; if ( prime [ new_val ] prime [ prev_val ] ) { if ( ! prime [ prev_val ] ) updateValueUtil ( st , 0 , n - 1 , i , new_val , 0 ) ; else if ( ! prime [ new_val ] ) updateValueUtil ( st , 0 , n - 1 , i , - prev_val , 0 ) ; else updateValueUtil ( st , 0 , n - 1 , i , diff , 0 ) ; } } int getSum ( int * st , int n , int qs , int qe ) { if ( qs < 0 qe > n - 1 qs > qe ) { cout << "" - 1"" ; return -1 ; } return getSumUtil ( st , 0 , n - 1 , qs , qe , 0 ) ; } int constructSTUtil ( int arr [ ] , int ss , int se , int * st , int si ) { if ( ss == se ) { if ( prime [ arr [ ss ] ] ) st [ si ] = arr [ ss ] ; else st [ si ] = 0 ; return st [ si ] ; } int mid = getMid ( ss , se ) ; st [ si ] = constructSTUtil ( arr , ss , mid , st , si * 2 + 1 ) + constructSTUtil ( arr , mid + 1 , se , st , si * 2 + 2 ) ; return st [ si ] ; } int * constructST ( int arr [ ] , int n ) { int x = ( int ) ( ceil ( log2 ( n ) ) ) ; int max_size = 2 * ( int ) pow ( 2 , x ) - 1 ; int * st = new int [ max_size ] ; constructSTUtil ( arr , 0 , n - 1 , st , 0 ) ; return st ; } int main ( ) { int arr [ ] = { 1 , 3 , 5 , 7 , 9 , 11 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int Q [ 3 ] [ 3 ] = { { 1 , 1 , 3 } , { 2 , 1 , 10 } , { 1 , 1 , 3 } } ; SieveOfEratosthenes ( ) ; int * st = constructST ( arr , n ) ; cout << getSum ( st , n , 1 , 3 ) << endl ; updateValue ( arr , st , n , 1 , 10 ) ; cout << getSum ( st , n , 1 , 3 ) << endl ; return 0 ; }","[INST ]
 [INST] [/][INST] [/ [INST] [/ [/ [/ [/ [/ [/
#include <i3. .

",0.004918396560533856,3.3767192490340684e-27,0.00022136090755714828,0.0026455026455026454,0.01680672268907563
141,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int mod = 1000000007 ; int dp [ 1000 ] [ 1000 ] ; int calculate ( int pos , int prev , string s , vector < int > * index ) { if ( pos == s . length ( ) ) return 1 ; if ( dp [ pos ] [ prev ] != -1 ) return dp [ pos ] [ prev ] ; int c = s [ pos ] - ' a ' ; int answer = 0 ; for ( int i = 0 ; i < index . size ( ) ; i ++ ) { if ( index [ i ] > prev ) { answer = ( answer % mod + calculate ( pos + 1 , index [ i ] , s , index ) % mod ) % mod ; } } return dp [ pos ] [ prev ] = answer ; } int countWays ( vector < string > & a , string s ) { int n = a . size ( ) ; vector < int > index [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < a [ i ] . length ( ) ; j ++ ) { index [ a [ i ] [ j ] - ' a ' ] . push_back ( j + 1 ) ; } } memset ( dp , -1 , sizeof ( dp ) ) ; return calculate ( 0 , 0 , s , index ) ; } int main ( ) { vector < string > A ; A . push_back ( "" adc "" ) ; A . push_back ( "" aec "" ) ; A . push_back ( "" erg "" ) ; string S = "" ac "" ; cout << countWays ( A , S ) ; return 0 ; }"," [INST] [INST] [INST] [INST] [INST] [INST] [INST ] [INST ]
 [INST ]





 [INST ]

e-12,0.0006806303140625016,0.0,0.05263157894736842
142,"#include <bits/stdc++.h> NEW_LINE using namespace std ; #define MAX  100005 NEW_LINE #define MOD  1000000007 NEW_LINE int dp [ MAX ] [ 101 ] [ 2 ] ; int countNum ( int idx , int sum , int tight , vector < int > num , int len , int k ) { if ( len == idx ) { if ( sum == 0 ) return 1 ; else return 0 ; } if ( dp [ idx ] [ sum ] [ tight ] != -1 ) return dp [ idx ] [ sum ] [ tight ] ; int res = 0 , limit ; if ( tight == 0 ) { limit = num [ idx ] ; } else { limit = 9 ; } for ( int i = 0 ; i <= limit ; i ++ ) { int new_tight = tight ; if ( tight == 0 && i < limit ) new_tight = 1 ; res += countNum ( idx + 1 , ( sum + i ) % k , new_tight , num , len , k ) ; res %= MOD ; } if ( res < 0 ) res += MOD ; return dp [ idx ] [ sum ] [ tight ] = res ; } vector < int > process ( string s ) { vector < int > num ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { num . push_back ( s [ i ] - '0' ) ; } return num ; } int main ( ) { string n = ""98765432109876543210"" ; int len = n . length ( ) ; int k = 58 ; memset ( dp , -1 , sizeof ( dp ) ) ; vector < int > num = process ( n ) ; cout << countNum ( 0 , 0 , 0 , num , len , k ) ; return 0 ; }", A DP [ ] ; Function to count the number of digits in n ; Function to count the number of digits in n ; Function to find the count of numbers from 0 to n that have digit sum divisible by k ; base case ; Base case ; base case ; Recursive case ; Driver code [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n,0.2507558235120579,0.0010517414226953892,0.0019715526255361946,0.0,0.0
143,"#include <bits/stdc++.h> NEW_LINE #define maxN  31 NEW_LINE #define maxW  31 NEW_LINE using namespace std ; int dp [ maxN ] [ maxW ] [ maxW ] ; int maxWeight ( int * arr , int n , int w1_r , int w2_r , int i ) { if ( i == n ) return 0 ; if ( dp [ i ] [ w1_r ] [ w2_r ] != -1 ) return dp [ i ] [ w1_r ] [ w2_r ] ; int fill_w1 = 0 , fill_w2 = 0 , fill_none = 0 ; if ( w1_r >= arr [ i ] ) fill_w1 = arr [ i ] + maxWeight ( arr , n , w1_r - arr [ i ] , w2_r , i + 1 ) ; if ( w2_r >= arr [ i ] ) fill_w2 = arr [ i ] + maxWeight ( arr , n , w1_r , w2_r - arr [ i ] , i + 1 ) ; fill_none = maxWeight ( arr , n , w1_r , w2_r , i + 1 ) ; dp [ i ] [ w1_r ] [ w2_r ] = max ( fill_none , max ( fill_w1 , fill_w2 ) ) ; return dp [ i ] [ w1_r ] [ w2_r ] ; } int main ( ) { int arr [ ] = { 8 , 2 , 3 } ; memset ( dp , -1 , sizeof ( dp ) ) ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int w1 = 10 , w2 = 3 ; cout << maxWeight ( arr , n , w1 , w2 , 0 ) ; return 0 ; }",] int main ( ) [/INST] { 3D array to store states of DP ; 1D array to store the result ; Driver code [/INST] 1D array to store the result ; Function to find the maximum value of the knapsack problem ; Base Case ; Initializing the 3D array with - 1 ; Fill the 3D array ; Fill the 3D array ; Print the result ; Driver code [/INST] 1D array to store the result ; Function to find the maximum value of the knapsack problem ; Function to find the maximum value of the knapsack problem ; Base Case ; Fill the 3D array ; Print the result ; Driver code [/INST] 1D array to store the result ; Function to find the maximum value of the knapsack problem ; Base Case ; Fill the 3D array ; Print the result ; Driver code [/INST] 1D array to store the result ; Function to find the maximum value of the knapsack problem ; Base Case ; Fill the ,0.25539986449127483,0.009896995567741975,0.011702462397357305,0.0,0.0
144,"#include <iostream> NEW_LINE #include <stack> NEW_LINE using namespace std ; #define n  3 NEW_LINE void findPrefixCount ( int p_arr [ ] [ n ] , bool set_bit [ ] [ n ] ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = n - 1 ; j >= 0 ; j -- ) { if ( ! set_bit [ i ] [ j ] ) continue ; if ( j != n - 1 ) p_arr [ i ] [ j ] += p_arr [ i ] [ j + 1 ] ; p_arr [ i ] [ j ] += ( int ) set_bit [ i ] [ j ] ; } } } int matrixAllOne ( bool set_bit [ ] [ n ] ) { int p_arr [ n ] [ n ] = { 0 } ; findPrefixCount ( p_arr , set_bit ) ; int ans = 0 ; for ( int j = 0 ; j < n ; j ++ ) { int i = n - 1 ; stack < pair < int , int > > q ; int to_sum = 0 ; while ( i >= 0 ) { int c = 0 ; while ( q . size ( ) != 0 and q . top ( ) . first > p_arr [ i ] [ j ] ) { to_sum -= ( q . top ( ) . second + 1 ) * ( q . top ( ) . first - p_arr [ i ] [ j ] ) ; c += q . top ( ) . second + 1 ; q . pop ( ) ; } to_sum += p_arr [ i ] [ j ] ; ans += to_sum ; q . push ( { p_arr [ i ] [ j ] , c } ) ; i -- ; } } return ans ; } int sumAndMatrix ( int arr [ ] [ n ] ) { int sum = 0 ; int mul = 1 ; for ( int i = 0 ; i < 30 ; i ++ ) { bool set_bit [ n ] [ n ] ; for ( int R = 0 ; R < n ; R ++ ) for ( int C = 0 ; C < n ; C ++ ) set_bit [ R ] [ C ] = ( ( arr [ R ] [ C ] & ( 1 << i ) ) != 0 ) ; sum += ( mul * matrixAllOne ( set_bit ) ) ; mul *= 2 ; } return sum ; } int main ( ) { int arr [ ] [ n ] = { { 9 , 7 , 4 } , { 8 , 9 , 2 } , { 11 , 11 , 5 } } ; cout << sumAndMatrix ( arr ) ; return 0 ; }", ; Function to find the sum   of   Bitwise   AND   of   all   submatrices ; Function to find   the   sum   of   Bitwise   AND   of   all   submatrices ; Function to   find   the   sum   of   Bitwise   AND   of   all   submatrices ; Array   to   store   the   prefix   sum   of   Bitwise   AND   of   each   row ; Function to   find   the   number   of   submatrices   with   all   1 s ; Array   to   store   the   count   of   submatrices   with   all   1 s ; Push   the   element   into   the   stack ; if   element   is   smaller   than   top   element   of   stack ; pop   all   elements   from   the   stack ; Function   to   find   the   sum   of  ,0.2503531487009714,0.00013760270802652054,0.0012749920958591058,0.0,1.0
145,#include <iostream> NEW_LINE using namespace std ; int CountWays ( int n ) { int noOfWays [ 3 ] ; noOfWays [ 0 ] = 1 ; noOfWays [ 1 ] = 1 ; noOfWays [ 2 ] = 1 + 1 ; for ( int i = 3 ; i < n + 1 ; i ++ ) { noOfWays [ i ] = noOfWays [ 3 - 1 ] + noOfWays [ 3 - 3 ] ; noOfWays [ 0 ] = noOfWays [ 1 ] ; noOfWays [ 1 ] = noOfWays [ 2 ] ; noOfWays [ 2 ] = noOfWays [ i ] ; } return noOfWays [ n ] ; } int main ( ) { int n = 5 ; cout << CountWays ( n ) ; return 0 ; },] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; int countWays ( int n ) { int noOfWays [ n + 1 ] ; noOfWays [ 0 ] = 1 ; noOfWays [ 1 ] = 2 ; noOfWays [ 2 ] = 3 ; for ( int i = 3 ; i <= n ; i ++ ) { int a = noOfWays [ i - 1 ] ; int b = noOfWays [ i - 2 ] ; int c = noOfWays [ i - 3 ] ; noOfWays [ i ] = a + b + c ; } return noOfWays [ n ] ; } int main ( ) { int n = 4 ; cout << countWays ( n ) ; return 0 ; } ---------------------------------------------------------------- -------------------- ------------------- ----------------- ----------------- ------------------ ------------------- ------------------- ----------------- ----------------- ----------------- ----------------- ----------------- ----------------- ----------------- ----------------- ----------------- -----------------,0.5499185713752939,0.5456876397640679,0.5956878244564447,0.6164383561643836,0.4418604651162791
146,"#include <bits/stdc++.h> NEW_LINE using namespace std ; #define MAX  105 NEW_LINE void sieve ( int prime [ ] ) { for ( int i = 2 ; i * i <= MAX ; i ++ ) { if ( prime [ i ] == 0 ) { for ( int j = i * i ; j <= MAX ; j += i ) prime [ j ] = 1 ; } } } void dfs ( int i , int j , int k , int * q , int n , int m , int mappedMatrix [ ] [ MAX ] , int mark [ ] [ MAX ] , pair < int , int > ans [ ] ) { if ( mappedMatrix [ i ] [ j ] == 0 || i > n || j > m || mark [ i ] [ j ] || ( * q ) ) return ; mark [ i ] [ j ] = 1 ; ans [ k ] = make_pair ( i , j ) ; if ( i == n && j == m ) { ( * q ) = k ; return ; } dfs ( i + 1 , j + 1 , k + 1 , q , n , m , mappedMatrix , mark , ans ) ; dfs ( i + 1 , j , k + 1 , q , n , m , mappedMatrix , mark , ans ) ; dfs ( i , j + 1 , k + 1 , q , n , m , mappedMatrix , mark , ans ) ; } void lexicographicalPath ( int n , int m , int mappedMatrix [ ] [ MAX ] ) { int q = 0 ; pair < int , int > ans [ MAX ] ; int mark [ MAX ] [ MAX ] ; dfs ( 1 , 1 , 1 , & q , n , m , mappedMatrix , mark , ans ) ; for ( int i = 1 ; i <= q ; i ++ ) cout << ans [ i ] . first << "" ▁ "" << ans [ i ] . second << "" STRNEWLINE "" ; } void countPrimePath ( int mappedMatrix [ ] [ MAX ] , int n , int m ) { int dp [ MAX ] [ MAX ] = { 0 } ; dp [ 1 ] [ 1 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { if ( i == 1 && j == 1 ) continue ; dp [ i ] [ j ] = ( dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] + dp [ i - 1 ] [ j - 1 ] ) ; if ( mappedMatrix [ i ] [ j ] == 0 ) dp [ i ] [ j ] = 0 ; } } cout << dp [ n ] [ m ] << "" STRNEWLINE "" ; } void preprocessMatrix ( int mappedMatrix [ ] [ MAX ] , int a [ ] [ MAX ] , int n , int m ) { int prime [ MAX ] ; sieve ( prime ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( prime [ a [ i ] [ j ] ] == 0 ) mappedMatrix [ i + 1 ] [ j + 1 ] = 1 ; else mappedMatrix [ i + 1 ] [ j + 1 ] = 0 ; } } } int main ( ) { int n = 3 ; int m = 3 ; int a [ MAX ] [ MAX ] = { { 2 , 3 , 7 } , { 5 , 4 , 2 } , { 3 , 7 , 11 } } ; int mappedMatrix [ MAX ] [ MAX ] = { 0 } ; preprocessMatrix ( mappedMatrix , a , n , m ) ; countPrimePath ( mappedMatrix , n , m ) ; lexicographicalPath ( n , m , mappedMatrix ) ; return 0 ; }", ; Function to print the final answer ; Driver code [/ C ++ 1 ; Function to check if   the   given   grid [/  end   of   the   grid [/ 1 ] ; Function to   check   if   the   grid   is   prime   or   not /  ; Function   to   print   the   lexicographically   largest   prime   path   in   the   grid [/ 1 ] ; Function   to   check   if   the   given   number   is   prime [/ 1 ] ; Function   to   check   if   the   given   number   is   prime [/1 ] ; Function   to   print   the   lexicographically   largest   prime   path [/1 ] ; Function   to   find,0.25040942445559217,1.3743489952201515e-05,0.0016239543324164311,0.0,0.0
147,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int isSubsetSum ( int set [ ] , int n , int sum ) { bool subset [ sum + 1 ] [ n + 1 ] ; int count [ sum + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { subset [ 0 ] [ i ] = true ; count [ 0 ] [ i ] = 0 ; } for ( int i = 1 ; i <= sum ; i ++ ) { subset [ i ] [ 0 ] = false ; count [ i ] [ 0 ] = -1 ; } for ( int i = 1 ; i <= sum ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { subset [ i ] [ j ] = subset [ i ] [ j - 1 ] ; count [ i ] [ j ] = count [ i ] [ j - 1 ] ; if ( i >= set [ j - 1 ] ) { subset [ i ] [ j ] = subset [ i ] [ j ] || subset [ i - set [ j - 1 ] ] [ j - 1 ] ; if ( subset [ i ] [ j ] ) count [ i ] [ j ] = max ( count [ i ] [ j - 1 ] , count [ i - set [ j - 1 ] ] [ j - 1 ] + 1 ) ; } } } return count [ sum ] [ n ] ; } int main ( ) { int set [ ] = { 2 , 3 , 5 , 10 } ; int sum = 20 ; int n = 4 ; cout << isSubsetSum ( set , n , sum ) ; }",Returns true if there is a   given   a   number   is   a   power   of   '2'   in   base   base   of   '10' .   '10' is   of   '2' .   in   base   of   '10' is   of   '2' . '10' is   of   '2' . '10' is   of   '2' . '10' is   of   '2' . '10' is   of   '2' . '10' is   of   '2' . '10' is   of   '2' . '10' is   of   '2' . '10' is   of   '2' . '10' is   of   '2' . '10' is   of   '2' . '10' is   of   ',0.04695858218195987,0.00014136690875285438,0.0008797750058998161,0.0,0.18681318681318682
148,"#include <bits/stdc++.h> NEW_LINE #define MAX  100 NEW_LINE using namespace std ; int lcslen = 0 ; int dp [ MAX ] [ MAX ] ; int lcs ( string str1 , string str2 , int len1 , int len2 , int i , int j ) { int & ret = dp [ i ] [ j ] ; if ( i == len1 j == len2 ) return ret = 0 ; if ( ret != -1 ) return ret ; ret = 0 ; if ( str1 [ i ] == str2 [ j ] ) ret = 1 + lcs ( str1 , str2 , len1 , len2 , i + 1 , j + 1 ) ; else ret = max ( lcs ( str1 , str2 , len1 , len2 , i + 1 , j ) , lcs ( str1 , str2 , len1 , len2 , i , j + 1 ) ) ; return ret ; } void printAll ( string str1 , string str2 , int len1 , int len2 , char data [ ] , int indx1 , int indx2 , int currlcs ) { if ( currlcs == lcslen ) { data [ currlcs ] = ' \0' ; puts ( data ) ; return ; } if ( indx1 == len1 indx2 == len2 ) return ; for ( char ch = ' a ' ; ch <= ' z ' ; ch ++ ) { bool done = false ; for ( int i = indx1 ; i < len1 ; i ++ ) { if ( ch == str1 [ i ] ) { for ( int j = indx2 ; j < len2 ; j ++ ) { if ( ch == str2 [ j ] && dp [ i ] [ j ] == lcslen - currlcs ) { data [ currlcs ] = ch ; printAll ( str1 , str2 , len1 , len2 , data , i + 1 , j + 1 , currlcs + 1 ) ; done = true ; break ; } } } if ( done ) break ; } } } void prinlAllLCSSorted ( string str1 , string str2 ) { int len1 = str1 . length ( ) , len2 = str2 . length ( ) ; memset ( dp , -1 , sizeof ( dp ) ) ; lcslen = lcs ( str1 , str2 , len1 , len2 , 0 , 0 ) ; char data [ MAX ] ; printAll ( str1 , str2 , len1 , len2 , data , 0 , 0 , 0 ) ; } int main ( ) { string str1 = "" abcabcaa "" , str2 = "" acbacba "" ; prinlAllLCSSorted ( str1 , str2 ) ; return 0 ; }"," [INST] [INST] [INST] [INST] [INST ]
 [INST ]
#include <stdio.h> int main ( function main ( ) [/bin/C ++ [/ / [/include < iostream> < string > 1   i    * [/
 #include < iostream> using namespace   C ++ ; A CPP   1 [/
 using   i   namespace   C ++  end   i #include < string > < iostream",0.2511883259484816,2.1022809503345554e-05,0.004732280984423055,0.0,0.0
149,"#include <bits/stdc++.h> NEW_LINE using namespace std ; bool isMajority ( int arr [ ] , int n , int x ) { int i ; int last_index = n % 2 ? ( n / 2 + 1 ) : ( n / 2 ) ; for ( i = 0 ; i < last_index ; i ++ ) { if ( arr [ i ] == x && arr [ i + n / 2 ] == x ) return 1 ; } return 0 ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 4 , 4 , 4 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int x = 4 ; if ( isMajority ( arr , n , x ) ) cout << x << "" ▁ appears ▁ more ▁ than ▁ "" << n / 2 << "" ▁ times ▁ in ▁ arr [ ] "" << endl ; else cout << x << "" ▁ does ▁ not ▁ appear ▁ more ▁ than "" << n / 2 << "" ▁ times ▁ in ▁ arr [ ] "" << endl ; return 0 ; }"," 3 ; Driver code [/INST] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; int isMajority ( int arr [ ] , int n ) { int i = n / 2 ; int l = 0 ; int r = n - 1 ; while ( l < r ) { int m = ( l + r ) / 2 ; if ( arr [ m ] == x ) i = m ; else if ( arr [ m ] > x ) r = m - 1 ; else l = m + 1 ; } return ( i == n - 1 ) ? arr [ i ] : - 1 ; } int main ( ) { int arr [ ] = { 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 4 , 5 , 5 , 5 } ; int n = sizeof ( arr ) / sizeof ( int ) ; cout << isMajority ( arr , n ) ; return 0 ; } --------------------------------",0.388389664542137,0.35090954651916717,0.36118569701523456,0.34146341463414637,0.5
150,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int _binarySearch ( int arr [ ] , int low , int high , int x ) { if ( high >= low ) { int mid = ( low + high ) / 2 ; if ( ( mid == 0 x > arr [ mid - 1 ] ) && ( arr [ mid ] == x ) ) return mid ; else if ( x > arr [ mid ] ) return _binarySearch ( arr , ( mid + 1 ) , high , x ) ; else return _binarySearch ( arr , low , ( mid - 1 ) , x ) ; } return -1 ; } bool isMajority ( int arr [ ] , int n , int x ) { int i = _binarySearch ( arr , 0 , n - 1 , x ) ; if ( i == -1 ) return false ; if ( ( ( i + n / 2 ) <= ( n - 1 ) ) && arr [ i + n / 2 ] == x ) return true ; else return false ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 10 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int x = 3 ; if ( isMajority ( arr , n , x ) ) cout << x << "" ▁ appears ▁ more ▁ than ▁ "" << n / 2 << "" ▁ times ▁ in ▁ arr [ ] "" << endl ; else cout << x << "" ▁ does ▁ not ▁ appear ▁ more ▁ than "" << n / 2 << "" ▁ times ▁ in ▁ arr [ ] "" << endl ; return 0 ; }"," [INST] [INST] [INST] [INST] [INST] [INST] [INST ]
 [INST ] [INST ]

 #include < i = 1 ]





















































































































",0.014722996740531374,1.5905254998617518e-09,0.0017491282287428534,0.0,0.05714285714285714
151,"#include <iostream> NEW_LINE using namespace std ; bool isMajorityElement ( int arr [ ] , int n , int key ) { if ( arr [ n / 2 ] == key ) return true ; else return false ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 10 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int x = 3 ; if ( isMajorityElement ( arr , n , x ) ) cout << x << "" ▁ appears ▁ more ▁ than ▁ "" << n / 2 << "" ▁ times ▁ in ▁ arr [ ] "" << endl ; else cout << x << "" ▁ does ▁ not ▁ appear ▁ more ▁ than "" << n / 2 << "" ▁ times ▁ in ▁ arr [ ] "" << endl ; return 0 ; }"," \n  /n  #include <bits/stdc++.h> NEW_LINE using namespace std ; bool isMajority ( int arr [ ] , int n ) { int x = arr [ n / 2 ] ; int count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] == x ) count ++ ; else count -- ; if ( count == 0 ) { x = arr [ i ] ; count = 1 ; } if ( count == 0 ) return false ; } return true ; } 0000 n / 2 n / 2 n / 2 n / 2 n / 2 n / 2 n / 2 n / 2 n / 2 n / 2 n / 2 n / 2 n / 2 n / 2 n / 2 n / 2 n / 2 n / 2 n / 2 n / 2 n / 2 n / 2 n / 2 n / 2 n / 2 n / 2 n / 2 n / 2 n",0.2826776018821067,0.18552969101151293,0.2084538418590047,0.25396825396825395,0.4827586206896552
152,"#include <iostream> NEW_LINE #include <bits/stdc++.h> NEW_LINE #include <math.h> NEW_LINE using namespace std ; int max ( int a , int b ) { return ( a > b ) ? a : b ; } int cutRod ( int price [ ] , int n ) { int val [ n + 1 ] ; val [ 0 ] = 0 ; int i , j ; for ( i = 1 ; i <= n ; i ++ ) { int max_val = INT_MIN ; for ( j = 0 ; j < i ; j ++ ) max_val = max ( max_val , price [ j ] + val [ i - j - 1 ] ) ; val [ i ] = max_val ; } return val [ n ] ; } int main ( ) { int arr [ ] = { 1 , 5 , 8 , 9 , 10 , 17 , 17 , 20 } ; int size = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << "" Maximum ▁ Obtainable ▁ Value ▁ is ▁ "" << cutRod ( arr , size ) ; getchar ( ) ; return 0 ; }"," #include <bits/stdc++.h> NEW_LINE  #include <iostream> NEW_LINE using namespace std ; int max ( int x , int y ) ; int cutRod ( int price [ ] , int n ) { int val [ n + 1 ] ; val [ 0 ] = 0 ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( price [ j ] > val [ i ] ) val [ i ] = max ( val [ i ] , price [ j ] + cutRod ( price , i - j ) ) ; } return val [ n ] ; } int main ( ) { int price [ ] = { 1 , 5 , 8 , 9 , 10 , 17 , 17 , 17 , 20 , 24 , 30 } ; int n = 7 ; cout << cutRod ( price , n ) ; return 0 ; } 0000",0.5116583453671567,0.5473581071172208,0.556418131494263,0.47619047619047616,0.4666666666666667
153,"#include <iostream> NEW_LINE using namespace std ; int t [ 9 ] [ 9 ] ; int un_kp ( int price [ ] , int length [ ] , int Max_len , int n ) { if ( n == 0 Max_len == 0 ) { return 0 ; } if ( length [ n - 1 ] <= Max_len ) { t [ n ] [ Max_len ] = max ( price [ n - 1 ] + un_kp ( price , length , Max_len - length [ n - 1 ] , n ) , un_kp ( price , length , Max_len , n - 1 ) ) ; } else { t [ n ] [ Max_len ] = un_kp ( price , length , Max_len , n - 1 ) ; } return t [ n ] [ Max_len ] ; } int main ( ) { int price [ ] = { 1 , 5 , 8 , 9 , 10 , 17 , 17 , 20 } ; int n = sizeof ( price ) / sizeof ( price [ 0 ] ) ; int length [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { length [ i ] = i + 1 ; } int Max_len = n ; cout << "" Maximum ▁ obtained ▁ value ▁ is ▁ "" << un_kp ( price , length , n , Max_len ) << endl ; }"," ; Driver code [/n ] ; Function to print the output ; Function to print the output [/n ] void printKnapsack ( int K [ ] ; Initialize the dp array with 0 s ; Function to find the maximum profit ; Base case ; if the length of the rod is 0 , then profit is 0 ; If the length of the rod is more than n , then profit is 0 ; if the length of the rod is equal to the current length of the rod , then profit is the maximum profit for the rod of that length ; Function to print the output [/n ] ; Function to find the maximum profit for the rod of length n ; Driver code [/n ] ; length of the rod ; Initialize the dp array with 0 s ; Function Call to find the maximum profit [/n ] ; Function to print the output [/n ] ; Driver code [/n ] ; length of the rod [/n ] ;",0.1925592070166198,0.005294027866950587,0.005651776757561717,0.04716981132075472,0.7121212121212122
154,"#include <bits/stdc++.h> NEW_LINE using namespace std ; bool isPossible ( int target [ ] , int n ) { int max = 0 ; int index = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( max < target [ i ] ) { max = target [ i ] ; index = i ; } } if ( max == 1 ) return true ; for ( int i = 0 ; i < n ; i ++ ) { if ( i != index ) { max -= target [ i ] ; if ( max <= 0 ) return false ; } } target [ index ] = max ; return isPossible ( target , n ) ; } int main ( ) { int target [ ] = { 9 , 3 , 5 } ; int n = sizeof ( target ) / sizeof ( target [ 0 ] ) ; bool res = isPossible ( target , n ) ; if ( res ) { cout << "" YES "" ; } else { cout << "" NO "" ; } return 0 ; }", [/INST] [/INST] ; Function to print the array elements of the array [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST] [/INST,0.03915217933670254,0.0002674706145767318,0.0007856911766778959,0.0,0.15555555555555556
155,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int nCr ( int n , int r ) { int res = 1 ; if ( r > n - r ) r = n - r ; for ( int i = 0 ; i < r ; ++ i ) { res *= ( n - i ) ; res /= ( i + 1 ) ; } return res ; } int main ( ) { int n = 3 , m = 2 , k = 2 ; cout << nCr ( n + m , k ) ; return 0 ; }",1]1]1] \n #include <bits/stdc ++ . h> NEW_LINE ; Function to calculate the sum of the series ; Driver code [/n1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1]1,0.019151349107123683,0.00025017604605034356,0.0022811463083703166,0.0,0.07407407407407407
156,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void Is_possible ( long long int N ) { int C = 0 ; int D = 0 ; while ( N % 10 == 0 ) { N = N / 10 ; C += 1 ; } if ( pow ( 2 , ( int ) log2 ( N ) ) == N ) { D = ( int ) log2 ( N ) ; if ( C >= D ) cout << "" YES "" ; else cout << "" NO "" ; } else cout << "" NO "" ; } int main ( ) { long long int N = 2000000000000 ; Is_possible ( N ) ; }", program to check if N can be obtained from 1 by repetitive multiplication by 10 or 20 / ; Function to check if N can be obtained from 1 by repetitive multiplication by 10 or 20 ; Count and remove trailing zeroes ; Check if N is a power of 2 ; Driver code [/ CPP program to check if N can be obtained from 1 by repetitive multiplication by 10 or 20 ; Function call [/ 10 or 20 ; Function call [/ 10 or 20 ; Function call [/ 10 or 20 ; Function call [/ 10 or 20 ; Function call [/ 10 or 20 ; Function call [/ 10 or 20 ; Function call [/ 10 or 20 ; Function call [/ 10 or 20 ; Function call [/ 10 or 20 ; Function call [/ 10 or 20 ; Function call [/ 10 or,0.16842257046445192,0.002611115763366195,0.003032237177947273,0.015873015873015872,0.6521739130434783
157,#include <iostream> NEW_LINE #include <math.h> NEW_LINE using namespace std ; void findNthTerm ( int n ) { cout << n * n - n + 1 << endl ; } int main ( ) { int N = 4 ; findNthTerm ( N ) ; return 0 ; },] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; int nthTerm ( int n ) { return ( n * ( n + 1 ) * ( 2 * n + 1 ) / 6 ) ; } int main ( ) { int n = 4 ; cout << nthTerm ( n ) ; return 0 ; } ------------------------------------------------ 2 / 03A  / 03A / 03A / 03A / 03A / 03A / 03A / 03A / 03A / 03A / 03A / 03A / 03A / 03A / 03A / 03A / 03A / 03A / 03A / 03A / 03A / 03A / 03A / 03A / 03A / 03A / 03A / 03A / 03A / 03A / 03A /,0.3627263499059632,0.17594900306499708,0.458289729892189,0.4166666666666667,0.4
158,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int rev ( int num ) { int rev_num = 0 ; while ( num > 0 ) { rev_num = rev_num * 10 + num % 10 ; num = num / 10 ; } return rev_num ; } int divSum ( int num ) { int result = 0 ; for ( int i = 2 ; i <= sqrt ( num ) ; i ++ ) { if ( num % i == 0 ) { if ( i == ( num / i ) ) result += rev ( i ) ; else result += ( rev ( i ) + rev ( num / i ) ) ; } } return ( result + 1 ) ; } bool isAntiPerfect ( int n ) { return divSum ( n ) == n ; } int main ( ) { int N = 244 ; if ( isAntiPerfect ( N ) ) cout << "" Yes "" ; else cout << "" No "" ; return 0 ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; int reverse ( int num ) { int rev = 0 ; while ( num != 0 ) { rev = rev * 10 + num % 10 ; num = num / 10 ; } return rev ; } int sumOfDivisors ( int num ) { int sum = 0 ; for ( int i = 1 ; i <= sqrt ( num ) ; i ++ ) { if ( num % i == 0 ) { if ( num / i == i ) sum += i ; else sum += ( i + num / i ) ; } } sum += 1 ; return sum ; } bool isAntiPerfect ( int N ) { return ( N == sumOfDivisors ( reverse ( N ) ) ; } int main ( ) { int N = 14 ; if ( isAntiPerfect ( N ) cout << "" Yes "" ; else cout << "" No "" ; return 0 ; } ---------------------------------------------------- ------------------------------------ ------------------------------------ ----------------",0.6587898848230902,0.6422038687459907,0.6518928686140028,0.6521739130434783,0.6888888888888889
159,"#include "" bits / stdc + + . h "" NEW_LINE using namespace std ; void printSeries ( int n , int a , int b , int c ) { int d ; if ( n == 1 ) { cout << a << "" ▁ "" ; return ; } if ( n == 2 ) { cout << a << "" ▁ "" << b << "" ▁ "" ; return ; } cout << a << "" ▁ "" << b << "" ▁ "" << c << "" ▁ "" ; for ( int i = 4 ; i <= n ; i ++ ) { d = a + b + c ; cout << d << "" ▁ "" ; a = b ; b = c ; c = d ; } } int main ( ) { int N = 7 , a = 1 , b = 3 ; int c = 4 ; printSeries ( N , a , b , c ) ; return 0 ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; void printSeries ( int n ) { int a = 1 , b = 3 , c = 4 ; for ( int i = 1 ; i <= n ; i ++ ) { int d = a + b + c ; cout << d << ""   "" ; a = b ; b = c ; c = d ; } } int main ( ) { int n = 10 ; printSeries ( n ) ; return 0 ; }
160,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int diameter ( int n ) { int L , H , templen ; L = 1 ; H = 0 ; if ( n == 1 ) { return 1 ; } if ( n == 2 ) { return 2 ; } if ( n == 3 ) { return 3 ; } while ( L * 2 <= n ) { L *= 2 ; H ++ ; } if ( n >= L * 2 - 1 ) return 2 * H + 1 ; else if ( n >= L + ( L / 2 ) - 1 ) return 2 * H ; return 2 * H - 1 ; } int main ( ) { int n = 15 ; cout << diameter ( n ) << endl ; }","] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; int diameter ( int n ) { int l , h , ans ; if ( n == 1 ) return 1 ; if ( n == 2 ) return 2 ; if ( n == 3 ) return 3 ; if ( n == 4 ) return 4 ; if ( n == 5 ) return 5 ; if ( n == 6 ) return 6 ; if ( n == 7 ) return 7 ; if ( n == 8 ) return 8 ; if ( n == 9 ) return 9 ; if ( n == 10 ) return 10 ; if ( n == 11 ) return 11 ; if ( n == 12 ) return 12 ; if ( n == 13 ) return 13 ; if ( n == 14 ) return 14 ; if ( n == 15 ) return 15 ; if ( n == 16 ) return 16 ; if ( n == 17 ) return 17 ; if ( n == 18 ) return 1",0.20777678547060696,0.2177039235121708,0.28702640677605423,0.2463768115942029,0.08
161,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void compareValues ( int a , int b , int c , int d ) { double log1 = log10 ( a ) ; double num1 = log1 * b ; double log2 = log10 ( c ) ; double num2 = log2 * d ; if ( num1 > num2 ) cout << a << "" ^ "" << b ; else cout << c << "" ^ "" << d ; } int main ( ) { int a = 8 , b = 29 , c = 60 , d = 59 ; compareValues ( a , b , c , d ) ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; bool isLarger ( int a , int b , int c , int d ) { double x = ( double ) ( b * log ( a ) ; double y = ( double ) ( d * log ( c ) ; return ( x > y ) ; } int main ( ) { int a = 2 , b = 10 , c = 3 , d = 5 ; if ( isLarger ( a , b , c , d ) ) cout << "" Yes "" ; else cout << "" No "" ; return 0 ; } ---------------------------------------------------------------- 2 / 03 / 05 / 15 / 19 / 20 17 : 44 ( 0 . 18 ) 10 : 00 ( 0 . 18 ) ---------------------------------------------------------------- -------------------- END ------------------------------------------------ -------------------- END ------------------------------------------------ -------------------- END ------------------------------------------------ -------------------- END ------------------------------------------------ -------------------- END ------------------------------------------------ --------------------",0.5377610139631112,0.3384557323918672,0.47925499012724415,0.5098039215686274,0.8235294117647058
162,"#include <bits/stdc++.h> NEW_LINE using namespace std ; #define MAX  100005 NEW_LINE vector < int > addPrimes ( ) { int n = MAX ; bool prime [ n + 1 ] ; memset ( prime , true , sizeof ( prime ) ) ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * p ; i <= n ; i += p ) prime [ i ] = false ; } } vector < int > ans ; for ( int p = 2 ; p <= n ; p ++ ) if ( prime [ p ] ) ans . push_back ( p ) ; return ans ; } bool is_prime ( int n ) { return ( n == 3 n == 5 n == 7 ) ; } int find_Sum ( int n ) { int sum = 0 ; vector < int > v = addPrimes ( ) ; for ( int i = 0 ; i < v . size ( ) and n ; i ++ ) { int flag = 1 ; int a = v [ i ] ; while ( a != 0 ) { int d = a % 10 ; a = a / 10 ; if ( is_prime ( d ) ) { flag = 0 ; break ; } } if ( flag == 1 ) { n -- ; sum = sum + v [ i ] ; } } return sum ; } int main ( ) { int n = 7 ; cout << find_Sum ( n ) ; return 0 ; }","] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; vector < int > primes ; void SieveOfEratosthenes ( ) { bool check [ 1000001 ] ; memset ( check , true , sizeof ( check ) ) ; for ( int i = 2 ; i * i <= 1000000 ; i ++ ) { if ( check [ i ] == true ) { for ( int j = i * 2 ; j <= 1000000 ; j += i ) check [ j ] = false ; } } for ( int i = 2 ; i <= 1000000 ; i ++ ) if ( check [ i ] ) primes . push_back ( i ) ; } bool isOddPrime ( int num ) { int temp = num ; while ( num > 0 ) { int rem = num % 10 ; if ( rem == 2 rem == 3 rem == 5 rem == 7 ) { temp = 0 ; break ; } num = num / 10 ; } return ( temp !=",0.36751570427548363,0.21646710120398166,0.25359571589795277,0.0,0.0
163,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int primeCount ( int arr [ ] , int n ) { int max_val = * max_element ( arr , arr + n ) ; vector < bool > prime ( max_val + 1 , true ) ; prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= max_val ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= max_val ; i += p ) prime [ i ] = false ; } } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( prime [ arr [ i ] ] ) count ++ ; return count ; } void getPrefixArray ( int arr [ ] , int n , int pre [ ] ) { pre [ 0 ] = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { pre [ i ] = pre [ i - 1 ] + arr [ i ] ; } } int main ( ) { int arr [ ] = { 1 , 4 , 8 , 4 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int pre [ n ] ; getPrefixArray ( arr , n , pre ) ; cout << primeCount ( pre , n ) ; return 0 ; }","] #include <bits/stdc ++ . h> NEW_LINE  include < iostream > NEW_LINE using namespace std ; #define ll  long long long int countPrimes ( int arr [ ] , int n ) { int max_val = * max_element ( arr , n ) ; bool prime [ max_val + 1 ] ; bool prime [ p ] = false if p is not prime else true ; If prime [ p ] is not changed , then it is a prime ; Update all multiples of p ; Return the count of primes in the array ; Function to generate the prefix array ; Fill the prefix array ; Print the count of primes in the prefix array [/INST ] void printPrefixPrimes ( int prefix [ ] , int n ) { int i , count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { cout << count << ""   "" ; } } int main ( ) { int arr [ ] = { 2 , 3 , 5 , 7 , 1",0.38075117067367065,0.23961323701434886,0.26776644568033375,0.015625,0.0
164,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int minValue ( int n , int x , int y ) { float val = ( y * n ) / 100 ; if ( x >= val ) return 0 ; else return ( ceil ( val ) - x ) ; } int main ( ) { int n = 10 , x = 2 , y = 40 ; cout << minValue ( n , x , y ) ; }","] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; int getValue ( int n , int x , int y ) { int ans = 0 ; if ( x >= ( y * n ) / 100 ) return 0 ; else ans = ( y * n ) / 100 - x ; return ans ; } int main ( ) { int n = 100 , x = 80 , y = 10 ; cout << getValue ( n , x , y ) ; return 0 ; }
165,"#include <bits/stdc++.h> NEW_LINE using namespace std ; bool isPrime ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 n % 3 == 0 ) return false ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; } bool isFactorialPrime ( long n ) { if ( ! isPrime ( n ) ) return false ; long fact = 1 ; int i = 1 ; while ( fact <= n + 1 ) { fact = fact * i ; if ( n + 1 == fact n - 1 == fact ) return true ; i ++ ; } return false ; } int main ( ) { int n = 23 ; if ( isFactorialPrime ( n ) ) cout << "" Yes "" ; else cout << "" No "" ; return 0 ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; bool isPrime ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; for ( int i = 2 ; i * i <= n ; i ++ ) if ( n % i == 0 ) return false ; return true ; } bool isFactorialPrime ( int n ) { if ( ! isPrime ( n ) return false ; int factorial = 1 ; for ( int i = 2 ; i <= n ; i ++ ) factorial *= i ; if ( n == factorial ) return true ; return false ; } int main ( ) { int n = 12 ; if ( isFactorialPrime ( n ) cout << "" Yes "" ; else cout << "" No "" ; return 0 ; } --------------------------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- ----------------------------------- --------------------------------",0.600702717174102,0.5835998368881505,0.603750505492468,0.53125,0.6842105263157895
166,#include <bits/stdc++.h> NEW_LINE using namespace std ; #define ll  long int NEW_LINE int main ( ) { ll n = 5 ; ll fac1 = 1 ; for ( int i = 2 ; i <= n - 1 ; i ++ ) fac1 = fac1 * i ; ll fac2 = fac1 * n ; ll totalWays = fac1 * fac2 ; cout << totalWays << endl ; return 0 ; },"] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; int findTotalWays ( int n ) { int fac1 , fac2 , total_ways ; fac1 = 1 ; fac2 = 1 ; for ( int i = 1 ; i <= n - 1 ; i ++ ) fac1 *= i ; for ( int i = 1 ; i <= n ; i ++ ) fac2 *= i ; total_ways = fac1 * fac2 ; return total_ways ; } int main ( ) { int n = 5 ; cout << findTotalWays ( n ) << endl ; return 0 ; } -------------------------------------------------------------------------------- 1 / 2 1 / 2 1 / 2 1 / 2 1 / 2 1 / 2 1 / 2 1 / 2 1 / 2 1 / 2 1 / 2 1 / 2 1 / 2 1 / 2 1 / 2 1 / 2 1 / 2 1 / 2 1 / 2 1 / 2 1 /",0.453560231910347,0.24579758968729792,0.56844333795409,0.0,0.0
167,"#include <bits/stdc++.h> NEW_LINE using namespace std ; #define MAX  10000 NEW_LINE vector < int > arr ; void SieveOfEratosthenes ( ) { bool prime [ MAX ] ; memset ( prime , true , sizeof ( prime ) ) ; for ( int p = 2 ; p * p < MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i < MAX ; i += p ) prime [ i ] = false ; } } for ( int p = 2 ; p < MAX ; p ++ ) if ( prime [ p ] ) arr . push_back ( p ) ; } bool isEuclid ( long n ) { long long product = 1 ; int i = 0 ; while ( product < n ) { product = product * arr [ i ] ; if ( product + 1 == n ) return true ; i ++ ; } return false ; } int main ( ) { SieveOfEratosthenes ( ) ; long n = 31 ; if ( isEuclid ( n ) ) cout << "" YES STRNEWLINE "" ; else cout << "" NO STRNEWLINE "" ; n = 42 ; if ( isEuclid ( n ) ) cout << "" YES STRNEWLINE "" ; else cout << "" NO STRNEWLINE "" ; return 0 ; }",] #include <bits/stdc++.h> NEW_LINE using namespace std ; using namespace std ; #define int   max   = 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0.4455285257098539,8.683296247458202e-07,0.032113234509790776,0.75,0.0
168,#include <cmath> NEW_LINE #include <iostream> NEW_LINE using namespace std ; int nextPerfectCube ( int N ) { int nextN = floor ( cbrt ( N ) ) + 1 ; return nextN * nextN * nextN ; } int main ( ) { int n = 35 ; cout << nextPerfectCube ( n ) ; return 0 ; }," #include <bits/stdc++.h> NEW_LINE using namespace std ; int nextPerfectCube ( int n ) { return ( ( int ) pow ( n , ( int ) ; Function to find the next perfect cube greater than n ; Driver Code [/n ] int n = 10 ; Prints the next perfect cube greater than n ; Find the next perfect cube greater than n ; Driver Code [/n ] Function Call [/n ] ; Function Call [/n ] [/n ] ; Function Call [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/n ] [/",0.3392338675117876,0.0848125378266819,0.2175252310710432,0.13793103448275862,0.9166666666666666
169,"#include <bits/stdc++.h> NEW_LINE using namespace std ; bool isPrime ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 n % 3 == 0 ) return false ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; } int SumOfPrimeDivisors ( int n ) { int sum = 0 ; int root_n = ( int ) sqrt ( n ) ; for ( int i = 1 ; i <= root_n ; i ++ ) { if ( n % i == 0 ) { if ( i == n / i && isPrime ( i ) ) { sum += i ; } else { if ( isPrime ( i ) ) { sum += i ; } if ( isPrime ( n / i ) ) { sum += ( n / i ) ; } } } } return sum ; } int main ( ) { int n = 60 ; cout << "" Sum ▁ of ▁ prime ▁ divisors ▁ of ▁ 60 ▁ is ▁ "" << SumOfPrimeDivisors ( n ) << endl ; }",] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; bool isPrime ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 n % 3 == 0 ) return false ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; } int sumOfPrimeDivisors ( int n ) { int sum = 0 ; for ( int i = 2 ; i <= sqrt ( n ) ; i ++ ) { if ( isPrime ( i ) && n % i == 0 ) { if ( i == n / i ) sum += i ; else sum += i + n / i ; } } return sum ; } int main ( ) { int n = 10 ; cout << sumOfPrimeDivisors ( n ) ; return 0 ; } ------------------------------------------------------------------------------------------------ -------------------- ; Driver code [/INST],0.7023379210075522,0.6485977089035339,0.672643134460133,0.6513761467889908,0.8367346938775511
170,"#include <algorithm> NEW_LINE #include <iostream> NEW_LINE using namespace std ; int findpos ( string n ) { int pos = 0 ; for ( int i = 0 ; n [ i ] != ' \0' ; i ++ ) { switch ( n [ i ] ) { case '2' : pos = pos * 4 + 1 ; break ; case '3' : pos = pos * 4 + 2 ; break ; case '5' : pos = pos * 4 + 3 ; break ; case '7' : pos = pos * 4 + 4 ; break ; } } return pos ; } int main ( ) { string n = ""777"" ; cout << findpos ( n ) ; }",] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; int findPosition ( int n ) { int pos = 0 ; while ( n > 0 ) { if ( n % 10 == 2 ) pos += 1 ; else if ( n % 10 == 3 ) pos += 2 ; else if ( n % 10 == 5 ) pos += 3 ; else if ( n % 10 == 7 ) pos += 4 ; n = n / 10 ; } return pos ; } int main ( ) { int n = 1234 ; cout << findPosition ( n ) ; return 0 ; }
171,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void possibleTripletInRange ( int L , int R ) { bool flag = false ; int possibleA , possibleB , possibleC ; int numbersInRange = ( R - L + 1 ) ; if ( numbersInRange < 3 ) { flag = false ; } else if ( numbersInRange > 3 ) { flag = true ; if ( L % 2 ) { L ++ ; } possibleA = L ; possibleB = L + 1 ; possibleC = L + 2 ; } else { if ( ! ( L % 2 ) ) { flag = true ; possibleA = L ; possibleB = L + 1 ; possibleC = L + 2 ; } else { flag = false ; } } if ( flag == true ) { cout << "" ( "" << possibleA << "" , ▁ "" << possibleB << "" , ▁ "" << possibleC << "" ) "" << "" ▁ is ▁ one ▁ such ▁ possible ▁ triplet ▁ between ▁ "" << L << "" ▁ and ▁ "" << R << "" STRNEWLINE "" ; } else { cout << "" No ▁ Such ▁ Triplet ▁ exists ▁ between ▁ "" << L << "" ▁ and ▁ "" << R << "" STRNEWLINE "" ; } } int main ( ) { int L , R ; L = 2 ; R = 10 ; possibleTripletInRange ( L , R ) ; L = 23 ; R = 46 ; possibleTripletInRange ( L , R ) ; return 0 ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; bool findTriplet ( int L , int R ) { if ( R - L + 1 < 3 ) return false ; if ( R - L + 1 == 3 ) return true ; int k = ( R + L ) / 3 ; if ( ( R - L + 1 ) % 3 == 0 ) { if ( ( ( ( R - L + 1 ) / 3 ) % 2 == 0 ) { for ( int i = 0 ; i < ( ( R - L + 1 ) / 3 ; i ++ ) { if ( ( ( 2 * k + i ) % 2 == 0 ) { if ( ( 2 * k + i ) <= R && ( 2 * k + i ) >= L ) { return true ; } } } } else { for ( int i = 0 ; i < ( ( R - L + 1 ) / 3 ; i ++ ) { if ( ( ( 2 * k + i ) % ",0.15742922110159202,0.1301181381848644,0.1425739528330739,0.06611570247933884,0.2909090909090909
172,"#include <bits/stdc++.h> NEW_LINE #define mod  1000000007 NEW_LINE using namespace std ; long long digitNumber ( long long n ) { if ( n == 0 ) return 1 ; if ( n == 1 ) return 9 ; if ( n % 2 ) { long long temp = digitNumber ( ( n - 1 ) / 2 ) % mod ; return ( 9 * ( temp * temp ) % mod ) % mod ; } else { long long temp = digitNumber ( n / 2 ) % mod ; return ( temp * temp ) % mod ; } } int countExcluding ( int n , int d ) { if ( d == 0 ) return ( 9 * digitNumber ( n - 1 ) ) % mod ; else return ( 8 * digitNumber ( n - 1 ) ) % mod ; } int main ( ) { long long d = 9 ; int n = 3 ; cout << countExcluding ( n , d ) << endl ; return 0 ; }"," \n #include <bits/stdc++.h> NEW_LINE using namespace std ; int digitNumber ( int n , int digit ) { if ( n == 0 ) return 9 ; if ( n == 1 ) return 8 ; if ( n % 2 == 1 ) return 9 * digitNumber ( n - 1 , digit ) + 8 * digitNumber ( n - 2 , digit ) ; else return digitNumber ( n / 2 , digit ) * digitNumber ( n / 2 , digit ) ; } int main ( ) { int n = 3 , digit = 4 ; cout << digitNumber ( n , digit ) ; return 0 ; }
173,"#include <iostream> NEW_LINE using namespace std ; bool isPrime ( int n ) { if ( n <= 1 ) return false ; for ( int i = 2 ; i < n ; i ++ ) if ( n % i == 0 ) return false ; return true ; } bool isEmirp ( int n ) { if ( isPrime ( n ) == false ) return false ; int rev = 0 ; while ( n != 0 ) { int d = n % 10 ; rev = rev * 10 + d ; n /= 10 ; } return isPrime ( rev ) ; } int main ( ) { int n = 13 ; if ( isEmirp ( n ) == true ) cout << "" Yes "" ; else cout << "" No "" ; }",] \n 101 101 201 201 202 202 203 203 204 204 205 205 206 206 207 207 208 208 209 209 210 210 211 211 212 212 213 213 214 214 215 215 216 216 217 217 218 218 219 219 220 220 221 221 222 222 223 223 224 224 225 225 226 226 227 227 228 228 229 229 230 2,0.2504738441126424,0.0008281466261885124,0.001067229824381055,0.0,0.0
174,#include <iostream> NEW_LINE using namespace std ; double Convert ( double radian ) { double pi = 3.14159 ; return ( radian * ( 180 / pi ) ) ; } int main ( ) { double radian = 5.0 ; double degree = Convert ( radian ) ; cout << degree ; return 0 ; },"] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; float radianToDegree ( float radian ) { return ( radian * 180 ) ; } int main ( ) { float radian = 180 ; cout << radian << ""   radian   is   "" << radianToDegree ( radian ) << ""   degree "" ; return 0 ; } -------------------------------------------------------------------------------- 2 / 3 -------------------------------------------------------------------------------- [/INST] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; float radianToDegree ( float radian ) { return ( radian * 180 / pi ) ; } int main ( ) { float radian = 180 ; cout << radian << ""   radian   is   "" << radianToDegree ( radian ) << ""   degree "" ; return 0 ; } -------------------------------------------------------------------------------- 2 / 3 -------------------------------------------------------------------------------- [/INST] \n #include <bits/stdc++.h> NEW_LINE",0.48725591332362483,0.18077007039580262,0.40396786861298234,0.4642857142857143,0.9
175,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int sn ( int n , int an ) { return ( n * ( 1 + an ) ) / 2 ; } int trace ( int n , int m ) { int an = 1 + ( n - 1 ) * ( m + 1 ) ; int rowmajorSum = sn ( n , an ) ; an = 1 + ( n - 1 ) * ( n + 1 ) ; int colmajorSum = sn ( n , an ) ; return rowmajorSum + colmajorSum ; } int main ( ) { int N = 3 , M = 3 ; cout << trace ( N , M ) << endl ; return 0 ; }",nclude <bits/stdc++> NEW_LINE ; Function to print the trace of matrix formed by adding row - major and column - major order of same matrix ; Function to print trace of matrix formed by adding row - major and column - major order of same matrix ; Driver code [/n ] ; Given matrix ; function call [/n ] ; function call [/n ] ; function call [/n ] ; function call [/n ] ; function call [/n ] ; function call [/n ] ; function call [/n ] ; function call [/n ] ; function call [/n ] ; function call [/n ] ; function call [/n ] ; function call [/n ] ; function call [/n ] ; function call [/n ] ; function call [/n ] ; function call [/n ] ; function call [/n ] ; function call [/n ] ; function call [/n ] ; function call [/n ] ; function call [/n ] ;,0.14959775402077957,0.002208026865208497,0.0024329892179098165,0.0,0.59375
176,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void max_area ( int n , int m , int k ) { if ( k > ( n + m - 2 ) ) cout << "" Not ▁ possible "" << endl ; else { int result ; if ( k < max ( m , n ) - 1 ) { result = max ( m * ( n / ( k + 1 ) ) , n * ( m / ( k + 1 ) ) ) ; } else { result = max ( m / ( k - n + 2 ) , n / ( k - m + 2 ) ) ; } cout << result << endl ; } } int main ( ) { int n = 3 , m = 4 , k = 1 ; max_area ( n , m , k ) ; }", \n 1. 2. 3. 4. 5. 6. 7. 8. 9. 10. 11. 12. 13. 14. 15. 16. 17. 18. 19. 20. 21. 22. 23. 24. 25. 26. 27. 28. 29. 30. 31. 32. 33. 34. 35. 36. 37. 38. 39. 40. 41. 42. 43. 44. 45. 46. 47. 48. 49. 50. 51. 52. 53. 54. 55. 56. 57. 58. 59. 60. 61. 62. 63. 64. 6,0.25,0.0,0.0,0.0,0.0
177,#include <iostream> NEW_LINE using namespace std ; int area_fun ( int side ) { int area = side * side ; return area ; } int main ( ) { int side = 4 ; int area = area_fun ( side ) ; cout << area ; return 0 ; },] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; float area ( float side ) { return side * side ; } int main ( ) { float side = 5 ; cout << area ( side ) ; return 0 ; } -------------------------------- ---------------- -- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ---------------- ----------------,0.42017091414564955,0.15200825627734138,0.4123117639416204,0.48,0.6363636363636364
178,#include <bits/stdc++.h> NEW_LINE using namespace std ; long int countConsecutive ( long int N ) { long int count = 0 ; for ( long int L = 1 ; L * ( L + 1 ) < 2 * N ; L ++ ) { double a = ( 1.0 * N - ( L * ( L + 1 ) ) / 2 ) / ( L + 1 ) ; if ( a - ( int ) a == 0.0 ) count ++ ; } return count ; } int main ( ) { long int N = 15 ; cout << countConsecutive ( N ) << endl ; N = 10 ; cout << countConsecutive ( N ) << endl ; return 0 ; },] \n 2 10 100 1000 10000 100000 1000000 10000000 100000000 1000000000 10000000000 100000000000 1000000000000 10000000000000 100000000000000 1000000000000000 10000000000000000 100000000000000000 1000000000000000000 10000000000000000000 100000000,0.25038378324445104,9.814687056865893e-05,0.001436986107235538,0.0,0.0
179,"#include <iostream> NEW_LINE using namespace std ; bool isAutomorphic ( int N ) { int sq = N * N ; while ( N > 0 ) { if ( N % 10 != sq % 10 ) return false ; N /= 10 ; sq /= 10 ; } return true ; } int main ( ) { int N = 5 ; isAutomorphic ( N ) ? cout << "" Automorphic "" : cout << "" Not ▁ Automorphic "" ; return 0 ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; bool isAutomorphic ( int N ) { int square = N * N ; int rem = N % 10 ; int remSquare = square % 10 ; while ( N != 0 ) { if ( rem != remSquare ) return false ; N = N / 10 ; square = square / 10 ; rem = N % 10 ; remSquare = square % 10 ; } return true ; } int main ( ) { int N = 16 ; if ( isAutomorphic ( N ) cout << "" Yes "" ; else cout << "" No "" ; return 0 ; }
180,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int maxPrimefactorNum ( int N ) { bool arr [ N + 5 ] ; memset ( arr , true , sizeof ( arr ) ) ; for ( int i = 3 ; i * i <= N ; i += 2 ) { if ( arr [ i ] ) for ( int j = i * i ; j <= N ; j += i ) arr [ j ] = false ; } vector < int > prime ; prime . push_back ( 2 ) ; for ( int i = 3 ; i <= N ; i += 2 ) if ( arr [ i ] ) prime . push_back ( i ) ; int i = 0 , ans = 1 ; while ( ans * prime [ i ] <= N && i < prime . size ( ) ) { ans *= prime [ i ] ; i ++ ; } return ans ; } int main ( ) { int N = 40 ; cout << maxPrimefactorNum ( N ) << endl ; return 0 ; }","] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; int findNumber ( int n ) { bool prime [ n + 1 ] ; memset ( prime , true , sizeof ( prime ) ) ; prime [ 1 ] = false ; for ( int i = 2 ; i * i <= n ; i ++ ) { if ( prime [ i ] == true ) { for ( int j = i * i ; j <= n ; j += i ) prime [ j ] = false ; } } int ans = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( prime [ i ] ) ans = max ( ans , i ) ; } return ans ; } int main ( ) { int n = 10 ; cout << findNumber ( n ) ; return 0 ; }
181,"#include <iostream> NEW_LINE using namespace std ; unsigned highestPowerof2 ( unsigned x ) { x |= x >> 1 ; x |= x >> 2 ; x |= x >> 4 ; x |= x >> 8 ; x |= x >> 16 ; return x ^ ( x >> 1 ) ; } int main ( ) { int n = 10 ; cout << highestPowerof2 ( n ) << "" STRNEWLINE "" ; return 0 ; }",] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; int findPower ( int n ) { int i = 1 ; while ( n > 0 ) { n >>= 1 ; i ++ ; } return i ; } int main ( ) { int n = 100 ; cout << findPower ( n ) ; return 0 ; } 1 / 06 : 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0.3062523223495024,0.2548822370177905,0.27315735541052216,0.3333333333333333,0.36363636363636365
182,#include <bits/stdc++.h> NEW_LINE using namespace std ; int divSum ( int num ) { int result = 0 ; if ( num == 1 ) return result ; for ( int i = 2 ; i <= sqrt ( num ) ; i ++ ) { if ( num % i == 0 ) { if ( i == ( num / i ) ) result += i ; else result += ( i + num / i ) ; } } return ( result + 1 ) ; } int main ( ) { int num = 36 ; cout << divSum ( num ) ; return 0 ; }," [/INST] #include < iostream> NEW_LINE ; Function to find the sum of all   divisors   of   a   number ; Function to find the   sum   of   all   divisors   of   a   number ; if   a   number   is   prime   then   it   has   only   two   divisors   i . e . gcd ( a , b ) returns gcd of a and b ; if   a   is   a   perfect   square   number ; if   a   is   a   composite   number ; if   a   is   a   prime   number ; Driver code [/n120120 NEW_LINE ; Driver code [/n120120 NEW_LINE [/n120120 NEW_LINE [/n120120 NEW_LINE [/n120120 NEW_LINE [/n120120 NEW_LINE [/",0.08622619957958827,0.005740124883258157,0.005831340101761607,0.0,0.3333333333333333
183,"#include <iostream> NEW_LINE using namespace std ; int power ( int x , int y , int p ) { while ( y > 0 ) { if ( y & 1 ) res = ( res * x ) % p ; x = ( x * x ) % p ; } return res ; } void squareRoot ( int n , int p ) { if ( p % 4 != 3 ) { cout << "" Invalid ▁ Input "" ; return ; } n = n % p ; int x = power ( n , ( p + 1 ) / 4 , p ) ; if ( ( x * x ) % p == n ) { cout << "" Square ▁ root ▁ is ▁ "" << x ; return ; } x = p - x ; if ( ( x * x ) % p == n ) { cout << "" Square ▁ root ▁ is ▁ "" << x ; return ; } cout << "" Square ▁ root ▁ doesn ' t ▁ exist ▁ "" ; } int main ( ) { int p = 7 ; int n = 2 ; squareRoot ( n , p ) ; return 0 ; }",Driver code ; A function to print the  first  n   digits   of   a   number   in   base   base ; Returns n ^ m   mod   p   modulo   p ; A function to   print   the   first   n   digits   of   a   number   in   base   base ; Driver code ; 10 ^ 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,0.09158035468728537,0.0003503856809399199,0.002334669431837893,0.0,0.36363636363636365
184,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int power ( int x , unsigned int y , int p ) { int res = 1 ; x = x % p ; while ( y > 0 ) { if ( y & 1 ) res = ( res * x ) % p ; x = ( x * x ) % p ; } return res ; } bool miillerTest ( int d , int n ) { int a = 2 + rand ( ) % ( n - 4 ) ; int x = power ( a , d , n ) ; if ( x == 1 x == n - 1 ) return true ; while ( d != n - 1 ) { x = ( x * x ) % n ; d *= 2 ; if ( x == 1 ) return false ; if ( x == n - 1 ) return true ; } return false ; } bool isPrime ( int n , int k ) { if ( n <= 1 n == 4 ) return false ; if ( n <= 3 ) return true ; int d = n - 1 ; while ( d % 2 == 0 ) d /= 2 ; for ( int i = 0 ; i < k ; i ++ ) if ( ! miillerTest ( d , n ) ) return false ; return true ; } int main ( ) { int k = 4 ; cout << "" All ▁ primes ▁ smaller ▁ than ▁ 100 : ▁ STRNEWLINE "" ; for ( int n = 1 ; n < 100 ; n ++ ) if ( isPrime ( n , k ) ) cout << n << "" ▁ "" ; return 0 ; }"," [INST] [INST] [INST] [INST] [INST ] [INST ] [/ [/INST ] [/ [/ [/
 [/
 [/
 #include < std_msize = 1 [/
 #include < i < iostream> < / iostream> NEW_LINE_ [/
 #include < string > < iostream> NEW_LINE_ [/
 #include < string > < cmath> NEW_LINE_ [/
 #include < cmath> NEW_LINE_ [/
 #include < cmath> NEW_LINE_ [/
 #include < cstdlib_ [/",0.04459267100158464,0.00017933430963108825,0.0017207614614133452,0.0,0.17647058823529413
185,#include <bits/stdc++.h> NEW_LINE using namespace std ; int maxConsecutiveOnes ( int x ) { int count = 0 ; while ( x != 0 ) { x = ( x & ( x << 1 ) ) ; count ++ ; } return count ; } int main ( ) { cout << maxConsecutiveOnes ( 14 ) << endl ; cout << maxConsecutiveOnes ( 222 ) << endl ; return 0 ; },] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; int longestConseq1s ( int n ) { int res = 0 ; while ( n != 0 ) { res ++ ; n = n & ( n - 1 ) ; } return res ; } int main ( ) { int n = 10 ; cout << longestConseq1s ( n ) ; return 0 ; } -------------------------------------------------------------------------------- 1 / 10 / 5 / 2 / 1 / 0 / 1 / 2 / 4 / 8 / 16 / 32 / 64 / 128 / 256 / 512 / 1024 / 2048 / 4096 / 8192 / 16384 / 32768 / 65536 / 131072 / 262144 / 524288 / 1048576 / 2097152 / 4194,0.4279636509056982,0.2183004093819517,0.3850015626618938,0.42105263157894735,0.6875
186,"#include <iostream> NEW_LINE using namespace std ; int subtract ( int x , int y ) { while ( y != 0 ) { int borrow = ( ~ x ) & y ; x = x ^ y ; y = borrow << 1 ; } return x ; } int main ( ) { int x = 29 , y = 13 ; cout << "" x ▁ - ▁ y ▁ is ▁ "" << subtract ( x , y ) ; return 0 ; }", int main ( ) [/INST] { int x = 101010101 ; y = 101011001 ; Driver code [/INST] \n 101010101 - 101011001 = 0000101000 ; Driver code [/INST] 00001010000 [/INST] 101010101 [/INST] 00001010000 [/INST] 101010101 [/INST] 00001010000 [/INST] 101010101 [/INST] 00001010000 [/INST] 101010101 [/INST] 00001010000 [/INST] 1010,0.17278580572921473,0.05294465836264731,0.06896779532344235,0.10256410256410256,0.4666666666666667
187,"#include <iostream> NEW_LINE using namespace std ; int subtract ( int x , int y ) { if ( y == 0 ) return x ; return subtract ( x ^ y , ( ~ x & y ) << 1 ) ; } int main ( ) { int x = 29 , y = 13 ; cout << "" x ▁ - ▁ y ▁ is ▁ "" << subtract ( x , y ) ; return 0 ; }"," \n #include <bits/stdc++.h> NEW_LINE using namespace std ; int subtract ( int a , int b ) { if ( b == 0 ) return a ; return subtract ( a - b , b ) ; } int main ( ) { int a = 10 , b = 5 ; cout << subtract ( a , b ) ; return 0 ; }
188,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void addEdge ( vector < int > v [ ] , int x , int y ) { v [ x ] . push_back ( y ) ; v [ y ] . push_back ( x ) ; } void dfs ( vector < int > tree [ ] , vector < int > & temp , int ancestor [ ] , int u , int parent , int k ) { temp . push_back ( u ) ; for ( auto i : tree [ u ] ) { if ( i == parent ) continue ; dfs ( tree , temp , ancestor , i , u , k ) ; } temp . pop_back ( ) ; if ( temp . size ( ) < k ) { ancestor [ u ] = -1 ; } else { ancestor [ u ] = temp [ temp . size ( ) - k ] ; } } void KthAncestor ( int N , int K , int E , int edges [ ] [ 2 ] ) { vector < int > tree [ N + 1 ] ; for ( int i = 0 ; i < E ; i ++ ) { addEdge ( tree , edges [ i ] [ 0 ] , edges [ i ] [ 1 ] ) ; } vector < int > temp ; int ancestor [ N + 1 ] ; dfs ( tree , temp , ancestor , 1 , 0 , K ) ; for ( int i = 1 ; i <= N ; i ++ ) { cout << ancestor [ i ] << "" ▁ "" ; } } int main ( ) { int N = 9 ; int K = 2 ; int E = 8 ; int edges [ 8 ] [ 2 ] = { { 1 , 2 } , { 1 , 3 } , { 2 , 4 } , { 2 , 5 } , { 2 , 6 } , { 3 , 7 } , { 3 , 8 } , { 3 , 9 } } ; KthAncestor ( N , K , E , edges ) ; return 0 ; }",] \n 5 4 \n 0 1 \n 1 2 \n 1 3 \n 2 4 \n 3 4 \n 4 4 \n 0 2 \n 0 3 \n 0 1 \n 1 2 \n 2 4 \n 3 4 \n 4 4 \n 2 3 \n 3 4 \n 4 4 \n 3 2 \n 2 4 \n 4 4 \n 4 4 \n 4 4 \n 4 4 \n 4 4 \n 4 4 \n 4 4 \n 4 4 \n 4 4 \n 4 4 \n 4 4 \n 4 4 \n 4 4 \n 4 4 \n 4 4 \n 4 4 \n 4 4 \n 4 4 \n 4 4 \,0.005933091608051734,0.00033173350097267845,0.000928722818874708,0.0,0.02247191011235955
189,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void build ( vector < int > & sum , vector < int > & a , int l , int r , int rt ) { if ( l == r ) { sum [ rt ] = a [ l - 1 ] ; return ; } int m = ( l + r ) >> 1 ; build ( sum , a , l , m , rt << 1 ) ; build ( sum , a , m + 1 , r , rt << 1 1 ) ; } void pushDown ( vector < int > & sum , vector < int > & add , int rt , int ln , int rn ) { if ( add [ rt ] ) { add [ rt << 1 ] += add [ rt ] ; add [ rt << 1 1 ] += add [ rt ] ; sum [ rt << 1 ] += add [ rt ] * ln ; sum [ rt << 1 1 ] += add [ rt ] * rn ; add [ rt ] = 0 ; } } void update ( vector < int > & sum , vector < int > & add , int L , int R , int C , int l , int r , int rt ) { if ( L <= l && r <= R ) { sum [ rt ] += C * ( r - l + 1 ) ; add [ rt ] += C ; return ; } int m = ( l + r ) >> 1 ; pushDown ( sum , add , rt , m - l + 1 , r - m ) ; if ( L <= m ) update ( sum , add , L , R , C , l , m , rt << 1 ) ; if ( R > m ) update ( sum , add , L , R , C , m + 1 , r , rt << 1 1 ) ; } int query ( vector < int > & sum , vector < int > & add , int L , int R , int l , int r , int rt ) { if ( L <= l && r <= R ) { return sum [ rt ] ; } int m = ( l + r ) >> 1 ; pushDown ( sum , add , rt , m - l + 1 , r - m ) ; int ans = 0 ; if ( L <= m ) ans += query ( sum , add , L , R , l , m , rt << 1 ) ; if ( R > m ) ans += query ( sum , add , L , R , m + 1 , r , rt << 1 1 ) ; return ans ; } void sequenceMaintenance ( int n , int q , vector < int > & a , vector < int > & b , int m ) { sort ( a . begin ( ) , a . end ( ) ) ; vector < int > sum , add , ans ; sum . assign ( n << 2 , 0 ) ; add . assign ( n << 2 , 0 ) ; build ( sum , a , 1 , n , 1 ) ; for ( int i = 0 ; i < q ; i ++ ) { int l = 1 , r = n , pos = -1 ; while ( l <= r ) { int m = ( l + r ) >> 1 ; if ( query ( sum , add , m , m , 1 , n , 1 ) >= b [ i ] ) { r = m - 1 ; pos = m ; } else { l = m + 1 ; } } if ( pos == -1 ) ans . push_back ( 0 ) ; else { ans . push_back ( n - pos + 1 ) ; update ( sum , add , pos , n , - m , 1 , n , 1 ) ; } } for ( int i = 0 ; i < ans . size ( ) ; i ++ ) { cout << ans [ i ] << "" ▁ "" ; } } int main ( ) { int N = 4 ; int Q = 3 ; int M = 1 ; vector < int > arr = { 1 , 2 , 3 , 4 } ; vector < int > query = { 4 , 3 , 1 } ; sequenceMaintenance ( N , Q , arr , query , M ) ; return 0 ; }",] \n 5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 ,0.2500742646119769,5.940938104505117e-07,0.0002964643540971325,0.0,0.0
190,"#include <bits/stdc++.h> NEW_LINE using namespace std ; bool hasCoprimePair ( vector < int > & arr , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( __gcd ( arr [ i ] , arr [ j ] ) == 1 ) { return true ; } } } return false ; } int main ( ) { int n = 3 ; vector < int > arr = { 6 , 9 , 15 } ; if ( hasCoprimePair ( arr , n ) ) { cout << 1 << endl ; } else { cout << n << endl ; } }","] \n 2 / \n #include <bits/stdc++.h> NEW_LINE using namespace std ; bool isSafe ( int arr [ ] , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( __gcd ( arr [ i ] , arr [ j ] == 1 ) { return false ; } } } return true ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int n = sizeof ( arr ) / sizeof ( int ) ; if ( isSafe ( arr , n ) cout << "" Yes "" ; else cout << "" No "" ; return 0 ; } ----------------- C ++ program to check if there is any pair with gcd as 1 in the array ; Function to check if there is any pair with gcd as 1 ; Iterate over all pairs ; If gcd is 1 ; Driver Code [/ ] 2 / \n #include",0.5998577188564855,0.4444370371742587,0.648503453636299,0.421875,0.8846153846153846
191,#include <bits/stdc++.h> NEW_LINE using namespace std ; int Numberofways ( int n ) { int count = 0 ; for ( int a = 1 ; a < n ; a ++ ) { for ( int b = 1 ; b < n ; b ++ ) { int c = n - ( a + b ) ; if ( a + b > c && a + c > b && b + c > a ) { count ++ ; } } } return count ; } int main ( ) { int n = 15 ; cout << Numberofways ( n ) << endl ; return 0 ; },] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; int countWays ( int N ) { int ways = 0 ; for ( int a = 1 ; a <= N ; a ++ ) { for ( int b = 1 ; b <= N ; b ++ ) { for ( int c = 1 ; c <= N ; c ++ ) { if ( a + b > c && a + c > b && b + c > a ) { ways ++ ; } } } return ways ; } int main ( ) { int N = 5 ; cout << countWays ( N ) ; return 0 ; } ------------------------------------------------ -- ---------------- - ---------------- - - - - ---------------- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -,0.6422742464278944,0.32301432867093066,0.6358028912631586,0.6792452830188679,0.9310344827586207
192,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void countPairs ( int N , int arr [ ] ) { int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( i == arr [ arr [ i ] - 1 ] - 1 ) { count ++ ; } } cout << ( count / 2 ) << endl ; } int main ( ) { int arr [ ] = { 2 , 1 , 4 , 3 } ; int N = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; countPairs ( N , arr ) ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == i ) count ++ ; } return count ; } int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ; cout << countPairs ( arr , n ) ; return 0 ; }
193,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int LongestFibSubseq ( int A [ ] , int n ) { unordered_set < int > S ( A , A + n ) ; int maxLen = 0 , x , y ; for ( int i = 0 ; i < n ; ++ i ) { for ( int j = i + 1 ; j < n ; ++ j ) { x = A [ j ] ; y = A [ i ] + A [ j ] ; int length = 2 ; while ( S . find ( y ) != S . end ( ) ) { int z = x + y ; x = y ; y = z ; maxLen = max ( maxLen , ++ length ) ; } } } return maxLen >= 3 ? maxLen : 0 ; } int main ( ) { int A [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ; int n = sizeof ( A ) / sizeof ( A [ 0 ] ) ; cout << LongestFibSubseq ( A , n ) ; return 0 ; }","] \n  #include <bits/stdc++.h> NEW_LINE using namespace std ; int maxLength ( int arr [ ] , int n ) { unordered_map < int , int > mp ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { mp [ arr [ i ] ] ++ ; } for ( int i = 0 ; i < n ; i ++ ) { int x = arr [ i ] ; int next = x + arr [ i ] ; if ( mp . find ( next ) != mp . end ( ) ) ans = max ( ans , mp [ next ] + mp [ x ] + 1 ) ; } return ans ; } int main ( ) { int arr [ ] = { 1 , 7 , 11 , 12 , 3 , 5 , 6 , 8 , 10 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; cout << maxLength ( arr , n ) ; return 0 ; } ------------------- 2 ------------------- 20 ; Driver code [/",0.4943752634954703,0.39568887793545426,0.4056808539523718,0.5434782608695652,0.6326530612244898
194,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int CountMaximum ( int arr [ ] , int n , int k ) { sort ( arr , arr + n ) ; int sum = 0 , count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; if ( sum > k ) break ; count ++ ; } return count ; } int main ( ) { int arr [ ] = { 30 , 30 , 10 , 10 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int k = 50 ; cout << CountMaximum ( arr , n , k ) ; return 0 ; }",] A C ++ program for the above approach ; Function to count maximum number of elements that can be selected ; Sort the array ; Traverse the array ; Increment count if sum is less than or equal to k ; Driver Code ; Function call [/INST] \n 5 10 3 4 2 9 8 1 10 12 11 13 12 13 12 13 14 15 16 17 18 19 19 19 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56,0.07277620365454898,0.0027191783905739326,0.0026713505133362744,0.0,0.2857142857142857
195,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int num_candyTypes ( vector < int > & candies ) { unordered_set < int > s ; for ( int i = 0 ; i < candies . size ( ) ; i ++ ) { s . insert ( candies [ i ] ) ; } return s . size ( ) ; } void distribute_candies ( vector < int > & candies ) { int allowed = candies . size ( ) / 2 ; int types = num_candyTypes ( candies ) ; if ( types < allowed ) cout << types ; else cout << allowed ; } int main ( ) { vector < int > candies = { 4 , 4 , 5 , 5 , 3 , 3 } ; distribute_candies ( candies ) ; return 0 ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; int findCandies ( int arr [ ] , int n ) { unordered_set < int > candy ; for ( int i = 0 ; i < n ; i ++ ) { candy . insert ( arr [ i ] ) ; } return candy . size ( ) ; } int maxCandies ( int arr [ ] , int n ) { int N = ( n + 1 ) / 2 ; int candies = findCandies ( arr , N ) ; return candies ; } int main ( ) { int arr [ ] = { 1 , 1 , 2 , 3 , 4 } ; int N = 5 ; cout << maxCandies ( arr , N ) ; return 0 ; } -------------------------------------------------------------------------------- 2/09/2021 12:43 ( 0.13 ) -------------------------------------------------------------------------------- 5 ; Driver Code [/INST] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; int find",0.47194451280621574,0.3471800873710267,0.39781043948736433,0.5131578947368421,0.6296296296296297
196,"#include <bits/stdc++.h> NEW_LINE using namespace std ; double Length_Diagonals ( int a , double theta ) { double p = a * sqrt ( 2 + ( 2 * cos ( theta * ( 3.141 / 180 ) ) ) ) ; double q = a * sqrt ( 2 - ( 2 * cos ( theta * ( 3.141 / 180 ) ) ) ) ; cout << fixed << setprecision ( 2 ) << p << "" ▁ "" << q ; } int main ( ) { int a = 6 ; int theta = 45 ; Length_Diagonals ( a , theta ) ; return 0 ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; double diagonal ( double a , double angle ) { double d = sqrt ( 2 ) * a * cos ( angle * 3.14159265359 ) ; return d ; } int main ( ) { double a = 5 , angle = 45 ; cout << diagonal ( a , angle ) ; return 0 ; }
197,"#include <bits/stdc++.h> NEW_LINE using namespace std ; void countEvenOdd ( int arr [ ] , int n , int K ) { int even = 0 , odd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = __builtin_popcount ( arr [ i ] ) ; if ( x % 2 == 0 ) even ++ ; else odd ++ ; } int y ; y = __builtin_popcount ( K ) ; if ( y & 1 ) { cout << "" Even ▁ = ▁ "" << odd << "" , ▁ Odd ▁ = ▁ "" << even ; } else { cout << "" Even ▁ = ▁ "" << even << "" , ▁ Odd ▁ = ▁ "" << odd ; } } int main ( void ) { int arr [ ] = { 4 , 2 , 15 , 9 , 8 , 8 } ; int K = 3 ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; countEvenOdd ( arr , n , K ) ; return 0 ; }","] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; void countSetBits ( int a [ ] , int n , int k ) { int even = 0 , odd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = __builtin_popcount ( a [ i ] ) ; if ( x % 2 == 0 ) { even ++ ; } else { odd ++ ; } int y = __builtin_popcount ( k ) ; if ( y % 2 == 1 ) { swap ( even , odd ) ; } cout << "" Even   set   bit   =   "" << even << endl ; cout << "" Odd   set   bit   =   "" << odd << endl ; } int main ( ) { int a [ ] = { 2 , 1 , 4 , 5 , 6 } ; int n = sizeof ( a ) / sizeof ( a [ 0 ] ; int k = 3 ; countSetBits ( a , n , k ) ; return 0 ;",0.5634887135491409,0.5161151903481987,0.525385451394152,0.5714285714285714,0.6410256410256411
198,#include <iostream> NEW_LINE using namespace std ; int main ( ) { int N = 6 ; int Even = N / 2 ; int Odd = N - Even ; cout << Even * Odd ; return 0 ; },] \n #include <bits/stdc++.h> NEW_LINE using namespace std ; int main ( ) { int n = 6 ; cout << ( n / 2 ) ; } ------------------------------------------------- ; Driver code [/INST] HERE NEW_LINE int main ( ) { int n = 6 ; cout << ( n / 2 ) ; return 0 ; }
199,"#include <bits/stdc++.h> NEW_LINE using namespace std ; int longestSubSequence ( pair < int , int > A [ ] , int N , int ind = 0 , int lastf = INT_MIN , int lasts = INT_MAX ) { if ( ind == N ) return 0 ; int ans = longestSubSequence ( A , N , ind + 1 , lastf , lasts ) ; if ( A [ ind ] . first > lastf && A [ ind ] . second < lasts ) ans = max ( ans , longestSubSequence ( A , N , ind + 1 , A [ ind ] . first , A [ ind ] . second ) + 1 ) ; return ans ; } int main ( ) { pair < int , int > A [ ] = { { 1 , 2 } , { 2 , 2 } , { 3 , 1 } } ; int N = sizeof ( A ) / sizeof ( A [ 0 ] ) ; cout << longestSubSequence ( A , N ) << "" STRNEWLINE "" ; return 0 ; }",] \n 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 ,0.2503561561649028,0.0005868738057729322,0.0008377508538382642,0.0,0.0
