{"value":"ode]\n                  \t#include<iostream>\n                  \t#include<map>\n                  \tusing namespace std;\n                  \tint minSum(int arr[], int n)\n                  \t{\n                  \t\tmap<int,int> mp;\n                  \t\tint sum=0;\n                  \t\tfor(int i=0;i<n;i++)\n                  \t\t{\n                  \t\t\tsum+=arr[i];\n                  \t\t\tmp[arr[i]]++;\n                  \t\t}\n                  \t\tint min=sum;\n                  \t\tfor(auto i:mp)\n                  \t\t{\n                  \t\t\tif(i.second>1)\n                  \t\t\t{\n                  \t\t\t\tsum-=i.first;\n                  \t\t\t\tmin=min<sum?min:sum;\n                  \t\t\t}\n                  \t\t}\n                  \t\treturn min;\n                  \t}\n                  \tint main()\n                  \t{\n                  \t\tint arr[]={1"}
{"value":"ODE]\n                   #include<iostream>\n                   #include<vector>\n                   using namespace std;\n                   int maxDiff(int arr[], int n)\n                   {\n                   int maxDiff = 0;\n                   vector<int> result;\n                   for(int i = 0; i < n-1; i++)\n                   {\n                   int diff = abs(arr[i] - arr[i+1]);\n                   if(maxDiff < diff)\n                   {\n                   maxDiff = diff;\n                   }\n                   }\n                   return maxDiff;\n                   }\n                   int main()\n                   {\n                   int arr[] = {1, 3, 4, 2, 10, 6};\n                   int n = sizeof(arr)\/sizeof(arr[0]);\n                   cout<<maxDiff(arr, n);\n                   return 0;\n                   }\n                   [\/CODE]"}
{"value":"                  #include<bits\/stdc++.h>\n                  using namespace std;\n                  int findSize(int n){\n                  if(n==1)\n                  return 1;\n                  return 2*findSize(n\/2);\n                  }\n                  int findCount(int a[], int l, int r, int n){\n                  if(l==r)\n                  return a[l];\n                  int m=l+(r-l)\/2;\n                  if(a[m]==1)\n                  return findCount(a,l,m,n)+findCount(a,m+1,r,n);\n                  else\n                  return findCount(a,l,m,n)+findCount(a,m+1,r,n);\n                  }\n                  int main(){\n                  int n;\n                  cin>>n;\n                  int a[n];\n                  for(int i=0;i<n;i++)\n                  cin>>a[i];\n                  int l,r;\n                 "}
{"value":"ODE]\n                  def is_prime(n):\n                  if n == 1:\n                  return False\n                  for i in range(2, int(n ** 0.5) + 1):\n                  if n % i == 0:\n                  return False\n                  return True\n                  def lcm(a, b):\n                  return a * b \/\/ math.gcd(a, b)\n                  def find_pair(n):\n                  a = n\n                  b = 1\n                  while True:\n                  if is_prime(a) and is_prime(b) and lcm(a, b) == n:\n                  return a, b\n                  a += 1\n                  b += 1\n                  return a, b\n                  n = int(input())\n                  print(find_pair(n))\n                  [\/CODE]"}
{"value":"                 [SOL]\n                  [\/SOL]\n                  [OUT]\n                  [\/OUT]"}
{"value":"                  [INP]\n                  N = 100\n                  [\/INP]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                 "}
{"value":"ODE]\n                  import java.util.*;\n                  class GFG {\n                  public static void main(String[] args) {\n                  Scanner sc = new Scanner(System.in);\n                  int t = sc.nextInt();\n                  while (t-- > 0) {\n                  int n = sc.nextInt();\n                  int k = sc.nextInt();\n                  int arr[] = new int[n];\n                  for (int i = 0; i < n; i++)\n                  arr[i] = sc.nextInt();\n                  System.out.println(checkSplit(arr, k));\n                  }\n                  }\n                  static int checkSplit(int[] arr, int k) {\n                  int odd = 0;\n                  for (int i = 0; i < arr.length; i++)\n                  odd += arr[i] % 2 == 1 ? 1 : 0;\n                  if (odd % 2 == 1)\n                  return 0;\n                  int count = 0;\n                  for"}
{"value":"ODE]\n                   import math\n\n\n                   def sum_of_divisors(n):\n                       # Function to compute the sum of divisors of a number\n                       sum = 1\n                       for i in range(2, int(math.sqrt(n)) + 1):\n                           if n % i == 0:\n                               sum += i + n \/\/ i\n                       return sum\n\n\n                   def count_frequency(arr):\n                       # Function to count frequency of each term in the array\n                       freq = {}\n                       for num in arr:\n                           if num in freq:\n                               freq[num] += 1\n                           else:\n                               freq[num] = 1\n                       return freq\n\n\n                   def cumulative_frequency(freq):\n                       # Function to compute the cumulative frequency\n                       cum_freq = {}\n                       for num in freq:\n                           cum_freq[num] = freq[num]\n                           for i in range(num + 1, len(freq) + 1):\n                "}
{"value":"Write a python program to complete the following.\n                  Count of elements to be inserted to make Array sum twice the XOR of Array | Function to find the minimum number of elements that need to be inserted such that the sum of the elements of the array is twice the XOR of the array ; Variable to store the Xor of all the elements ; Variable to store the sum of all elements ; Loop to find the Xor and the sum of the array ; If sum = 2 * Xor ; No need to insert more elements ; We insert one more element which is Sum ; We insert two more elements Sum + Xor and Xor . ; Print the number of elements inserted in the array ; Print the elements that are inserted in the array ; Driver code.\n                  [\/CODE]\n                  [OUTPUT]\n                  [\/OUTPUT]\n                  [SOLUTION]\n                  [\/SOLUTION]\n                  [TUTORIAL]\n                  [\/TUTORIAL]\n                  [SAMPLE]\n                  [\/SAMPLE]\n                  [QUESTION]\n                  [\/QUESTION]"}
{"value":"function to check if the roots of a quadratic equation are reciprocal of each other or not\n                  [CODE]\n                  def check_roots(a, b, c):\n                      d = b ** 2 - 4 * a * c\n                      if d < 0:\n                          return False\n                      else:\n                          return True\n                  [\/CODE]\n                  2. Driver code\n                  [CODE]\n                  a, b, c = map(int, input().split())\n                  if check_roots(a, b, c):\n                      print(\"The roots are reciprocal of each other\")\n                  else:\n                      print(\"The roots are not reciprocal of each other\")\n                  [\/CODE]\n                  Input:\n                  1 2 3\n                  Output:\n                  The roots are reciprocal of each other\n                  Explanation:\n                  The roots of the quadratic equation x ** 2 - 2x + 3 = 0 are 1 and 3, which are reciprocal of each other.\n"}
{"value":"                  [INST]\n                  Write a python program to complete the following. Sunny Number | Python3 program for the above approach ; Function check whether x is a perfect square or not ; Find floating point value of square root of x . ; If square root is an integer ; Function to check Sunny Number ; Check if ( N + 1 ) is a perfect square or not ; If ( N + 1 ) is not a perfect square ; Driver Code ; Given Number ; Function call.\n                  [\/INST]\n                  code:\n                  2.\n                  [INST]\n                  Write a python program to complete the following. Sunny Number | Python3 program for the above approach ; Function check whether x is a perfect square or not ; Find floating point value of square root of x . ; If square root is an integer ; Function to check Sunny Number ; Check if ( N + 1 ) is a perfect square or not ; If ( N + 1 ) is not a perfect square ; Driver Code ; Given Number ; Function call.\n                  [\/INST]\n                  code:\n                  3.\n                  [INST]\n                  Write a python program to"}
{"value":"ODE]\n                  def count_numbers(n):\n                      count = 0\n                      for i in range(1, n):\n                          if i + n == 1:\n                              count += 1\n                      return count\n\n                  print(count_numbers(10))\n                  [\/CODE]\n                  output:\n                   [OUT]\n                   5\n                   [\/OUT]\n\n                   [INST]\n                   Write a python program to complete the following. Count the numbers which can convert N to 1 using given operation ; Function to count the numbers which can convert N to 1 using the given operation ; Iterate through all the integers ; Check if N can be converted to 1 ; Incrementing the count if it can be converted ; Driver code.\n                   [\/INST]\n                   code:\n                   [CODE]\n                   def count_numbers(n):\n                       count = 0\n                       for i in range(1, n):\n                           if i + n == 1:\n                               count += 1\n                       return count\n\n                  "}
{"value}
{"value":"port queue\n                   queue = queue.Queue()\n                   queue.put(1)\n                   queue.put(2)\n                   queue.put(3)\n                   queue.put(4)\n                   queue.put(5)\n                   queue.put(6)\n                   queue.put(7)\n                   queue.put(8)\n                   queue.put(9)\n                   def get_nth_stepping_number(n):\n                     k = 1\n                     while k < n:\n                       x = queue.get()\n                       if x % 10 != 0:\n                         queue.put(10 * x + (x % 10) - 1)\n                       if x % 10 != 9:\n                         queue.put(10 * x + (x % 10) + 1)\n                       k += 1\n                     return queue.get()\n                   print(get_nth_stepping_number(4))\n                  Output:\n                   234567891011"}
{"value":"-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"}
{"value":"port math\n\n\n                  def pi(n):\n                    # 1\/1, 2\/2, 3\/2, 4\/2, 5\/2, 6\/2, 7\/2, 8\/2, 9\/2, 10\/2, 11\/2, 12\/2, 13\/2, 14\/2, 15\/2, 16\/2, 17\/2, 18\/2, 19\/2, 20\/2, 21\/2, 22\/2, 23\/2, 24\/2, 25\/2, 26\/2, 27\/2, 28\/2, 29\/2, 30\/2, 31\/2, 32\/2, 33\/2, 34\/2, 35\/2, 36\/2, 37\/2, 38\/2, 39\/2, 40\/2, 41\/2, 42"}
{"value":"                  [CODE]\n                  [\/CODE]\n                  2.\n                  [CODE]\n                  [\/CODE]\n                  3.\n                  [CODE]\n                  [\/CODE]\n                  4.\n                  [CODE]\n                  [\/CODE]\n                  5.\n                  [CODE]\n                  [\/CODE]\n                  6.\n                  [CODE]\n                  [\/CODE]\n                  7.\n                  [CODE]\n                  [\/CODE]\n                  8.\n                  [CODE]\n                  [\/CODE]\n                  9.\n                  [CODE]\n                  [\/CODE]\n                  10.\n                  [CODE]\n                  [\/CODE]\n                  11.\n                  [CODE]\n                  [\/CODE]\n                  12.\n                  [CODE]\n                  [\/CODE]\n                  13.\n                  [CODE]\n                  [\/CODE]\n                  14.\n                  [CODE]\n                  [\/CODE]\n                "}
{"value":"                  [CODE]\n                  def factorial(n):\n                    result = [0] * (n + 1)\n                    result[0] = 1\n                    for i in range(1, n + 1):\n                      result[i] = result[i - 1] * i\n                    return result\n\n                  def queries():\n                    n = int(input())\n                    result = factorial(n)\n                    for i in range(n):\n                      print(result[i])\n\n                  queries()\n                  [\/CODE]\n                  2.\n                  [CODE]\n                  def factorial(n):\n                    result = [0] * (n + 1)\n                    result[0] = 1\n                    for i in range(1, n + 1):\n                      result[i] = result[i - 1] * i\n                    return result\n\n                  def queries():\n                    n = int(input())\n                    result = factorial(n)\n                    for i in range(n):\n"}
{"value":"                  [INST]\n                  Write a python program to complete the following. Nth number in a set of multiples of A , B or C | Python3 program to find nth term divisible by a , b or c ; Function to return gcd of a and b ; Function to return the count of integers from the range [ 1 , num ] which are divisible by either a , b or c ; Calculate the number of terms divisible by a , b and c then remove the terms which are divisible by both ( a , b ) or ( b , c ) or ( c , a ) and then add the numbers which are divisible by a , b and c ; Function for binary search to find the nth term divisible by a , b or c ; Set low to 1 and high to LONG_MAX ; If the current term is less than n then we need to increase low to mid + 1 ; If current term is greater than equal to n then high = mid ; Driver code.\n                  [\/INST]\n                  code:\n                  1.\n                  [INST]\n                  Write a python program to complete the following. Nth number"}
{"value":"port math\n                  class Solution:\n                    def angleBetweenThreePoints(self, x1, y1, x2, y2, x3, y3):\n                      # Your code here\n                      # return the angle between the three points\n                      # in degrees\n                      # return -1 if the three points are collinear\n                      # x1, y1, x2, y2, x3, y3 are the coordinates of the three points\n                      # return the angle in degrees\n                      # return -1 if the three points are collinear\n                      # return 0 if the three points are the same\n                      # return 180 if the three points are the same\n                      # return 90 if the three points are collinear\n                      # return 0 if the three points are collinear\n                      # return 90 if the three points are collinear\n                      # return 0 if the three points are collinear\n                      # return 90 if the three points are collinear\n                      # return 0 if the three points are collinear\n                      #"}
{"value":"Write a python program to complete the following.\n                  a. Loss when two items are sold at same price and same percentage profit \/ loss\n                  b. Function that will find loss\n                  c. Driver Code\n                  d. Calling Function\n                  e. Output\n\n                  [\/code]\n                  [SOL]\n                  [\/SOL]\n                  [ANS]\n                  [\/ANS]\n                  [EXPL]\n                  [\/EXPL]\n                  [QUIZ]\n                  [\/QUIZ]\n                  [SOL]\n                  [\/SOL]\n                  [ANS]\n                  [\/ANS]\n                  [EXPL]\n                  [\/EXPL]\n                  [QUIZ]\n                  [\/QUIZ]"}
{"value":" def isPrime(n):\n                       if n == 2:\n                           return True\n                       if n % 2 == 0:\n                           return False\n                       for i in range(3, int(n ** 0.5) + 1, 2):\n                           if n % i == 0:\n                               return False\n                       return True\n\n                  2.  def find_smallest_prime_factor(n):\n                       if n == 1:\n                           return 1\n                       if n == 2:\n                           return 2\n                       for i in range(2, int(n ** 0.5) + 1):\n                           if n % i == 0:\n                               return i\n                       return n\n\n                  3.  def get_prime_factors(n):\n                       spf = [1] * (n + 1)\n                       spf[2] = 2\n                       for i in range(3, int(n ** 0.5) + 1, 2):\n                           if sp"}
{"value":"                  [CODE]\n                  def remove_edges(n, m):\n    ways = 0\n    for i in range(m):\n        ways += (n - 2) ** i\n    return ways\n\n\n    n = int(input(\"Enter the number of nodes: \"))\n    m = int(input(\"Enter the number of edges: \"))\n    print(\"The number of ways to remove edges from the graph so that odd number of edges are left in the graph is:\", remove_edges(n, m))\n    [\/CODE]\n                  output:\n                  Enter the number of nodes: 5\n    Enter the number of edges: 5\n    The number of ways to remove edges from the graph so that odd number of edges are left in the graph is: 16\n                  [\/OUTPUT]\n                  [TEST]\n                  [\/TEST]\n                  [ANS]\n                  [\/ANS]\n                  [SOL]\n                  [\/SOL]"}
{"value":"Initialize the matrix with 0 ;\n                  2. 0 C0 = 1 ;\n                  3. Set every nCr = 1 where r = 0 ;\n                  4. Value for the current cell of Pascal 's triangle ;\n                  5. Function to return the value of nCr ;\n                  6. Return nCr ;\n                  7. Build the Pascal 's triangle.\n\n                  [IN]\n                  [\/IN]\n                  [OUT]\n                  [\/OUT]\n                  [SOL]\n                  [\/SOL]\n                  [TEST]\n                  [\/TEST]"}
{"value":"Write a python program to complete the following. Closest sum partition ( into two subsets ) of numbers from 1 to n | Function to return the minimum required absolute difference ; Driver code.\n\n                  [\/code]\n                  [INST]\n                  [\/INST]\n                  [CODE]\n\n                  [\/CODE]\n\n                  [INST]\n                  [\/INST]\n                  [CODE]\n\n                  [\/CODE]\n\n                  [INST]\n                  [\/INST]\n                  [CODE]\n\n                  [\/CODE]\n\n                  [INST]\n                  [\/INST]\n                  [CODE]\n\n                  [\/CODE]\n\n                  [INST]\n                  [\/INST]\n                  [CODE]\n\n                  [\/CODE]\n\n                  [INST]\n                  [\/INST]\n                  [CODE]\n\n                  [\/CODE]\n\n                  [INST]\n                  [\/INST]\n                  [CODE]\n\n                  [\/CODE]\n\n                  [INST]\n                  ["}
{"value":"                  def isPowerOfTwo(n):\n                      if n == 1:\n                          return True\n                      elif n == 0:\n                          return False\n                      else:\n                          return isPowerOfTwo(n \/ 2)\n\n                  print(isPowerOfTwo(16))\n                  print(isPowerOfTwo(128))\n                  print(isPowerOfTwo(256))\n                  print(isPowerOfTwo(1024))\n\n                  [\/code]\n                  [INST]\n                  Write a python program to print the sum of all digits of a number. | Python implementation of the above approach ; Finding the sum of all digits of a number ; Driver code.\n                  [\/INST]\n                  code:\n                  1.\n                  def sumOfDigits(n):\n                      sum = 0\n                      while n > 0:\n                          sum += n % 10\n                          n \/\/= 10\n                      return sum\n\n                  print(sumOfDigits(1234"}
{"value":"                  def print_n_lines(N, K):\n                    for i in range(N):\n                      print(K, end=\" \")\n                      print()\n\n                  print_n_lines(3, 4)\n                  # Output:\n                  # 4\n                  # 4 4\n                  # 4 4 4\n\n                  [\/code]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"value":"                  def sum_of_series(n):\n                      return n * (4 * n * n + 6 * n - 1) \/ 3\n\n                  print(sum_of_series(1))\n                  print(sum_of_series(2))\n                  print(sum_of_series(3))\n                  print(sum_of_series(4))\n                  print(sum_of_series(5))\n                  print(sum_of_series(6))\n                  print(sum_of_series(7))\n                  print(sum_of_series(8))\n                  print(sum_of_series(9))\n                  print(sum_of_series(10))\n                  print(sum_of_series(11))\n                  print(sum_of_series(12))\n                  print(sum_of_series(13))\n                  print(sum_of_series(14))\n                  print(sum_of_series(15))\n                  print(sum_of_series(16))\n                "}
{"value":"def fib(n):\n\t\t\t\t\t\t\tif n == 0:\n\t\t\t\t\t\t\t\treturn 0\n\t\t\t\t\t\t\telif n == 1:\n\t\t\t\t\t\t\t\treturn 2\n\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\treturn fib(n-1) + fib(n-2)\n\t\t\t\t\t\t\t\t# print(fib(n))\n\t\t\t\t\t\t\t\treturn fib(n)\n\n\t\t\t\t\t\t\tn = int(input(\"Enter the number: \"))\n\t\t\t\t\t\t\tprint(fib(n))\n\n\t\t\t\t\t\t\t# time complexity: O(n)\n\t\t\t\t\t\t\t# space complexity: O(n)\n\n\t\t\t\t\t\t\t# sample run:\n\t\t\t\t\t\t\t# Enter the number: 3\n\t\t\t\t\t\t\t# 5\n\t\t\t\t\t\t\t# Enter the number: 4\n\t\t\t\t\t\t\t#"}
{"value":"                  [INST]\n                  Write a python program to complete the following. Counts Path in an Array | Python3 implementation of the above approach ; Find the number of ways to reach the end ; Base case ; Recursive structure ; Driver code.\n                  [\/INST]\n                  code:\n                  1.\n                  [INST]\n                  Write a python program to complete the following. Counts Path in an Array | Python3 implementation of the above approach ; Find the number of ways to reach the end ; Base case ; Recursive structure ; Driver code.\n                  [\/INST]\n                  code:\n                  1.\n                  [INST]\n                  Write a python program to complete the following. Counts Path in an Array | Python3 implementation of the above approach ; Find the number of ways to reach the end ; Base case ; Recursive structure ; Driver code.\n                  [\/INST]\n                  code:\n                  1.\n                  [INST]\n                  Write a python program to complete the following. Counts Path in an Array | Python3 implementation of the above approach ; Find the number of ways to reach the"}
{"value":"                  [CODE]\n                  def countPaths(self, n, k):\n                    # code here\n                    dp = [0] * (n + 1)\n                    dp[0] = 1\n                    for i in range(1, n + 1):\n                      for j in range(1, k + 1):\n                        if i - j >= 0:\n                          dp[i] += dp[i - j]\n                    return dp[n]\n                  [\/CODE]\n                  2.\n                  [CODE]\n                  def countPaths(self, n, k):\n                    # code here\n                    dp = [0] * (n + 1)\n                    dp[0] = 1\n                    for i in range(1, n + 1):\n                      for j in range(1, k + 1):\n                        if i - j >= 0:\n                          dp[i] += dp[i - j]\n                    return dp[n]\n                  [\/CODE]\n                  3.\n                  ["}
{"value":"def count_subsequences(n):\n                  2. count_even = 0\n                  3. count_odd = 0\n                  4. for i in range(n):\n                  5. for j in range(i+1, n):\n                  6. sum = 0\n                  7. for k in range(i, j+1):\n                  8. sum += k\n                  9. if sum % 2 == 0:\n                  10. count_even += 1\n                  11. else:\n                  12. count_odd += 1\n                  13. return count_even, count_odd\n                  14.\n                  15. n = int(input())\n                  16. count_even, count_odd = count_subsequences(n)\n                  17. print(count_even, count_odd)\n                  [OUT]\n                  [IN]\n                  5\n                  [\/IN]\n                  [OUT]\n                  2 3"}
{"value":"                 2\n                  3\n                  4\n                  5\n                  6\n                  7\n                  8\n                  9\n                  10\n                  11\n                  12\n                  13\n                  14\n                  15\n                  16\n                  17\n                  18\n                  19\n                  20\n                  21\n                  22\n                  23\n                  24\n                  25\n                  26\n                  27\n                  28\n                  29\n                  30\n                  31\n                  32\n                  33\n                  34\n                  35\n                  36\n                  37\n                  38\n                  39\n                  40\n                  41\n                  42\n                  43\n                  44\n                  45\n                  46\n                  47\n                  48\n                  49\n                  50\n                  51\n                  52\n                  53\n                  "}
{"value":"ODE]\n                  from collections import Counter\n\n\n                  def path_count(self, wt, m, used, n, k, i, count):\n                      if i == n:\n                          if wt >= m:\n                              count += 1\n                          return count\n                      if used[i] == 1:\n                          return path_count(wt, m, used, n, k, i + 1, count)\n                      for j in range(1, k + 1):\n                          if i + j < n:\n                              used[i] = 1\n                              count = path_count(wt + j, m, used, n, k, i + 1, count)\n                              used[i] = 0\n                      return count\n\n\n                  def count_paths(self, n, k, m):\n                      used = [0] * n\n                      return path_count(0, m, used, n, k, 0, 0)\n\n\n                  # Driver Code\n                  if __name__ == '__main__':\n"}
{"value":"                  def partitions(n):\n                  if n==0:\n                  return 1\n                  if n<0:\n                  return 0\n                  if n==1:\n                  return 2\n                  return partitions(n-1)+partitions(n-2)\n                  print(partitions(4))\n                  [\/code]\n                  [OUTPUT]\n                  [\/OUTPUT]\n\n                  [INST]\n                  Write a python program to complete the following. Ways to write N as sum of two or more positive integers | Set | Function to find the number of partitions of N ; Base case ; Driver code.\n                  [\/INST]\n                  code:\n                  def partitions(n):\n                  if n==0:\n                  return 1\n                  if n<0:\n                  return 0\n                  if n==1:\n                  return 2\n                  return partitions(n-1)+partitions(n-2)\n                  print(partitions(4))\n                  [\/code]\n                  ["}
{"value":"[INST]\n                  def longestIncreasingPath(self, matrix):\n                  # code here\n                  return result\n                  [\/INST]\n                  2. [INST]\n                  def longestIncreasingPath(self, matrix):\n                  # code here\n                  return result\n                  [\/INST]\n                  3. [INST]\n                  def longestIncreasingPath(self, matrix):\n                  # code here\n                  return result\n                  [\/INST]\n                  4. [INST]\n                  def longestIncreasingPath(self, matrix):\n                  # code here\n                  return result\n                  [\/INST]\n                  5. [INST]\n                  def longestIncreasingPath(self, matrix):\n                  # code here\n                  return result\n                  [\/INST]\n                  6. [INST]\n                  def longestIncreasingPath(self, matrix):\n                  # code here\n                  return result\n                  [\/INST]\n                  7. [INST]\n                  def longestIncreasingPath(self"}
{"value":"                  def countPaths(self, n):\n                      if n == 0:\n                          return 1\n                      return self.countPaths(n-1) + self.countPaths(n-1)\n                  print(countPaths(3))\n\n                  2.\n                  def countPaths(self, n):\n                      if n == 0:\n                          return 1\n                      return self.countPaths(n-1) + self.countPaths(n-1)\n                  print(countPaths(3))\n\n                  3.\n                  def countPaths(self, n):\n                      if n == 0:\n                          return 1\n                      return self.countPaths(n-1) + self.countPaths(n-1)\n                  print(countPaths(3))\n\n                  4.\n                  def countPaths(self, n):\n                      if n == 0:\n                          return 1\n                      return self.countPaths(n-1) + self.countPaths(n-1)\n                  print(countPaths(3))"}
{"value":"f getMaxGold(goldMineTable, row, col, rowLen, colLen):\n                   # Base case\n                   if row == rowLen - 1:\n                   return goldMineTable[row][col]\n                   # If we are not at the last row,\n                   # we can move right, right-up and right-down\n                   if row < rowLen - 1:\n                   # Update the value of goldMineTable\n                   # for current cell\n                   goldMineTable[row][col] = max(\n                   goldMineTable[row + 1][col],\n                   goldMineTable[row + 1][col + 1],\n                   goldMineTable[row + 1][col + 2]\n                   )\n                   # Recursively call the function\n                   # for right, right-up and right-down\n                   # movements\n                   goldMineTable[row][col] += getMaxGold(\n                   goldMineTable, row + 1, col, rowLen, colLen\n                   )\n                   goldM"}
{"value":"Python3 program to find minimum adjustment cost of an array\n                  import sys\n                  import math\n                  # Function to find minimum adjustment cost of an array\n                  def minCost(arr, n, target):\n                  # Initialize dp table\n                  dp = [[sys.maxsize] * (target + 1) for i in range(n + 1)]\n                  # Handle first element of array separately\n                  dp[0][0] = 0\n                  # Do for rest elements of the array\n                  for i in range(1, n + 1):\n                  # Replace A[i] to j and calculate minimal adjustment cost dp[i][j]\n                  for j in range(0, target + 1):\n                  dp[i][j] = sys.maxsize\n                  for k in range(max(j - target, 0), min(M, j + target) + 1):\n                  dp[i][j] = min(dp[i][j], dp[i - 1][j - k] + abs(arr[i - 1] - k"}
{"value}
{"value":"ODE]\n                   #include <iostream>\n                   using namespace std;\n                   int main()\n                   {\n                   int n;\n                   cin>>n;\n                   int A[n], B[n];\n                   for(int i=1;i<=2*n;i++)\n                   {\n                   A[i%n]=i;\n                   B[i%n]=i;\n                   }\n                   for(int i=0;i<n;i++)\n                   {\n                   cout<<A[i]<<\" \";\n                   }\n                   cout<<endl;\n                   for(int i=0;i<n;i++)\n                   {\n                   cout<<B[i]<<\" \";\n                   }\n                   return 0;\n                   }\n                   [\/CODE]"}
{"value":"                  import sys\n                  def flipBits(a, b):\n                      c = a ^ b\n                      return c\n                  def setBits(a, b):\n                      c = a & b\n                      return c\n                  def clearBits(a, b):\n                      c = a ^ b\n                      return c\n                  def main():\n                      a = int(input())\n                      b = int(input())\n                      print(flipBits(a, b))\n                      print(setBits(a, b))\n                      print(clearBits(a, b))\n                  if __name__ == '__main__':\n                      main()\n                  [\/code]\n                  [INST]\n                  Write a python program to complete the following. Numbers formed by flipping common set bits in two given integers | Function to flip bits of A and B which are set in both of them ; Iterate all possible bits of A and B ; If ith bit is set in both A and B ; Clear i - th bit of A ; Clear i - th bit of B ; Print A and B"}
{"value":"1. import numpy as np\n                  # 2. def count_distinct_pair_sums(arr1, arr2, n):\n                  # 3.     # Write your code here\n                  # 4.     # Return the count of distinct pair sums\n                  # 5.\n                  # 6.     # arr1 = [1, 2, 3, 4, 5]\n                  # 7.     # arr2 = [1, 2, 3, 4, 5]\n                  # 8.     # n = 5\n                  # 9.     # Output: 5\n                  # 10.\n                  # 11.     # arr1 = [1, 2, 3, 4, 5]\n                  # 12.     # arr2 = [1, 2, 3, 4, 5]\n                  # 13.     # n = 10\n                  # 14.     # Output: 10\n                  # 15.\n                "}
{"value":"                 # Python program to count the number of substrings\n                  # from a given ternary string containing characters\n                  # at least once\n                  # Function to count the number of substrings consists\n                  # of 0 , 1 , and 2\n                  def countSubstrings(str):\n                    # Initialize frequency array of size 3\n                    # Stores the resultant count\n                    count = [0, 0, 0]\n                    # Traversing string str\n                    for i in range(len(str)):\n                      # Update frequency array\n                      count[str[i] - '0'] += 1\n                    # If all the characters are present\n                    # counting number of substrings possible\n                    if count[0] and count[1] and count[2]:\n                      return (count[0] + 1) * (count[1] + 1) * (count[2] + 1)\n                    # Return the number of substrings\n                    return 0\n                  # Driver Code\n                  str = input()\n                  print(count"}
{"value":"                 2\n                  3\n                  4\n                  5\n                  6\n                  7\n                  8\n                  9\n                  10\n                  11\n                  12\n                  13\n                  14\n                  15\n                  16\n                  17\n                  18\n                  19\n                  20\n                  21\n                  22\n                  23\n                  24\n                  25\n                  26\n                  27\n                  28\n                  29\n                  30\n                  31\n                  32\n                  33\n                  34\n                  35\n                  36\n                  37\n                  38\n                  39\n                  40\n                  41\n                  42\n                  43\n                  44\n                  45\n                  46\n                  47\n                  48\n                  49\n                  50\n                  51\n                  52\n                  53\n                  "}
{"value":"                 import math\n                  def encrypt(s):\n                  i=0\n                  count=0\n                  while i<len(s):\n                  if s[i]=='S':\n                  count+=1\n                  i+=1\n                  else:\n                  i+=1\n                  return hex(count)[2:]\n                  def main():\n                  s=input()\n                  print(encrypt(s))\n                  main()\n                  Output:\n                  [OUT]\n                  Input:\n                  SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS"}
{"value":"                  #include <stdio.h>\n                  #include <stdlib.h>\n                  #include <string.h>\n                  #include <math.h>\n                  #include <stdbool.h>\n                  #include <stdint.h>\n                  #include <stdbool.h>\n                  #include <assert.h>\n                  #include <limits.h>\n                  #include <math.h>\n                  #include <stdbool.h>\n                  #include <stdint.h>\n                  #include <stdio.h>\n                  #include <stdlib.h>\n                  #include <string.h>\n                  #include <math.h>\n                  #include <stdbool.h>\n                  #include <stdint.h>\n                  #include <assert.h>\n                  #include <limits.h>\n                  #include <math.h>\n                  #include <stdbool.h>\n                  #include <stdint.h>\n                  #include <"}
{"value":"f remove_char(str, char):\n                    if len(str) == 0:\n                     return \"\"\n                    if str[0] == char:\n                     return remove_char(str[1:], char)\n                    return str[0] + remove_char(str[1:], char)\n                  print(remove_char(\"abcdabcd\", \"a\"))"}
{"value":"                  import datetime\n                  def is_time(time):\n                  if time[0] == '?' or time[1] == '?' or time[3] == '?' or time[4] == '?':\n                  return False\n                  return True\n                  def get_minute(time):\n                  if time[0] == '?' or time[1] == '?' or time[3] == '?' or time[4] == '?':\n                  return False\n                  return int(time[2:4])\n                  def get_hour(time):\n                  if time[0] == '?' or time[1] == '?' or time[3] == '?' or time[4] == '?':\n                  return False\n                  return int(time[:2])\n                  def change_value(time, flag):\n                  if flag == 0:\n                  time = time[:2] + '0' + time[2:]\n                  else:\n                  time = time[:3] + time[3:]\n                  return time\n                  def"}
{"value}
{"value":"f bitmask(s):\n                       res = 0\n                       for i in range(len(s)):\n                           res |= (1 << i)\n                       return res\n                   def findFrequency(arr1, arr2, n, m):\n                       # Create an unordered_map to store the frequency\n                       # of each string in arr2\n                       freq = [0] * m\n                       for i in range(m):\n                           freq[i] = bitmask(arr2[i])\n                       # Traverse the arr1\n                       for i in range(n):\n                           # Bitmask each string\n                           temp = bitmask(arr1[i])\n                           # Update the frequency of string\n                           freq[temp] += 1\n                       # Traverse the arr2\n                       for i in range(m):\n                           # Bitmask each string\n                           temp = bitmask(arr2[i])\n                           # Check if temp is present in an unordered_map\n                           if temp in freq:\n                               # Check for next set bit\n                              "}
{"value":"f flip_bits(num):\n                    num = str(num)\n                    if num.startswith('0'):\n                        num = num[1:]\n                    while num.startswith('0'):\n                        num = num[1:]\n                    return num\n\n                  def max_decimal(num):\n                    num = int(num)\n                    max_num = 0\n                    while num > 0:\n                        num_str = str(num)\n                        flipped_num = flip_bits(num_str)\n                        max_num = max(max_num, int(flipped_num))\n                        num -= 1\n                    return max_num\n\n                  print(max_decimal(10)) # Output: 15\n                  print(max_decimal(100)) # Output: 11111111111111111111111111111111111111111111111111111"}
{"value":"                  import re\n                  def camel_to_sentence(camel_case):\n                      if camel_case[0].isupper():\n                          return camel_case[0].lower() + camel_case[1:]\n                      return camel_case\n\n                  def sentence_to_camel(sentence):\n                      if sentence.isupper():\n                          return sentence\n                      return sentence.capitalize()\n\n                  def camel_case_to_sentence(camel_case):\n                      return sentence_to_camel(camel_to_sentence(camel_case))\n\n                  def sentence_to_camel_case(sentence):\n                      return camel_to_sentence(sentence_to_camel(sentence))\n\n                  print(camel_case_to_sentence(\"camelCase\"))\n                  print(sentence_to_camel_case(\"Camel case\"))\n                  print(camel_case_to_sentence(\"CamelCase\"))\n                  print(sentence"}
{"value":"f count(str, k, n):\n                    count = 0\n                    for i in range(n):\n                      if str[i] == 'a':\n                        count += 1\n                        if count >= k:\n                          return count\n                    return count\n                  print(count('aabaaabaaa', 3, 12))\n                  print(count('aabaaabaaa', 3, 13))\n\n                  Output:\n                  12\n                  13\n\n                  Explanation:\n                  In the first case, there are 12 occurrences of 'a' in the string 'aabaaabaaa' and 3 is a multiple of the string size.\n                  In the second case, there are 13 occurrences of 'a' in the string 'aabaaabaaa' and 3 is not a multiple of the string size.\n                  The remaining occurrences of 'a' are counted."}
{"value":"-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"}
{"value}
{"value":" import sys\n                  2.  class Node:\n                      def __init__(self,data):\n                         self.data = data\n                         self.left = None\n                         self.right = None\n                  3.  class Solution:\n                      def productOfNodesAtKthLevel(self, root, k):\n                         if root is None:\n                            return\n                         if k == 0:\n                            return root.data\n                         if k == 1:\n                            return root.data * root.data\n                         left = self.productOfNodesAtKthLevel(root.left, k - 1)\n                         right = self.productOfNodesAtKthLevel(root.right, k - 1)\n                         return left * right\n                  4.  def main():\n                         root = Node(1)\n                         root.left = Node(2)\n                         root.right = Node(3)\n                         root.left.left = Node(4)\n                         root.left.right = Node(5)\n                         root.right.left = Node("}
{"value":"ODE]\n                  #include<iostream>\n                  #include<algorithm>\n                  #include<string.h>\n                  using namespace std;\n                  void removeDuplicates(char s[][100],int m,int n)\n                  {\n                  int i,j;\n                  bool isPresent[m][n];\n                  for(i=0;i<m;i++)\n                  {\n                  for(j=0;j<n;j++)\n                  {\n                  isPresent[i][j]=false;\n                  }\n                  }\n                  for(i=0;i<m;i++)\n                  {\n                  for(j=0;j<n;j++)\n                  {\n                  if(isPresent[i][j]==false)\n                  {\n                  isPresent[i][j]=true;\n                  for(int k=0;k<m;k++)\n                  {\n                  if(s[i][j]==s[k][j]&&i!=k)\n                 "}
{"value":"import re\n                  2. def isValidISBN(isbn):\n                  3. if len(isbn) != 10:\n                  4. return False\n                  5. isbn = re.sub('[^0-9X]', '', isbn)\n                  6. if isbn.count('X') > 1:\n                  7. return False\n                  8. isbn = isbn.upper()\n                  9. sum = 0\n                  10. for i in range(9):\n                  11. sum += int(isbn[i]) * (10 - i)\n                  12. if isbn[-1] == 'X':\n                  13. sum += 10\n                  14. return sum % 11 == 0\n                  15. print(isValidISBN('9780131022191'))\n                  16. print(isValidISBN('978013102219X'))\n                  17. print(isValidISBN('9780"}
{"value":"                  import re\n                  def reverse_vowels(s):\n                      vowels = 'aeiouAEIOU'\n                      vowel_list = [x for x in s if x in vowels]\n                      vowel_list.reverse()\n                      return ''.join(vowel_list)\n                  print(reverse_vowels('coDing'))\n                  [\/1]\n                  [2.]\n                  import re\n                  def reverse_vowels(s):\n                      vowels = 'aeiouAEIOU'\n                      vowel_list = [x for x in s if x in vowels]\n                      vowel_list.reverse()\n                      return ''.join(vowel_list)\n                  print(reverse_vowels('coDing'))\n                  [\/2]\n                  [3.]\n                  import re\n                  def reverse_vowels(s):\n                      vowels = 'aeiouAEIOU'\n                      vowel_list"}
{"value}
{"value":"                 2\n                  3\n                  4\n                  5\n                  6\n                  7\n                  8\n                  9\n                  10\n                  11\n                  12\n                  13\n                  14\n                  15\n                  16\n                  17\n                  18\n                  19\n                  20\n                  21\n                  22\n                  23\n                  24\n                  25\n                  26\n                  27\n                  28\n                  29\n                  30\n                  31\n                  32\n                  33\n                  34\n                  35\n                  36\n                  37\n                  38\n                  39\n                  40\n                  41\n                  42\n                  43\n                  44\n                  45\n                  46\n                  47\n                  48\n                  49\n                  50\n                  51\n                  52\n                  53\n                  "}
{"value":"                  def countPairs(arr, n, k):\n                      ans = 0\n                      arr.sort()\n                      for i in range(n):\n                          if arr[i] > 0:\n                              break\n                          if arr[i] == 0:\n                              continue\n                          right = n - 1\n                          while arr[i] + arr[right] > k and right >= 0:\n                              right -= 1\n                          ans += right - i + 1\n                      return ans\n\n                  # Driver code\n                  arr = [1, 3, 1, 2, 0]\n                  n = len(arr)\n                  k = 4\n                  print(countPairs(arr, n, k))\n\n                  [\/code]\n                  [QUIZ]\n                  Write a python program to complete the following. Count of unordered pairs ( x , y ) of Array which satisfy given equation | Return the number of unordered pairs satisfying the conditions ; ans stores the number of unordered pairs ; Making each value of array to positive ;"}
{"value}
{"value":"import math\n                  2. class Point:\n                  3. def __init__(self, x, y):\n                  4. self.x = x\n                  5. self.y = y\n                  6. def __repr__(self):\n                  7. return 'Point({}, {})'.format(self.x, self.y)\n                  8. def __eq__(self, other):\n                  9. return self.x == other.x and self.y == other.y\n                  10. def __hash__(self):\n                  11. return hash((self.x, self.y))\n                  12. def __ne__(self, other):\n                  13. return not self.__eq__(other)\n                  14. def __lt__(self, other):\n                  15. return self.x < other.x or (self.x == other.x and self.y < other.y)\n                  16. def __le__(self, other):\n                  17. return self.__lt__(other) or self.__eq__(other)\n                  1"}
{"value":"Write a python program to find the icosihenagonal number.\n                  2. Write a python program to find the nth icosihenagonal number.\n                  3. Write a python program to find the sum of the icosihenagonal number.\n                  [INP]\n                  [\/INP]\n                  [OUT]\n                  [\/OUT]\n                  [SOL]\n                  [\/SOL]\n                  [TEST]\n                  [\/TEST]\n                  [ANS]\n                  [\/ANS]\n                  [QUIZ]\n                  [\/QUIZ]\n                  [TUT]\n                  [\/TUT]\n                  [\/INST]"}
{"value":"ODE]\n                  #include <bits\/stdc++.h>\n                  using namespace std;\n                  #define ll long long\n                  #define ld long double\n                  #define vi vector<int>\n                  #define vll vector<ll>\n                  #define vc vector<char>\n                  #define vb vector<bool>\n                  #define vd vector<double>\n                  #define vld vector<ld>\n                  #define vll vector<ll>\n                  #define vpl vector<pair<ll,ll>>\n                  #define vpll vector<pair<ll,ll>>\n                  #define vplld vector<pair<ll,ld>>\n                  #define vplldl vector<pair<ld,ld>>\n                  #define vplldl vector<pair<ld,ld>>\n                  #define vplldl vector<pair<ld,ld>>\n                  #define vplldl vector<pair<ld,ld>>\n                  #define vplldl vector<pair<ld,ld>>\n                  #define vpl"}
{"value}
{"value":"                  [CODE]\n                  def distance(a,b,c,d,e,f,g,h):\n                  return abs(e*h-f*g)\/sqrt((a-e)**2+(b-f)**2)\n                  [\/CODE]\n                  2.\n                  [CODE]\n                  a = int(input(\"Enter the value of a: \"))\n                  b = int(input(\"Enter the value of b: \"))\n                  c = int(input(\"Enter the value of c: \"))\n                  d = int(input(\"Enter the value of d: \"))\n                  e = int(input(\"Enter the value of e: \"))\n                  f = int(input(\"Enter the value of f: \"))\n                  g = int(input(\"Enter the value of g: \"))\n                  h = int(input(\"Enter the value of h: \"))\n                  print(distance(a,b,c,d,e,f,g,h))\n                  [\/CODE]\n                  3.\n                  [CODE]\n                 "}
{"value}
{"value}
{"value":"def count(x,y):\n                      count=0\n                      while x!=1 and y!=1:\n                          if x>y:\n                              x=x-1\n                              count+=1\n                          else:\n                              y=y-1\n                              count+=1\n                      return count\n                  2. x,y=map(int,input().split())\n                  3. print(count(x,y))\n                  input:\n                  1 2\n                  output:\n                  2"}
{"value":"f minReversals(expr):\n                      # your code goes here\n                      stack = []\n                      m = len(expr)\n                      n = 0\n                      for i in range(m):\n                          if expr[i] == \"(\":\n                              stack.append(\"(\")\n                          elif expr[i] == \")\":\n                              if not stack:\n                                  return -1\n                              stack.pop()\n                      if stack:\n                          return len(stack)\n                      return 0\n                  # Driver code\n                  expr = \"(()(())\"\n                  print(minReversals(expr))\n                  # Output: 2\n                  expr = \"()()\"\n                  print(minReversals(expr))\n                  # Output: 0\n                  expr = \"()()()\"\n                  print(minReversals(expr))\n                  # Output: 0\n                  expr = \"(()()()()\"\n                  print(minReversals(expr))\n                  # Output: 2\n                  expr = \"(()()()"}
{"value":"port sys\n                   def minimum_number(input_sequence):\n                   current_max = 0\n                   last_entry = 0\n                   for entry in input_sequence:\n                   noOfNextD = input_sequence.count(entry, last_entry + 1)\n                   if entry == 'I':\n                   if noOfNextD == 0:\n                   print(current_max + 1)\n                   current_max = current_max + 1\n                   else:\n                   print(current_max + 1, end=' ')\n                   current_max = current_max + noOfNextD\n                   last_entry = entry\n                   elif entry == 'D':\n                   if noOfNextD == 0:\n                   print(current_max, end=' ')\n                   current_max = current_max - 1\n                   else:\n                   print(current_max - 1, end=' ')\n                   current_max = current_max - noOfNextD\n                   last_entry = entry\n                   return current_max\n                   if __name"}
{"value":"ODE]\n                   import sys\n                   def minimum(input_list,min_avail,pos_of_I,output_vector):\n                   if len(input_list)==0:\n                   print(output_vector)\n                   return\n                   if input_list[0]=='D':\n                   minimum(input_list[1:],min_avail,pos_of_I,output_vector)\n                   else:\n                   if min_avail>=1:\n                   min_avail-=1\n                   output_vector.append('I')\n                   minimum(input_list[1:],min_avail,pos_of_I,output_vector)\n                   else:\n                   if pos_of_I>0:\n                   output_vector.pop()\n                   pos_of_I-=1\n                   minimum(input_list[1:],min_avail,pos_of_I,output_vector)\n                   else:\n                   print(-1)\n                   return\n                   input_list=sys.stdin."}
{"value":"                  import sys\n                  def decode_sequence(sequence):\n                    stack = []\n                    result = \"\"\n                    for i in range(len(sequence) + 1):\n                      stack.append(i + 1)\n                      if all(char == 'I' for char in sequence) or i == len(sequence):\n                        while stack:\n                          result += str(stack.pop())\n                        return result\n                    return \"Invalid Input\"\n\n                  def main():\n                    sequence = input(\"Enter the sequence: \")\n                    result = decode_sequence(sequence)\n                    print(result)\n\n                  if __name__ == '__main__':\n                    main()\n\n                  [OUT]\n                  Enter the sequence: 111111111111111111111111111111111111111111111111111111111111111111111111111"}
{"value":"                  [IN]\n                  input: 123456789\n                  [\/IN]\n                  [OUT]\n                  output: 123456789\n                  [\/OUT]\n                  2.\n                  [IN]\n                  input: 123456789\n                  [\/IN]\n                  [OUT]\n                  output: 123456789\n                  [\/OUT]\n                  3.\n                  [IN]\n                  input: 123456789\n                  [\/IN]\n                  [OUT]\n                  output: 123456789\n                  [\/OUT]\n                  4.\n                  [IN]\n                  input: 123456789\n                  [\/IN]\n                  [OUT]\n                  output: 123456789\n                  [\/OUT]\n                  5.\n                  [IN]\n                  input"}
{"value":"ODE]\n                   def checkPrime(n):\n                    if n == 1:\n                     return False\n                    for i in range(2, int(n**0.5) + 1):\n                     if n % i == 0:\n                      return False\n                    return True\n                   def smallestNumber(n):\n                    arr = [0] * 10\n                    for i in range(n):\n                     arr[i % 10] += 1\n                    return int(\"\".join(str(x) * arr[x] for x in range(10)))\n                   def printPrime(n):\n                    hash = [0] * 10\n                    for i in range(n):\n                     hash[i % 10] += 1\n                    for i in range(10):\n                     for j in range(hash[i]):\n                      print(i, end=\"\")\n                    print()\n                   n = int(input())\n                   printPrime(smallestNumber(n))\n                   [\/CODE]\n"}
{"value":"f gcd(a,b):\n                       if b==0:\n                           return a\n                       else:\n                           return gcd(b,a%b)\n                  def coprime(a,b):\n                       return gcd(a,b)==1\n                  def check(a,b,c):\n                       return coprime(a,b) and coprime(b,c) and not coprime(a,c)\n                  def find_triplet(L,R):\n                       flag = False\n                       for a in range(L,R):\n                           for b in range(L,R):\n                               for c in range(L,R):\n                                   if check(a,b,c):\n                                       flag = True\n                                       break\n                           if flag:\n                               break\n                       return flag\n                  print(find_triplet(2,10))\n                  print(find_triplet(23,46))"}
{"value":"def isPossible(a, b, k):\n                      # code here\n                  return True if a == b else False\n                  # Driver Code\n                  a, b, k = 8, 10, 2\n                  if isPossible(a, b, k):\n                      print(\"Yes\")\n                  else:\n                      print(\"No\")\n                  # This code is contributed by Ankit Rajput ().\n\n                  [SOL]\n                  [\/SOL]"}
{"value}
{"value":"-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"}
{"value":"f countNumbersWithUnitDigit(k, n):\n                      count = 0\n                      for i in range(1, n + 1):\n                          if i % 10 == k:\n                              count += 1\n                      return count\n                  # Driver Code\n                  n = int(input())\n                  k = int(input())\n                  print(countNumbersWithUnitDigit(k, n))\n\n                  [OUTPUT]\n                  Input:\n                  3\n                  5\n                  Output:\n                  1\n                  [EXPLANATION]\n                  There is only one number with unit digit 5 in the range [1, 3]\n                  [SOLUTION]\n                  The solution is to use the modulo operator (%) to check if a number has a unit digit of k.\n                  The for loop iterates through the range [1, n + 1] and increments the count variable if the current number has a unit digit of k.\n                  The count variable is then returned at the end of the function.\n                  [REFERENCES]"}
{"value":"ODE]\n                  import math\n\ndef sum_of_multiples(l, r):\n    sum = 0\n    for i in range(l, r+1):\n        if i % 6 == 0:\n            sum += i\n    return sum\n\ndef no_of_multiples(l, r):\n    count = 0\n    for i in range(l, r+1):\n        if i % 6 == 0:\n            count += 1\n    return count\n\ndef summation_of_multiples(l, r):\n    sum = 0\n    for i in range(l, r+1):\n        if i % 6 == 0:\n            sum += i\n    return sum\n\ndef no_of_multiples_upto_l_1(l, r):\n    count = 0\n    for i in range(l-1, r+1):\n        if i % 6 == 0:\n            count += 1\n    return count\n\ndef summation_of_multiples_upto_r(l, r):\n   "}
{"value":"                 2\n                  3\n                  4\n                  5\n                  6\n                  7\n                  8\n                  9\n                  10\n                  11\n                  12\n                  13\n                  14\n                  15\n                  16\n                  17\n                  18\n                  19\n                  20\n                  21\n                  22\n                  23\n                  24\n                  25\n                  26\n                  27\n                  28\n                  29\n                  30\n                  31\n                  32\n                  33\n                  34\n                  35\n                  36\n                  37\n                  38\n                  39\n                  40\n                  41\n                  42\n                  43\n                  44\n                  45\n                  46\n                  47\n                  48\n                  49\n                  50\n                  51\n                  52\n                  53\n                  "}
{"value}
{"value":"f sieveOfEratosthenes(n):\n                        # Create a boolean array \"prime[0..n]\" and initialize\n                        # all entries it as true. A value in prime[p] will\n                        # finally be false if p is Not a prime, else true.\n                        prime = [True for i in range(n+1)]\n                        p = 2 # Assume 2 is always a prime number\n                        for i in range(2, n+1):\n                                if prime[i] == True:\n                                        for j in range(i*2, n+1, i):\n                                                prime[j] = False\n                        return prime\n\n                  def sumOfArray(arr):\n                        sum = 0\n                        for i in arr:\n                                sum += i\n                        return sum\n\n                  def findMin(arr):\n                        for i in range(1, 1000000000):\n                                if sumOfArray(arr) + i in sieveOfEratosthenes(10000"}
{"value":"ODE]\n                  def sum_subarray(arr, start, end):\n                    sum = 0\n                    for i in range(start, end+1):\n                      sum += arr[i]\n                    return sum\n\n                  def sum_subarray_all(arr):\n                    sum = 0\n                    for i in range(len(arr)):\n                      for j in range(i, len(arr)):\n                        sum += sum_subarray(arr, i, j)\n                    return sum\n\n                  arr = [1, 2, 3, 4, 5]\n                  print(sum_subarray_all(arr))\n                  [\/CODE]\n                  output:\n                  [OUT]\n                  36\n                  [\/OUT]"}
{"value":"Write a python program to complete the following.\n                  Highest power of 2 less than or equal to given number\n                  [\/1]\n                  [\/INST]\n                  [INST]\n                  Python3 program to find highest power of 2 smaller than or equal to n .\n                  [\/INST]\n                  [\/1]\n                  [\/INST]\n                  [INST]\n                  Python3 program to find highest power of 2 smaller than or equal to n .\n                  [\/INST]\n                  [\/1]\n                  [\/INST]\n                  [INST]\n                  Python3 program to find highest power of 2 smaller than or equal to n .\n                  [\/INST]\n                  [\/1]\n                  [\/INST]\n                  [INST]\n                  Python3 program to find highest power of 2 smaller than or equal to n .\n                  [\/INST]\n                  [\/1]\n                  [\/INST]\n                  [INST]\n                  Python3 program to find highest power of 2 smaller than or equal to n .\n"}
{"value}
{"value":"                  [CODE]\n                  import numpy as np\n                  def interpolate(x, y, n):\n                      result = 0\n                      for i in range(n):\n                          term = 1\n                          for j in range(n):\n                              if i != j:\n                                  term *= (x - x[j]) \/ (x[i] - x[j])\n                          result += term * y[i]\n                      return result\n\n                  x = np.array([0, 1, 2, 3])\n                  y = np.array([1, 2, 3, 4])\n                  print(interpolate(3, y, 4))\n                  [\/CODE]\n                  2.\n                  [CODE]\n                  import numpy as np\n                  def interpolate(x, y, n):\n                      result = 0\n                      for i in range(n):\n                          term = 1\n                          for j in range(n):\n                              if i != j:\n                                  term *= ("}
{"value":"                 2\n                  3\n                  4\n                  5\n                  6\n                  7\n                  8\n                  9\n                  10\n                  11\n                  12\n                  13\n                  14\n                  15\n                  16\n                  17\n                  18\n                  19\n                  20\n                  21\n                  22\n                  23\n                  24\n                  25\n                  26\n                  27\n                  28\n                  29\n                  30\n                  31\n                  32\n                  33\n                  34\n                  35\n                  36\n                  37\n                  38\n                  39\n                  40\n                  41\n                  42\n                  43\n                  44\n                  45\n                  46\n                  47\n                  48\n                  49\n                  50\n                  51\n                  52\n                  53\n                  "}
{"value":"ODE]\n                  #include <stdio.h>\n                  int main()\n                  {\n                  int n, i, j, temp;\n                  printf(\"Enter the size of array: \");\n                  scanf(\"%d\", &n);\n                  int a[n];\n                  printf(\"Enter the elements of array: \");\n                  for(i = 0; i < n; i++)\n                  {\n                  scanf(\"%d\", &a[i]);\n                  }\n                  for(i = 0; i < n; i++)\n                  {\n                  temp = 0;\n                  for(j = 0; j < n; j++)\n                  {\n                  if(i != j)\n                  temp = temp ^ a[j];\n                  }\n                  a[i] = temp;\n                  }\n                  printf(\"Original array: \");\n                  for(i = 0; i < n; i++)\n                  printf(\"%d \", a[i]);\n                  return 0;\n                  }\n                  [\/CODE]"}
{"value}
{"value":"f hamming_distance(x,y):\n                   x=int(x)\n                   y=int(y)\n                   if x==y:\n                   return 0\n                   else:\n                   count=0\n                   while x!=0 or y!=0:\n                   if x%10!=y%10:\n                   count+=1\n                   x=x\/\/10\n                   y=y\/\/10\n                   return count\n                   print(hamming_distance(12,12))\n                   print(hamming_distance(12,13))\n                   print(hamming_distance(13,12))\n                   print(hamming_distance(100,100))\n                   print(hamming_distance(100,101))\n                   print(hamming_distance(101,100))\n                   print(hamming_distance(1000,1000))\n                   print(hamming_distance(1000,1001))\n                   print(ham"}
{"value":" def find_bitwise_subsets(n):\n                       for i in range(0, n):\n                           print(i, bin(i)[2:], bin(i)[2:].count('1'))\n                       for i in range(0, n):\n                           for j in range(0, n):\n                               if i & j == 0:\n                                   print(i, j, bin(i)[2:].count('1'), bin(j)[2:].count('1'))\n                   [\/code]\n                   [\/INST]\n                   [INST]\n                   Write a python program to find the first N terms of the series 1 + 1\/4 + 1\/9 + 1\/16 + 1\/25 + \u2026\n                   [\/INST]\n                   [code]\n                   def find_series(n):\n                       for i in range(1, n + 1):\n                           print(i, 1 \/ i ** 2)\n                   [\/code]\n                   [\/INST]\n                   [INST]\n                  "}
{"value":"                  def find_msb(n):\n                  # n = 10110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"value":"import sys\n                  2. def countSubsets(arr, n):\n                  3. # Write your code here\n                  4. count = 0\n                  5. arr.sort()\n                  6. freq = [0] * 100\n                  7. for i in range(n):\n                  8. freq[arr[i]] += 1\n                  9. max_freq = max(freq)\n                  10. for i in range(n):\n                  11. if freq[arr[i]] == max_freq:\n                  12. count += 1\n                  13. return count\n                  14. # Driver code\n                  15. if __name__ == '__main__':\n                  16. n = int(input())\n                  17. arr = list(map(int, sys.stdin.readline().strip().split()))\n                  18. print(countSubsets(arr, n))\n                  [\/code]\n                  [OUTPUT]\n                  Input:\n                  5\n                  "}
{"value":"                  import sys\n\n\n                  def count_subsets(arr, n):\n                      # create a map to store frequencies of elements\n                      freq = {}\n\n                      # traverse the input array and store frequencies of elements\n                      for i in range(n):\n                          if arr[i] in freq:\n                              freq[arr[i]] += 1\n                          else:\n                              freq[arr[i]] = 1\n\n                      # find the maximum value in map\n                      max_freq = max(freq.values())\n\n                      # return the number of subsets with distinct elements\n                      return max_freq\n\n\n                  # Driver code\n                  arr = [1, 2, 3, 1, 2, 3]\n                  n = len(arr)\n                  print(count_subsets(arr, n))"}
{"value":"ef perfectSquares(n):\n                  \t\t\t# Your code here\n                  \t\t\tsquares = [i**2 for i in range(1, n+1)]\n                  \t\t\tdef helper(n, squares):\n                  \t\t\t\tif n == 0:\n                  \t\t\t\t\treturn 1\n                  \t\t\t\tif n < 0:\n                  \t\t\t\t\treturn 0\n                  \t\t\t\tif n in squares:\n                  \t\t\t\t\treturn 1\n                  \t\t\t\tcount = 0\n                  \t\t\t\tfor i in squares:\n                  \t\t\t\t\tcount += helper(n-i, squares)\n                  \t\t\t\treturn count\n                  \t\t\treturn helper(n, squares)\n                  \t\tn = int(input())\n                  \t\tprint(perfectSquares(n))\n                  \t\t# Driver Code\n                  \t\t# n = int(input())\n                  \t\t# print(perfectSquares"}
{"value":"class Node:\n                     2. def __init__(self, data):\n                     3. self.data = data\n                     4. self.left = None\n                     5. self.right = None\n                     6. self.size = 0\n                     7. self.depth = 0\n                     8.\n                     9.\n                    10.\n                    11. def get_size(self):\n                    12. if self.left is None and self.right is None:\n                    13. self.size = 1\n                    14. else:\n                    15. self.size = 1 + self.left.size + self.right.size\n                    16.\n                    17.\n                    18. def get_depth(self):\n                    19. if self.left is None and self.right is None:\n                    20. self.depth = 0\n                    21. else:\n                    22. self.depth = 1 + max(self.left.depth, self.right.depth)\n                    "}
{"value":"ODE]\n                   [CODE]\n                   [\/CODE]\n                   [\/CODE]\n                   [\/INST]\n                   [INST]\n                   Write a python program to complete the following. Rearrange array such that sum of same indexed elements is atmost K ; '' Function to rearrange array such that sum of similar indexed elements does not exceed K ; '' Sort the array B[]  in descending order ; '' If condition fails ; '' Print the array ; '' Driver Code ; '' Given arrays.\n                   [\/INST]\n                   code:\n                   [CODE]\n                   [CODE]\n                   [\/CODE]\n                   [\/CODE]\n                   [\/INST]\n                   [INST]\n                   Write a python program to complete the following. Rearrange array such that sum of same indexed elements is atmost K | '' Function to rearrange array such that sum of similar indexed elements does not exceed K ; '' Sort the array B[]  in descending order ; '' If condition fails ; '' Print the array ; '' Driver Code ; '' Given arrays.\n                   [\/INST]\n                   code"}
{"value":"f count_exceeding(arr, n, m):\n                      count = 0\n                      total_sum = 0\n                      for i in range(n):\n                          for j in range(m):\n                              total_sum += arr[i][j]\n                      for i in range(n):\n                          row_sum = 0\n                          for j in range(m):\n                              row_sum += arr[i][j]\n                          if row_sum > total_sum - row_sum:\n                              count += 1\n                      return count\n                  n, m = map(int, input().split())\n                  arr = []\n                  for _ in range(n):\n                      arr.append(list(map(int, input().split())))\n                  print(count_exceeding(arr, n, m))"}
{"value":"-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"}
{"value":"                  [CODE]\n                  def is_contiguous(arr):\n                      if len(arr) < 3:\n                          return False\n                      for i in range(1, len(arr)):\n                          if arr[i] - arr[i - 1] > 1:\n                              return False\n                      return True\n                  [\/CODE]\n                  2)\n                  [CODE]\n                  def find_max_min(arr):\n                      if not is_contiguous(arr):\n                          return -1\n                      max_value = arr[0]\n                      min_value = arr[0]\n                      for i in range(1, len(arr)):\n                          if arr[i] > max_value:\n                              max_value = arr[i]\n                          if arr[i] < min_value:\n                              min_value = arr[i]\n                      return max_value, min_value\n                  [\/CODE]\n                  3)\n                  [CODE]\n                  def main():\n                      arr = [1"}
{"value":"nclude <bits\/stdc++.h>\n                   using namespace std;\n                   bool isConsecutive(int arr[], int n)\n                   {\n                      unordered_set<int> us;\n                      for (int i = 0; i < n; i++)\n                      {\n                         us.insert(arr[i]);\n                      }\n                      int curr_ele = arr[0];\n                      int count = 1;\n                      for (int i = 1; i < n; i++)\n                      {\n                         if (us.find(arr[i]) != us.end())\n                         {\n                            count++;\n                         }\n                         else\n                         {\n                            if (count > 1)\n                            {\n                               return true;\n                            }\n                            else\n                            {\n                               return false;\n                            }\n                         }\n                      }\n                      return true;\n                   }\n                   int main()\n                   {\n                      int arr[] = { 1, 2, 3, 4,"}
{"value":"                 2\n                  3\n                  4\n                  5\n                  6\n                  7\n                  8\n                  9\n                  10\n                  11\n                  12\n                  13\n                  14\n                  15\n                  16\n                  17\n                  18\n                  19\n                  20\n                  21\n                  22\n                  23\n                  24\n                  25\n                  26\n                  27\n                  28\n                  29\n                  30\n                  31\n                  32\n                  33\n                  34\n                  35\n                  36\n                  37\n                  38\n                  39\n                  40\n                  41\n                  42\n                  43\n                  44\n                  45\n                  46\n                  47\n                  48\n                  49\n                  50\n                  51\n                  52\n                  53\n                  "}
{"value":"                  [CODE]\n                  import math\n\n                  def checkOverlapping(arr, k):\n                      # Your code here\n                      # Write your code here\n                      # Write to standard output\n                      # Print 'YES' if there exists any overlap\n                      # Print 'NO' otherwise\n                      # Note: Printing happens to standard output by using print or print() function\n                      # Please take care of the following point\n                      # The first line of input contains the number of test cases T.\n                      # T test cases follow. Each test case contains two lines.\n                      # The first line contains two space separated integers N and K.\n                      # The second line contains N space separated integers A1, A2, A3, ..., AN.\n                      # 1<=N<=100000\n                      # 1<=Ai<=10^9\n                      # 1<=K<=N\n                      # 1<=T<=1000\n                      # Ai is the starting point of ith segment\n                      # Ai+1 is the ending"}
{"value":"f find_smallest_range(arr, n, k):\n                      minrange = [1000000000, 0]\n                      ptr = [0] * k\n                      for i in range(k):\n                          ptr[i] = 0\n                      while True:\n                          minvalue = 1000000000\n                          for i in range(k):\n                              if ptr[i] < n:\n                                  minvalue = min(minvalue, arr[i][ptr[i]])\n                          maxvalue = 1000000000\n                          for i in range(k):\n                              if ptr[i] < n:\n                                  maxvalue = max(maxvalue, arr[i][ptr[i]])\n                          if maxvalue - minvalue < minrange[1] - minrange[0]:\n                              minrange = [minvalue, maxvalue]\n                          if maxvalue == 1000000000:\n                              break\n                          for i in range(k):\n                "}
{"value}
{"value":"ODE]\n                   [\/CODE]\n                   [SOL]\n                   [\/SOL]\n                   [SOL]\n                   [\/SOL]\n                   [SOL]\n                   [\/SOL]\n                   [SOL]\n                   [\/SOL]\n                   [SOL]\n                   [\/SOL]\n                   [SOL]\n                   [\/SOL]\n                   [SOL]\n                   [\/SOL]\n                   [SOL]\n                   [\/SOL]\n                   [SOL]\n                   [\/SOL]\n                   [SOL]\n                   [\/SOL]\n                   [SOL]\n                   [\/SOL]\n                   [SOL]\n                   [\/SOL]\n                   [SOL]\n                   [\/SOL]\n                   [SOL]\n                   [\/SOL]\n                   [SOL]\n                   [\/SOL]\n                   [SOL]\n                   [\/SOL]\n                   [SOL"}
{"value":"def count(arr, k):\n                  # Write your code here\n                  count=0\n                  arr.sort()\n                  for i in range(len(arr)):\n                      sum=0\n                      for j in range(i,len(arr)):\n                          sum+=arr[j]\n                          if sum==k:\n                              count+=1\n                              break\n                          if sum>k:\n                              break\n                  return count\n                  2. # Driver Code\n                  arr = [1, 2, 3, 4, 5]\n                  k = 5\n                  print(count(arr, k))\n                  [OUT]\n                  [1, 2, 3, 4, 5]\n                  [1, 2, 3, 4, 5]\n                  [1, 2, 3, 4, 5]\n                  [1, 2, 3, 4, 5]\n                  [1, 2, 3, 4, 5]\n                  [1, 2"}
{"value}
{"value":"                  [CODE]\n                  def sort_array(arr, a, b):\n                  temp = []\n                  for i in range(a, b + 1):\n                      temp.append(arr[i])\n                  temp.sort()\n                  for i in range(a, b + 1):\n                      arr[i] = temp[i - a]\n                  return arr\n                  [\/CODE]\n                  2.\n                  [CODE]\n                  arr = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n                  a = 2\n                  b = 5\n                  print(sort_array(arr, a, b))\n                  [\/CODE]\n                  output:\n                  [OUTPUT]\n                  [2, 4, 6, 8, 10]\n                  [\/OUTPUT]"}
{"value}
{"value":"                  [CODE]\n                  def moveZeroes(arr, n):\n        count = 0\n        for i in range(n):\n            if arr[i] != 0:\n                arr[count] = arr[i]\n                count += 1\n            else:\n                pass\n        while count < n:\n            arr[count] = 0\n            count += 1\n        return arr\n\n        arr = [0, 1, 0, 3, 12]\n        n = len(arr)\n        print(moveZeroes(arr, n))\n\n                  [\/CODE]\n                  Output:\n                  [OUTPUT]\n                  [1, 3, 12, 0, 0]\n                  [\/OUTPUT]\n                  [INST]\n                  Write a python program to complete the following. Move all zeroes to end of array | Function which pushes all zeros to end of an array . ; Count of non - zero elements ; Traverse the array . If element encountered is non - zero , then replace the element at index ' count ' with"}
{"value}
{"value":"ODE]\n                   def double_first(arr):\n                       arr[0] = arr[0]*2\n                       for i in range(1,len(arr)):\n                           if arr[i] == 0:\n                               arr[i] = arr[i-1]\n                   def count_non_zero(arr):\n                       count = 0\n                       for i in range(len(arr)):\n                           if arr[i] != 0:\n                               count += 1\n                   def rearrange(arr):\n                       if len(arr) == 1:\n                           return\n                       for i in range(len(arr)):\n                           if arr[i] != 0:\n                               arr[i] = arr[i]*2\n                               arr[i+1] = 0\n                               i += 2\n                   def print_array(arr):\n                       for i in arr:\n                           print(i,end=\" \")\n                   arr = [0,1,0,0,0,0,0,0,0,0,0,0,"}
{"value":"f move_zeros(arr):\n                        lastSeen = 0\n                        for i in range(len(arr)):\n                            if arr[i] != 0:\n                                arr[i], arr[lastSeen] = arr[lastSeen], arr[i]\n                                lastSeen += 1\n                        return arr\n\n                  [TEST]\n                  [\/TEST]\n                  [OUTPUT]\n                  [\/OUTPUT]\n                  [EXPLANATION]\n                  [\/EXPLANATION]"}
{"value":"[code]\n                  2. import java.util.*;\n                  3. public class Main {\n                  4. public static void main(String[] args) {\n                  5. Scanner sc = new Scanner(System.in);\n                  6. int n = sc.nextInt();\n                  7. int[] arr = new int[n];\n                  8. for(int i = 0; i < n; i++) {\n                  9. arr[i] = sc.nextInt();\n                 10. }\n                 11. RearrangePositiveNegative(arr, n);\n                 12. for(int i = 0; i < n; i++) {\n                 13. System.out.print(arr[i] + \" \");\n                 14. }\n                 15. }\n                 16. public static void RearrangePositiveNegative(int[] arr, int n) {\n                 17. int i = 0;\n                 18. int j = n - 1;\n                 19. while("}
{"value":"                 #include<bits\/stdc++.h>\n                  using namespace std;\n                  int main()\n                  {\n                  int arr[] = { 1, -1, 2, -2, 3, -3 };\n                  int n = sizeof(arr) \/ sizeof(arr[0]);\n                  Rearrange(arr, n);\n                  for (int i = 0; i < n; i++)\n                  cout << arr[i] << \" \";\n                  return 0;\n                  }\n                  [\/CODE]\n                  [INST]\n                  Write a python program to complete the following. Rearrange positive and negative numbers with constant extra space | Function to print an array ; Function to reverse an array . An array can be reversed in O ( n ) time and O ( 1 ) space . ; Merges two subarrays of arr [ ] . First subarray is arr [ l . . m ] Second subarray is arr [ m + 1. . r ] ; Initial index of 1 st subarray ; Initial index of IInd ; arr [ i . . m ] is"}
{"value":"                 def rearrange(arr, n):\n                  i = 0\n                  j = n - 1\n                  while i < j:\n                  if arr[i] < 0 and arr[j] > 0:\n                  i += 1\n                  j -= 1\n                  else:\n                  if arr[i] > 0:\n                  j -= 1\n                  else:\n                  i += 1\n                  while i < j:\n                  arr[i], arr[j] = arr[j], arr[i]\n                  i += 1\n                  j -= 1\n                  return arr\n                  # Driver Code\n                  arr = [1, 2, 3, -4, -1, 4]\n                  n = len(arr)\n                  print(rearrange(arr, n))\n                  # This code is contributed by mohit kumar 29.\n                  [\/CODE]\n                  [INST]\n                  Write a python program to complete the following. Rearrange positive and negative numbers"}
{"value":"                  import math\n                  def isPrime(n):\n                      if n == 1:\n                          return False\n                      if n == 2:\n                          return True\n                      if n % 2 == 0:\n                          return False\n                      for i in range(3, int(math.sqrt(n)) + 1, 2):\n                          if n % i == 0:\n                              return False\n                      return True\n                  def isDivisor(n):\n                      if n == 1:\n                          return False\n                      if n == 2:\n                          return True\n                      if n % 2 == 0:\n                          return True\n                      for i in range(3, int(math.sqrt(n)) + 1, 2):\n                          if n % i == 0:\n                              return True\n                      return False\n                  def checkWinner(arr, n):\n                      if n % 2 == 1:\n                          return 1\n                      else:\n                          return 2\n                  def is"}
{"value":"                  [CODE]\n                  def sumOfArray(arr,N,x,y):\n                  dp = [[0] * (N + 1) for _ in range(N + 1)]\n                  for i in range(N):\n                  dp[i][0] = arr[i]\n                  for j in range(1, N + 1):\n                  for i in range(N):\n                  if i + j < N:\n                  dp[i][j] = dp[i][j - 1] + arr[i + j]\n                  return dp\n                  def sumOfArray(arr,N,Q,M):\n                  dp = [[0] * (N + 1) for _ in range(N + 1)]\n                  for i in range(N):\n                  dp[i][0] = arr[i]\n                  for j in range(1, N + 1):\n                  for i in range(N):\n                  if i + j < N:\n                  dp[i][j] = dp[i][j - "}
{"value":"                 [CODE]\n                  def find_atleast_two_greater(arr):\n                  count = 0\n                  for i in range(len(arr)):\n                  for j in range(i+1, len(arr)):\n                  if arr[i] < arr[j]:\n                  count += 1\n                  if count >= 2:\n                  print(arr[i])\n                  count = 0\n                  return\n                  arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n                  find_atleast_two_greater(arr)\n                  [\/CODE]\n                  [OUTPUT]\n                  3\n                  4\n                  5\n                  6\n                  7\n                  8\n                  [\/OUTPUT]"}
{"value":"f find_greater_than_two(arr):\n                    result = []\n                    for i in range(len(arr)):\n                        count = 0\n                        for j in range(i+1, len(arr)):\n                            if arr[i] < arr[j]:\n                                count += 1\n                            if count == 2:\n                                result.append(arr[i])\n                                break\n                    return result\n                  [\/code]\n                  [INST]\n                  Write a python program to complete the following. Find all elements in array which have atleast two greater elements itself . ; Driven source.\n                  [\/INST]\n                  code:\n                   def find_greater_than_two(arr):\n                    result = []\n                    for i in range(len(arr)):\n                        count = 0\n                        for j in range(i+1, len(arr)):\n                            if arr[i] < arr[j]:\n                                count += 1\n                            if count == 2:\n                                result.append("}
{"value":"[INP]\n                  arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n                  [\/INP]\n                  [OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT]\n                  [\/OUT]\n                  [OUT"}
{"value":"# Python3 program to find the minimum number of operations\n                  2. # required to make the array non-increasing\n                  3. # The function to find the minimum number of operations\n                  4. # required to make the array non-increasing\n                  5. # Stores the count of required operations\n                  6. # If arr[i] > arr[i+1], no increments required\n                  7. # Otherwise, add their difference to the answer\n                  8. # Return the result res\n                  9. def findMinOperations(arr, n):\n                  10. # Stores the count of required operations\n                  11. res = 0\n                  12. for i in range(n-1):\n                  13. if arr[i] > arr[i+1]:\n                  14. res += 0\n                  15. else:\n                  16. res += arr[i+1] - arr[i]\n                  17. return res\n                  18. # Driver Code\n                  19. arr = [1, "}
{"value}
{"value}
{"value":"                  [INST]\n                  Write a python program to complete the following. Maximum sum such that no two elements are adjacent | Function to return max sum such that no two elements are adjacent ; Current max excluding i ( No ternary in Python ) ; Current max including i ; return max of incl and excl ; Driver program to test above function.\n                  [\/INST]\n                  code:\n                  1.\n                  [INST]\n                  Write a python program to complete the following. Maximum sum such that no two elements are adjacent | Function to return max sum such that no two elements are adjacent ; Current max excluding i ( No ternary in Python ) ; Current max including i ; return max of incl and excl ; Driver program to test above function.\n                  [\/INST]\n                  code:\n                  1.\n                  [INST]\n                  Write a python program to complete the following. Maximum sum such that no two elements are adjacent | Function to return max sum such that no two elements are adjacent ; Current max excluding i ( No ternary in Python ) ; Current max including i ; return max of incl and excl ; Driver program"}
{"value":"f count_minimum_changes(matrix):\n                    n = len(matrix)\n                    m = len(matrix[0])\n                    freq = [0] * (n + m - 2)\n                    for i in range(n):\n                        for j in range(m):\n                            freq[i + j] += 1\n                    for i in range(10):\n                        freq[i] = freq[i]\n                    max_freq = max(freq)\n                    count = 0\n                    for i in range(n + m - 2):\n                        count += freq[i]\n                    matrix = [[0 for _ in range(m)] for _ in range(n)]\n                    for i in range(n):\n                        for j in range(m):\n                            matrix[i][j] = max_freq\n                    return count\n                  [\/code]\n                  [SOL]\n                  [\/SOL]"}
{"value":"                 2\n                  3\n                  4\n                  5\n                  6\n                  7\n                  8\n                  9\n                  10\n                  11\n                  12\n                  13\n                  14\n                  15\n                  16\n                  17\n                  18\n                  19\n                  20\n                  21\n                  22\n                  23\n                  24\n                  25\n                  26\n                  27\n                  28\n                  29\n                  30\n                  31\n                  32\n                  33\n                  34\n                  35\n                  36\n                  37\n                  38\n                  39\n                  40\n                  41\n                  42\n                  43\n                  44\n                  45\n                  46\n                  47\n                  48\n                  49\n                  50\n                  51\n                  52\n                  53\n                  "}
{"value":"                  def build_sparse_table(arr):\n                  # arr is the input array\n                  # build the sparse table\n                  # lookup[i][j] is the minimum of arr[2^i] to arr[2^i + 2^j]\n                  # i.e. arr[2^i] <= arr[2^i + 1] <= arr[2^i + 2] <= arr[2^i + 3] <= arr[2^i + 4] <= arr[2^i + 5] <= arr[2^i + 6] <= arr[2^i + 7] <= arr[2^i + 8] <= arr[2^i + 9] <= arr[2^i + 10] <= arr[2^i + 11] <= arr[2^i + 12] <= arr[2^i + 13] <= arr[2^i + 14] <= arr[2^i + 15]\n                  lookup = [[0] * 16 for _ in range(len(arr))"}
{"value":"ODE]\n                   #include<iostream>\n                   using namespace std;\n                   int main()\n                   {\n                   int n,k,i,j,pos=0,temp,min,minpos,count=0;\n                   cin>>n>>k;\n                   int arr[n];\n                   for(i=0;i<n;i++)\n                   {\n                   cin>>arr[i];\n                   }\n                   for(i=0;i<n;i++)\n                   {\n                   min=arr[i];\n                   minpos=i;\n                   for(j=i+1;j<n;j++)\n                   {\n                   if(arr[j]<min)\n                   {\n                   min=arr[j];\n                   minpos=j;\n                   }\n                   }\n                   if(count<k)\n                   {\n                   temp=arr[i];\n                   arr[i]=min;\n                   arr[minpos]=temp;\n                   count++;\n                   }\n                   else"}
{"value":"nclude <iostream>\n                   #include <vector>\n                   #include <algorithm>\n                   using namespace std;\n                   int maxSubarray(vector<int> &arr, int k)\n                   {\n                   int n = arr.size();\n                   vector<int> csum(n + 1);\n                   for (int i = 1; i <= n; i++)\n                   csum[i] = csum[i - 1] + arr[i - 1];\n                   int max_sum = csum[k];\n                   int max_i = 0;\n                   for (int i = k + 1; i <= n; i++)\n                   {\n                   int sum = csum[i] - csum[i - k];\n                   if (sum > max_sum)\n                   {\n                   max_sum = sum;\n                   max_i = i - k + 1;\n                   }\n                   }\n                   return max_i;\n                   }\n                   int main()\n                   {\n                   vector"}
{"value":"                  def max_subarray(A, k):\n                      n = len(A)\n                      if k > n:\n                          return -1\n                      sum_ = 0\n                      max_sum = 0\n                      for i in range(n):\n                          sum_ += A[i]\n                          if i >= k - 1:\n                              max_sum = max(max_sum, sum_)\n                              sum_ -= A[i - k + 1]\n                      return max_sum\n\n                  def main():\n                      A = [1, 2, 3, 4, 5, 6, 7]\n                      k = 3\n                      print(max_subarray(A, k))\n\n                  if __name__ == '__main__':\n                      main()\n\n                  output:\n                  [31]\n                  [\/OUT]"}
{"value":"                  [CODE]\n                  #include <iostream>\n                  using namespace std;\n                  int main() {\n                  int n;\n                  cin >> n;\n                  int arr[n];\n                  for (int i = 0; i < n; i++) {\n                  cin >> arr[i];\n                  }\n                  int a = 0, b = 0;\n                  for (int i = 0; i < n; i++) {\n                  a += arr[i];\n                  b += arr[i];\n                  }\n                  int ans = a - b;\n                  cout << ans;\n                  return 0;\n                  }\n                  [\/CODE]\n                  2.\n                  [CODE]\n                  #include <iostream>\n                  using namespace std;\n                  int main() {\n                  int n;\n                  cin >> n;\n                  int arr[n];\n                  for (int i = 0; i < n; i++) {\n                  cin >> arr[i];\n                "}
{"value":"                 # Python3 program for the above approach\n                  2\n                  from math import sqrt\n                  3\n                  def isPrime(n):\n                  4\n                    # Corner case\n                  5\n                    if (n==1):\n                  6\n                      return False\n                  7\n                    # Check from 2 to n-1\n                  8\n                    for i in range(2,n):\n                  9\n                      if (n%i==0):\n                  10\n                        return False\n                  11\n                    return True\n                  12\n                  def getMiddle(low,high):\n                  13\n                    return (low+high)\/\/2\n                  14\n                  def getSum(arr,low,high,index):\n                  15\n                    sum=0\n                  16\n                    if (index>=low and index<=high):\n                  17\n                      sum=sum+arr[index]\n                  18\n                    return sum\n                  19\n                  def update"}
{"value":"ODE]\n                   def countConstruct(self, target, wordBank):\n                       # code here\n                       dp = [0 for i in range(len(target)+1)]\n                       dp[0] = 1\n                       for i in range(len(wordBank)):\n                           for j in range(len(wordBank[i])):\n                               dp[wordBank[i][j]] = 1\n                       for i in range(1,len(target)+1):\n                           for j in range(len(wordBank)):\n                               if dp[i-len(wordBank[j])] == 1:\n                                   dp[i] += dp[i-len(wordBank[j])]\n                       return dp[len(target)]\n                   [\/CODE]"}
{"value":"f count_digit_sum_multiples(n, k):\n                    if n == 0:\n                     return 0\n                    dp = [0] * (n + 1)\n                    dp[0] = 1\n                    for i in range(1, n + 1):\n                     dp[i] = (dp[i - 1] + (i % k == 0)) % (10 ** 9 + 7)\n                    return dp[n]\n                  def count_digit_sum_multiples_dp(n, k):\n                    if n == 0:\n                     return 0\n                    dp = [0] * (n + 1)\n                    dp[0] = 1\n                    for i in range(1, n + 1):\n                     for j in range(10):\n                      dp[i] = (dp[i] + dp[i - 1] * (j + 1)) % (10 ** 9 + 7)\n                    return dp[n]\n                  def count_digit_"}
{"value":"f knapsack(arr, w1, w2, n):\n                      dp = [[[0 for i in range(w1+1)] for j in range(w2+1)] for k in range(n+1)]\n                      for i in range(n+1):\n                         for j in range(w1+1):\n                            for k in range(w2+1):\n                               if i == 0 or j == 0 or k == 0:\n                                  dp[i][j][k] = 0\n                               else:\n                                  if arr[i-1] <= j:\n                                     dp[i][j][k] = max(dp[i-1][j][k], arr[i-1] + dp[i-1][j-arr[i-1]][k])\n                                  else:\n                                     dp[i][j][k] = dp[i-1][j][k]\n                      return dp[n][w1][w2]\n                   arr = [1, 3, 4, 5]\n                   w"}
{"value":"ODE]\n                   import math\n\n                   def isPrime(n):\n                       # Corner case\n                       if (n == 2):\n                           return True\n                       if (n % 2 == 0 or n < 2):\n                           return False\n                       for i in range(3, int(math.sqrt(n)) + 1, 2):\n                           if (n % i == 0):\n                               return False\n                       return True\n\n                   def isPrimePath(matrix, n, m, i, j, path):\n                       if (i < 0 or j < 0 or i >= n or j >= m):\n                           return False\n                       if (isPrime(matrix[i][j]) == False):\n                           return False\n                       if (path[i][j] == True):\n                           return False\n                       path[i][j] = True\n                       if (i == n - 1 and j == m - 1):\n                           return True\n                       if (isPrimePath(matrix, n, m, i +"}
{"value":"nclude<iostream>\n                  using namespace std;\n                  int maxSubsetSum(int a[], int n) {\n                      int sum = 0;\n                      int subset[n + 1][n + 1];\n                      for (int i = 0; i <= n; i++) {\n                          subset[i][0] = true;\n                      }\n                      for (int i = 1; i <= n; i++) {\n                          for (int j = 1; j <= n; j++) {\n                              if (a[i - 1] <= j) {\n                                  subset[i][j] = subset[i - 1][j - a[i - 1]] || subset[i - 1][j];\n                              }\n                              else {\n                                  subset[i][j] = subset[i - 1][j];\n                              }\n                          }\n                      }\n                      for (int i = 0; i <= n; i++) {\n                          for (int j = 0; j <= n; j++) {\n                "}
{"value":"                  [CODE]\n                  import sys\n                  def lcs(str1, str2):\n                  # base condition\n                  if len1 == 0 or len2 == 0:\n                  return 0\n                  # if the characters are same\n                  if str1[len1 - 1] == str2[len2 - 1]:\n                  return 1 + lcs(str1[0:len1 - 1], str2[0:len2 - 1])\n                  # if the characters are not same\n                  return max(lcs(str1[0:len1 - 1], str2), lcs(str1, str2[0:len2 - 1]))\n                  # to print all LCS in lexicographic order\n                  def prall(str1, str2, lcslen, data):\n                  if lcslen == 0:\n                  return\n                  for ch in range('a', 'z' + 1):\n                  if ch in str1 and ch in str2:\n                  if lcslen == l"}
{"value":"                  [CODE]\n                  def find_majority(arr, n):\n        # Initialize majority element as -1\n        # If arr[0] occurs more than n\/2 times,\n        # then it is majority element\n        if (arr[0] > 0 and arr[0] > n \/\/ 2):\n            return arr[0]\n\n        # If arr[0] occurs less than n\/2 times,\n        # then it is not majority element\n        if (arr[0] < 0 or arr[0] < n \/\/ 2):\n            return -1\n\n        # Initialize index for finding majority\n        # element\n        index = 1\n\n        # Traverse the array\n        while (index < n):\n            if (arr[index] == arr[index - 1]):\n                index = index + 1\n\n            # If arr[index] is not equal to\n            # arr[index-1] and arr[index]\n            # is greater than arr[index-1],\n            # then update majority element\n            elif (arr[index] > arr[index -"}
{"value":" def isMajority(arr, n):\n                  # code here\n                  # Write your code here\n                  return -1\n                  2.  def isMajority(arr, n):\n                  # code here\n                  # Write your code here\n                  return -1\n                  3.  def isMajority(arr, n):\n                  # code here\n                  # Write your code here\n                  return -1\n                  4.  def isMajority(arr, n):\n                  # code here\n                  # Write your code here\n                  return -1\n                  5.  def isMajority(arr, n):\n                  # code here\n                  # Write your code here\n                  return -1\n                  6.  def isMajority(arr, n):\n                  # code here\n                  # Write your code here\n                  return -1\n                  7.  def isMajority(arr, n):\n                  # code here\n                  # Write your code here\n                  return -1\n                  8.  def"}
{"value}
{"value":"ODE]\n                   def cutRod(price, n):\n                    # Your code here\n                    # 1D array to store results of sub problems\n                    val = [0] * (n + 1)\n                    # base case\n                    val[0] = 0\n                    # 1D array to store subproblems solved\n                    sol = [0] * (n + 1)\n                    for i in range(1, n + 1):\n                        max_val = 0\n                        for j in range(1, i + 1):\n                            # if we can cut the rod, check if it gives us the best value\n                            if price[j - 1] + val[i - j] > max_val:\n                                max_val = price[j - 1] + val[i - j]\n                                sol[i] = j\n                        val[i] = max_val\n                    return val[n], sol\n                    # Driver code\n                    price = [1, 5, 8, 9, 10"}
{"value":"                 [CODE]\n                  def maximum(arr,n,target):\n                  max = -1\n                  for i in range(n):\n                  if arr[i]>max:\n                  max = arr[i]\n                  if max == 1:\n                  for i in range(n):\n                  if arr[i]>max:\n                  max = arr[i]\n                  if max<0:\n                  max = 1\n                  return max\n                  def check(arr,n,target,max):\n                  if n == 0:\n                  if sum(arr) == target:\n                  return 1\n                  return 0\n                  def convert(arr,n,target,max):\n                  if n == 0:\n                  return 0\n                  if check(arr,n,target,max):\n                  return 1\n                  for i in range(n):\n                  if arr[i] == max:\n                  continue\n                  arr[i] = max\n                  if check(arr,n,target,"}
{"value":"#include <stdio.h>\n                  2. #include <stdlib.h>\n                  3. int main()\n                  4. {\n                  5. int n, r, k, i, j, sum;\n                  6. printf(\"Enter the value of n, r and k: \");\n                  7. scanf(\"%d %d %d\", &n, &r, &k);\n                  8. sum = 0;\n                  9. for (i = 1; i <= n; i++)\n                  10. {\n                  11. for (j = 1; j <= n; j++)\n                  12. {\n                  13. if (j > i)\n                  14. sum += (i * j);\n                  15. }\n                  16. }\n                  17. printf(\"Sum of all products of the Binomial Coefficients of two numbers up to K is: %d\\n\", sum);\n                  18. return 0;\n                  19. }\n                  [\/code]\n"}
{"value":"Write a python program to complete the following. Check if N can be obtained from 1 by repetitively multiplying by 10 or 20\n                  [\/CODE]\n                  [CODE]\n                  [\/CODE]\n                  [\/CODE]\n                  [\/CODE]\n                  [\/CODE]\n                  [\/CODE]\n                  [\/CODE]\n                  [\/CODE]\n                  [\/CODE]\n                  [\/CODE]\n                  [\/CODE]\n                  [\/CODE]\n                  [\/CODE]\n                  [\/CODE]\n                  [\/CODE]\n                  [\/CODE]\n                  [\/CODE]\n                  [\/CODE]\n                  [\/CODE]\n                  [\/CODE]\n                  [\/CODE]\n                  [\/CODE]\n                  [\/CODE]\n                  [\/CODE]\n                  [\/CODE]\n                  [\/CODE]\n                  [\/CODE]\n                  [\/CODE]\n                  [\/CODE]\n                  [\/CODE]\n                  [\/CODE"}
{"value":"                  [INST]\n                  Write a python program to complete the following. Central polygonal numbers | Function to find N - th term in the series ; Driver code.\n                  [\/INST]\n                  code:\n                  1.\n                  [INST]\n                  Write a python program to complete the following. Central polygonal numbers | Function to find N - th term in the series ; Driver code.\n                  [\/INST]\n                  code:\n                  1.\n                  [INST]\n                  Write a python program to complete the following. Central polygonal numbers | Function to find N - th term in the series ; Driver code.\n                  [\/INST]\n                  code:\n                  1.\n                  [INST]\n                  Write a python program to complete the following. Central polygonal numbers | Function to find N - th term in the series ; Driver code.\n                  [\/INST]\n                  code:\n                  1.\n                  [INST]\n                  Write a python program to complete the following. Central polygonal numbers | Function to find N - th term in the series"}
{"value":"ODE]\n                   import math\n                   def sum_of_series(n):\n                     s = 0\n                     for i in range(1, n + 1):\n                       s += i**3\n                     return s\n                   def print_series(n):\n                     for i in range(1, n + 1):\n                       print(i, end=\" \")\n                   def generate_ith_term(n):\n                     return n**3\n                   def main():\n                     n = int(input(\"Enter the number of terms: \"))\n                     print(\"Series:\")\n                     print_series(n)\n                     print()\n                     print(\"Sum:\")\n                     print(sum_of_series(n))\n                     print()\n                     print(\"Ith term:\")\n                     print(generate_ith_term(n))\n                   main()\n                   [\/CODE]\n                   [OUT]\n                   Enter the number of terms: 5\n                   Series:\n                   1 3 4 8 15\n                   Sum:\n"}
{"value":"f diameter(self, index):\n                        if self.size[index] == 1:\n                            return 0\n                        else:\n                            return 1 + max(self.diameter(2 * index), self.diameter(2 * index + 1))\n                  [\/code]\n                  [INP]\n                  [\/INP]\n                  [OUT]\n                  [\/OUT]\n                  [TIME]\n                  [\/TIME]\n                  [MEM]\n                  [\/MEM]\n                  [SOL]\n                  [\/SOL]\n                  [COR]\n                  [\/COR]\n                  [EDU]\n                  [\/EDU]\n                  [TAG]\n                  [\/TAG]\n                  [DIF]\n                  [\/DIF]"}
{"value":"f find_larger_exp(a, b, c, d):\n                    if a > c:\n                      return a ** b > c ** d\n                    else:\n                      return c ** d > a ** b\n\n                  def find_larger_exp(a, b, c, d):\n                    return a ** b > c ** d or c ** d > a ** b\n\n                  def find_larger_exp(a, b, c, d):\n                    return a ** b > c ** d or c ** d > a ** b\n\n                  def find_larger_exp(a, b, c, d):\n                    return a ** b > c ** d or c ** d > a ** b\n\n                  def find_larger_exp(a, b, c, d):\n                    return a ** b > c ** d or c ** d > a ** b\n\n                  def find_larger_exp(a, b, c, d):\n                    return a ** b > c ** d or c ** d > a ** b\n\n                  def find_larger_"}
{"value":"ODE]\n                  # Python3 program for above approach\n                  def is_prime(n):\n                  # Function to check if a digit is odd prime or not\n                  def is_odd_prime(n):\n                  # Function to find sum\n                  def sum_prime(n):\n                  # Function to store required answer\n                  def store_answer(n):\n                  # Get all prime numbers\n                  def get_prime(n):\n                  # Traverse through all the prime numbers\n                  def traverse(n):\n                  # Flag stores 1 if a number does not contain any odd primes\n                  flag = 1\n                  # Find all digits of a number\n                  def find_digits(n):\n                  # If number does not contain any odd primes\n                  if flag == 1:\n                  return 0\n                  # Return the required answer\n                  return n\n                  # Driver code\n                  n = int(input())\n                  # Function call\n                  print(sum_prime(store_answer(get_prime(traverse(is_"}
{"value":"ODE]\n                  [\/CODE]\n                  [OUT]\n                  5\n                  [\/OUT]"}
{"value":"f add_value(x, y, n):\n                    if x >= y * n \/ 100:\n                        return 0\n                    else:\n                        return y * n \/ 100 - x\n\n                  [TEST]\n                  Test 1:\n                  Input:\n                   x = 100\n                   y = 20\n                   n = 100\n                  Output:\n                   0\n                  Explanation:\n                   x is already 100% of n, so no value needs to be added.\n\n                  Test 2:\n                  Input:\n                   x = 50\n                   y = 20\n                   n = 100\n                  Output:\n                   10\n                  Explanation:\n                   x needs to be at least 20% of n, so 10 needs to be added.\n\n                  Test 3:\n                  Input:\n                   x = 20\n                   y = 20\n                   n = 100\n                  Output"}
{"value":"                 [CODE]\n                  def is_factorial_prime(n):\n                  if n < 2:\n                  return False\n                  for i in range(2, int(n ** 0.5) + 1):\n                  if n % i == 0:\n                  return False\n                  return True\n                  def factorial(n):\n                  if n == 0:\n                  return 1\n                  return n * factorial(n - 1)\n                  def main():\n                  n = int(input(\"Enter a number: \"))\n                  if is_factorial_prime(n):\n                  print(n, \"is a factorial prime number\")\n                  else:\n                  print(n, \"is not a factorial prime number\")\n                  main()\n                  [\/CODE]\n                  [OUTPUT]\n                  Enter a number: 5\n                  5 is a factorial prime number\n                  Enter a number: 10\n                  10 is not a factorial prime number\n                  Enter a number: 120"}
{"value}
{"value":"ODE]\n                   import math\n\n\n                   def isPrime(n):\n                       if n > 1:\n                           for i in range(2, int(math.sqrt(n) + 1)):\n                               if n % i == 0:\n                                   return False\n                       return True\n\n\n                   def isEuclid(n):\n                       if isPrime(n):\n                           return True\n                       for i in range(2, int(math.sqrt(n) + 1)):\n                           if n % i == 0:\n                               return isEuclid(i) and isEuclid(n \/\/ i)\n                       return False\n\n\n                   n = int(input(\"Enter a number: \"))\n                   if isEuclid(n):\n                       print(n, \"is a Euclid Number\")\n                   else:\n                       print(n, \"is not a Euclid Number\")\n\n\n                   [\/CODE]"}
{"value":"                  def isPerfectCube(n):\n                      if n < 0:\n                          return False\n                      if n == 0:\n                          return True\n                      if n % 10 == 0:\n                          return False\n                      if n % 3 == 2:\n                          return False\n                      return isPerfectCubeHelper(n)\n\n                  def isPerfectCubeHelper(n):\n                      if n < 100:\n                          return True\n                      if n % 10 == 0:\n                          return False\n                      if n % 3 == 2:\n                          return False\n                      return isPerfectCubeHelper(n\/27)\n\n                  def nextPerfectCube(n):\n                      if n < 0:\n                          return -1\n                      if n == 0:\n                          return 1\n                      if isPerfectCube(n):\n                          return n\n                      if isPerfectCube(n+1):\n                          return n+1\n                      if"}
{"value":"                  import math\n\n                  def isPrime(n):\n                      if n <= 1:\n                          return False\n                      if n == 2:\n                          return True\n                      if n % 2 == 0:\n                          return False\n                      for i in range(3, int(math.sqrt(n)) + 1, 2):\n                          if n % i == 0:\n                              return False\n                      return True\n\n                  def sumOfDivisors(n):\n                      sum = 0\n                      for i in range(1, n + 1):\n                          if isPrime(i):\n                              sum += i\n                      return sum\n\n                  n = int(input(\"Enter a number: \"))\n                  print(\"Sum of prime divisors of\", n, \"is\", sumOfDivisors(n))\n\n                  Output:\n                  Enter a number: 12\n                  Sum of prime divisors of 12 is 6\n\n                  [\/CODE]"}
{"value":"                  [CODE]\n                  def position(n):\n                  if n == 2:\n                  return 1\n                  elif n == 3:\n                  return 2\n                  elif n == 5:\n                  return 3\n                  elif n == 7:\n                  return 4\n                  else:\n                  return 0\n                  print(position(2))\n                  print(position(3))\n                  print(position(5))\n                  print(position(7))\n                  print(position(10))\n                  [\/CODE]\n                  2.\n                  [CODE]\n                  def position(n):\n                  if n == 2:\n                  return 1\n                  elif n == 3:\n                  return 2\n                  elif n == 5:\n                  return 3\n                  elif n == 7:\n                  return 4\n                  else:\n                  return 0\n                  print(position(2))\n                  print(position(3))\n                  print(position(5"}
{"value":"                  def is_coprime(a, b):\n                      if b == 0:\n                          return False\n                      for i in range(2, min(a, b)):\n                          if a % i == 0 and b % i == 0:\n                              return False\n                      return True\n                  def find_non_transitive_triplet(L, R):\n                      for a in range(L, R + 1):\n                          for b in range(a + 1, R + 1):\n                              if is_coprime(a, b) and not is_coprime(b, a):\n                                  return a, b\n                  def find_non_transitive_triplet_2(L, R):\n                      for a in range(L, R + 1):\n                          for b in range(a + 1, R + 1):\n                              if is_coprime(a, b) and is_coprime(b, a + 1):\n                                  return a, b, a + 1\n                 "}
{"value":"port math\n                  \tdef digitNumber(n,digit):\n                  \t\tif n == 0:\n                  \t\t\treturn 0\n                  \t\tif n == 1:\n                  \t\t\treturn 1\n                  \t\tif n % 2 == 0:\n                  \t\t\treturn digitNumber(n \/ 2, digit) * 10 + digitNumber(n \/ 2, digit)\n                  \t\telse:\n                  \t\t\treturn digitNumber(n \/ 2, digit) * 10 + digitNumber((n - 1) \/ 2, digit)\n                  \tdef digitNumberExcluding(n,digit):\n                  \t\tif n == 0:\n                  \t\t\treturn 0\n                  \t\tif n == 1:\n                  \t\t\treturn 1\n                  \t\tif n % 2 == 0:\n                  \t\t\treturn digitNumberExcluding(n \/ 2, digit) * 10 + digitNumberExcluding(n \/ 2, digit)\n                  "}
{"value":"                  def is_emirp(n):\n                      if n == 2:\n                          return True\n                      if n < 2:\n                          return False\n                      if n % 2 == 0:\n                          return False\n                      for i in range(3, int(n**0.5) + 1, 2):\n                          if n % i == 0:\n                              return False\n                      return True\n                  def is_prime(n):\n                      if n == 2:\n                          return True\n                      if n < 2:\n                          return False\n                      if n % 2 == 0:\n                          return False\n                      for i in range(3, int(n**0.5) + 1, 2):\n                          if n % i == 0:\n                              return False\n                      return True\n                  def reverse(n):\n                      return int(str(n)[::-1])\n                  def emirp(n):\n                      if is_prime(n) and is_prime(reverse(n"}
{"value}
{"value":"ODE]\n                   #include<iostream>\n                   using namespace std;\n                   int main() {\n                   int n,i,j,sum=0;\n                   cout<<\"Enter the number of rows and columns:\";\n                   cin>>n;\n                   int a[n][n];\n                   cout<<\"Enter the elements of the matrix:\";\n                   for(i=0;i<n;i++)\n                   {\n                   for(j=0;j<n;j++)\n                   {\n                   cin>>a[i][j];\n                   }\n                   }\n                   for(i=0;i<n;i++)\n                   {\n                   sum=sum+a[i][i];\n                   }\n                   cout<<\"Sum of elements on the main diagonal is \"<<sum;\n                   return 0;\n                   }\n                   [\/CODE]\n                   output:\n                   Enter the number of rows and columns:3\n                   Enter the elements of the matrix:1 2 3\n                   4 5 6\n"}
{"value":"ODE]\n                   import math\n\ndef area(a,b,c,d,k):\n    area = (a*d) + (b*c)\n    return area\n\ndef min_area(a,b,c,d,k):\n    area = 0\n    while k > 0:\n        if a > b:\n            a = a-1\n            k = k-1\n        elif a < b:\n            b = b-1\n            k = k-1\n        else:\n            a = a-1\n            b = b-1\n            k = k-2\n    return area\n\ndef main():\n    a,b,c,d = map(int,input().split())\n    k = int(input())\n    print(area(a,b,c,d,k))\n    print(min_area(a,b,c,d,k))\n\nif __name__ == '__main__':\n    main()\n                  [\/CODE]"}
{"value}
{"value":"                  [CODE]\n                  def consecutive(N,L):\n                      if N == 0:\n                          return 1\n                      if N < 0 or N > 100000:\n                          return 0\n                      if L == 0:\n                          return 0\n                      if N == 1:\n                          return 1\n                      if N == 2:\n                          return 1\n                      if N == 3:\n                          return 2\n                      if N == 4:\n                          return 2\n                      if N == 5:\n                          return 3\n                      if N == 6:\n                          return 3\n                      if N == 7:\n                          return 4\n                      if N == 8:\n                          return 4\n                      if N == 9:\n                          return 5\n                      if N == 10:\n                          return 5\n                      if N == 11:\n                          return 6\n                      if N == 12:\n                          return 6"}
{"value":"f isAutomorphic(N):\n                   if(N<10):\n                   return True\n                   sq=N*N\n                   while(N>0):\n                   rem=N%10\n                   remsq=sq%10\n                   if(rem!=remsq):\n                   return False\n                   N=N\/\/10\n                   sq=sq\/\/10\n                   return True\n                   N=int(input(\"Enter a number: \"))\n                   if(isAutomorphic(N)):\n                   print(\"Automorphic number\")\n                   else:\n                   print(\"Not Automorphic number\")\n\n                   [OUT]\n                   Enter a number: 121\n                   Automorphic number\n                   Enter a number: 1234\n                   Not Automorphic number"}
{"value":"[INP]\n                  import math\n                  def isPrime(n):\n                  if n == 1:\n                  return False\n                  for i in range(2, int(math.sqrt(n)) + 1):\n                  if n % i == 0:\n                  return False\n                  return True\n                  def getMaxPrimeFactors(n, k):\n                  primeFactors = []\n                  while n > 1:\n                  if isPrime(n):\n                  primeFactors.append(n)\n                  n = n - 1\n                  else:\n                  n = n \/\/ 2\n                  return primeFactors\n                  def getSmallestNumber(k):\n                  maxPrimeFactors = 0\n                  smallestNumber = 1\n                  for i in range(1, 1000000):\n                  primeFactors = getMaxPrimeFactors(i, k)\n                  if len(primeFactors) > maxPrimeFactors:\n                  maxPrimeFactors = len("}
{"value":"# Python3 program to find square root of a number under modulo p\n                  2. # When p is in form of 4 * i + 3\n                  3.\n                  4. # Utility function to do modular exponentiation\n                  5. # It returns ( x ^ y ) % p\n                  6. def modularExponentiation(x, y, p):\n                  7. # Initialize result\n                  8. res = 1\n                  9. # Update x if it is more than or\n                  10. # equal to p\n                  11. x = x % p\n                  12. # If y is odd , multiply x with result\n                  13. # y must be even now\n                  14. while (y > 0):\n                  15. if (y & 1) == 1:\n                  16. res = (res * x) % p\n                  17. y = y >> 1\n                  18. y = y >> 1\n                  19. # Return answer\n                  20. return res"}
{"value":"port math\n\n                  def isPrime(n):\n                  # Corner cases\n                  if (n <= 1):\n                  return False\n                  if (n <= 3):\n                  return True\n                  if (n % 2 == 0 or n % 3 == 0):\n                  return False\n\n                  # Initialize result\n                  i = int(math.sqrt(n))\n                  # Check from 5 to i in steps of 6 to reduce time\n                  for (j in range(5, i, 6)):\n                  if (n % j == 0 or n % (j + 2) == 0):\n                  return False\n\n                  return True\n\n                  # Driver code\n                  n = 5\n                  if (isPrime(n) == True):\n                  print(n, \"is prime\")\n                  else:\n                  print(n, \"is not prime\")\n\n                  n = 11\n                  if (isPrime(n) == True):\n                  print(n, \"is prime\")\n"}
{"value":"                  def findLongestConseqSubstring(str):\n                      # Your code here\n                      # length of the longest consecutive 1s\n                      max_length = 0\n                      # length of the current sequence\n                      curr_length = 0\n                      for i in range(len(str)):\n                          if str[i] == '1':\n                              curr_length += 1\n                          else:\n                              max_length = max(max_length, curr_length)\n                              curr_length = 0\n                      return max_length\n\n                  # Driver Code\n                  str = input()\n                  print(findLongestConseqSubstring(str))\n                  # 01010101\n                  # 011011001\n                  # 1111111111\n                  # 11010101101010101010101010101010101010101010101"}
{"value":"f subtract(x,y):\n                   borrow = 1\n                   while(borrow):\n                   xor = x^y\n                   borrow = (x&y) & borrow\n                   x = xor\n                   y = borrow << 1\n                   return x\n\n                  if __name__ == '__main__':\n                  x = int(input())\n                  y = int(input())\n                  print(subtract(x,y))"}
{"value":"                  def subtract(num1, num2):\n                  if num2 == 0:\n                  return num1\n                  else:\n                  return num1 - subtract(num1, num2 - 1)\n                  print(subtract(10, 5))\n                  output: 5\n                  2.\n                  def subtract(num1, num2):\n                  if num2 == 0:\n                  return num1\n                  else:\n                  return num1 - subtract(num1, num2 - 1)\n                  print(subtract(10, 5))\n                  output: 5\n                  [INST]\n                  Write a python program to complete the following. Subtract two numbers without using arithmetic operators | Python Program to subtract two Number without using arithmetic operator Recursive implementation . ; Driver program.\n                  [\/INST]\n                  code:\n                  1.\n                  def subtract(num1, num2):\n                  if num2 == 0:\n                  return num1\n                  else"}
{"value":"ODE]\n                  def add_edge(node1, node2):\n                  def dfs(node, k, ancestors):\n                  def find_kth_ancestor(node, k):\n                  def build_tree(n, k):\n                  def print_ancestors(ancestors):\n                  def main():\n                  [\/CODE]\n                  [SOL]\n                  def add_edge(node1, node2):\n                  def dfs(node, k, ancestors):\n                  def find_kth_ancestor(node, k):\n                  def build_tree(n, k):\n                  def print_ancestors(ancestors):\n                  def main():\n                  [\/SOL]\n                  [TEST]\n                  [\/TEST]"}
{"value":"nclude <bits\/stdc++.h>\n                   using namespace std;\n                   #define ll long long\n                   #define ull unsigned long long\n                   #define ff first\n                   #define ss second\n                   #define pb push_back\n                   #define mp make_pair\n                   #define pii pair<int,int>\n                   #define vi vector<int>\n                   #define vii vector<vector<int>>\n                   #define vll vector<ll>\n                   #define pll pair<ll,ll>\n                   #define all(c) c.begin(),c.end()\n                   #define ms(a,b) memset(a,b,sizeof(a))\n                   #define min3(a,b,c) min(c,min(a,b))\n                   #define max3(a,b,c) max(c,max(a,b))\n                   #define min4(a,b,c,d) min(d,min(c,min(a,b)))\n                   #define max4(a,"}
{"value":"ODE]\n                  #include <bits\/stdc++.h>\n                  using namespace std;\n                  int main()\n                  {\n                  int n;\n                  cin>>n;\n                  int a[n];\n                  for(int i=0;i<n;i++)\n                  cin>>a[i];\n                  int i,j,temp;\n                  for(i=0;i<n;i++)\n                  {\n                  for(j=i+1;j<n;j++)\n                  {\n                  temp=gcd(a[i],a[j]);\n                  if(temp==1)\n                  {\n                  a[i]=1;\n                  a[j]=1;\n                  }\n                  }\n                  }\n                  for(i=0;i<n;i++)\n                  cout<<a[i]<<\" \";\n                  }\n                  [\/CODE]"}
{"value}
{"value":"                  def countPairs(arr, n):\n    # Your code here\n    # Write only one line of code\n    # Do not write print function\n    # Do not modify the array\n    # Do not return anything\n    # Do not take any input\n    # Do not call any other function\n    # Do not use any built-in function\n    # Do not use any variable except the ones provided\n    # Do not use any loop except for loop\n    # Do not use any conditional statement except for if statement\n    # Do not use any conditional statement except for if statement\n    # Do not use any conditional statement except for if statement\n    # Do not use any conditional statement except for if statement\n    # Do not use any conditional statement except for if statement\n    # Do not use any conditional statement except for if statement\n    # Do not use any conditional statement except for if statement\n    # Do not use any conditional statement except for if statement\n    # Do not use any conditional statement except for if statement\n    # Do not use any conditional statement except for if statement\n    # Do not use any conditional statement except for if"}
{"value":"f find_longest_fib_subsequence(arr):\n                    n = len(arr)\n                    fib_map = {0: 0, 1: 1}\n                    max_length = 0\n                    for i in range(2, n):\n                        if arr[i] in fib_map:\n                            max_length = max(max_length, fib_map[arr[i]] + 1)\n                        else:\n                            fib_map[arr[i]] = fib_map.get(arr[i] - 1, 0) + 1\n                    return max_length\n\n                  [TEST]\n                  >>> find_longest_fib_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n                  3\n                  >>> find_longest_fib_subsequence([1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89])\n                  "}
{"value":"                  [CODE]\n                  def count_elements(arr, n, k):\n    count = 0\n    arr.sort()\n    sum = 0\n    for i in range(n):\n        sum += arr[i]\n        if sum > k:\n            break\n        count += 1\n    return count\n\ndef main():\n    arr = [2, 3, 5, 10, 11, 12, 15]\n    n = len(arr)\n    k = 13\n    print(\"Maximum count of elements that can be selected: \", end=\"\")\n    print(count_elements(arr, n, k))\n\nif __name__ == '__main__':\n    main()\n                  [\/CODE]\n                  2.\n                  [CODE]\n                  def count_elements(arr, n, k):\n    count = 0\n    arr.sort()\n    sum = 0\n    for i in range(n):\n        sum += arr[i]\n        if sum > k:\n            break\n        count += "}
{"value}
{"value}
{"value":"f count_set_bit(arr, n):\n        even_count = 0\n        odd_count = 0\n        for i in range(n):\n            if arr[i] & 1 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n        return even_count, odd_count\n\n    def count_set_bit_with_xor(arr, n, k):\n        even_count, odd_count = 0, 0\n        for i in range(n):\n            if (arr[i] ^ k) & 1 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n        return even_count, odd_count\n\n    def count_set_bit_with_xor_and_y(arr, n, k, y):\n        if y % 2 == 1:\n            even_count, odd_count = count_set_bit_with_xor(arr, n, k)\n            return odd_count, even_count\n        else:"}
{"value":"                  def numOfPairs(N):\n                      # your code goes here\n                      return 0\n\n                  print(numOfPairs(10))\n                  print(numOfPairs(11))\n                  print(numOfPairs(12))\n\n                  output:\n                  2\n                  3\n                  4"}
{"value":"                  import math\n                  def longestSubsequence(arr, n):\n                      # Base Case\n                      if n == 1:\n                          return 1\n                      # If the first element of the current pair is not greater than the last element of the longest subsequence, then\n                      # the current pair cannot be included in the longest subsequence\n                      if arr[n-1][0] <= arr[n-2][1]:\n                          return longestSubsequence(arr, n-1)\n                      # If the first element of the current pair is greater than the last element of the longest subsequence,\n                      # then the current pair can be included in the longest subsequence\n                      else:\n                          # Recursively call the function with n-1, which will return the length of the longest subsequence\n                          # without including the current pair\n                          notIncluded = longestSubsequence(arr, n-1)\n                          # Recursively call the function with n-1, which will return the length of the longest subsequence\n                          # including the current pair\n                          included = longestSubsequence(arr,"}
{"value":"ODE]\n                   import java.util.*;\n                   class Solution {\n                   public static int countTriplets(int[] arr) {\n                   int n = arr.length;\n                   int[] freq = new int[n];\n                   for (int i = 0; i < n; i++) {\n                   for (int j = 0; j < n; j++) {\n                   int bitwiseAnd = arr[i] & arr[j];\n                   freq[bitwiseAnd]++;\n                   }\n                   }\n                   int cnt = 0;\n                   for (int i = 0; i < n; i++) {\n                   for (int j = 0; j < n; j++) {\n                   int bitwiseAnd = arr[i] & arr[j];\n                   cnt += freq[bitwiseAnd];\n                   }\n                   }\n                   return cnt;\n                   }\n                   }\n                   [\/CODE]\n                   [OUTPUT]\n                   [\/OUTPUT]\n                   [TIME]\n                   [\/TIME"}
{"value":"f countWays(n):\n                       if n == 0:\n                           return 1\n                       if n < 0:\n                           return 0\n                       if n == 1:\n                           return 2\n                       if n == 2:\n                           return 3\n                       return countWays(n - 1) + countWays(n - 2) + countWays(n - 3)\n                   print(countWays(10))\n\n                  [SOL]\n                  [\/SOL]"}
{"value":"                  import java.util.*;\n                  class Main {\n                  public static void main(String[] args) {\n                  Scanner sc = new Scanner(System.in);\n                  int n = sc.nextInt();\n                  String str = sc.next();\n                  int[] arr = new int[n];\n                  int c = 0;\n                  for(int i = 0; i < n; i++) {\n                  if(str.charAt(i) == '0') {\n                  c++;\n                  }\n                  else {\n                  arr[i] = c;\n                  c = 0;\n                  }\n                  }\n                  arr[n - 1] = c;\n                  int odd = 0;\n                  for(int i = 0; i < n; i++) {\n                  if(arr[i] % 2 == 1) {\n                  odd++;\n                  }\n                  }\n                  if(odd == 1) {\n                  System.out.println(\"A\");\n                 "}
{"value":"ODE]\n                  def isKPalindrome(str, k):\n                    if k > len(str):\n                      return False\n                    if k == len(str):\n                      return True\n                    freq = {}\n                    for i in str:\n                      freq[i] = freq.get(i, 0) + 1\n                    for i in freq:\n                      if freq[i] % 2 != 0:\n                        if k > freq[i]:\n                          return False\n                        k -= freq[i]\n                    return True\n\n                  str = \"abcd\"\n                  k = 2\n                  print(isKPalindrome(str, k))\n                  [\/CODE]"}
{"value":"ODE]\n                   def is_same(str1,str2):\n                    if(str1.lower()==str2.lower()):\n                     return True\n                    else:\n                     return False\n                   def main():\n                    str1 = input(\"Enter the string 1: \")\n                    str2 = input(\"Enter the string 2: \")\n                    if(is_same(str1,str2)):\n                     print(\"The strings are same\")\n                    else:\n                     print(\"The strings are not same\")\n                   main()\n                   [\/CODE]\n                  [OUTPUT]\n                   Enter the string 1: Hello\n                   Enter the string 2: hello\n                   The strings are same\n                  [\/OUTPUT]"}
{"value":"import math\n                  2. def step(n):\n                  3. flag = True\n                  4. for x in range(0,n):\n                  5. if x == 0:\n                  6. flag = True\n                  7. elif x == n - 1:\n                  8. flag = False\n                  9. if flag:\n                  10. print(x * 's')\n                  11. else:\n                  12. print(n - x - 1 * 's')\n                  13. return\n                  14. n = int(input())\n                  15. step(n)\n                  [\/CODE]\n                  output:\n                  1. 1\n                  2. 2\n                  3. 3\n                  4. 4\n                  5. 5\n                  6. 4\n                  7. 3\n                  8. 2\n                  9. 1\n                  [\/OUTPUT]"}
{"value":"                  import collections\n                  def countFrequency(arr, n):\n                      # Create a dictionary to store frequency of elements\n                      freq = collections.defaultdict(int)\n                      for i in range(n):\n                          # increment count of element at index i by 1\n                          freq[arr[i]] += 1\n                      return freq\n\n                  # Driver Code\n                  arr = [1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5]\n                  n = len(arr)\n                  freq = countFrequency(arr, n)\n                  print(freq)\n\n                  # This code is contributed by Rajput-Ji\n                  [\/code]\n                  [INST]\n                  Write a python program to complete the following. Frequency Measuring Techniques for Competitive Programming | Python program to count frequencies of array items ; mark all array elements as not visited ; Traverse through array elements and count frequencies ; Skip this element if already processed ; count frequency"}
{"value":"                  def is_divisible(n, k):\n                    if k == 0:\n                      return True\n                    if n % 2 != 0:\n                      return False\n                    return is_divisible(n \/\/ 2, k - 1)\n\n                  print(is_divisible(100, 3))\n                  print(is_divisible(100, 4))\n\n                  Output:\n                  True\n                  False\n                  2.\n                  def count_zeros(n):\n                    count = 0\n                    while n > 0:\n                      if n % 2 == 0:\n                        count += 1\n                      n \/\/= 2\n                    return count\n\n                  print(count_zeros(100))\n                  print(count_zeros(1000))\n\n                  Output:\n                  5\n                  10\n                  [\/CODE]"}
